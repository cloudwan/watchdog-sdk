// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package common

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
)

type SoftwareVersion_FieldMask struct {
	Paths []SoftwareVersion_FieldPath
}

func FullSoftwareVersion_FieldMask() *SoftwareVersion_FieldMask {
	res := &SoftwareVersion_FieldMask{}
	res.Paths = append(res.Paths, &SoftwareVersion_FieldTerminalPath{selector: SoftwareVersion_FieldPathSelectorVersion})
	res.Paths = append(res.Paths, &SoftwareVersion_FieldTerminalPath{selector: SoftwareVersion_FieldPathSelectorCommitId})
	res.Paths = append(res.Paths, &SoftwareVersion_FieldTerminalPath{selector: SoftwareVersion_FieldPathSelectorBuildDate})
	return res
}

func (fieldMask *SoftwareVersion_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SoftwareVersion_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SoftwareVersion_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSoftwareVersion_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SoftwareVersion_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SoftwareVersion_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SoftwareVersion_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSoftwareVersion_FieldPath(raw)
	})
}

func (fieldMask *SoftwareVersion_FieldMask) ProtoMessage() {}

func (fieldMask *SoftwareVersion_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SoftwareVersion_FieldMask) Subtract(other *SoftwareVersion_FieldMask) *SoftwareVersion_FieldMask {
	result := &SoftwareVersion_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SoftwareVersion_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SoftwareVersion_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SoftwareVersion_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SoftwareVersion_FieldMask) FilterInputFields() *SoftwareVersion_FieldMask {
	result := &SoftwareVersion_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SoftwareVersion_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SoftwareVersion_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SoftwareVersion_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSoftwareVersion_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SoftwareVersion_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SoftwareVersion_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SoftwareVersion_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SoftwareVersion_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SoftwareVersion_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SoftwareVersion_FieldMask) AppendPath(path SoftwareVersion_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SoftwareVersion_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SoftwareVersion_FieldPath))
}

func (fieldMask *SoftwareVersion_FieldMask) GetPaths() []SoftwareVersion_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SoftwareVersion_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SoftwareVersion_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSoftwareVersion_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SoftwareVersion_FieldMask) Set(target, source *SoftwareVersion) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SoftwareVersion_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SoftwareVersion), source.(*SoftwareVersion))
}

func (fieldMask *SoftwareVersion_FieldMask) Project(source *SoftwareVersion) *SoftwareVersion {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SoftwareVersion{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SoftwareVersion_FieldTerminalPath:
			switch tp.selector {
			case SoftwareVersion_FieldPathSelectorVersion:
				result.Version = source.Version
			case SoftwareVersion_FieldPathSelectorCommitId:
				result.CommitId = source.CommitId
			case SoftwareVersion_FieldPathSelectorBuildDate:
				result.BuildDate = source.BuildDate
			}
		}
	}
	return result
}

func (fieldMask *SoftwareVersion_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SoftwareVersion))
}

func (fieldMask *SoftwareVersion_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ContactInformation_FieldMask struct {
	Paths []ContactInformation_FieldPath
}

func FullContactInformation_FieldMask() *ContactInformation_FieldMask {
	res := &ContactInformation_FieldMask{}
	res.Paths = append(res.Paths, &ContactInformation_FieldTerminalPath{selector: ContactInformation_FieldPathSelectorFullName})
	res.Paths = append(res.Paths, &ContactInformation_FieldTerminalPath{selector: ContactInformation_FieldPathSelectorEmail})
	res.Paths = append(res.Paths, &ContactInformation_FieldTerminalPath{selector: ContactInformation_FieldPathSelectorPhones})
	return res
}

func (fieldMask *ContactInformation_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ContactInformation_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ContactInformation_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseContactInformation_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ContactInformation_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ContactInformation_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ContactInformation_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseContactInformation_FieldPath(raw)
	})
}

func (fieldMask *ContactInformation_FieldMask) ProtoMessage() {}

func (fieldMask *ContactInformation_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ContactInformation_FieldMask) Subtract(other *ContactInformation_FieldMask) *ContactInformation_FieldMask {
	result := &ContactInformation_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ContactInformation_FieldPathSelector]gotenobject.FieldMask{
		ContactInformation_FieldPathSelectorPhones: &ContactInformation_PhoneNumber_FieldMask{},
	}
	mySubMasks := map[ContactInformation_FieldPathSelector]gotenobject.FieldMask{
		ContactInformation_FieldPathSelectorPhones: &ContactInformation_PhoneNumber_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ContactInformation_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ContactInformation_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ContactInformation_FieldTerminalPath); ok {
					switch tp.selector {
					case ContactInformation_FieldPathSelectorPhones:
						mySubMasks[ContactInformation_FieldPathSelectorPhones] = FullContactInformation_PhoneNumber_FieldMask()
					}
				} else if tp, ok := path.(*ContactInformation_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ContactInformation_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ContactInformation_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ContactInformation_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ContactInformation_FieldMask) FilterInputFields() *ContactInformation_FieldMask {
	result := &ContactInformation_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ContactInformation_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ContactInformation_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ContactInformation_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseContactInformation_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ContactInformation_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ContactInformation_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ContactInformation_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ContactInformation_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ContactInformation_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ContactInformation_FieldMask) AppendPath(path ContactInformation_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ContactInformation_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ContactInformation_FieldPath))
}

func (fieldMask *ContactInformation_FieldMask) GetPaths() []ContactInformation_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ContactInformation_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ContactInformation_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseContactInformation_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ContactInformation_FieldMask) Set(target, source *ContactInformation) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ContactInformation_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ContactInformation), source.(*ContactInformation))
}

func (fieldMask *ContactInformation_FieldMask) Project(source *ContactInformation) *ContactInformation {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ContactInformation{}
	phonesMask := &ContactInformation_PhoneNumber_FieldMask{}
	wholePhonesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ContactInformation_FieldTerminalPath:
			switch tp.selector {
			case ContactInformation_FieldPathSelectorFullName:
				result.FullName = source.FullName
			case ContactInformation_FieldPathSelectorEmail:
				result.Email = source.Email
			case ContactInformation_FieldPathSelectorPhones:
				result.Phones = source.Phones
				wholePhonesAccepted = true
			}
		case *ContactInformation_FieldSubPath:
			switch tp.selector {
			case ContactInformation_FieldPathSelectorPhones:
				phonesMask.AppendPath(tp.subPath.(ContactInformationPhoneNumber_FieldPath))
			}
		}
	}
	if wholePhonesAccepted == false && len(phonesMask.Paths) > 0 {
		for _, sourceItem := range source.GetPhones() {
			result.Phones = append(result.Phones, phonesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ContactInformation_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ContactInformation))
}

func (fieldMask *ContactInformation_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ContactInformation_PhoneNumber_FieldMask struct {
	Paths []ContactInformationPhoneNumber_FieldPath
}

func FullContactInformation_PhoneNumber_FieldMask() *ContactInformation_PhoneNumber_FieldMask {
	res := &ContactInformation_PhoneNumber_FieldMask{}
	res.Paths = append(res.Paths, &ContactInformationPhoneNumber_FieldTerminalPath{selector: ContactInformationPhoneNumber_FieldPathSelectorNumber})
	res.Paths = append(res.Paths, &ContactInformationPhoneNumber_FieldTerminalPath{selector: ContactInformationPhoneNumber_FieldPathSelectorType})
	return res
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ContactInformation_PhoneNumber_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseContactInformationPhoneNumber_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ContactInformationPhoneNumber_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseContactInformationPhoneNumber_FieldPath(raw)
	})
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) ProtoMessage() {}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) Subtract(other *ContactInformation_PhoneNumber_FieldMask) *ContactInformation_PhoneNumber_FieldMask {
	result := &ContactInformation_PhoneNumber_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ContactInformationPhoneNumber_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ContactInformation_PhoneNumber_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ContactInformation_PhoneNumber_FieldMask) FilterInputFields() *ContactInformation_PhoneNumber_FieldMask {
	result := &ContactInformation_PhoneNumber_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ContactInformation_PhoneNumber_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ContactInformationPhoneNumber_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseContactInformationPhoneNumber_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ContactInformation_PhoneNumber_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ContactInformation_PhoneNumber_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) AppendPath(path ContactInformationPhoneNumber_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ContactInformationPhoneNumber_FieldPath))
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) GetPaths() []ContactInformationPhoneNumber_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseContactInformationPhoneNumber_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) Set(target, source *ContactInformation_PhoneNumber) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ContactInformation_PhoneNumber), source.(*ContactInformation_PhoneNumber))
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) Project(source *ContactInformation_PhoneNumber) *ContactInformation_PhoneNumber {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ContactInformation_PhoneNumber{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ContactInformationPhoneNumber_FieldTerminalPath:
			switch tp.selector {
			case ContactInformationPhoneNumber_FieldPathSelectorNumber:
				result.Number = source.Number
			case ContactInformationPhoneNumber_FieldPathSelectorType:
				result.Type = source.Type
			}
		}
	}
	return result
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ContactInformation_PhoneNumber))
}

func (fieldMask *ContactInformation_PhoneNumber_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Address_FieldMask struct {
	Paths []Address_FieldPath
}

func FullAddress_FieldMask() *Address_FieldMask {
	res := &Address_FieldMask{}
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorPostalCode})
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorCountryCode})
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorContinent})
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorCountry})
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorAdminArea1})
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorAdminArea2})
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorAdminArea3})
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorAdminArea4})
	res.Paths = append(res.Paths, &Address_FieldTerminalPath{selector: Address_FieldPathSelectorStreetAddress})
	return res
}

func (fieldMask *Address_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Address_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Address_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseAddress_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Address_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 9)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Address_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Address_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseAddress_FieldPath(raw)
	})
}

func (fieldMask *Address_FieldMask) ProtoMessage() {}

func (fieldMask *Address_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Address_FieldMask) Subtract(other *Address_FieldMask) *Address_FieldMask {
	result := &Address_FieldMask{}
	removedSelectors := make([]bool, 9)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Address_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Address_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Address_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Address_FieldMask) FilterInputFields() *Address_FieldMask {
	result := &Address_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Address_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Address_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Address_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseAddress_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Address_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Address_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Address_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Address_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Address_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Address_FieldMask) AppendPath(path Address_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Address_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Address_FieldPath))
}

func (fieldMask *Address_FieldMask) GetPaths() []Address_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Address_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Address_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseAddress_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Address_FieldMask) Set(target, source *Address) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Address_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Address), source.(*Address))
}

func (fieldMask *Address_FieldMask) Project(source *Address) *Address {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Address{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Address_FieldTerminalPath:
			switch tp.selector {
			case Address_FieldPathSelectorPostalCode:
				result.PostalCode = source.PostalCode
			case Address_FieldPathSelectorCountryCode:
				result.CountryCode = source.CountryCode
			case Address_FieldPathSelectorContinent:
				result.Continent = source.Continent
			case Address_FieldPathSelectorCountry:
				result.Country = source.Country
			case Address_FieldPathSelectorAdminArea1:
				result.AdminArea1 = source.AdminArea1
			case Address_FieldPathSelectorAdminArea2:
				result.AdminArea2 = source.AdminArea2
			case Address_FieldPathSelectorAdminArea3:
				result.AdminArea3 = source.AdminArea3
			case Address_FieldPathSelectorAdminArea4:
				result.AdminArea4 = source.AdminArea4
			case Address_FieldPathSelectorStreetAddress:
				result.StreetAddress = source.StreetAddress
			}
		}
	}
	return result
}

func (fieldMask *Address_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Address))
}

func (fieldMask *Address_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Location_FieldMask struct {
	Paths []Location_FieldPath
}

func FullLocation_FieldMask() *Location_FieldMask {
	res := &Location_FieldMask{}
	res.Paths = append(res.Paths, &Location_FieldTerminalPath{selector: Location_FieldPathSelectorAddress})
	res.Paths = append(res.Paths, &Location_FieldTerminalPath{selector: Location_FieldPathSelectorAdminHierarchy})
	res.Paths = append(res.Paths, &Location_FieldTerminalPath{selector: Location_FieldPathSelectorCoordinates})
	res.Paths = append(res.Paths, &Location_FieldTerminalPath{selector: Location_FieldPathSelectorAccuracy})
	return res
}

func (fieldMask *Location_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Location_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Location_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseLocation_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Location_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Location_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Location_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseLocation_FieldPath(raw)
	})
}

func (fieldMask *Location_FieldMask) ProtoMessage() {}

func (fieldMask *Location_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Location_FieldMask) Subtract(other *Location_FieldMask) *Location_FieldMask {
	result := &Location_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[Location_FieldPathSelector]gotenobject.FieldMask{
		Location_FieldPathSelectorAddress:        &Address_FieldMask{},
		Location_FieldPathSelectorAdminHierarchy: &admin_area.AdminHierarchy_FieldMask{},
	}
	mySubMasks := map[Location_FieldPathSelector]gotenobject.FieldMask{
		Location_FieldPathSelectorAddress:        &Address_FieldMask{},
		Location_FieldPathSelectorAdminHierarchy: &admin_area.AdminHierarchy_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Location_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Location_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Location_FieldTerminalPath); ok {
					switch tp.selector {
					case Location_FieldPathSelectorAddress:
						mySubMasks[Location_FieldPathSelectorAddress] = FullAddress_FieldMask()
					case Location_FieldPathSelectorAdminHierarchy:
						mySubMasks[Location_FieldPathSelectorAdminHierarchy] = admin_area.FullAdminHierarchy_FieldMask()
					}
				} else if tp, ok := path.(*Location_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Location_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Location_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Location_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Location_FieldMask) FilterInputFields() *Location_FieldMask {
	result := &Location_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Location_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Location_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Location_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseLocation_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Location_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Location_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Location_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Location_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Location_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Location_FieldMask) AppendPath(path Location_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Location_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Location_FieldPath))
}

func (fieldMask *Location_FieldMask) GetPaths() []Location_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Location_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Location_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseLocation_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Location_FieldMask) Set(target, source *Location) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Location_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Location), source.(*Location))
}

func (fieldMask *Location_FieldMask) Project(source *Location) *Location {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Location{}
	addressMask := &Address_FieldMask{}
	wholeAddressAccepted := false
	adminHierarchyMask := &admin_area.AdminHierarchy_FieldMask{}
	wholeAdminHierarchyAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Location_FieldTerminalPath:
			switch tp.selector {
			case Location_FieldPathSelectorAddress:
				result.Address = source.Address
				wholeAddressAccepted = true
			case Location_FieldPathSelectorAdminHierarchy:
				result.AdminHierarchy = source.AdminHierarchy
				wholeAdminHierarchyAccepted = true
			case Location_FieldPathSelectorCoordinates:
				result.Coordinates = source.Coordinates
			case Location_FieldPathSelectorAccuracy:
				result.Accuracy = source.Accuracy
			}
		case *Location_FieldSubPath:
			switch tp.selector {
			case Location_FieldPathSelectorAddress:
				addressMask.AppendPath(tp.subPath.(Address_FieldPath))
			case Location_FieldPathSelectorAdminHierarchy:
				adminHierarchyMask.AppendPath(tp.subPath.(admin_area.AdminHierarchy_FieldPath))
			}
		}
	}
	if wholeAddressAccepted == false && len(addressMask.Paths) > 0 {
		result.Address = addressMask.Project(source.GetAddress())
	}
	if wholeAdminHierarchyAccepted == false && len(adminHierarchyMask.Paths) > 0 {
		result.AdminHierarchy = adminHierarchyMask.Project(source.GetAdminHierarchy())
	}
	return result
}

func (fieldMask *Location_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Location))
}

func (fieldMask *Location_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ASInfo_FieldMask struct {
	Paths []ASInfo_FieldPath
}

func FullASInfo_FieldMask() *ASInfo_FieldMask {
	res := &ASInfo_FieldMask{}
	res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorAsn})
	res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorDomain})
	res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorRoutes})
	res.Paths = append(res.Paths, &ASInfo_FieldTerminalPath{selector: ASInfo_FieldPathSelectorAsnType})
	return res
}

func (fieldMask *ASInfo_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ASInfo_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ASInfo_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseASInfo_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ASInfo_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ASInfo_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ASInfo_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseASInfo_FieldPath(raw)
	})
}

func (fieldMask *ASInfo_FieldMask) ProtoMessage() {}

func (fieldMask *ASInfo_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ASInfo_FieldMask) Subtract(other *ASInfo_FieldMask) *ASInfo_FieldMask {
	result := &ASInfo_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ASInfo_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ASInfo_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ASInfo_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ASInfo_FieldMask) FilterInputFields() *ASInfo_FieldMask {
	result := &ASInfo_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ASInfo_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ASInfo_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ASInfo_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseASInfo_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ASInfo_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ASInfo_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ASInfo_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ASInfo_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ASInfo_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ASInfo_FieldMask) AppendPath(path ASInfo_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ASInfo_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ASInfo_FieldPath))
}

func (fieldMask *ASInfo_FieldMask) GetPaths() []ASInfo_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ASInfo_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ASInfo_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseASInfo_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ASInfo_FieldMask) Set(target, source *ASInfo) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ASInfo_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ASInfo), source.(*ASInfo))
}

func (fieldMask *ASInfo_FieldMask) Project(source *ASInfo) *ASInfo {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ASInfo{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ASInfo_FieldTerminalPath:
			switch tp.selector {
			case ASInfo_FieldPathSelectorAsn:
				result.Asn = source.Asn
			case ASInfo_FieldPathSelectorName:
				result.Name = source.Name
			case ASInfo_FieldPathSelectorDomain:
				result.Domain = source.Domain
			case ASInfo_FieldPathSelectorRoutes:
				result.Routes = source.Routes
			case ASInfo_FieldPathSelectorAsnType:
				result.AsnType = source.AsnType
			}
		}
	}
	return result
}

func (fieldMask *ASInfo_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ASInfo))
}

func (fieldMask *ASInfo_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Carrier_FieldMask struct {
	Paths []Carrier_FieldPath
}

func FullCarrier_FieldMask() *Carrier_FieldMask {
	res := &Carrier_FieldMask{}
	res.Paths = append(res.Paths, &Carrier_FieldTerminalPath{selector: Carrier_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Carrier_FieldTerminalPath{selector: Carrier_FieldPathSelectorMobileCountryCode})
	res.Paths = append(res.Paths, &Carrier_FieldTerminalPath{selector: Carrier_FieldPathSelectorMobileNetworkCode})
	res.Paths = append(res.Paths, &Carrier_FieldTerminalPath{selector: Carrier_FieldPathSelectorLocationAreaCode})
	return res
}

func (fieldMask *Carrier_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Carrier_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Carrier_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCarrier_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Carrier_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Carrier_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Carrier_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCarrier_FieldPath(raw)
	})
}

func (fieldMask *Carrier_FieldMask) ProtoMessage() {}

func (fieldMask *Carrier_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Carrier_FieldMask) Subtract(other *Carrier_FieldMask) *Carrier_FieldMask {
	result := &Carrier_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Carrier_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Carrier_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Carrier_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Carrier_FieldMask) FilterInputFields() *Carrier_FieldMask {
	result := &Carrier_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Carrier_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Carrier_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Carrier_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCarrier_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Carrier_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Carrier_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Carrier_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Carrier_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Carrier_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Carrier_FieldMask) AppendPath(path Carrier_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Carrier_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Carrier_FieldPath))
}

func (fieldMask *Carrier_FieldMask) GetPaths() []Carrier_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Carrier_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Carrier_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCarrier_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Carrier_FieldMask) Set(target, source *Carrier) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Carrier_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Carrier), source.(*Carrier))
}

func (fieldMask *Carrier_FieldMask) Project(source *Carrier) *Carrier {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Carrier{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Carrier_FieldTerminalPath:
			switch tp.selector {
			case Carrier_FieldPathSelectorName:
				result.Name = source.Name
			case Carrier_FieldPathSelectorMobileCountryCode:
				result.MobileCountryCode = source.MobileCountryCode
			case Carrier_FieldPathSelectorMobileNetworkCode:
				result.MobileNetworkCode = source.MobileNetworkCode
			case Carrier_FieldPathSelectorLocationAreaCode:
				result.LocationAreaCode = source.LocationAreaCode
			}
		}
	}
	return result
}

func (fieldMask *Carrier_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Carrier))
}

func (fieldMask *Carrier_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type LocationDiscoverySpec_FieldMask struct {
	Paths []LocationDiscoverySpec_FieldPath
}

func FullLocationDiscoverySpec_FieldMask() *LocationDiscoverySpec_FieldMask {
	res := &LocationDiscoverySpec_FieldMask{}
	res.Paths = append(res.Paths, &LocationDiscoverySpec_FieldTerminalPath{selector: LocationDiscoverySpec_FieldPathSelectorType})
	res.Paths = append(res.Paths, &LocationDiscoverySpec_FieldTerminalPath{selector: LocationDiscoverySpec_FieldPathSelectorRequiredAccuracy})
	return res
}

func (fieldMask *LocationDiscoverySpec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *LocationDiscoverySpec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *LocationDiscoverySpec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseLocationDiscoverySpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *LocationDiscoverySpec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*LocationDiscoverySpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *LocationDiscoverySpec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseLocationDiscoverySpec_FieldPath(raw)
	})
}

func (fieldMask *LocationDiscoverySpec_FieldMask) ProtoMessage() {}

func (fieldMask *LocationDiscoverySpec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *LocationDiscoverySpec_FieldMask) Subtract(other *LocationDiscoverySpec_FieldMask) *LocationDiscoverySpec_FieldMask {
	result := &LocationDiscoverySpec_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *LocationDiscoverySpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *LocationDiscoverySpec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*LocationDiscoverySpec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *LocationDiscoverySpec_FieldMask) FilterInputFields() *LocationDiscoverySpec_FieldMask {
	result := &LocationDiscoverySpec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *LocationDiscoverySpec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *LocationDiscoverySpec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]LocationDiscoverySpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseLocationDiscoverySpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask LocationDiscoverySpec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *LocationDiscoverySpec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LocationDiscoverySpec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask LocationDiscoverySpec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *LocationDiscoverySpec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *LocationDiscoverySpec_FieldMask) AppendPath(path LocationDiscoverySpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *LocationDiscoverySpec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(LocationDiscoverySpec_FieldPath))
}

func (fieldMask *LocationDiscoverySpec_FieldMask) GetPaths() []LocationDiscoverySpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *LocationDiscoverySpec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *LocationDiscoverySpec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseLocationDiscoverySpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *LocationDiscoverySpec_FieldMask) Set(target, source *LocationDiscoverySpec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *LocationDiscoverySpec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*LocationDiscoverySpec), source.(*LocationDiscoverySpec))
}

func (fieldMask *LocationDiscoverySpec_FieldMask) Project(source *LocationDiscoverySpec) *LocationDiscoverySpec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &LocationDiscoverySpec{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *LocationDiscoverySpec_FieldTerminalPath:
			switch tp.selector {
			case LocationDiscoverySpec_FieldPathSelectorType:
				result.Type = source.Type
			case LocationDiscoverySpec_FieldPathSelectorRequiredAccuracy:
				result.RequiredAccuracy = source.RequiredAccuracy
			}
		}
	}
	return result
}

func (fieldMask *LocationDiscoverySpec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*LocationDiscoverySpec))
}

func (fieldMask *LocationDiscoverySpec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProbingConstraint_FieldMask struct {
	Paths []ProbingConstraint_FieldPath
}

func FullProbingConstraint_FieldMask() *ProbingConstraint_FieldMask {
	res := &ProbingConstraint_FieldMask{}
	res.Paths = append(res.Paths, &ProbingConstraint_FieldTerminalPath{selector: ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation})
	res.Paths = append(res.Paths, &ProbingConstraint_FieldTerminalPath{selector: ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentPublicIpAddress})
	return res
}

func (fieldMask *ProbingConstraint_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingConstraint_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingConstraint_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingConstraint_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingConstraint_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingConstraint_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingConstraint_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingConstraint_FieldPath(raw)
	})
}

func (fieldMask *ProbingConstraint_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingConstraint_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingConstraint_FieldMask) Subtract(other *ProbingConstraint_FieldMask) *ProbingConstraint_FieldMask {
	result := &ProbingConstraint_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[ProbingConstraint_FieldPathSelector]gotenobject.FieldMask{
		ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation: &ProbingConstraint_AdminHierachy_FieldMask{},
	}
	mySubMasks := map[ProbingConstraint_FieldPathSelector]gotenobject.FieldMask{
		ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation: &ProbingConstraint_AdminHierachy_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingConstraint_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProbingConstraint_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProbingConstraint_FieldTerminalPath); ok {
					switch tp.selector {
					case ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation:
						mySubMasks[ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation] = FullProbingConstraint_AdminHierachy_FieldMask()
					}
				} else if tp, ok := path.(*ProbingConstraint_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProbingConstraint_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingConstraint_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingConstraint_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingConstraint_FieldMask) FilterInputFields() *ProbingConstraint_FieldMask {
	result := &ProbingConstraint_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingConstraint_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingConstraint_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingConstraint_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingConstraint_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingConstraint_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingConstraint_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConstraint_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingConstraint_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingConstraint_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConstraint_FieldMask) AppendPath(path ProbingConstraint_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingConstraint_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingConstraint_FieldPath))
}

func (fieldMask *ProbingConstraint_FieldMask) GetPaths() []ProbingConstraint_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingConstraint_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingConstraint_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingConstraint_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingConstraint_FieldMask) Set(target, source *ProbingConstraint) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingConstraint_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingConstraint), source.(*ProbingConstraint))
}

func (fieldMask *ProbingConstraint_FieldMask) Project(source *ProbingConstraint) *ProbingConstraint {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingConstraint{}
	maxSessionsPerAgentLocationMask := &ProbingConstraint_AdminHierachy_FieldMask{}
	wholeMaxSessionsPerAgentLocationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingConstraint_FieldTerminalPath:
			switch tp.selector {
			case ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation:
				result.MaxSessionsPerAgentLocation = source.MaxSessionsPerAgentLocation
				wholeMaxSessionsPerAgentLocationAccepted = true
			case ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentPublicIpAddress:
				result.MaxSessionsPerAgentPublicIpAddress = source.MaxSessionsPerAgentPublicIpAddress
			}
		case *ProbingConstraint_FieldSubPath:
			switch tp.selector {
			case ProbingConstraint_FieldPathSelectorMaxSessionsPerAgentLocation:
				maxSessionsPerAgentLocationMask.AppendPath(tp.subPath.(ProbingConstraintAdminHierachy_FieldPath))
			}
		}
	}
	if wholeMaxSessionsPerAgentLocationAccepted == false && len(maxSessionsPerAgentLocationMask.Paths) > 0 {
		result.MaxSessionsPerAgentLocation = maxSessionsPerAgentLocationMask.Project(source.GetMaxSessionsPerAgentLocation())
	}
	return result
}

func (fieldMask *ProbingConstraint_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingConstraint))
}

func (fieldMask *ProbingConstraint_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProbingConstraint_AdminHierachy_FieldMask struct {
	Paths []ProbingConstraintAdminHierachy_FieldPath
}

func FullProbingConstraint_AdminHierachy_FieldMask() *ProbingConstraint_AdminHierachy_FieldMask {
	res := &ProbingConstraint_AdminHierachy_FieldMask{}
	res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorCountry})
	res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorAdmin1})
	res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorAdmin2})
	res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorAdmin3})
	res.Paths = append(res.Paths, &ProbingConstraintAdminHierachy_FieldTerminalPath{selector: ProbingConstraintAdminHierachy_FieldPathSelectorAdmin4})
	return res
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingConstraintAdminHierachy_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingConstraintAdminHierachy_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingConstraintAdminHierachy_FieldPath(raw)
	})
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) Subtract(other *ProbingConstraint_AdminHierachy_FieldMask) *ProbingConstraint_AdminHierachy_FieldMask {
	result := &ProbingConstraint_AdminHierachy_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingConstraintAdminHierachy_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingConstraint_AdminHierachy_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) FilterInputFields() *ProbingConstraint_AdminHierachy_FieldMask {
	result := &ProbingConstraint_AdminHierachy_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingConstraintAdminHierachy_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingConstraintAdminHierachy_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingConstraint_AdminHierachy_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingConstraint_AdminHierachy_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) AppendPath(path ProbingConstraintAdminHierachy_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingConstraintAdminHierachy_FieldPath))
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) GetPaths() []ProbingConstraintAdminHierachy_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingConstraintAdminHierachy_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) Set(target, source *ProbingConstraint_AdminHierachy) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingConstraint_AdminHierachy), source.(*ProbingConstraint_AdminHierachy))
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) Project(source *ProbingConstraint_AdminHierachy) *ProbingConstraint_AdminHierachy {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingConstraint_AdminHierachy{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingConstraintAdminHierachy_FieldTerminalPath:
			switch tp.selector {
			case ProbingConstraintAdminHierachy_FieldPathSelectorCountry:
				result.Country = source.Country
			case ProbingConstraintAdminHierachy_FieldPathSelectorAdmin1:
				result.Admin1 = source.Admin1
			case ProbingConstraintAdminHierachy_FieldPathSelectorAdmin2:
				result.Admin2 = source.Admin2
			case ProbingConstraintAdminHierachy_FieldPathSelectorAdmin3:
				result.Admin3 = source.Admin3
			case ProbingConstraintAdminHierachy_FieldPathSelectorAdmin4:
				result.Admin4 = source.Admin4
			}
		}
	}
	return result
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingConstraint_AdminHierachy))
}

func (fieldMask *ProbingConstraint_AdminHierachy_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type PathProbe_FieldMask struct {
	Paths []PathProbe_FieldPath
}

func FullPathProbe_FieldMask() *PathProbe_FieldMask {
	res := &PathProbe_FieldMask{}
	res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorEnabled})
	res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorMode})
	res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorIntervalSec})
	res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorAttempts})
	res.Paths = append(res.Paths, &PathProbe_FieldTerminalPath{selector: PathProbe_FieldPathSelectorMaxTtl})
	return res
}

func (fieldMask *PathProbe_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *PathProbe_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *PathProbe_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParsePathProbe_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *PathProbe_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*PathProbe_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *PathProbe_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParsePathProbe_FieldPath(raw)
	})
}

func (fieldMask *PathProbe_FieldMask) ProtoMessage() {}

func (fieldMask *PathProbe_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *PathProbe_FieldMask) Subtract(other *PathProbe_FieldMask) *PathProbe_FieldMask {
	result := &PathProbe_FieldMask{}
	removedSelectors := make([]bool, 6)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *PathProbe_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *PathProbe_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*PathProbe_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *PathProbe_FieldMask) FilterInputFields() *PathProbe_FieldMask {
	result := &PathProbe_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *PathProbe_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *PathProbe_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]PathProbe_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParsePathProbe_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask PathProbe_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *PathProbe_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PathProbe_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask PathProbe_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *PathProbe_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *PathProbe_FieldMask) AppendPath(path PathProbe_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *PathProbe_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(PathProbe_FieldPath))
}

func (fieldMask *PathProbe_FieldMask) GetPaths() []PathProbe_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *PathProbe_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *PathProbe_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParsePathProbe_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *PathProbe_FieldMask) Set(target, source *PathProbe) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *PathProbe_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*PathProbe), source.(*PathProbe))
}

func (fieldMask *PathProbe_FieldMask) Project(source *PathProbe) *PathProbe {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &PathProbe{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *PathProbe_FieldTerminalPath:
			switch tp.selector {
			case PathProbe_FieldPathSelectorEnabled:
				result.Enabled = source.Enabled
			case PathProbe_FieldPathSelectorMode:
				result.Mode = source.Mode
			case PathProbe_FieldPathSelectorInterval:
				result.Interval = source.Interval
			case PathProbe_FieldPathSelectorIntervalSec:
				result.IntervalSec = source.IntervalSec
			case PathProbe_FieldPathSelectorAttempts:
				result.Attempts = source.Attempts
			case PathProbe_FieldPathSelectorMaxTtl:
				result.MaxTtl = source.MaxTtl
			}
		}
	}
	return result
}

func (fieldMask *PathProbe_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*PathProbe))
}

func (fieldMask *PathProbe_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProbingSettings_FieldMask struct {
	Paths []ProbingSettings_FieldPath
}

func FullProbingSettings_FieldMask() *ProbingSettings_FieldMask {
	res := &ProbingSettings_FieldMask{}
	res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorTos})
	res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorWindowSize})
	res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorPathProbing})
	res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorSpeedtestSettings})
	res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorHttpProbingConfig})
	res.Paths = append(res.Paths, &ProbingSettings_FieldTerminalPath{selector: ProbingSettings_FieldPathSelectorProxyConfiguration})
	return res
}

func (fieldMask *ProbingSettings_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingSettings_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingSettings_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingSettings_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingSettings_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingSettings_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingSettings_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingSettings_FieldPath(raw)
	})
}

func (fieldMask *ProbingSettings_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingSettings_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingSettings_FieldMask) Subtract(other *ProbingSettings_FieldMask) *ProbingSettings_FieldMask {
	result := &ProbingSettings_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[ProbingSettings_FieldPathSelector]gotenobject.FieldMask{
		ProbingSettings_FieldPathSelectorPathProbing:        &PathProbe_FieldMask{},
		ProbingSettings_FieldPathSelectorSpeedtestSettings:  &SpeedTestSettings_FieldMask{},
		ProbingSettings_FieldPathSelectorHttpProbingConfig:  &HTTPProbingConfig_FieldMask{},
		ProbingSettings_FieldPathSelectorProxyConfiguration: &ProxyConfiguration_FieldMask{},
	}
	mySubMasks := map[ProbingSettings_FieldPathSelector]gotenobject.FieldMask{
		ProbingSettings_FieldPathSelectorPathProbing:        &PathProbe_FieldMask{},
		ProbingSettings_FieldPathSelectorSpeedtestSettings:  &SpeedTestSettings_FieldMask{},
		ProbingSettings_FieldPathSelectorHttpProbingConfig:  &HTTPProbingConfig_FieldMask{},
		ProbingSettings_FieldPathSelectorProxyConfiguration: &ProxyConfiguration_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingSettings_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProbingSettings_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProbingSettings_FieldTerminalPath); ok {
					switch tp.selector {
					case ProbingSettings_FieldPathSelectorPathProbing:
						mySubMasks[ProbingSettings_FieldPathSelectorPathProbing] = FullPathProbe_FieldMask()
					case ProbingSettings_FieldPathSelectorSpeedtestSettings:
						mySubMasks[ProbingSettings_FieldPathSelectorSpeedtestSettings] = FullSpeedTestSettings_FieldMask()
					case ProbingSettings_FieldPathSelectorHttpProbingConfig:
						mySubMasks[ProbingSettings_FieldPathSelectorHttpProbingConfig] = FullHTTPProbingConfig_FieldMask()
					case ProbingSettings_FieldPathSelectorProxyConfiguration:
						mySubMasks[ProbingSettings_FieldPathSelectorProxyConfiguration] = FullProxyConfiguration_FieldMask()
					}
				} else if tp, ok := path.(*ProbingSettings_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProbingSettings_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingSettings_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingSettings_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingSettings_FieldMask) FilterInputFields() *ProbingSettings_FieldMask {
	result := &ProbingSettings_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingSettings_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingSettings_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingSettings_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingSettings_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingSettings_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingSettings_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingSettings_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingSettings_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingSettings_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingSettings_FieldMask) AppendPath(path ProbingSettings_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingSettings_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingSettings_FieldPath))
}

func (fieldMask *ProbingSettings_FieldMask) GetPaths() []ProbingSettings_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingSettings_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingSettings_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingSettings_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingSettings_FieldMask) Set(target, source *ProbingSettings) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingSettings_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingSettings), source.(*ProbingSettings))
}

func (fieldMask *ProbingSettings_FieldMask) Project(source *ProbingSettings) *ProbingSettings {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingSettings{}
	pathProbingMask := &PathProbe_FieldMask{}
	wholePathProbingAccepted := false
	speedtestSettingsMask := &SpeedTestSettings_FieldMask{}
	wholeSpeedtestSettingsAccepted := false
	httpProbingConfigMask := &HTTPProbingConfig_FieldMask{}
	wholeHttpProbingConfigAccepted := false
	proxyConfigurationMask := &ProxyConfiguration_FieldMask{}
	wholeProxyConfigurationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingSettings_FieldTerminalPath:
			switch tp.selector {
			case ProbingSettings_FieldPathSelectorInterval:
				result.Interval = source.Interval
			case ProbingSettings_FieldPathSelectorTos:
				result.Tos = source.Tos
			case ProbingSettings_FieldPathSelectorWindowSize:
				result.WindowSize = source.WindowSize
			case ProbingSettings_FieldPathSelectorPathProbing:
				result.PathProbing = source.PathProbing
				wholePathProbingAccepted = true
			case ProbingSettings_FieldPathSelectorSpeedtestSettings:
				result.SpeedtestSettings = source.SpeedtestSettings
				wholeSpeedtestSettingsAccepted = true
			case ProbingSettings_FieldPathSelectorHttpProbingConfig:
				result.HttpProbingConfig = source.HttpProbingConfig
				wholeHttpProbingConfigAccepted = true
			case ProbingSettings_FieldPathSelectorProxyConfiguration:
				result.ProxyConfiguration = source.ProxyConfiguration
				wholeProxyConfigurationAccepted = true
			}
		case *ProbingSettings_FieldSubPath:
			switch tp.selector {
			case ProbingSettings_FieldPathSelectorPathProbing:
				pathProbingMask.AppendPath(tp.subPath.(PathProbe_FieldPath))
			case ProbingSettings_FieldPathSelectorSpeedtestSettings:
				speedtestSettingsMask.AppendPath(tp.subPath.(SpeedTestSettings_FieldPath))
			case ProbingSettings_FieldPathSelectorHttpProbingConfig:
				httpProbingConfigMask.AppendPath(tp.subPath.(HTTPProbingConfig_FieldPath))
			case ProbingSettings_FieldPathSelectorProxyConfiguration:
				proxyConfigurationMask.AppendPath(tp.subPath.(ProxyConfiguration_FieldPath))
			}
		}
	}
	if wholePathProbingAccepted == false && len(pathProbingMask.Paths) > 0 {
		result.PathProbing = pathProbingMask.Project(source.GetPathProbing())
	}
	if wholeSpeedtestSettingsAccepted == false && len(speedtestSettingsMask.Paths) > 0 {
		result.SpeedtestSettings = speedtestSettingsMask.Project(source.GetSpeedtestSettings())
	}
	if wholeHttpProbingConfigAccepted == false && len(httpProbingConfigMask.Paths) > 0 {
		result.HttpProbingConfig = httpProbingConfigMask.Project(source.GetHttpProbingConfig())
	}
	if wholeProxyConfigurationAccepted == false && len(proxyConfigurationMask.Paths) > 0 {
		result.ProxyConfiguration = proxyConfigurationMask.Project(source.GetProxyConfiguration())
	}
	return result
}

func (fieldMask *ProbingSettings_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingSettings))
}

func (fieldMask *ProbingSettings_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProxyConfiguration_FieldMask struct {
	Paths []ProxyConfiguration_FieldPath
}

func FullProxyConfiguration_FieldMask() *ProxyConfiguration_FieldMask {
	res := &ProxyConfiguration_FieldMask{}
	res.Paths = append(res.Paths, &ProxyConfiguration_FieldTerminalPath{selector: ProxyConfiguration_FieldPathSelectorProxySetting})
	res.Paths = append(res.Paths, &ProxyConfiguration_FieldTerminalPath{selector: ProxyConfiguration_FieldPathSelectorHttpProxy})
	res.Paths = append(res.Paths, &ProxyConfiguration_FieldTerminalPath{selector: ProxyConfiguration_FieldPathSelectorHttpsProxy})
	res.Paths = append(res.Paths, &ProxyConfiguration_FieldTerminalPath{selector: ProxyConfiguration_FieldPathSelectorNoProxy})
	return res
}

func (fieldMask *ProxyConfiguration_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProxyConfiguration_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProxyConfiguration_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProxyConfiguration_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProxyConfiguration_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProxyConfiguration_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProxyConfiguration_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProxyConfiguration_FieldPath(raw)
	})
}

func (fieldMask *ProxyConfiguration_FieldMask) ProtoMessage() {}

func (fieldMask *ProxyConfiguration_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProxyConfiguration_FieldMask) Subtract(other *ProxyConfiguration_FieldMask) *ProxyConfiguration_FieldMask {
	result := &ProxyConfiguration_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProxyConfiguration_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProxyConfiguration_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProxyConfiguration_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProxyConfiguration_FieldMask) FilterInputFields() *ProxyConfiguration_FieldMask {
	result := &ProxyConfiguration_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProxyConfiguration_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProxyConfiguration_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProxyConfiguration_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProxyConfiguration_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProxyConfiguration_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProxyConfiguration_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProxyConfiguration_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProxyConfiguration_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProxyConfiguration_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProxyConfiguration_FieldMask) AppendPath(path ProxyConfiguration_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProxyConfiguration_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProxyConfiguration_FieldPath))
}

func (fieldMask *ProxyConfiguration_FieldMask) GetPaths() []ProxyConfiguration_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProxyConfiguration_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProxyConfiguration_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProxyConfiguration_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProxyConfiguration_FieldMask) Set(target, source *ProxyConfiguration) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProxyConfiguration_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProxyConfiguration), source.(*ProxyConfiguration))
}

func (fieldMask *ProxyConfiguration_FieldMask) Project(source *ProxyConfiguration) *ProxyConfiguration {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProxyConfiguration{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProxyConfiguration_FieldTerminalPath:
			switch tp.selector {
			case ProxyConfiguration_FieldPathSelectorProxySetting:
				result.ProxySetting = source.ProxySetting
			case ProxyConfiguration_FieldPathSelectorHttpProxy:
				result.HttpProxy = source.HttpProxy
			case ProxyConfiguration_FieldPathSelectorHttpsProxy:
				result.HttpsProxy = source.HttpsProxy
			case ProxyConfiguration_FieldPathSelectorNoProxy:
				result.NoProxy = source.NoProxy
			}
		}
	}
	return result
}

func (fieldMask *ProxyConfiguration_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProxyConfiguration))
}

func (fieldMask *ProxyConfiguration_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WLAN_FieldMask struct {
	Paths []WLAN_FieldPath
}

func FullWLAN_FieldMask() *WLAN_FieldMask {
	res := &WLAN_FieldMask{}
	res.Paths = append(res.Paths, &WLAN_FieldTerminalPath{selector: WLAN_FieldPathSelectorMac})
	res.Paths = append(res.Paths, &WLAN_FieldTerminalPath{selector: WLAN_FieldPathSelectorSignal})
	return res
}

func (fieldMask *WLAN_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WLAN_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WLAN_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWLAN_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WLAN_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WLAN_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WLAN_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWLAN_FieldPath(raw)
	})
}

func (fieldMask *WLAN_FieldMask) ProtoMessage() {}

func (fieldMask *WLAN_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WLAN_FieldMask) Subtract(other *WLAN_FieldMask) *WLAN_FieldMask {
	result := &WLAN_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WLAN_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WLAN_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WLAN_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WLAN_FieldMask) FilterInputFields() *WLAN_FieldMask {
	result := &WLAN_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WLAN_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WLAN_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WLAN_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWLAN_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WLAN_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WLAN_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WLAN_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WLAN_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WLAN_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WLAN_FieldMask) AppendPath(path WLAN_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WLAN_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WLAN_FieldPath))
}

func (fieldMask *WLAN_FieldMask) GetPaths() []WLAN_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WLAN_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WLAN_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWLAN_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WLAN_FieldMask) Set(target, source *WLAN) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WLAN_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WLAN), source.(*WLAN))
}

func (fieldMask *WLAN_FieldMask) Project(source *WLAN) *WLAN {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WLAN{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WLAN_FieldTerminalPath:
			switch tp.selector {
			case WLAN_FieldPathSelectorMac:
				result.Mac = source.Mac
			case WLAN_FieldPathSelectorSignal:
				result.Signal = source.Signal
			}
		}
	}
	return result
}

func (fieldMask *WLAN_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WLAN))
}

func (fieldMask *WLAN_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type SpeedTestSettings_FieldMask struct {
	Paths []SpeedTestSettings_FieldPath
}

func FullSpeedTestSettings_FieldMask() *SpeedTestSettings_FieldMask {
	res := &SpeedTestSettings_FieldMask{}
	res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorDuration})
	res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorUseTls})
	res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorServerSelection})
	res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorTcpPort})
	res.Paths = append(res.Paths, &SpeedTestSettings_FieldTerminalPath{selector: SpeedTestSettings_FieldPathSelectorTlsPort})
	return res
}

func (fieldMask *SpeedTestSettings_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SpeedTestSettings_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SpeedTestSettings_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSpeedTestSettings_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SpeedTestSettings_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SpeedTestSettings_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SpeedTestSettings_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSpeedTestSettings_FieldPath(raw)
	})
}

func (fieldMask *SpeedTestSettings_FieldMask) ProtoMessage() {}

func (fieldMask *SpeedTestSettings_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SpeedTestSettings_FieldMask) Subtract(other *SpeedTestSettings_FieldMask) *SpeedTestSettings_FieldMask {
	result := &SpeedTestSettings_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SpeedTestSettings_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SpeedTestSettings_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SpeedTestSettings_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SpeedTestSettings_FieldMask) FilterInputFields() *SpeedTestSettings_FieldMask {
	result := &SpeedTestSettings_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SpeedTestSettings_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SpeedTestSettings_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SpeedTestSettings_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSpeedTestSettings_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SpeedTestSettings_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SpeedTestSettings_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SpeedTestSettings_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SpeedTestSettings_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SpeedTestSettings_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SpeedTestSettings_FieldMask) AppendPath(path SpeedTestSettings_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SpeedTestSettings_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SpeedTestSettings_FieldPath))
}

func (fieldMask *SpeedTestSettings_FieldMask) GetPaths() []SpeedTestSettings_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SpeedTestSettings_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SpeedTestSettings_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSpeedTestSettings_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SpeedTestSettings_FieldMask) Set(target, source *SpeedTestSettings) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SpeedTestSettings_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SpeedTestSettings), source.(*SpeedTestSettings))
}

func (fieldMask *SpeedTestSettings_FieldMask) Project(source *SpeedTestSettings) *SpeedTestSettings {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SpeedTestSettings{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SpeedTestSettings_FieldTerminalPath:
			switch tp.selector {
			case SpeedTestSettings_FieldPathSelectorDuration:
				result.Duration = source.Duration
			case SpeedTestSettings_FieldPathSelectorUseTls:
				result.UseTls = source.UseTls
			case SpeedTestSettings_FieldPathSelectorServerSelection:
				result.ServerSelection = source.ServerSelection
			case SpeedTestSettings_FieldPathSelectorTcpPort:
				result.TcpPort = source.TcpPort
			case SpeedTestSettings_FieldPathSelectorTlsPort:
				result.TlsPort = source.TlsPort
			}
		}
	}
	return result
}

func (fieldMask *SpeedTestSettings_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SpeedTestSettings))
}

func (fieldMask *SpeedTestSettings_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type HTTPProbingConfig_FieldMask struct {
	Paths []HTTPProbingConfig_FieldPath
}

func FullHTTPProbingConfig_FieldMask() *HTTPProbingConfig_FieldMask {
	res := &HTTPProbingConfig_FieldMask{}
	res.Paths = append(res.Paths, &HTTPProbingConfig_FieldTerminalPath{selector: HTTPProbingConfig_FieldPathSelectorHttpRequest})
	res.Paths = append(res.Paths, &HTTPProbingConfig_FieldTerminalPath{selector: HTTPProbingConfig_FieldPathSelectorAuthConfig})
	return res
}

func (fieldMask *HTTPProbingConfig_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *HTTPProbingConfig_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *HTTPProbingConfig_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseHTTPProbingConfig_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*HTTPProbingConfig_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *HTTPProbingConfig_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseHTTPProbingConfig_FieldPath(raw)
	})
}

func (fieldMask *HTTPProbingConfig_FieldMask) ProtoMessage() {}

func (fieldMask *HTTPProbingConfig_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *HTTPProbingConfig_FieldMask) Subtract(other *HTTPProbingConfig_FieldMask) *HTTPProbingConfig_FieldMask {
	result := &HTTPProbingConfig_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[HTTPProbingConfig_FieldPathSelector]gotenobject.FieldMask{
		HTTPProbingConfig_FieldPathSelectorHttpRequest: &HTTPProbingConfig_HTTPRequest_FieldMask{},
		HTTPProbingConfig_FieldPathSelectorAuthConfig:  &HTTPProbingConfig_HTTPAuth_FieldMask{},
	}
	mySubMasks := map[HTTPProbingConfig_FieldPathSelector]gotenobject.FieldMask{
		HTTPProbingConfig_FieldPathSelectorHttpRequest: &HTTPProbingConfig_HTTPRequest_FieldMask{},
		HTTPProbingConfig_FieldPathSelectorAuthConfig:  &HTTPProbingConfig_HTTPAuth_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *HTTPProbingConfig_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *HTTPProbingConfig_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*HTTPProbingConfig_FieldTerminalPath); ok {
					switch tp.selector {
					case HTTPProbingConfig_FieldPathSelectorHttpRequest:
						mySubMasks[HTTPProbingConfig_FieldPathSelectorHttpRequest] = FullHTTPProbingConfig_HTTPRequest_FieldMask()
					case HTTPProbingConfig_FieldPathSelectorAuthConfig:
						mySubMasks[HTTPProbingConfig_FieldPathSelectorAuthConfig] = FullHTTPProbingConfig_HTTPAuth_FieldMask()
					}
				} else if tp, ok := path.(*HTTPProbingConfig_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &HTTPProbingConfig_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *HTTPProbingConfig_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*HTTPProbingConfig_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *HTTPProbingConfig_FieldMask) FilterInputFields() *HTTPProbingConfig_FieldMask {
	result := &HTTPProbingConfig_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *HTTPProbingConfig_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *HTTPProbingConfig_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]HTTPProbingConfig_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseHTTPProbingConfig_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask HTTPProbingConfig_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *HTTPProbingConfig_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask HTTPProbingConfig_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *HTTPProbingConfig_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_FieldMask) AppendPath(path HTTPProbingConfig_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *HTTPProbingConfig_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(HTTPProbingConfig_FieldPath))
}

func (fieldMask *HTTPProbingConfig_FieldMask) GetPaths() []HTTPProbingConfig_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *HTTPProbingConfig_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *HTTPProbingConfig_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseHTTPProbingConfig_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *HTTPProbingConfig_FieldMask) Set(target, source *HTTPProbingConfig) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *HTTPProbingConfig_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*HTTPProbingConfig), source.(*HTTPProbingConfig))
}

func (fieldMask *HTTPProbingConfig_FieldMask) Project(source *HTTPProbingConfig) *HTTPProbingConfig {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &HTTPProbingConfig{}
	httpRequestMask := &HTTPProbingConfig_HTTPRequest_FieldMask{}
	wholeHttpRequestAccepted := false
	authConfigMask := &HTTPProbingConfig_HTTPAuth_FieldMask{}
	wholeAuthConfigAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *HTTPProbingConfig_FieldTerminalPath:
			switch tp.selector {
			case HTTPProbingConfig_FieldPathSelectorHttpRequest:
				result.HttpRequest = source.HttpRequest
				wholeHttpRequestAccepted = true
			case HTTPProbingConfig_FieldPathSelectorAuthConfig:
				result.AuthConfig = source.AuthConfig
				wholeAuthConfigAccepted = true
			}
		case *HTTPProbingConfig_FieldSubPath:
			switch tp.selector {
			case HTTPProbingConfig_FieldPathSelectorHttpRequest:
				httpRequestMask.AppendPath(tp.subPath.(HTTPProbingConfigHTTPRequest_FieldPath))
			case HTTPProbingConfig_FieldPathSelectorAuthConfig:
				authConfigMask.AppendPath(tp.subPath.(HTTPProbingConfigHTTPAuth_FieldPath))
			}
		}
	}
	if wholeHttpRequestAccepted == false && len(httpRequestMask.Paths) > 0 {
		result.HttpRequest = httpRequestMask.Project(source.GetHttpRequest())
	}
	if wholeAuthConfigAccepted == false && len(authConfigMask.Paths) > 0 {
		result.AuthConfig = authConfigMask.Project(source.GetAuthConfig())
	}
	return result
}

func (fieldMask *HTTPProbingConfig_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*HTTPProbingConfig))
}

func (fieldMask *HTTPProbingConfig_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type HTTPProbingConfig_HTTPRequest_FieldMask struct {
	Paths []HTTPProbingConfigHTTPRequest_FieldPath
}

func FullHTTPProbingConfig_HTTPRequest_FieldMask() *HTTPProbingConfig_HTTPRequest_FieldMask {
	res := &HTTPProbingConfig_HTTPRequest_FieldMask{}
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorUrl})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestHeaders})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestMethod})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorExpectedResponseCode})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorTimeout})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestBody})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorAuthenticationMethod})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequest_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequest_FieldPathSelectorUrlFormEncodedBody})
	return res
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseHTTPProbingConfigHTTPRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*HTTPProbingConfigHTTPRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseHTTPProbingConfigHTTPRequest_FieldPath(raw)
	})
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) ProtoMessage() {}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) Subtract(other *HTTPProbingConfig_HTTPRequest_FieldMask) *HTTPProbingConfig_HTTPRequest_FieldMask {
	result := &HTTPProbingConfig_HTTPRequest_FieldMask{}
	removedSelectors := make([]bool, 8)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *HTTPProbingConfigHTTPRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*HTTPProbingConfig_HTTPRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) FilterInputFields() *HTTPProbingConfig_HTTPRequest_FieldMask {
	result := &HTTPProbingConfig_HTTPRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]HTTPProbingConfigHTTPRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseHTTPProbingConfigHTTPRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask HTTPProbingConfig_HTTPRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask HTTPProbingConfig_HTTPRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) AppendPath(path HTTPProbingConfigHTTPRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(HTTPProbingConfigHTTPRequest_FieldPath))
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) GetPaths() []HTTPProbingConfigHTTPRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseHTTPProbingConfigHTTPRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) Set(target, source *HTTPProbingConfig_HTTPRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*HTTPProbingConfig_HTTPRequest), source.(*HTTPProbingConfig_HTTPRequest))
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) Project(source *HTTPProbingConfig_HTTPRequest) *HTTPProbingConfig_HTTPRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &HTTPProbingConfig_HTTPRequest{}
	var requestHeadersMapKeys []string
	wholeRequestHeadersAccepted := false
	var urlFormEncodedBodyMapKeys []string
	wholeUrlFormEncodedBodyAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *HTTPProbingConfigHTTPRequest_FieldTerminalPath:
			switch tp.selector {
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorUrl:
				result.Url = source.Url
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestHeaders:
				result.RequestHeaders = source.RequestHeaders
				wholeRequestHeadersAccepted = true
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestMethod:
				result.RequestMethod = source.RequestMethod
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorExpectedResponseCode:
				result.ExpectedResponseCode = source.ExpectedResponseCode
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorTimeout:
				result.Timeout = source.Timeout
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestBody:
				result.RequestBody = source.RequestBody
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorAuthenticationMethod:
				result.AuthenticationMethod = source.AuthenticationMethod
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorUrlFormEncodedBody:
				result.UrlFormEncodedBody = source.UrlFormEncodedBody
				wholeUrlFormEncodedBodyAccepted = true
			}
		case *HTTPProbingConfigHTTPRequest_FieldPathMap:
			switch tp.selector {
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorRequestHeaders:
				requestHeadersMapKeys = append(requestHeadersMapKeys, tp.key)
			case HTTPProbingConfigHTTPRequest_FieldPathSelectorUrlFormEncodedBody:
				urlFormEncodedBodyMapKeys = append(urlFormEncodedBodyMapKeys, tp.key)
			}
		}
	}
	if wholeRequestHeadersAccepted == false && len(requestHeadersMapKeys) > 0 && source.GetRequestHeaders() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetRequestHeaders()
		for _, key := range requestHeadersMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.RequestHeaders = copiedMap
	}
	if wholeUrlFormEncodedBodyAccepted == false && len(urlFormEncodedBodyMapKeys) > 0 && source.GetUrlFormEncodedBody() != nil {
		copiedMap := map[string]*HTTPProbingConfig_HTTPRequest_StringArray{}
		sourceMap := source.GetUrlFormEncodedBody()
		for _, key := range urlFormEncodedBodyMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.UrlFormEncodedBody = copiedMap
	}
	return result
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*HTTPProbingConfig_HTTPRequest))
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type HTTPProbingConfig_HTTPAuth_FieldMask struct {
	Paths []HTTPProbingConfigHTTPAuth_FieldPath
}

func FullHTTPProbingConfig_HTTPAuth_FieldMask() *HTTPProbingConfig_HTTPAuth_FieldMask {
	res := &HTTPProbingConfig_HTTPAuth_FieldMask{}
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorUsername})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorPassword})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseHeader})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseBodyKey})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorRequestHeaderTokenKey})
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPAuth_FieldTerminalPath{selector: HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseBodyExpiryKey})
	return res
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseHTTPProbingConfigHTTPAuth_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*HTTPProbingConfigHTTPAuth_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseHTTPProbingConfigHTTPAuth_FieldPath(raw)
	})
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) ProtoMessage() {}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) Subtract(other *HTTPProbingConfig_HTTPAuth_FieldMask) *HTTPProbingConfig_HTTPAuth_FieldMask {
	result := &HTTPProbingConfig_HTTPAuth_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[HTTPProbingConfigHTTPAuth_FieldPathSelector]gotenobject.FieldMask{
		HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest: &HTTPProbingConfig_HTTPRequest_FieldMask{},
	}
	mySubMasks := map[HTTPProbingConfigHTTPAuth_FieldPathSelector]gotenobject.FieldMask{
		HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest: &HTTPProbingConfig_HTTPRequest_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *HTTPProbingConfigHTTPAuth_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *HTTPProbingConfigHTTPAuth_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*HTTPProbingConfigHTTPAuth_FieldTerminalPath); ok {
					switch tp.selector {
					case HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest:
						mySubMasks[HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest] = FullHTTPProbingConfig_HTTPRequest_FieldMask()
					}
				} else if tp, ok := path.(*HTTPProbingConfigHTTPAuth_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &HTTPProbingConfigHTTPAuth_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*HTTPProbingConfig_HTTPAuth_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) FilterInputFields() *HTTPProbingConfig_HTTPAuth_FieldMask {
	result := &HTTPProbingConfig_HTTPAuth_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]HTTPProbingConfigHTTPAuth_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseHTTPProbingConfigHTTPAuth_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask HTTPProbingConfig_HTTPAuth_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask HTTPProbingConfig_HTTPAuth_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) AppendPath(path HTTPProbingConfigHTTPAuth_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(HTTPProbingConfigHTTPAuth_FieldPath))
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) GetPaths() []HTTPProbingConfigHTTPAuth_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseHTTPProbingConfigHTTPAuth_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) Set(target, source *HTTPProbingConfig_HTTPAuth) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*HTTPProbingConfig_HTTPAuth), source.(*HTTPProbingConfig_HTTPAuth))
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) Project(source *HTTPProbingConfig_HTTPAuth) *HTTPProbingConfig_HTTPAuth {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &HTTPProbingConfig_HTTPAuth{}
	tokenRequestMask := &HTTPProbingConfig_HTTPRequest_FieldMask{}
	wholeTokenRequestAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *HTTPProbingConfigHTTPAuth_FieldTerminalPath:
			switch tp.selector {
			case HTTPProbingConfigHTTPAuth_FieldPathSelectorUsername:
				result.Username = source.Username
			case HTTPProbingConfigHTTPAuth_FieldPathSelectorPassword:
				result.Password = source.Password
			case HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest:
				result.TokenRequest = source.TokenRequest
				wholeTokenRequestAccepted = true
			case HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseHeader:
				result.TokenResponseHeader = source.TokenResponseHeader
			case HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseBodyKey:
				result.TokenResponseBodyKey = source.TokenResponseBodyKey
			case HTTPProbingConfigHTTPAuth_FieldPathSelectorRequestHeaderTokenKey:
				result.RequestHeaderTokenKey = source.RequestHeaderTokenKey
			case HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenResponseBodyExpiryKey:
				result.TokenResponseBodyExpiryKey = source.TokenResponseBodyExpiryKey
			}
		case *HTTPProbingConfigHTTPAuth_FieldSubPath:
			switch tp.selector {
			case HTTPProbingConfigHTTPAuth_FieldPathSelectorTokenRequest:
				tokenRequestMask.AppendPath(tp.subPath.(HTTPProbingConfigHTTPRequest_FieldPath))
			}
		}
	}
	if wholeTokenRequestAccepted == false && len(tokenRequestMask.Paths) > 0 {
		result.TokenRequest = tokenRequestMask.Project(source.GetTokenRequest())
	}
	return result
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*HTTPProbingConfig_HTTPAuth))
}

func (fieldMask *HTTPProbingConfig_HTTPAuth_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type HTTPProbingConfig_HTTPRequest_StringArray_FieldMask struct {
	Paths []HTTPProbingConfigHTTPRequestStringArray_FieldPath
}

func FullHTTPProbingConfig_HTTPRequest_StringArray_FieldMask() *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask {
	res := &HTTPProbingConfig_HTTPRequest_StringArray_FieldMask{}
	res.Paths = append(res.Paths, &HTTPProbingConfigHTTPRequestStringArray_FieldTerminalPath{selector: HTTPProbingConfigHTTPRequestStringArray_FieldPathSelectorValue})
	return res
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseHTTPProbingConfigHTTPRequestStringArray_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*HTTPProbingConfigHTTPRequestStringArray_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseHTTPProbingConfigHTTPRequestStringArray_FieldPath(raw)
	})
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) ProtoMessage() {}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) Subtract(other *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask {
	result := &HTTPProbingConfig_HTTPRequest_StringArray_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *HTTPProbingConfigHTTPRequestStringArray_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*HTTPProbingConfig_HTTPRequest_StringArray_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) FilterInputFields() *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask {
	result := &HTTPProbingConfig_HTTPRequest_StringArray_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]HTTPProbingConfigHTTPRequestStringArray_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseHTTPProbingConfigHTTPRequestStringArray_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) AppendPath(path HTTPProbingConfigHTTPRequestStringArray_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(HTTPProbingConfigHTTPRequestStringArray_FieldPath))
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) GetPaths() []HTTPProbingConfigHTTPRequestStringArray_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseHTTPProbingConfigHTTPRequestStringArray_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) Set(target, source *HTTPProbingConfig_HTTPRequest_StringArray) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*HTTPProbingConfig_HTTPRequest_StringArray), source.(*HTTPProbingConfig_HTTPRequest_StringArray))
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) Project(source *HTTPProbingConfig_HTTPRequest_StringArray) *HTTPProbingConfig_HTTPRequest_StringArray {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &HTTPProbingConfig_HTTPRequest_StringArray{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *HTTPProbingConfigHTTPRequestStringArray_FieldTerminalPath:
			switch tp.selector {
			case HTTPProbingConfigHTTPRequestStringArray_FieldPathSelectorValue:
				result.Value = source.Value
			}
		}
	}
	return result
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*HTTPProbingConfig_HTTPRequest_StringArray))
}

func (fieldMask *HTTPProbingConfig_HTTPRequest_StringArray_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DNSQuery_FieldMask struct {
	Paths []DNSQuery_FieldPath
}

func FullDNSQuery_FieldMask() *DNSQuery_FieldMask {
	res := &DNSQuery_FieldMask{}
	res.Paths = append(res.Paths, &DNSQuery_FieldTerminalPath{selector: DNSQuery_FieldPathSelectorName})
	res.Paths = append(res.Paths, &DNSQuery_FieldTerminalPath{selector: DNSQuery_FieldPathSelectorQtype})
	res.Paths = append(res.Paths, &DNSQuery_FieldTerminalPath{selector: DNSQuery_FieldPathSelectorQclass})
	return res
}

func (fieldMask *DNSQuery_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DNSQuery_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DNSQuery_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDNSQuery_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DNSQuery_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DNSQuery_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DNSQuery_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDNSQuery_FieldPath(raw)
	})
}

func (fieldMask *DNSQuery_FieldMask) ProtoMessage() {}

func (fieldMask *DNSQuery_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DNSQuery_FieldMask) Subtract(other *DNSQuery_FieldMask) *DNSQuery_FieldMask {
	result := &DNSQuery_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DNSQuery_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DNSQuery_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DNSQuery_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DNSQuery_FieldMask) FilterInputFields() *DNSQuery_FieldMask {
	result := &DNSQuery_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DNSQuery_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DNSQuery_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DNSQuery_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDNSQuery_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DNSQuery_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DNSQuery_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DNSQuery_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DNSQuery_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DNSQuery_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DNSQuery_FieldMask) AppendPath(path DNSQuery_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DNSQuery_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DNSQuery_FieldPath))
}

func (fieldMask *DNSQuery_FieldMask) GetPaths() []DNSQuery_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DNSQuery_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DNSQuery_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDNSQuery_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DNSQuery_FieldMask) Set(target, source *DNSQuery) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DNSQuery_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DNSQuery), source.(*DNSQuery))
}

func (fieldMask *DNSQuery_FieldMask) Project(source *DNSQuery) *DNSQuery {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DNSQuery{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DNSQuery_FieldTerminalPath:
			switch tp.selector {
			case DNSQuery_FieldPathSelectorName:
				result.Name = source.Name
			case DNSQuery_FieldPathSelectorQtype:
				result.Qtype = source.Qtype
			case DNSQuery_FieldPathSelectorQclass:
				result.Qclass = source.Qclass
			}
		}
	}
	return result
}

func (fieldMask *DNSQuery_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DNSQuery))
}

func (fieldMask *DNSQuery_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DNSResourceRecord_FieldMask struct {
	Paths []DNSResourceRecord_FieldPath
}

func FullDNSResourceRecord_FieldMask() *DNSResourceRecord_FieldMask {
	res := &DNSResourceRecord_FieldMask{}
	res.Paths = append(res.Paths, &DNSResourceRecord_FieldTerminalPath{selector: DNSResourceRecord_FieldPathSelectorName})
	res.Paths = append(res.Paths, &DNSResourceRecord_FieldTerminalPath{selector: DNSResourceRecord_FieldPathSelectorRrtype})
	res.Paths = append(res.Paths, &DNSResourceRecord_FieldTerminalPath{selector: DNSResourceRecord_FieldPathSelectorClass})
	res.Paths = append(res.Paths, &DNSResourceRecord_FieldTerminalPath{selector: DNSResourceRecord_FieldPathSelectorTtl})
	res.Paths = append(res.Paths, &DNSResourceRecord_FieldTerminalPath{selector: DNSResourceRecord_FieldPathSelectorRdlength})
	res.Paths = append(res.Paths, &DNSResourceRecord_FieldTerminalPath{selector: DNSResourceRecord_FieldPathSelectorRdata})
	return res
}

func (fieldMask *DNSResourceRecord_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DNSResourceRecord_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DNSResourceRecord_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDNSResourceRecord_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DNSResourceRecord_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DNSResourceRecord_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DNSResourceRecord_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDNSResourceRecord_FieldPath(raw)
	})
}

func (fieldMask *DNSResourceRecord_FieldMask) ProtoMessage() {}

func (fieldMask *DNSResourceRecord_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DNSResourceRecord_FieldMask) Subtract(other *DNSResourceRecord_FieldMask) *DNSResourceRecord_FieldMask {
	result := &DNSResourceRecord_FieldMask{}
	removedSelectors := make([]bool, 6)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DNSResourceRecord_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DNSResourceRecord_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DNSResourceRecord_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DNSResourceRecord_FieldMask) FilterInputFields() *DNSResourceRecord_FieldMask {
	result := &DNSResourceRecord_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DNSResourceRecord_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DNSResourceRecord_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DNSResourceRecord_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDNSResourceRecord_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DNSResourceRecord_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DNSResourceRecord_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DNSResourceRecord_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DNSResourceRecord_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DNSResourceRecord_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DNSResourceRecord_FieldMask) AppendPath(path DNSResourceRecord_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DNSResourceRecord_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DNSResourceRecord_FieldPath))
}

func (fieldMask *DNSResourceRecord_FieldMask) GetPaths() []DNSResourceRecord_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DNSResourceRecord_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DNSResourceRecord_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDNSResourceRecord_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DNSResourceRecord_FieldMask) Set(target, source *DNSResourceRecord) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DNSResourceRecord_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DNSResourceRecord), source.(*DNSResourceRecord))
}

func (fieldMask *DNSResourceRecord_FieldMask) Project(source *DNSResourceRecord) *DNSResourceRecord {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DNSResourceRecord{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DNSResourceRecord_FieldTerminalPath:
			switch tp.selector {
			case DNSResourceRecord_FieldPathSelectorName:
				result.Name = source.Name
			case DNSResourceRecord_FieldPathSelectorRrtype:
				result.Rrtype = source.Rrtype
			case DNSResourceRecord_FieldPathSelectorClass:
				result.Class = source.Class
			case DNSResourceRecord_FieldPathSelectorTtl:
				result.Ttl = source.Ttl
			case DNSResourceRecord_FieldPathSelectorRdlength:
				result.Rdlength = source.Rdlength
			case DNSResourceRecord_FieldPathSelectorRdata:
				result.Rdata = source.Rdata
			}
		}
	}
	return result
}

func (fieldMask *DNSResourceRecord_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DNSResourceRecord))
}

func (fieldMask *DNSResourceRecord_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
