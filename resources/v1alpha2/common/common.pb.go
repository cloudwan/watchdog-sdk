// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package common

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpVersion int32

const (
	IpVersion_IP_VERSION_UNSPECIFIED IpVersion = 0
	IpVersion_IPV4                   IpVersion = 1
	IpVersion_IPV6                   IpVersion = 2
)

var (
	IpVersion_name = map[int32]string{
		0: "IP_VERSION_UNSPECIFIED",
		1: "IPV4",
		2: "IPV6",
	}

	IpVersion_value = map[string]int32{
		"IP_VERSION_UNSPECIFIED": 0,
		"IPV4":                   1,
		"IPV6":                   2,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (IpVersion) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[0].Descriptor()
}

func (IpVersion) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[0]
}

func (x IpVersion) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use IpVersion.ProtoReflect.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{0}
}

type ProbingMode int32

const (
	ProbingMode_PROBING_MODE_UNSPECIFIED ProbingMode = 0
	ProbingMode_ICMP                     ProbingMode = 1
	ProbingMode_HTTP                     ProbingMode = 2
	ProbingMode_UDP                      ProbingMode = 3
	ProbingMode_TCP                      ProbingMode = 4
	ProbingMode_SPEED_TEST               ProbingMode = 5
)

var (
	ProbingMode_name = map[int32]string{
		0: "PROBING_MODE_UNSPECIFIED",
		1: "ICMP",
		2: "HTTP",
		3: "UDP",
		4: "TCP",
		5: "SPEED_TEST",
	}

	ProbingMode_value = map[string]int32{
		"PROBING_MODE_UNSPECIFIED": 0,
		"ICMP":                     1,
		"HTTP":                     2,
		"UDP":                      3,
		"TCP":                      4,
		"SPEED_TEST":               5,
	}
)

func (x ProbingMode) Enum() *ProbingMode {
	p := new(ProbingMode)
	*p = x
	return p
}

func (x ProbingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ProbingMode) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[1].Descriptor()
}

func (ProbingMode) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[1]
}

func (x ProbingMode) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ProbingMode.ProtoReflect.Descriptor instead.
func (ProbingMode) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{1}
}

type ProxySetting int32

const (
	ProxySetting_USE_SYSTEM_CONFIGURATION      ProxySetting = 0
	ProxySetting_DISABLE_PROXY                 ProxySetting = 1
	ProxySetting_OVERRIDE_SYSTEM_CONFIGURATION ProxySetting = 2
)

var (
	ProxySetting_name = map[int32]string{
		0: "USE_SYSTEM_CONFIGURATION",
		1: "DISABLE_PROXY",
		2: "OVERRIDE_SYSTEM_CONFIGURATION",
	}

	ProxySetting_value = map[string]int32{
		"USE_SYSTEM_CONFIGURATION":      0,
		"DISABLE_PROXY":                 1,
		"OVERRIDE_SYSTEM_CONFIGURATION": 2,
	}
)

func (x ProxySetting) Enum() *ProxySetting {
	p := new(ProxySetting)
	*p = x
	return p
}

func (x ProxySetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ProxySetting) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[2].Descriptor()
}

func (ProxySetting) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[2]
}

func (x ProxySetting) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ProxySetting.ProtoReflect.Descriptor instead.
func (ProxySetting) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{2}
}

// Whether target is located in specific site, region or is globally distributed
// (anycast)
type LocationType int32

const (
	LocationType_LOCATION_TYPE_UNSPECIFIED LocationType = 0
	LocationType_SITE                      LocationType = 1
	LocationType_REGION                    LocationType = 2
	LocationType_ANYCAST                   LocationType = 3
)

var (
	LocationType_name = map[int32]string{
		0: "LOCATION_TYPE_UNSPECIFIED",
		1: "SITE",
		2: "REGION",
		3: "ANYCAST",
	}

	LocationType_value = map[string]int32{
		"LOCATION_TYPE_UNSPECIFIED": 0,
		"SITE":                      1,
		"REGION":                    2,
		"ANYCAST":                   3,
	}
)

func (x LocationType) Enum() *LocationType {
	p := new(LocationType)
	*p = x
	return p
}

func (x LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (LocationType) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[3].Descriptor()
}

func (LocationType) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[3]
}

func (x LocationType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use LocationType.ProtoReflect.Descriptor instead.
func (LocationType) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{3}
}

type HTTPRequestMethod int32

const (
	HTTPRequestMethod_GET    HTTPRequestMethod = 0
	HTTPRequestMethod_POST   HTTPRequestMethod = 1
	HTTPRequestMethod_PUT    HTTPRequestMethod = 2
	HTTPRequestMethod_DELETE HTTPRequestMethod = 3
)

var (
	HTTPRequestMethod_name = map[int32]string{
		0: "GET",
		1: "POST",
		2: "PUT",
		3: "DELETE",
	}

	HTTPRequestMethod_value = map[string]int32{
		"GET":    0,
		"POST":   1,
		"PUT":    2,
		"DELETE": 3,
	}
)

func (x HTTPRequestMethod) Enum() *HTTPRequestMethod {
	p := new(HTTPRequestMethod)
	*p = x
	return p
}

func (x HTTPRequestMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (HTTPRequestMethod) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[4].Descriptor()
}

func (HTTPRequestMethod) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[4]
}

func (x HTTPRequestMethod) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use HTTPRequestMethod.ProtoReflect.Descriptor instead.
func (HTTPRequestMethod) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{4}
}

type AuthenticationMethod int32

const (
	AuthenticationMethod_NO_AUTH                AuthenticationMethod = 0
	AuthenticationMethod_BASIC                  AuthenticationMethod = 1
	AuthenticationMethod_EXTERNAL_TOKEN_REQUEST AuthenticationMethod = 2
)

var (
	AuthenticationMethod_name = map[int32]string{
		0: "NO_AUTH",
		1: "BASIC",
		2: "EXTERNAL_TOKEN_REQUEST",
	}

	AuthenticationMethod_value = map[string]int32{
		"NO_AUTH":                0,
		"BASIC":                  1,
		"EXTERNAL_TOKEN_REQUEST": 2,
	}
)

func (x AuthenticationMethod) Enum() *AuthenticationMethod {
	p := new(AuthenticationMethod)
	*p = x
	return p
}

func (x AuthenticationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (AuthenticationMethod) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[5].Descriptor()
}

func (AuthenticationMethod) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[5]
}

func (x AuthenticationMethod) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use AuthenticationMethod.ProtoReflect.Descriptor instead.
func (AuthenticationMethod) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{5}
}

type ContactInformation_PhoneType int32

const (
	ContactInformation_UNSPECIFIED ContactInformation_PhoneType = 0
	ContactInformation_MOBILE      ContactInformation_PhoneType = 1
	ContactInformation_HOME        ContactInformation_PhoneType = 2
	ContactInformation_WORK        ContactInformation_PhoneType = 3
)

var (
	ContactInformation_PhoneType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MOBILE",
		2: "HOME",
		3: "WORK",
	}

	ContactInformation_PhoneType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"MOBILE":      1,
		"HOME":        2,
		"WORK":        3,
	}
)

func (x ContactInformation_PhoneType) Enum() *ContactInformation_PhoneType {
	p := new(ContactInformation_PhoneType)
	*p = x
	return p
}

func (x ContactInformation_PhoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ContactInformation_PhoneType) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[6].Descriptor()
}

func (ContactInformation_PhoneType) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[6]
}

func (x ContactInformation_PhoneType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ContactInformation_PhoneType.ProtoReflect.Descriptor instead.
func (ContactInformation_PhoneType) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{1, 0}
}

type LocationDiscoverySpec_Type int32

const (
	LocationDiscoverySpec_TYPE_UNSPECIFIED  LocationDiscoverySpec_Type = 0
	LocationDiscoverySpec_ONLY_PRIMARY      LocationDiscoverySpec_Type = 1
	LocationDiscoverySpec_PREFER_PRIMARY    LocationDiscoverySpec_Type = 2
	LocationDiscoverySpec_PREFER_DISCOVERED LocationDiscoverySpec_Type = 3
)

var (
	LocationDiscoverySpec_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "ONLY_PRIMARY",
		2: "PREFER_PRIMARY",
		3: "PREFER_DISCOVERED",
	}

	LocationDiscoverySpec_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":  0,
		"ONLY_PRIMARY":      1,
		"PREFER_PRIMARY":    2,
		"PREFER_DISCOVERED": 3,
	}
)

func (x LocationDiscoverySpec_Type) Enum() *LocationDiscoverySpec_Type {
	p := new(LocationDiscoverySpec_Type)
	*p = x
	return p
}

func (x LocationDiscoverySpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (LocationDiscoverySpec_Type) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[7].Descriptor()
}

func (LocationDiscoverySpec_Type) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[7]
}

func (x LocationDiscoverySpec_Type) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use LocationDiscoverySpec_Type.ProtoReflect.Descriptor instead.
func (LocationDiscoverySpec_Type) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{6, 0}
}

type SpeedTestSettings_ServerSelection int32

const (
	SpeedTestSettings_NEAREST SpeedTestSettings_ServerSelection = 0
	SpeedTestSettings_ALL     SpeedTestSettings_ServerSelection = 1
)

var (
	SpeedTestSettings_ServerSelection_name = map[int32]string{
		0: "NEAREST",
		1: "ALL",
	}

	SpeedTestSettings_ServerSelection_value = map[string]int32{
		"NEAREST": 0,
		"ALL":     1,
	}
)

func (x SpeedTestSettings_ServerSelection) Enum() *SpeedTestSettings_ServerSelection {
	p := new(SpeedTestSettings_ServerSelection)
	*p = x
	return p
}

func (x SpeedTestSettings_ServerSelection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (SpeedTestSettings_ServerSelection) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_common_proto_enumTypes[8].Descriptor()
}

func (SpeedTestSettings_ServerSelection) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_common_proto_enumTypes[8]
}

func (x SpeedTestSettings_ServerSelection) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use SpeedTestSettings_ServerSelection.ProtoReflect.Descriptor instead.
func (SpeedTestSettings_ServerSelection) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{12, 0}
}

type SoftwareVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Version       string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
	CommitId      string `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty" firestore:"commitId"`
	BuildDate     string `protobuf:"bytes,3,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty" firestore:"buildDate"`
}

func (m *SoftwareVersion) Reset() {
	*m = SoftwareVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SoftwareVersion) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SoftwareVersion) ProtoMessage() {}

func (m *SoftwareVersion) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SoftwareVersion) GotenMessage() {}

// Deprecated, Use SoftwareVersion.ProtoReflect.Descriptor instead.
func (*SoftwareVersion) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{0}
}

func (m *SoftwareVersion) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SoftwareVersion) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SoftwareVersion) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SoftwareVersion) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SoftwareVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *SoftwareVersion) GetCommitId() string {
	if m != nil {
		return m.CommitId
	}
	return ""
}

func (m *SoftwareVersion) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *SoftwareVersion) SetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "SoftwareVersion"))
	}
	m.Version = fv
}

func (m *SoftwareVersion) SetCommitId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CommitId", "SoftwareVersion"))
	}
	m.CommitId = fv
}

func (m *SoftwareVersion) SetBuildDate(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BuildDate", "SoftwareVersion"))
	}
	m.BuildDate = fv
}

type ContactInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	FullName      string                            `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty" firestore:"fullName"`
	Email         string                            `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty" firestore:"email"`
	Phones        []*ContactInformation_PhoneNumber `protobuf:"bytes,4,rep,name=phones,proto3" json:"phones,omitempty" firestore:"phones"`
}

func (m *ContactInformation) Reset() {
	*m = ContactInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ContactInformation) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ContactInformation) ProtoMessage() {}

func (m *ContactInformation) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ContactInformation) GotenMessage() {}

// Deprecated, Use ContactInformation.ProtoReflect.Descriptor instead.
func (*ContactInformation) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{1}
}

func (m *ContactInformation) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ContactInformation) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ContactInformation) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ContactInformation) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ContactInformation) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *ContactInformation) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ContactInformation) GetPhones() []*ContactInformation_PhoneNumber {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *ContactInformation) SetFullName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "FullName", "ContactInformation"))
	}
	m.FullName = fv
}

func (m *ContactInformation) SetEmail(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Email", "ContactInformation"))
	}
	m.Email = fv
}

func (m *ContactInformation) SetPhones(fv []*ContactInformation_PhoneNumber) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Phones", "ContactInformation"))
	}
	m.Phones = fv
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Postal code
	PostalCode string `protobuf:"bytes,1,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty" firestore:"postalCode"`
	// Country code example US, JP
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty" firestore:"countryCode"`
	// Continent, e.g. North America, Asia
	Continent string `protobuf:"bytes,9,opt,name=continent,proto3" json:"continent,omitempty" firestore:"continent"`
	// Country name example United States, Japan
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty" firestore:"country"`
	// Probe Location Administrative Area level 1 name, e.g. California (state),
	// Chiba (prefecture)
	AdminArea1 string `protobuf:"bytes,4,opt,name=admin_area1,json=adminArea1,proto3" json:"admin_area1,omitempty" firestore:"adminArea1"`
	// Probe Location Administrative Area level 2 name, e.g. Santa Clara (county),
	// Tateyama (town)
	AdminArea2 string `protobuf:"bytes,5,opt,name=admin_area2,json=adminArea2,proto3" json:"admin_area2,omitempty" firestore:"adminArea2"`
	// Probe Location Administrative Area level 3 name, e.g. Sunnyvale (city)
	AdminArea3 string `protobuf:"bytes,6,opt,name=admin_area3,json=adminArea3,proto3" json:"admin_area3,omitempty" firestore:"adminArea3"`
	// Probe Location Administrative Area level 4 name, e.g. Sunnyvale (city)
	AdminArea4 string `protobuf:"bytes,8,opt,name=admin_area4,json=adminArea4,proto3" json:"admin_area4,omitempty" firestore:"adminArea4"`
	// Street Address
	StreetAddress string `protobuf:"bytes,7,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty" firestore:"streetAddress"`
}

func (m *Address) Reset() {
	*m = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Address) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Address) ProtoMessage() {}

func (m *Address) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Address) GotenMessage() {}

// Deprecated, Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{2}
}

func (m *Address) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Address) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Address) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Address) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Address) GetPostalCode() string {
	if m != nil {
		return m.PostalCode
	}
	return ""
}

func (m *Address) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *Address) GetContinent() string {
	if m != nil {
		return m.Continent
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetAdminArea1() string {
	if m != nil {
		return m.AdminArea1
	}
	return ""
}

func (m *Address) GetAdminArea2() string {
	if m != nil {
		return m.AdminArea2
	}
	return ""
}

func (m *Address) GetAdminArea3() string {
	if m != nil {
		return m.AdminArea3
	}
	return ""
}

func (m *Address) GetAdminArea4() string {
	if m != nil {
		return m.AdminArea4
	}
	return ""
}

func (m *Address) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *Address) SetPostalCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PostalCode", "Address"))
	}
	m.PostalCode = fv
}

func (m *Address) SetCountryCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CountryCode", "Address"))
	}
	m.CountryCode = fv
}

func (m *Address) SetContinent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Continent", "Address"))
	}
	m.Continent = fv
}

func (m *Address) SetCountry(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Country", "Address"))
	}
	m.Country = fv
}

func (m *Address) SetAdminArea1(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea1", "Address"))
	}
	m.AdminArea1 = fv
}

func (m *Address) SetAdminArea2(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea2", "Address"))
	}
	m.AdminArea2 = fv
}

func (m *Address) SetAdminArea3(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea3", "Address"))
	}
	m.AdminArea3 = fv
}

func (m *Address) SetAdminArea4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminArea4", "Address"))
	}
	m.AdminArea4 = fv
}

func (m *Address) SetStreetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "StreetAddress", "Address"))
	}
	m.StreetAddress = fv
}

// Location - address names the locations of Probes
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Address
	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	// Admin Area Hierarchy
	AdminHierarchy *admin_area.AdminHierarchy `protobuf:"bytes,4,opt,name=admin_hierarchy,json=adminHierarchy,proto3" json:"admin_hierarchy,omitempty" firestore:"adminHierarchy"`
	// coordinates
	Coordinates *latlng.LatLng `protobuf:"bytes,2,opt,name=coordinates,proto3" json:"coordinates,omitempty" firestore:"coordinates"`
	// location accuracy in meters
	Accuracy float64 `protobuf:"fixed64,3,opt,name=accuracy,proto3" json:"accuracy,omitempty" firestore:"accuracy"`
}

func (m *Location) Reset() {
	*m = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Location) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Location) ProtoMessage() {}

func (m *Location) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Location) GotenMessage() {}

// Deprecated, Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{3}
}

func (m *Location) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Location) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Location) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Location) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Location) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Location) GetAdminHierarchy() *admin_area.AdminHierarchy {
	if m != nil {
		return m.AdminHierarchy
	}
	return nil
}

func (m *Location) GetCoordinates() *latlng.LatLng {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

func (m *Location) GetAccuracy() float64 {
	if m != nil {
		return m.Accuracy
	}
	return float64(0)
}

func (m *Location) SetAddress(fv *Address) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "Location"))
	}
	m.Address = fv
}

func (m *Location) SetAdminHierarchy(fv *admin_area.AdminHierarchy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdminHierarchy", "Location"))
	}
	m.AdminHierarchy = fv
}

func (m *Location) SetCoordinates(fv *latlng.LatLng) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Coordinates", "Location"))
	}
	m.Coordinates = fv
}

func (m *Location) SetAccuracy(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Accuracy", "Location"))
	}
	m.Accuracy = fv
}

type ASInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AS Number string example AS7018
	Asn string `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty" firestore:"asn"`
	// AS Owner name example AT&T Services, Inc.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Domain name example att.com
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty" firestore:"domain"`
	// Routes exported from this ASN example 12.128.0.0/9
	Routes []string `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty" firestore:"routes"`
	// ASN Owner type example isp(AT&T) / hosting(google)/ business (Amazon)
	AsnType string `protobuf:"bytes,5,opt,name=asn_type,json=asnType,proto3" json:"asn_type,omitempty" firestore:"asnType"`
}

func (m *ASInfo) Reset() {
	*m = ASInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ASInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ASInfo) ProtoMessage() {}

func (m *ASInfo) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ASInfo) GotenMessage() {}

// Deprecated, Use ASInfo.ProtoReflect.Descriptor instead.
func (*ASInfo) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{4}
}

func (m *ASInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ASInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ASInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ASInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ASInfo) GetAsn() string {
	if m != nil {
		return m.Asn
	}
	return ""
}

func (m *ASInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ASInfo) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ASInfo) GetRoutes() []string {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *ASInfo) GetAsnType() string {
	if m != nil {
		return m.AsnType
	}
	return ""
}

func (m *ASInfo) SetAsn(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Asn", "ASInfo"))
	}
	m.Asn = fv
}

func (m *ASInfo) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ASInfo"))
	}
	m.Name = fv
}

func (m *ASInfo) SetDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Domain", "ASInfo"))
	}
	m.Domain = fv
}

func (m *ASInfo) SetRoutes(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Routes", "ASInfo"))
	}
	m.Routes = fv
}

func (m *ASInfo) SetAsnType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsnType", "ASInfo"))
	}
	m.AsnType = fv
}

type Carrier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Mobile network carrier name example AT&T
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Mobile country code example 214
	MobileCountryCode string `protobuf:"bytes,2,opt,name=mobile_country_code,json=mobileCountryCode,proto3" json:"mobile_country_code,omitempty" firestore:"mobileCountryCode"`
	// Mobile network code example 7
	MobileNetworkCode string `protobuf:"bytes,3,opt,name=mobile_network_code,json=mobileNetworkCode,proto3" json:"mobile_network_code,omitempty" firestore:"mobileNetworkCode"`
	// Mobile location area code example 2862
	LocationAreaCode string `protobuf:"bytes,4,opt,name=location_area_code,json=locationAreaCode,proto3" json:"location_area_code,omitempty" firestore:"locationAreaCode"`
}

func (m *Carrier) Reset() {
	*m = Carrier{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Carrier) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Carrier) ProtoMessage() {}

func (m *Carrier) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Carrier) GotenMessage() {}

// Deprecated, Use Carrier.ProtoReflect.Descriptor instead.
func (*Carrier) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{5}
}

func (m *Carrier) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Carrier) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Carrier) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Carrier) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Carrier) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Carrier) GetMobileCountryCode() string {
	if m != nil {
		return m.MobileCountryCode
	}
	return ""
}

func (m *Carrier) GetMobileNetworkCode() string {
	if m != nil {
		return m.MobileNetworkCode
	}
	return ""
}

func (m *Carrier) GetLocationAreaCode() string {
	if m != nil {
		return m.LocationAreaCode
	}
	return ""
}

func (m *Carrier) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Carrier"))
	}
	m.Name = fv
}

func (m *Carrier) SetMobileCountryCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MobileCountryCode", "Carrier"))
	}
	m.MobileCountryCode = fv
}

func (m *Carrier) SetMobileNetworkCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MobileNetworkCode", "Carrier"))
	}
	m.MobileNetworkCode = fv
}

func (m *Carrier) SetLocationAreaCode(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocationAreaCode", "Carrier"))
	}
	m.LocationAreaCode = fv
}

type LocationDiscoverySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Location discovery type - use PREFER_PRIMARY if unspecified
	Type LocationDiscoverySpec_Type `protobuf:"varint,3,opt,name=type,proto3,enum=ntt.watchdog.v1alpha2.LocationDiscoverySpec_Type" json:"type,omitempty" firestore:"type"`
	// Discovered address won't be reported as Active, unless accuracy value is
	// below or equal to this threshold When it's not set, 100m is used.
	RequiredAccuracy float64 `protobuf:"fixed64,2,opt,name=required_accuracy,json=requiredAccuracy,proto3" json:"required_accuracy,omitempty" firestore:"requiredAccuracy"`
}

func (m *LocationDiscoverySpec) Reset() {
	*m = LocationDiscoverySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LocationDiscoverySpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LocationDiscoverySpec) ProtoMessage() {}

func (m *LocationDiscoverySpec) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LocationDiscoverySpec) GotenMessage() {}

// Deprecated, Use LocationDiscoverySpec.ProtoReflect.Descriptor instead.
func (*LocationDiscoverySpec) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{6}
}

func (m *LocationDiscoverySpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LocationDiscoverySpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LocationDiscoverySpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LocationDiscoverySpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LocationDiscoverySpec) GetType() LocationDiscoverySpec_Type {
	if m != nil {
		return m.Type
	}
	return LocationDiscoverySpec_TYPE_UNSPECIFIED
}

func (m *LocationDiscoverySpec) GetRequiredAccuracy() float64 {
	if m != nil {
		return m.RequiredAccuracy
	}
	return float64(0)
}

func (m *LocationDiscoverySpec) SetType(fv LocationDiscoverySpec_Type) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "LocationDiscoverySpec"))
	}
	m.Type = fv
}

func (m *LocationDiscoverySpec) SetRequiredAccuracy(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequiredAccuracy", "LocationDiscoverySpec"))
	}
	m.RequiredAccuracy = fv
}

// ProbingConstraints provides definition for per-target or per-distribution
// configuration
type ProbingConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Limits distribution of probing targets not to exceed given sample size in
	// location. Zero values are ignored.
	MaxSessionsPerAgentLocation *ProbingConstraint_AdminHierachy `protobuf:"bytes,1,opt,name=max_sessions_per_agent_location,json=maxSessionsPerAgentLocation,proto3" json:"max_sessions_per_agent_location,omitempty" firestore:"maxSessionsPerAgentLocation"`
	// Limits number of sessions from same ip address (to avoid blacklisting).
	// Zero is ignored.
	MaxSessionsPerAgentPublicIpAddress int32 `protobuf:"varint,2,opt,name=max_sessions_per_agent_public_ip_address,json=maxSessionsPerAgentPublicIpAddress,proto3" json:"max_sessions_per_agent_public_ip_address,omitempty" firestore:"maxSessionsPerAgentPublicIpAddress"`
}

func (m *ProbingConstraint) Reset() {
	*m = ProbingConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingConstraint) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingConstraint) ProtoMessage() {}

func (m *ProbingConstraint) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingConstraint) GotenMessage() {}

// Deprecated, Use ProbingConstraint.ProtoReflect.Descriptor instead.
func (*ProbingConstraint) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{7}
}

func (m *ProbingConstraint) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingConstraint) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingConstraint) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingConstraint) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingConstraint) GetMaxSessionsPerAgentLocation() *ProbingConstraint_AdminHierachy {
	if m != nil {
		return m.MaxSessionsPerAgentLocation
	}
	return nil
}

func (m *ProbingConstraint) GetMaxSessionsPerAgentPublicIpAddress() int32 {
	if m != nil {
		return m.MaxSessionsPerAgentPublicIpAddress
	}
	return int32(0)
}

func (m *ProbingConstraint) SetMaxSessionsPerAgentLocation(fv *ProbingConstraint_AdminHierachy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxSessionsPerAgentLocation", "ProbingConstraint"))
	}
	m.MaxSessionsPerAgentLocation = fv
}

func (m *ProbingConstraint) SetMaxSessionsPerAgentPublicIpAddress(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxSessionsPerAgentPublicIpAddress", "ProbingConstraint"))
	}
	m.MaxSessionsPerAgentPublicIpAddress = fv
}

// Path Tracing settings
type PathProbe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Enabled       bool        `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	Mode          ProbingMode `protobuf:"varint,2,opt,name=mode,proto3,enum=ntt.watchdog.v1alpha2.ProbingMode" json:"mode,omitempty" firestore:"mode"`
	// interval
	Interval *duration.Duration `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// (deprecated) interval in seconds
	IntervalSec int64                 `protobuf:"varint,3,opt,name=interval_sec,json=intervalSec,proto3" json:"interval_sec,omitempty" firestore:"intervalSec"`
	Attempts    *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=attempts,proto3" json:"attempts,omitempty" firestore:"attempts"`
	MaxTtl      *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=max_ttl,json=maxTtl,proto3" json:"max_ttl,omitempty" firestore:"maxTtl"`
}

func (m *PathProbe) Reset() {
	*m = PathProbe{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PathProbe) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PathProbe) ProtoMessage() {}

func (m *PathProbe) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PathProbe) GotenMessage() {}

// Deprecated, Use PathProbe.ProtoReflect.Descriptor instead.
func (*PathProbe) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{8}
}

func (m *PathProbe) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PathProbe) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PathProbe) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PathProbe) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PathProbe) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *PathProbe) GetMode() ProbingMode {
	if m != nil {
		return m.Mode
	}
	return ProbingMode_PROBING_MODE_UNSPECIFIED
}

func (m *PathProbe) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *PathProbe) GetIntervalSec() int64 {
	if m != nil {
		return m.IntervalSec
	}
	return int64(0)
}

func (m *PathProbe) GetAttempts() *wrappers.UInt32Value {
	if m != nil {
		return m.Attempts
	}
	return nil
}

func (m *PathProbe) GetMaxTtl() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxTtl
	}
	return nil
}

func (m *PathProbe) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "PathProbe"))
	}
	m.Enabled = fv
}

func (m *PathProbe) SetMode(fv ProbingMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "PathProbe"))
	}
	m.Mode = fv
}

func (m *PathProbe) SetInterval(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "PathProbe"))
	}
	m.Interval = fv
}

func (m *PathProbe) SetIntervalSec(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IntervalSec", "PathProbe"))
	}
	m.IntervalSec = fv
}

func (m *PathProbe) SetAttempts(fv *wrappers.UInt32Value) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Attempts", "PathProbe"))
	}
	m.Attempts = fv
}

func (m *PathProbe) SetMaxTtl(fv *wrappers.UInt32Value) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MaxTtl", "PathProbe"))
	}
	m.MaxTtl = fv
}

// ProbingSetting contains optional config per target
type ProbingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// probing interval (optional). If not specified, default target interval is
	// used. minimal allowed interval is 100ms, default value is 30s.
	Interval *duration.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// TOS for ipv4 or Traffic class for ipv6.
	Tos *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=tos,proto3" json:"tos,omitempty" firestore:"tos"`
	// if present overrides target window_size.
	WindowSize *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty" firestore:"windowSize"`
	// Path probing settings.
	PathProbing *PathProbe `protobuf:"bytes,4,opt,name=path_probing,json=pathProbing,proto3" json:"path_probing,omitempty" firestore:"pathProbing"`
	// Speedtest settings
	SpeeedtestSettings *SpeedTestSettings `protobuf:"bytes,5,opt,name=speeedtest_settings,json=speeedtestSettings,proto3" json:"speeedtest_settings,omitempty" firestore:"speeedtestSettings"`
	// HTTP Probing Settings
	HttpProbingConfig  *HTTPProbingConfig  `protobuf:"bytes,6,opt,name=http_probing_config,json=httpProbingConfig,proto3" json:"http_probing_config,omitempty" firestore:"httpProbingConfig"`
	ProxyConfiguration *ProxyConfiguration `protobuf:"bytes,7,opt,name=proxy_configuration,json=proxyConfiguration,proto3" json:"proxy_configuration,omitempty" firestore:"proxyConfiguration"`
}

func (m *ProbingSettings) Reset() {
	*m = ProbingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingSettings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingSettings) ProtoMessage() {}

func (m *ProbingSettings) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingSettings) GotenMessage() {}

// Deprecated, Use ProbingSettings.ProtoReflect.Descriptor instead.
func (*ProbingSettings) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{9}
}

func (m *ProbingSettings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingSettings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingSettings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingSettings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingSettings) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ProbingSettings) GetTos() *wrappers.UInt32Value {
	if m != nil {
		return m.Tos
	}
	return nil
}

func (m *ProbingSettings) GetWindowSize() *wrappers.UInt32Value {
	if m != nil {
		return m.WindowSize
	}
	return nil
}

func (m *ProbingSettings) GetPathProbing() *PathProbe {
	if m != nil {
		return m.PathProbing
	}
	return nil
}

func (m *ProbingSettings) GetSpeeedtestSettings() *SpeedTestSettings {
	if m != nil {
		return m.SpeeedtestSettings
	}
	return nil
}

func (m *ProbingSettings) GetHttpProbingConfig() *HTTPProbingConfig {
	if m != nil {
		return m.HttpProbingConfig
	}
	return nil
}

func (m *ProbingSettings) GetProxyConfiguration() *ProxyConfiguration {
	if m != nil {
		return m.ProxyConfiguration
	}
	return nil
}

func (m *ProbingSettings) SetInterval(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "ProbingSettings"))
	}
	m.Interval = fv
}

func (m *ProbingSettings) SetTos(fv *wrappers.UInt32Value) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tos", "ProbingSettings"))
	}
	m.Tos = fv
}

func (m *ProbingSettings) SetWindowSize(fv *wrappers.UInt32Value) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WindowSize", "ProbingSettings"))
	}
	m.WindowSize = fv
}

func (m *ProbingSettings) SetPathProbing(fv *PathProbe) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathProbing", "ProbingSettings"))
	}
	m.PathProbing = fv
}

func (m *ProbingSettings) SetSpeeedtestSettings(fv *SpeedTestSettings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SpeeedtestSettings", "ProbingSettings"))
	}
	m.SpeeedtestSettings = fv
}

func (m *ProbingSettings) SetHttpProbingConfig(fv *HTTPProbingConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpProbingConfig", "ProbingSettings"))
	}
	m.HttpProbingConfig = fv
}

func (m *ProbingSettings) SetProxyConfiguration(fv *ProxyConfiguration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfiguration", "ProbingSettings"))
	}
	m.ProxyConfiguration = fv
}

type ProxyConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	ProxySetting  ProxySetting `protobuf:"varint,1,opt,name=proxy_setting,json=proxySetting,proto3,enum=ntt.watchdog.v1alpha2.ProxySetting" json:"proxy_setting,omitempty" firestore:"proxySetting"`
	HttpProxy     string       `protobuf:"bytes,2,opt,name=http_proxy,json=httpProxy,proto3" json:"http_proxy,omitempty" firestore:"httpProxy"`
	HttpsProxy    string       `protobuf:"bytes,3,opt,name=https_proxy,json=httpsProxy,proto3" json:"https_proxy,omitempty" firestore:"httpsProxy"`
	NoProxy       string       `protobuf:"bytes,4,opt,name=no_proxy,json=noProxy,proto3" json:"no_proxy,omitempty" firestore:"noProxy"`
}

func (m *ProxyConfiguration) Reset() {
	*m = ProxyConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProxyConfiguration) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProxyConfiguration) ProtoMessage() {}

func (m *ProxyConfiguration) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProxyConfiguration) GotenMessage() {}

// Deprecated, Use ProxyConfiguration.ProtoReflect.Descriptor instead.
func (*ProxyConfiguration) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{10}
}

func (m *ProxyConfiguration) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProxyConfiguration) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProxyConfiguration) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProxyConfiguration) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProxyConfiguration) GetProxySetting() ProxySetting {
	if m != nil {
		return m.ProxySetting
	}
	return ProxySetting_USE_SYSTEM_CONFIGURATION
}

func (m *ProxyConfiguration) GetHttpProxy() string {
	if m != nil {
		return m.HttpProxy
	}
	return ""
}

func (m *ProxyConfiguration) GetHttpsProxy() string {
	if m != nil {
		return m.HttpsProxy
	}
	return ""
}

func (m *ProxyConfiguration) GetNoProxy() string {
	if m != nil {
		return m.NoProxy
	}
	return ""
}

func (m *ProxyConfiguration) SetProxySetting(fv ProxySetting) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxySetting", "ProxyConfiguration"))
	}
	m.ProxySetting = fv
}

func (m *ProxyConfiguration) SetHttpProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpProxy", "ProxyConfiguration"))
	}
	m.HttpProxy = fv
}

func (m *ProxyConfiguration) SetHttpsProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpsProxy", "ProxyConfiguration"))
	}
	m.HttpsProxy = fv
}

func (m *ProxyConfiguration) SetNoProxy(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NoProxy", "ProxyConfiguration"))
	}
	m.NoProxy = fv
}

// WLAN
type WLAN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Mac           string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty" firestore:"mac"`
	Signal        int32  `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,omitempty" firestore:"signal"`
}

func (m *WLAN) Reset() {
	*m = WLAN{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *WLAN) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*WLAN) ProtoMessage() {}

func (m *WLAN) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*WLAN) GotenMessage() {}

// Deprecated, Use WLAN.ProtoReflect.Descriptor instead.
func (*WLAN) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{11}
}

func (m *WLAN) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *WLAN) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *WLAN) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *WLAN) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *WLAN) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *WLAN) GetSignal() int32 {
	if m != nil {
		return m.Signal
	}
	return int32(0)
}

func (m *WLAN) SetMac(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mac", "WLAN"))
	}
	m.Mac = fv
}

func (m *WLAN) SetSignal(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Signal", "WLAN"))
	}
	m.Signal = fv
}

type SpeedTestSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Duration for the speedtest. 0 implies default which is 10 seconds for NDT
	Duration *duration.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty" firestore:"duration"`
	// Use tls or unencrypted. Default mode is to run unencrypted
	UseTls          bool                              `protobuf:"varint,2,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty" firestore:"useTls"`
	ServerSelection SpeedTestSettings_ServerSelection `protobuf:"varint,3,opt,name=server_selection,json=serverSelection,proto3,enum=ntt.watchdog.v1alpha2.SpeedTestSettings_ServerSelection" json:"server_selection,omitempty" firestore:"serverSelection"`
}

func (m *SpeedTestSettings) Reset() {
	*m = SpeedTestSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SpeedTestSettings) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SpeedTestSettings) ProtoMessage() {}

func (m *SpeedTestSettings) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SpeedTestSettings) GotenMessage() {}

// Deprecated, Use SpeedTestSettings.ProtoReflect.Descriptor instead.
func (*SpeedTestSettings) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{12}
}

func (m *SpeedTestSettings) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SpeedTestSettings) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SpeedTestSettings) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SpeedTestSettings) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SpeedTestSettings) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *SpeedTestSettings) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *SpeedTestSettings) GetServerSelection() SpeedTestSettings_ServerSelection {
	if m != nil {
		return m.ServerSelection
	}
	return SpeedTestSettings_NEAREST
}

func (m *SpeedTestSettings) SetDuration(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Duration", "SpeedTestSettings"))
	}
	m.Duration = fv
}

func (m *SpeedTestSettings) SetUseTls(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UseTls", "SpeedTestSettings"))
	}
	m.UseTls = fv
}

func (m *SpeedTestSettings) SetServerSelection(fv SpeedTestSettings_ServerSelection) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServerSelection", "SpeedTestSettings"))
	}
	m.ServerSelection = fv
}

type HTTPProbingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	HttpRequest   *HTTPProbingConfig_HTTPRequest `protobuf:"bytes,1,opt,name=http_request,json=httpRequest,proto3" json:"http_request,omitempty" firestore:"httpRequest"`
	AuthConfig    *HTTPProbingConfig_HTTPAuth    `protobuf:"bytes,2,opt,name=auth_config,json=authConfig,proto3" json:"auth_config,omitempty" firestore:"authConfig"`
}

func (m *HTTPProbingConfig) Reset() {
	*m = HTTPProbingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HTTPProbingConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HTTPProbingConfig) ProtoMessage() {}

func (m *HTTPProbingConfig) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HTTPProbingConfig) GotenMessage() {}

// Deprecated, Use HTTPProbingConfig.ProtoReflect.Descriptor instead.
func (*HTTPProbingConfig) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{13}
}

func (m *HTTPProbingConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HTTPProbingConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HTTPProbingConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HTTPProbingConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *HTTPProbingConfig) GetHttpRequest() *HTTPProbingConfig_HTTPRequest {
	if m != nil {
		return m.HttpRequest
	}
	return nil
}

func (m *HTTPProbingConfig) GetAuthConfig() *HTTPProbingConfig_HTTPAuth {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (m *HTTPProbingConfig) SetHttpRequest(fv *HTTPProbingConfig_HTTPRequest) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpRequest", "HTTPProbingConfig"))
	}
	m.HttpRequest = fv
}

func (m *HTTPProbingConfig) SetAuthConfig(fv *HTTPProbingConfig_HTTPAuth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuthConfig", "HTTPProbingConfig"))
	}
	m.AuthConfig = fv
}

type ContactInformation_PhoneNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Number        string                       `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty" firestore:"number"`
	Type          ContactInformation_PhoneType `protobuf:"varint,2,opt,name=type,proto3,enum=ntt.watchdog.v1alpha2.ContactInformation_PhoneType" json:"type,omitempty" firestore:"type"`
}

func (m *ContactInformation_PhoneNumber) Reset() {
	*m = ContactInformation_PhoneNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ContactInformation_PhoneNumber) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ContactInformation_PhoneNumber) ProtoMessage() {}

func (m *ContactInformation_PhoneNumber) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ContactInformation_PhoneNumber) GotenMessage() {}

// Deprecated, Use ContactInformation_PhoneNumber.ProtoReflect.Descriptor instead.
func (*ContactInformation_PhoneNumber) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{1, 0}
}

func (m *ContactInformation_PhoneNumber) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ContactInformation_PhoneNumber) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ContactInformation_PhoneNumber) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ContactInformation_PhoneNumber) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ContactInformation_PhoneNumber) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *ContactInformation_PhoneNumber) GetType() ContactInformation_PhoneType {
	if m != nil {
		return m.Type
	}
	return ContactInformation_UNSPECIFIED
}

func (m *ContactInformation_PhoneNumber) SetNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Number", "ContactInformation_PhoneNumber"))
	}
	m.Number = fv
}

func (m *ContactInformation_PhoneNumber) SetType(fv ContactInformation_PhoneType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "ContactInformation_PhoneNumber"))
	}
	m.Type = fv
}

type ProbingConstraint_AdminHierachy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Country       int32 `protobuf:"varint,1,opt,name=country,proto3" json:"country,omitempty" firestore:"country"`
	Admin1        int32 `protobuf:"varint,2,opt,name=admin1,proto3" json:"admin1,omitempty" firestore:"admin1"`
	Admin2        int32 `protobuf:"varint,3,opt,name=admin2,proto3" json:"admin2,omitempty" firestore:"admin2"`
	Admin3        int32 `protobuf:"varint,4,opt,name=admin3,proto3" json:"admin3,omitempty" firestore:"admin3"`
	Admin4        int32 `protobuf:"varint,5,opt,name=admin4,proto3" json:"admin4,omitempty" firestore:"admin4"`
}

func (m *ProbingConstraint_AdminHierachy) Reset() {
	*m = ProbingConstraint_AdminHierachy{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingConstraint_AdminHierachy) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingConstraint_AdminHierachy) ProtoMessage() {}

func (m *ProbingConstraint_AdminHierachy) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingConstraint_AdminHierachy) GotenMessage() {}

// Deprecated, Use ProbingConstraint_AdminHierachy.ProtoReflect.Descriptor instead.
func (*ProbingConstraint_AdminHierachy) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{7, 0}
}

func (m *ProbingConstraint_AdminHierachy) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingConstraint_AdminHierachy) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingConstraint_AdminHierachy) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingConstraint_AdminHierachy) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingConstraint_AdminHierachy) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return int32(0)
}

func (m *ProbingConstraint_AdminHierachy) GetAdmin1() int32 {
	if m != nil {
		return m.Admin1
	}
	return int32(0)
}

func (m *ProbingConstraint_AdminHierachy) GetAdmin2() int32 {
	if m != nil {
		return m.Admin2
	}
	return int32(0)
}

func (m *ProbingConstraint_AdminHierachy) GetAdmin3() int32 {
	if m != nil {
		return m.Admin3
	}
	return int32(0)
}

func (m *ProbingConstraint_AdminHierachy) GetAdmin4() int32 {
	if m != nil {
		return m.Admin4
	}
	return int32(0)
}

func (m *ProbingConstraint_AdminHierachy) SetCountry(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Country", "ProbingConstraint_AdminHierachy"))
	}
	m.Country = fv
}

func (m *ProbingConstraint_AdminHierachy) SetAdmin1(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Admin1", "ProbingConstraint_AdminHierachy"))
	}
	m.Admin1 = fv
}

func (m *ProbingConstraint_AdminHierachy) SetAdmin2(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Admin2", "ProbingConstraint_AdminHierachy"))
	}
	m.Admin2 = fv
}

func (m *ProbingConstraint_AdminHierachy) SetAdmin3(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Admin3", "ProbingConstraint_AdminHierachy"))
	}
	m.Admin3 = fv
}

func (m *ProbingConstraint_AdminHierachy) SetAdmin4(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Admin4", "ProbingConstraint_AdminHierachy"))
	}
	m.Admin4 = fv
}

type HTTPProbingConfig_HTTPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" firestore:"url"`
	// http headers to use in the probe requests as key value pairs
	RequestHeaders       map[string]string                                     `protobuf:"bytes,2,rep,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"requestHeaders"`
	RequestMethod        HTTPRequestMethod                                     `protobuf:"varint,3,opt,name=request_method,json=requestMethod,proto3,enum=ntt.watchdog.v1alpha2.HTTPRequestMethod" json:"request_method,omitempty" firestore:"requestMethod"`
	ExpectedResponseCode uint32                                                `protobuf:"varint,4,opt,name=expected_response_code,json=expectedResponseCode,proto3" json:"expected_response_code,omitempty" firestore:"expectedResponseCode"`
	Timeout              *duration.Duration                                    `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty" firestore:"timeout"`
	RequestBody          string                                                `protobuf:"bytes,6,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty" firestore:"requestBody"`
	AuthenticationMethod AuthenticationMethod                                  `protobuf:"varint,7,opt,name=authentication_method,json=authenticationMethod,proto3,enum=ntt.watchdog.v1alpha2.AuthenticationMethod" json:"authentication_method,omitempty" firestore:"authenticationMethod"`
	UrlFormEncodedBody   map[string]*HTTPProbingConfig_HTTPRequest_StringArray `protobuf:"bytes,8,rep,name=url_form_encoded_body,json=urlFormEncodedBody,proto3" json:"url_form_encoded_body,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"urlFormEncodedBody"`
}

func (m *HTTPProbingConfig_HTTPRequest) Reset() {
	*m = HTTPProbingConfig_HTTPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HTTPProbingConfig_HTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HTTPProbingConfig_HTTPRequest) ProtoMessage() {}

func (m *HTTPProbingConfig_HTTPRequest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HTTPProbingConfig_HTTPRequest) GotenMessage() {}

// Deprecated, Use HTTPProbingConfig_HTTPRequest.ProtoReflect.Descriptor instead.
func (*HTTPProbingConfig_HTTPRequest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{13, 0}
}

func (m *HTTPProbingConfig_HTTPRequest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HTTPProbingConfig_HTTPRequest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HTTPProbingConfig_HTTPRequest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HTTPProbingConfig_HTTPRequest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *HTTPProbingConfig_HTTPRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPProbingConfig_HTTPRequest) GetRequestHeaders() map[string]string {
	if m != nil {
		return m.RequestHeaders
	}
	return nil
}

func (m *HTTPProbingConfig_HTTPRequest) GetRequestMethod() HTTPRequestMethod {
	if m != nil {
		return m.RequestMethod
	}
	return HTTPRequestMethod_GET
}

func (m *HTTPProbingConfig_HTTPRequest) GetExpectedResponseCode() uint32 {
	if m != nil {
		return m.ExpectedResponseCode
	}
	return uint32(0)
}

func (m *HTTPProbingConfig_HTTPRequest) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HTTPProbingConfig_HTTPRequest) GetRequestBody() string {
	if m != nil {
		return m.RequestBody
	}
	return ""
}

func (m *HTTPProbingConfig_HTTPRequest) GetAuthenticationMethod() AuthenticationMethod {
	if m != nil {
		return m.AuthenticationMethod
	}
	return AuthenticationMethod_NO_AUTH
}

func (m *HTTPProbingConfig_HTTPRequest) GetUrlFormEncodedBody() map[string]*HTTPProbingConfig_HTTPRequest_StringArray {
	if m != nil {
		return m.UrlFormEncodedBody
	}
	return nil
}

func (m *HTTPProbingConfig_HTTPRequest) SetUrl(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Url", "HTTPProbingConfig_HTTPRequest"))
	}
	m.Url = fv
}

func (m *HTTPProbingConfig_HTTPRequest) SetRequestHeaders(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestHeaders", "HTTPProbingConfig_HTTPRequest"))
	}
	m.RequestHeaders = fv
}

func (m *HTTPProbingConfig_HTTPRequest) SetRequestMethod(fv HTTPRequestMethod) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestMethod", "HTTPProbingConfig_HTTPRequest"))
	}
	m.RequestMethod = fv
}

func (m *HTTPProbingConfig_HTTPRequest) SetExpectedResponseCode(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExpectedResponseCode", "HTTPProbingConfig_HTTPRequest"))
	}
	m.ExpectedResponseCode = fv
}

func (m *HTTPProbingConfig_HTTPRequest) SetTimeout(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Timeout", "HTTPProbingConfig_HTTPRequest"))
	}
	m.Timeout = fv
}

func (m *HTTPProbingConfig_HTTPRequest) SetRequestBody(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestBody", "HTTPProbingConfig_HTTPRequest"))
	}
	m.RequestBody = fv
}

func (m *HTTPProbingConfig_HTTPRequest) SetAuthenticationMethod(fv AuthenticationMethod) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AuthenticationMethod", "HTTPProbingConfig_HTTPRequest"))
	}
	m.AuthenticationMethod = fv
}

func (m *HTTPProbingConfig_HTTPRequest) SetUrlFormEncodedBody(fv map[string]*HTTPProbingConfig_HTTPRequest_StringArray) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UrlFormEncodedBody", "HTTPProbingConfig_HTTPRequest"))
	}
	m.UrlFormEncodedBody = fv
}

type HTTPProbingConfig_HTTPAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// For authentication method BASIC
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" firestore:"username"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" firestore:"password"`
	// For EXTERNAL_TOKEN_REQUEST
	TokenRequest *HTTPProbingConfig_HTTPRequest `protobuf:"bytes,3,opt,name=token_request,json=tokenRequest,proto3" json:"token_request,omitempty" firestore:"tokenRequest"`
	// For EXTERNAL_TOKEN_REQUEST, Header name where the token response is
	// available
	TokenResponseHeader string `protobuf:"bytes,4,opt,name=token_response_header,json=tokenResponseHeader,proto3" json:"token_response_header,omitempty" firestore:"tokenResponseHeader"`
	// For EXTERNAL_TOKEN_REQUEST, Json key where the token response is
	// available. For nested keys use a.b.c This or token_response_header needs
	// to be provided for EXTERNAL_TOKEN_REQUEST
	TokenResponseBodyKey string `protobuf:"bytes,5,opt,name=token_response_body_key,json=tokenResponseBodyKey,proto3" json:"token_response_body_key,omitempty" firestore:"tokenResponseBodyKey"`
	// For EXTERNAL_TOKEN_REQUEST, specifies the header to use for sending token
	RequestHeaderTokenKey string `protobuf:"bytes,6,opt,name=request_header_token_key,json=requestHeaderTokenKey,proto3" json:"request_header_token_key,omitempty" firestore:"requestHeaderTokenKey"`
	// For EXTERNAL_TOKEN_REQUEST, specifies the response body json key that
	// holds token expiry
	TokenResponseBodyExpiryKey string `protobuf:"bytes,7,opt,name=token_response_body_expiry_key,json=tokenResponseBodyExpiryKey,proto3" json:"token_response_body_expiry_key,omitempty" firestore:"tokenResponseBodyExpiryKey"`
}

func (m *HTTPProbingConfig_HTTPAuth) Reset() {
	*m = HTTPProbingConfig_HTTPAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HTTPProbingConfig_HTTPAuth) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HTTPProbingConfig_HTTPAuth) ProtoMessage() {}

func (m *HTTPProbingConfig_HTTPAuth) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HTTPProbingConfig_HTTPAuth) GotenMessage() {}

// Deprecated, Use HTTPProbingConfig_HTTPAuth.ProtoReflect.Descriptor instead.
func (*HTTPProbingConfig_HTTPAuth) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{13, 1}
}

func (m *HTTPProbingConfig_HTTPAuth) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HTTPProbingConfig_HTTPAuth) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HTTPProbingConfig_HTTPAuth) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HTTPProbingConfig_HTTPAuth) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *HTTPProbingConfig_HTTPAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *HTTPProbingConfig_HTTPAuth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *HTTPProbingConfig_HTTPAuth) GetTokenRequest() *HTTPProbingConfig_HTTPRequest {
	if m != nil {
		return m.TokenRequest
	}
	return nil
}

func (m *HTTPProbingConfig_HTTPAuth) GetTokenResponseHeader() string {
	if m != nil {
		return m.TokenResponseHeader
	}
	return ""
}

func (m *HTTPProbingConfig_HTTPAuth) GetTokenResponseBodyKey() string {
	if m != nil {
		return m.TokenResponseBodyKey
	}
	return ""
}

func (m *HTTPProbingConfig_HTTPAuth) GetRequestHeaderTokenKey() string {
	if m != nil {
		return m.RequestHeaderTokenKey
	}
	return ""
}

func (m *HTTPProbingConfig_HTTPAuth) GetTokenResponseBodyExpiryKey() string {
	if m != nil {
		return m.TokenResponseBodyExpiryKey
	}
	return ""
}

func (m *HTTPProbingConfig_HTTPAuth) SetUsername(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Username", "HTTPProbingConfig_HTTPAuth"))
	}
	m.Username = fv
}

func (m *HTTPProbingConfig_HTTPAuth) SetPassword(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Password", "HTTPProbingConfig_HTTPAuth"))
	}
	m.Password = fv
}

func (m *HTTPProbingConfig_HTTPAuth) SetTokenRequest(fv *HTTPProbingConfig_HTTPRequest) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TokenRequest", "HTTPProbingConfig_HTTPAuth"))
	}
	m.TokenRequest = fv
}

func (m *HTTPProbingConfig_HTTPAuth) SetTokenResponseHeader(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TokenResponseHeader", "HTTPProbingConfig_HTTPAuth"))
	}
	m.TokenResponseHeader = fv
}

func (m *HTTPProbingConfig_HTTPAuth) SetTokenResponseBodyKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TokenResponseBodyKey", "HTTPProbingConfig_HTTPAuth"))
	}
	m.TokenResponseBodyKey = fv
}

func (m *HTTPProbingConfig_HTTPAuth) SetRequestHeaderTokenKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequestHeaderTokenKey", "HTTPProbingConfig_HTTPAuth"))
	}
	m.RequestHeaderTokenKey = fv
}

func (m *HTTPProbingConfig_HTTPAuth) SetTokenResponseBodyExpiryKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TokenResponseBodyExpiryKey", "HTTPProbingConfig_HTTPAuth"))
	}
	m.TokenResponseBodyExpiryKey = fv
}

type HTTPProbingConfig_HTTPRequest_StringArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Value         []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" firestore:"value"`
}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) Reset() {
	*m = HTTPProbingConfig_HTTPRequest_StringArray{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*HTTPProbingConfig_HTTPRequest_StringArray) ProtoMessage() {}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*HTTPProbingConfig_HTTPRequest_StringArray) GotenMessage() {}

// Deprecated, Use HTTPProbingConfig_HTTPRequest_StringArray.ProtoReflect.Descriptor instead.
func (*HTTPProbingConfig_HTTPRequest_StringArray) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_common_proto_rawDescGZIP(), []int{13, 0, 1}
}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *HTTPProbingConfig_HTTPRequest_StringArray) SetValue(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "HTTPProbingConfig_HTTPRequest_StringArray"))
	}
	m.Value = fv
}

var watchdog_proto_v1alpha2_common_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_common_proto_rawDesc = []byte{
	0x0a, 0x24, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67,
	0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xe0, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xe2, 0xde, 0x21, 0x0c,
	0x08, 0x04, 0x22, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0xca, 0xc6, 0x27, 0x06,
	0x2a, 0x04, 0x52, 0x02, 0x58, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4d, 0x0a,
	0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x1a, 0x6e, 0x0a, 0x0b,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x09,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f,
	0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x03, 0x22, 0xb0, 0x02, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x72,
	0x65, 0x61, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x72, 0x65, 0x61, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x41, 0x72, 0x65, 0x61, 0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x72, 0x65, 0x61, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x72, 0x65, 0x61, 0x34, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe7, 0x01,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x48, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x79, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x48, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x0b,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x06, 0x41, 0x53, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x73, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xe2, 0xde, 0x21, 0x0c, 0x08, 0x02, 0x22, 0x08, 0x6c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x22, 0x59, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4d,
	0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0xf3, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x63, 0x68, 0x79, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x28, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x89, 0x01, 0x0a,
	0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x63, 0x68, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x31,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x33,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x34, 0x22, 0xce, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x5a, 0x06, 0x08, 0x01, 0x32,
	0x02, 0x08, 0x3c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x12, 0x44, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x1a, 0x04, 0x1a, 0x02, 0x08, 0x40, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x1a, 0x04, 0x1a, 0x02, 0x08,
	0x40, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x54, 0x74, 0x6c, 0x22, 0xa9, 0x04, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0xca, 0xc6, 0x27, 0x09,
	0x5a, 0x07, 0x32, 0x05, 0x10, 0x80, 0xc2, 0xd7, 0x2f, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b,
	0xca, 0xc6, 0x27, 0x07, 0x1a, 0x05, 0x1a, 0x03, 0x08, 0xff, 0x01, 0x52, 0x03, 0x74, 0x6f, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x43, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x65, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x73, 0x70, 0x65,
	0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x58, 0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x22, 0x30, 0x0a, 0x04, 0x57, 0x4c, 0x41, 0x4e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x22, 0xf1, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x41, 0x52, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x22, 0x91, 0x0b, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a,
	0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x41, 0x75, 0x74, 0x68, 0x52, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xc6, 0x06, 0x0a, 0x0b, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x71, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x60,
	0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x14, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x7f, 0x0a, 0x15, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x72, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x75,
	0x72, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x64,
	0x79, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x23, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x87, 0x01, 0x0a, 0x17, 0x55, 0x72,
	0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x42, 0x6f, 0x64, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x85, 0x03, 0x0a, 0x08, 0x48, 0x54, 0x54, 0x50, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x37,
	0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x2a, 0x3b, 0x0a, 0x09, 0x49,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x42, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x05, 0x2a, 0x62, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x55,
	0x53, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a,
	0x50, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x59, 0x43, 0x41, 0x53, 0x54, 0x10,
	0x03, 0x2a, 0x3b, 0x0a, 0x11, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x4a,
	0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x42, 0x63, 0xe8, 0xde, 0x21, 0x01,
	0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x50, 0x01,
	0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_common_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_common_proto_rawDescData = watchdog_proto_v1alpha2_common_proto_rawDesc
)

func watchdog_proto_v1alpha2_common_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_common_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_common_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_common_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_common_proto_rawDescData
}

var watchdog_proto_v1alpha2_common_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var watchdog_proto_v1alpha2_common_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var watchdog_proto_v1alpha2_common_proto_goTypes = []interface{}{
	(IpVersion)(0),                                    // 0: ntt.watchdog.v1alpha2.IpVersion
	(ProbingMode)(0),                                  // 1: ntt.watchdog.v1alpha2.ProbingMode
	(ProxySetting)(0),                                 // 2: ntt.watchdog.v1alpha2.ProxySetting
	(LocationType)(0),                                 // 3: ntt.watchdog.v1alpha2.LocationType
	(HTTPRequestMethod)(0),                            // 4: ntt.watchdog.v1alpha2.HTTPRequestMethod
	(AuthenticationMethod)(0),                         // 5: ntt.watchdog.v1alpha2.AuthenticationMethod
	(ContactInformation_PhoneType)(0),                 // 6: ntt.watchdog.v1alpha2.ContactInformation_PhoneType
	(LocationDiscoverySpec_Type)(0),                   // 7: ntt.watchdog.v1alpha2.LocationDiscoverySpec_Type
	(SpeedTestSettings_ServerSelection)(0),            // 8: ntt.watchdog.v1alpha2.SpeedTestSettings_ServerSelection
	(*SoftwareVersion)(nil),                           // 9: ntt.watchdog.v1alpha2.SoftwareVersion
	(*ContactInformation)(nil),                        // 10: ntt.watchdog.v1alpha2.ContactInformation
	(*Address)(nil),                                   // 11: ntt.watchdog.v1alpha2.Address
	(*Location)(nil),                                  // 12: ntt.watchdog.v1alpha2.Location
	(*ASInfo)(nil),                                    // 13: ntt.watchdog.v1alpha2.ASInfo
	(*Carrier)(nil),                                   // 14: ntt.watchdog.v1alpha2.Carrier
	(*LocationDiscoverySpec)(nil),                     // 15: ntt.watchdog.v1alpha2.LocationDiscoverySpec
	(*ProbingConstraint)(nil),                         // 16: ntt.watchdog.v1alpha2.ProbingConstraint
	(*PathProbe)(nil),                                 // 17: ntt.watchdog.v1alpha2.PathProbe
	(*ProbingSettings)(nil),                           // 18: ntt.watchdog.v1alpha2.ProbingSettings
	(*ProxyConfiguration)(nil),                        // 19: ntt.watchdog.v1alpha2.ProxyConfiguration
	(*WLAN)(nil),                                      // 20: ntt.watchdog.v1alpha2.WLAN
	(*SpeedTestSettings)(nil),                         // 21: ntt.watchdog.v1alpha2.SpeedTestSettings
	(*HTTPProbingConfig)(nil),                         // 22: ntt.watchdog.v1alpha2.HTTPProbingConfig
	(*ContactInformation_PhoneNumber)(nil),            // 23: ntt.watchdog.v1alpha2.ContactInformation.PhoneNumber
	(*ProbingConstraint_AdminHierachy)(nil),           // 24: ntt.watchdog.v1alpha2.ProbingConstraint.AdminHierachy
	(*HTTPProbingConfig_HTTPRequest)(nil),             // 25: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest
	(*HTTPProbingConfig_HTTPAuth)(nil),                // 26: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPAuth
	nil,                                               // 27: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.RequestHeadersEntry
	(*HTTPProbingConfig_HTTPRequest_StringArray)(nil), // 28: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.StringArray
	nil,                               // 29: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.UrlFormEncodedBodyEntry
	(*admin_area.AdminHierarchy)(nil), // 30: ntt.watchdog.v1alpha2.AdminHierarchy
	(*latlng.LatLng)(nil),             // 31: google.type.LatLng
	(*duration.Duration)(nil),         // 32: google.protobuf.Duration
	(*wrappers.UInt32Value)(nil),      // 33: google.protobuf.UInt32Value
}
var watchdog_proto_v1alpha2_common_proto_depIdxs = []int32{
	23, // 0: ntt.watchdog.v1alpha2.ContactInformation.phones:type_name -> ntt.watchdog.v1alpha2.ContactInformation.PhoneNumber
	11, // 1: ntt.watchdog.v1alpha2.Location.address:type_name -> ntt.watchdog.v1alpha2.Address
	30, // 2: ntt.watchdog.v1alpha2.Location.admin_hierarchy:type_name -> ntt.watchdog.v1alpha2.AdminHierarchy
	31, // 3: ntt.watchdog.v1alpha2.Location.coordinates:type_name -> google.type.LatLng
	7,  // 4: ntt.watchdog.v1alpha2.LocationDiscoverySpec.type:type_name -> ntt.watchdog.v1alpha2.LocationDiscoverySpec_Type
	24, // 5: ntt.watchdog.v1alpha2.ProbingConstraint.max_sessions_per_agent_location:type_name -> ntt.watchdog.v1alpha2.ProbingConstraint.AdminHierachy
	1,  // 6: ntt.watchdog.v1alpha2.PathProbe.mode:type_name -> ntt.watchdog.v1alpha2.ProbingMode
	32, // 7: ntt.watchdog.v1alpha2.PathProbe.interval:type_name -> google.protobuf.Duration
	33, // 8: ntt.watchdog.v1alpha2.PathProbe.attempts:type_name -> google.protobuf.UInt32Value
	33, // 9: ntt.watchdog.v1alpha2.PathProbe.max_ttl:type_name -> google.protobuf.UInt32Value
	32, // 10: ntt.watchdog.v1alpha2.ProbingSettings.interval:type_name -> google.protobuf.Duration
	33, // 11: ntt.watchdog.v1alpha2.ProbingSettings.tos:type_name -> google.protobuf.UInt32Value
	33, // 12: ntt.watchdog.v1alpha2.ProbingSettings.window_size:type_name -> google.protobuf.UInt32Value
	17, // 13: ntt.watchdog.v1alpha2.ProbingSettings.path_probing:type_name -> ntt.watchdog.v1alpha2.PathProbe
	21, // 14: ntt.watchdog.v1alpha2.ProbingSettings.speeedtest_settings:type_name -> ntt.watchdog.v1alpha2.SpeedTestSettings
	22, // 15: ntt.watchdog.v1alpha2.ProbingSettings.http_probing_config:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig
	19, // 16: ntt.watchdog.v1alpha2.ProbingSettings.proxy_configuration:type_name -> ntt.watchdog.v1alpha2.ProxyConfiguration
	2,  // 17: ntt.watchdog.v1alpha2.ProxyConfiguration.proxy_setting:type_name -> ntt.watchdog.v1alpha2.ProxySetting
	32, // 18: ntt.watchdog.v1alpha2.SpeedTestSettings.duration:type_name -> google.protobuf.Duration
	8,  // 19: ntt.watchdog.v1alpha2.SpeedTestSettings.server_selection:type_name -> ntt.watchdog.v1alpha2.SpeedTestSettings_ServerSelection
	25, // 20: ntt.watchdog.v1alpha2.HTTPProbingConfig.http_request:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest
	26, // 21: ntt.watchdog.v1alpha2.HTTPProbingConfig.auth_config:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPAuth
	6,  // 22: ntt.watchdog.v1alpha2.ContactInformation.PhoneNumber.type:type_name -> ntt.watchdog.v1alpha2.ContactInformation_PhoneType
	27, // 23: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.request_headers:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.RequestHeadersEntry
	4,  // 24: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.request_method:type_name -> ntt.watchdog.v1alpha2.HTTPRequestMethod
	32, // 25: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.timeout:type_name -> google.protobuf.Duration
	5,  // 26: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.authentication_method:type_name -> ntt.watchdog.v1alpha2.AuthenticationMethod
	29, // 27: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.url_form_encoded_body:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.UrlFormEncodedBodyEntry
	25, // 28: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPAuth.token_request:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest
	28, // 29: ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.UrlFormEncodedBodyEntry.value:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig.HTTPRequest.StringArray
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_common_proto_init() }
func watchdog_proto_v1alpha2_common_proto_init() {
	if watchdog_proto_v1alpha2_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Carrier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationDiscoverySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathProbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WLAN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeedTestSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPProbingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInformation_PhoneNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingConstraint_AdminHierachy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPProbingConfig_HTTPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPProbingConfig_HTTPAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPProbingConfig_HTTPRequest_StringArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_common_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_common_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_common_proto_depIdxs,
		EnumInfos:         watchdog_proto_v1alpha2_common_proto_enumTypes,
		MessageInfos:      watchdog_proto_v1alpha2_common_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_common_proto = out.File
	watchdog_proto_v1alpha2_common_proto_rawDesc = nil
	watchdog_proto_v1alpha2_common_proto_goTypes = nil
	watchdog_proto_v1alpha2_common_proto_depIdxs = nil
}
