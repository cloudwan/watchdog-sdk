// Code generated by protoc-gen-goten-validate
// File: watchdog/proto/v1alpha2/common.proto
// DO NOT EDIT!!!

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/timestamppb"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = durationpb.Duration{}
	_ = timestamppb.Timestamp{}
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &duration.Duration{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
)

func (obj *SoftwareVersion) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ContactInformation) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if err := gotenvalidate.ValidateEmail(string(obj.Email)); err != nil {
		return gotenvalidate.NewValidationError("ContactInformation", "email", obj.Email, "field must contain a valid email address", err)
	}
	for idx, elem := range obj.Phones {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("ContactInformation", "phones", obj.Phones[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ContactInformation_PhoneNumber) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Address) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Location) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Address).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Location", "address", obj.Address, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AdminHierarchy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Location", "adminHierarchy", obj.AdminHierarchy, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.Coordinates).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Location", "coordinates", obj.Coordinates, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ASInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Carrier) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *LocationDiscoverySpec) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProbingConstraint) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.MaxSessionsPerAgentLocation).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProbingConstraint", "maxSessionsPerAgentLocation", obj.MaxSessionsPerAgentLocation, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProbingConstraint_AdminHierachy) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *PathProbe) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Interval != nil && obj.Interval.CheckValid() != nil {
		err := obj.Interval.CheckValid()
		return gotenvalidate.NewValidationError("PathProbe", "interval", obj.Interval, "could not validate duration", err)
	} else {
		d := obj.Interval.AsDuration()

		if obj.Interval == nil {
			return gotenvalidate.NewValidationError("PathProbe", "interval", d, "field is required", nil)
		}

		if obj.Interval != nil {
			if !(d >= time.Duration(300000000000)) {
				return gotenvalidate.NewValidationError("PathProbe", "interval", d, "field must be greater or equal to 5m0s", nil)
			}
		}
	}
	if obj.Attempts != nil {
		if !(obj.Attempts.GetValue() <= 64) {
			return gotenvalidate.NewValidationError("PathProbe", "attempts", obj.Attempts.GetValue(), "field must be less or equal to 64", nil)
		}
	}
	if obj.MaxTtl != nil {
		if !(obj.MaxTtl.GetValue() <= 64) {
			return gotenvalidate.NewValidationError("PathProbe", "maxTtl", obj.MaxTtl.GetValue(), "field must be less or equal to 64", nil)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProbingSettings) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Interval != nil && obj.Interval.CheckValid() != nil {
		err := obj.Interval.CheckValid()
		return gotenvalidate.NewValidationError("ProbingSettings", "interval", obj.Interval, "could not validate duration", err)
	} else {
		d := obj.Interval.AsDuration()

		if obj.Interval == nil {
			return gotenvalidate.NewValidationError("ProbingSettings", "interval", d, "field is required", nil)
		}

		if obj.Interval != nil {
			if !(d >= time.Duration(100000000)) {
				return gotenvalidate.NewValidationError("ProbingSettings", "interval", d, "field must be greater or equal to 100ms", nil)
			}
		}
	}
	if obj.Tos != nil {
		if !(obj.Tos.GetValue() <= 255) {
			return gotenvalidate.NewValidationError("ProbingSettings", "tos", obj.Tos.GetValue(), "field must be less or equal to 255", nil)
		}
	}
	if subobj, ok := interface{}(obj.PathProbing).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProbingSettings", "pathProbing", obj.PathProbing, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.SpeedtestSettings).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProbingSettings", "speedtestSettings", obj.SpeedtestSettings, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.HttpProbingConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProbingSettings", "httpProbingConfig", obj.HttpProbingConfig, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.ProxyConfiguration).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("ProbingSettings", "proxyConfiguration", obj.ProxyConfiguration, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *ProxyConfiguration) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *WLAN) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *SpeedTestSettings) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if obj.Duration != nil && obj.Duration.CheckValid() != nil {
		err := obj.Duration.CheckValid()
		return gotenvalidate.NewValidationError("SpeedTestSettings", "duration", obj.Duration, "could not validate duration", err)
	} else {
		d := obj.Duration.AsDuration()

		if obj.Duration != nil {
			if !(d >= time.Duration(0) && d <= time.Duration(10000000000)) {
				return gotenvalidate.NewValidationError("SpeedTestSettings", "duration", d, "field must be in range [0s, 10s]", nil)
			}
		}
	}
	if !(obj.TcpPort >= 0 && obj.TcpPort <= 65535) {
		return gotenvalidate.NewValidationError("SpeedTestSettings", "tcpPort", obj.TcpPort, "field must be in range [0, 65535]", nil)
	}
	if !(obj.TlsPort >= 0 && obj.TlsPort <= 65535) {
		return gotenvalidate.NewValidationError("SpeedTestSettings", "tlsPort", obj.TlsPort, "field must be in range [0, 65535]", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *HTTPProbingConfig) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.HttpRequest).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HTTPProbingConfig", "httpRequest", obj.HttpRequest, "nested object validation failed", err)
		}
	}
	if subobj, ok := interface{}(obj.AuthConfig).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HTTPProbingConfig", "authConfig", obj.AuthConfig, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *HTTPProbingConfig_HTTPRequest) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *HTTPProbingConfig_HTTPAuth) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.TokenRequest).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("HTTPAuth", "tokenRequest", obj.TokenRequest, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *HTTPProbingConfig_HTTPRequest_StringArray) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *DNSQuery) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *DNSResourceRecord) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
