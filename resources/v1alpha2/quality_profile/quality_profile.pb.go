// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/quality_profile.proto
// DO NOT EDIT!!!

package quality_profile

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Display Name
	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Optional explanation for this Profile
	Description string          `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	Filter      *Profile_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty" firestore:"filter"`
	// Collection of metric thresholds to describe state of network for this
	// Profile, example:
	MetricThresholds []*Profile_MetricThreshold `protobuf:"bytes,4,rep,name=metric_thresholds,json=metricThresholds,proto3" json:"metric_thresholds,omitempty" firestore:"metricThresholds"`
	// Overrides defines sub-profiles with more specific filters
	// Note: each level filters must be guaranteed to non-overlapping and use more
	// specific filter than its parent Example: Given parent with filter
	// <<locations: <Japan>, targets: <google.com,amazon.com,ntt.com>>, it's ok to
	// specify overrides that slice by Prefecture, Source ISP, like
	// <<locations: <Japan/Tokyo, Japan/Kyoto>, asns: <OCN, Docomo>, targets:
	// <google.com,amazon.com,ntt.com>>; and
	// <<locations: <Japan/Chiba>, asns: <OCN, Softbank>, targets:
	// <google.com,amazon.com,ntt.com>> but not:
	// <<locations: <Japan>, asns: <OCN>, targets:
	// <google.com,amazon.com,ntt.com>>, since it *might* be overlapping OCN
	// filter in Tokyo defined above
	Overrides []*Profile `protobuf:"bytes,8,rep,name=overrides,proto3" json:"overrides,omitempty" firestore:"overrides"`
}

func (m *Profile) Reset() {
	*m = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Profile) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Profile) ProtoMessage() {}

func (m *Profile) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Profile) GotenMessage() {}

// Deprecated, Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_quality_profile_proto_rawDescGZIP(), []int{0}
}

func (m *Profile) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Profile) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Profile) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Profile) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Profile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Profile) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Profile) GetFilter() *Profile_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *Profile) GetMetricThresholds() []*Profile_MetricThreshold {
	if m != nil {
		return m.MetricThresholds
	}
	return nil
}

func (m *Profile) GetOverrides() []*Profile {
	if m != nil {
		return m.Overrides
	}
	return nil
}

func (m *Profile) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Profile"))
	}
	m.DisplayName = fv
}

func (m *Profile) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "Profile"))
	}
	m.Description = fv
}

func (m *Profile) SetFilter(fv *Profile_Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Filter", "Profile"))
	}
	m.Filter = fv
}

func (m *Profile) SetMetricThresholds(fv []*Profile_MetricThreshold) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricThresholds", "Profile"))
	}
	m.MetricThresholds = fv
}

func (m *Profile) SetOverrides(fv []*Profile) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Overrides", "Profile"))
	}
	m.Overrides = fv
}

// QualityProfile Resource
type QualityProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of QualityProfile
	Name          *Name              `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	DisplayName   string             `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	Description   string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" firestore:"description"`
	SourceProject *project.Reference `protobuf:"bytes,4,opt,customtype=Reference,name=source_project,json=sourceProject,proto3" json:"source_project,omitempty" firestore:"sourceProject"`
	// list of root-level profiles.
	Profiles []*Profile `protobuf:"bytes,5,rep,name=profiles,proto3" json:"profiles,omitempty" firestore:"profiles"`
	// Metadata
	Metadata *ntt_meta.Meta `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
}

func (m *QualityProfile) Reset() {
	*m = QualityProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *QualityProfile) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*QualityProfile) ProtoMessage() {}

func (m *QualityProfile) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*QualityProfile) GotenMessage() {}

// Deprecated, Use QualityProfile.ProtoReflect.Descriptor instead.
func (*QualityProfile) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_quality_profile_proto_rawDescGZIP(), []int{1}
}

func (m *QualityProfile) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *QualityProfile) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *QualityProfile) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *QualityProfile) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *QualityProfile) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *QualityProfile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *QualityProfile) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QualityProfile) GetSourceProject() *project.Reference {
	if m != nil {
		return m.SourceProject
	}
	return nil
}

func (m *QualityProfile) GetProfiles() []*Profile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func (m *QualityProfile) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *QualityProfile) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "QualityProfile"))
	}
	m.Name = fv
}

func (m *QualityProfile) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "QualityProfile"))
	}
	m.DisplayName = fv
}

func (m *QualityProfile) SetDescription(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Description", "QualityProfile"))
	}
	m.Description = fv
}

func (m *QualityProfile) SetSourceProject(fv *project.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SourceProject", "QualityProfile"))
	}
	m.SourceProject = fv
}

func (m *QualityProfile) SetProfiles(fv []*Profile) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Profiles", "QualityProfile"))
	}
	m.Profiles = fv
}

func (m *QualityProfile) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "QualityProfile"))
	}
	m.Metadata = fv
}

type Profile_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Country name according to ISO 3166, e.g. "Japan", "United States"
	CountryName string `protobuf:"bytes,1,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty" firestore:"countryName"`
	// Administrative name level 1, e.g. "Chiba" (prefecture), "California"
	// (state)
	AdministrativeAreaLevel1Name string `protobuf:"bytes,2,opt,name=administrative_area_level1_name,json=administrativeAreaLevel1Name,proto3" json:"administrative_area_level1_name,omitempty" firestore:"administrativeAreaLevel1Name"`
	// Administrative name level 2, e.g. "San Mateo" (county) or "Tateyama"
	// (town)
	AdministrativeAreaLevel2Name string `protobuf:"bytes,3,opt,name=administrative_area_level2_name,json=administrativeAreaLevel2Name,proto3" json:"administrative_area_level2_name,omitempty" firestore:"administrativeAreaLevel2Name"`
	// Administrative name level 3, e.g. "Sunnyvale" (city)
	AdministrativeAreaLevel3Name string `protobuf:"bytes,4,opt,name=administrative_area_level3_name,json=administrativeAreaLevel3Name,proto3" json:"administrative_area_level3_name,omitempty" firestore:"administrativeAreaLevel3Name"`
}

func (m *Profile_Location) Reset() {
	*m = Profile_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Profile_Location) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Profile_Location) ProtoMessage() {}

func (m *Profile_Location) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Profile_Location) GotenMessage() {}

// Deprecated, Use Profile_Location.ProtoReflect.Descriptor instead.
func (*Profile_Location) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_quality_profile_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Profile_Location) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Profile_Location) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Profile_Location) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Profile_Location) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Profile_Location) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *Profile_Location) GetAdministrativeAreaLevel1Name() string {
	if m != nil {
		return m.AdministrativeAreaLevel1Name
	}
	return ""
}

func (m *Profile_Location) GetAdministrativeAreaLevel2Name() string {
	if m != nil {
		return m.AdministrativeAreaLevel2Name
	}
	return ""
}

func (m *Profile_Location) GetAdministrativeAreaLevel3Name() string {
	if m != nil {
		return m.AdministrativeAreaLevel3Name
	}
	return ""
}

func (m *Profile_Location) SetCountryName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CountryName", "Profile_Location"))
	}
	m.CountryName = fv
}

func (m *Profile_Location) SetAdministrativeAreaLevel1Name(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdministrativeAreaLevel1Name", "Profile_Location"))
	}
	m.AdministrativeAreaLevel1Name = fv
}

func (m *Profile_Location) SetAdministrativeAreaLevel2Name(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdministrativeAreaLevel2Name", "Profile_Location"))
	}
	m.AdministrativeAreaLevel2Name = fv
}

func (m *Profile_Location) SetAdministrativeAreaLevel3Name(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AdministrativeAreaLevel3Name", "Profile_Location"))
	}
	m.AdministrativeAreaLevel3Name = fv
}

type Profile_Filter struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	SourceLocations []*Profile_Location `protobuf:"bytes,1,rep,name=source_locations,json=sourceLocations,proto3" json:"source_locations,omitempty" firestore:"sourceLocations"`
	SourceAsnNames  []string            `protobuf:"bytes,2,rep,name=source_asn_names,json=sourceAsnNames,proto3" json:"source_asn_names,omitempty" firestore:"sourceAsnNames"`
	Targets         []string            `protobuf:"bytes,3,rep,name=targets,proto3" json:"targets,omitempty" firestore:"targets"`
}

func (m *Profile_Filter) Reset() {
	*m = Profile_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Profile_Filter) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Profile_Filter) ProtoMessage() {}

func (m *Profile_Filter) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Profile_Filter) GotenMessage() {}

// Deprecated, Use Profile_Filter.ProtoReflect.Descriptor instead.
func (*Profile_Filter) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_quality_profile_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Profile_Filter) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Profile_Filter) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Profile_Filter) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Profile_Filter) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Profile_Filter) GetSourceLocations() []*Profile_Location {
	if m != nil {
		return m.SourceLocations
	}
	return nil
}

func (m *Profile_Filter) GetSourceAsnNames() []string {
	if m != nil {
		return m.SourceAsnNames
	}
	return nil
}

func (m *Profile_Filter) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *Profile_Filter) SetSourceLocations(fv []*Profile_Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SourceLocations", "Profile_Filter"))
	}
	m.SourceLocations = fv
}

func (m *Profile_Filter) SetSourceAsnNames(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SourceAsnNames", "Profile_Filter"))
	}
	m.SourceAsnNames = fv
}

func (m *Profile_Filter) SetTargets(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Targets", "Profile_Filter"))
	}
	m.Targets = fv
}

type Profile_MetricThreshold struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// aggregation reducer for selected viewport and filter criteria.
	// common reducers: REDUCE_MEAN, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_99
	AggregationReducer monitoring_common.Aggregation_Reducer `protobuf:"varint,1,opt,name=aggregation_reducer,json=aggregationReducer,proto3,enum=ntt.monitoring.v3.Aggregation_Reducer" json:"aggregation_reducer,omitempty" firestore:"aggregationReducer"`
	// Selected metric type. One of:
	// - watchdog.ntt.com/probe/target/active
	// - watchdog.ntt.com/probe/target/loss
	// - watchdog.ntt.com/probe/target/latency
	// - watchdog.ntt.com/probe/target/jitter
	MetricType string `protobuf:"bytes,2,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty" firestore:"metricType"`
	// Threshold value of reduced metric
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty" firestore:"value"`
}

func (m *Profile_MetricThreshold) Reset() {
	*m = Profile_MetricThreshold{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Profile_MetricThreshold) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Profile_MetricThreshold) ProtoMessage() {}

func (m *Profile_MetricThreshold) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Profile_MetricThreshold) GotenMessage() {}

// Deprecated, Use Profile_MetricThreshold.ProtoReflect.Descriptor instead.
func (*Profile_MetricThreshold) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_quality_profile_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Profile_MetricThreshold) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Profile_MetricThreshold) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Profile_MetricThreshold) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Profile_MetricThreshold) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Profile_MetricThreshold) GetAggregationReducer() monitoring_common.Aggregation_Reducer {
	if m != nil {
		return m.AggregationReducer
	}
	return monitoring_common.Aggregation_REDUCE_NONE
}

func (m *Profile_MetricThreshold) GetMetricType() string {
	if m != nil {
		return m.MetricType
	}
	return ""
}

func (m *Profile_MetricThreshold) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return float64(0)
}

func (m *Profile_MetricThreshold) SetAggregationReducer(fv monitoring_common.Aggregation_Reducer) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AggregationReducer", "Profile_MetricThreshold"))
	}
	m.AggregationReducer = fv
}

func (m *Profile_MetricThreshold) SetMetricType(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MetricType", "Profile_MetricThreshold"))
	}
	m.MetricType = fv
}

func (m *Profile_MetricThreshold) SetValue(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Value", "Profile_MetricThreshold"))
	}
	m.Value = fv
}

var watchdog_proto_v1alpha2_quality_profile_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_quality_profile_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x1a, 0x82, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x31, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x65, 0x61, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x33, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xa0, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x73, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x73, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x0f,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x57, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc7, 0x04, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21,
	0x0b, 0x12, 0x09, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0xa2, 0x02, 0xea, 0x41, 0x5a, 0x0a, 0x22, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x34,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0x5e, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x29, 0x08, 0x02, 0x12, 0x06, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x05, 0xb2, 0xdf, 0x21, 0x0a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74,
	0x56, 0x69, 0x65, 0x77, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0xc2, 0x85, 0x2c, 0x45, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0xe8, 0x03, 0xe8, 0xde, 0x21, 0x01,
	0xd2, 0xff, 0xd0, 0x02, 0x54, 0x0a, 0x15, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x13, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x3b,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0xf2,
	0x85, 0xd1, 0x02, 0x5c, 0x0a, 0x19, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x12,
	0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x64, 0x62,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0xd2, 0x84, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xa2, 0x80, 0xd1, 0x02, 0x56, 0x0a, 0x16,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_quality_profile_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_quality_profile_proto_rawDescData = watchdog_proto_v1alpha2_quality_profile_proto_rawDesc
)

func watchdog_proto_v1alpha2_quality_profile_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_quality_profile_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_quality_profile_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_quality_profile_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_quality_profile_proto_rawDescData
}

var watchdog_proto_v1alpha2_quality_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var watchdog_proto_v1alpha2_quality_profile_proto_goTypes = []interface{}{
	(*Profile)(nil),                            // 0: ntt.watchdog.v1alpha2.Profile
	(*QualityProfile)(nil),                     // 1: ntt.watchdog.v1alpha2.QualityProfile
	(*Profile_Location)(nil),                   // 2: ntt.watchdog.v1alpha2.Profile.Location
	(*Profile_Filter)(nil),                     // 3: ntt.watchdog.v1alpha2.Profile.Filter
	(*Profile_MetricThreshold)(nil),            // 4: ntt.watchdog.v1alpha2.Profile.MetricThreshold
	(monitoring_common.Aggregation_Reducer)(0), // 5: ntt.monitoring.v3.Aggregation_Reducer
	(*ntt_meta.Meta)(nil),                      // 6: ntt.types.Meta
}
var watchdog_proto_v1alpha2_quality_profile_proto_depIdxs = []int32{
	3, // 0: ntt.watchdog.v1alpha2.Profile.filter:type_name -> ntt.watchdog.v1alpha2.Profile.Filter
	4, // 1: ntt.watchdog.v1alpha2.Profile.metric_thresholds:type_name -> ntt.watchdog.v1alpha2.Profile.MetricThreshold
	0, // 2: ntt.watchdog.v1alpha2.Profile.overrides:type_name -> ntt.watchdog.v1alpha2.Profile
	0, // 3: ntt.watchdog.v1alpha2.QualityProfile.profiles:type_name -> ntt.watchdog.v1alpha2.Profile
	6, // 4: ntt.watchdog.v1alpha2.QualityProfile.metadata:type_name -> ntt.types.Meta
	2, // 5: ntt.watchdog.v1alpha2.Profile.Filter.source_locations:type_name -> ntt.watchdog.v1alpha2.Profile.Location
	5, // 6: ntt.watchdog.v1alpha2.Profile.MetricThreshold.aggregation_reducer:type_name -> ntt.monitoring.v3.Aggregation_Reducer
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_quality_profile_proto_init() }
func watchdog_proto_v1alpha2_quality_profile_proto_init() {
	if watchdog_proto_v1alpha2_quality_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_quality_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile_MetricThreshold); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_quality_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_quality_profile_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_quality_profile_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_quality_profile_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_quality_profile_proto = out.File
	watchdog_proto_v1alpha2_quality_profile_proto_rawDesc = nil
	watchdog_proto_v1alpha2_quality_profile_proto_goTypes = nil
	watchdog_proto_v1alpha2_quality_profile_proto_depIdxs = nil
}
