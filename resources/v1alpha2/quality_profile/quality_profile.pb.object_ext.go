// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/quality_profile.proto
// DO NOT EDIT!!!

package quality_profile

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &project.Project{}
)

func (o *Profile) GotenObjectExt() {}

func (o *Profile) MakeFullFieldMask() *Profile_FieldMask {
	return FullProfile_FieldMask()
}

func (o *Profile) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProfile_FieldMask()
}

func (o *Profile) MakeDiffFieldMask(other *Profile) *Profile_FieldMask {
	if o == nil && other == nil {
		return &Profile_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProfile_FieldMask()
	}

	res := &Profile_FieldMask{}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorDescription})
	}
	{
		subMask := o.GetFilter().MakeDiffFieldMask(other.GetFilter())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorFilter})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Profile_FieldSubPath{selector: Profile_FieldPathSelectorFilter, subPath: subpath})
			}
		}
	}

	if len(o.GetMetricThresholds()) == len(other.GetMetricThresholds()) {
		for i, lValue := range o.GetMetricThresholds() {
			rValue := other.GetMetricThresholds()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorMetricThresholds})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorMetricThresholds})
	}

	if len(o.GetOverrides()) == len(other.GetOverrides()) {
		for i, lValue := range o.GetOverrides() {
			rValue := other.GetOverrides()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorOverrides})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorOverrides})
	}
	return res
}

func (o *Profile) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Profile))
}

func (o *Profile) Clone() *Profile {
	if o == nil {
		return nil
	}
	result := &Profile{}
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	result.Filter = o.Filter.Clone()
	result.MetricThresholds = make([]*Profile_MetricThreshold, len(o.MetricThresholds))
	for i, sourceValue := range o.MetricThresholds {
		result.MetricThresholds[i] = sourceValue.Clone()
	}
	result.Overrides = make([]*Profile, len(o.Overrides))
	for i, sourceValue := range o.Overrides {
		result.Overrides[i] = sourceValue.Clone()
	}
	return result
}

func (o *Profile) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Profile) Merge(source *Profile) {
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	if source.GetFilter() != nil {
		if o.Filter == nil {
			o.Filter = new(Profile_Filter)
		}
		o.Filter.Merge(source.GetFilter())
	}
	for _, sourceValue := range source.GetMetricThresholds() {
		exists := false
		for _, currentValue := range o.MetricThresholds {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Profile_MetricThreshold
			if sourceValue != nil {
				newDstElement = new(Profile_MetricThreshold)
				newDstElement.Merge(sourceValue)
			}
			o.MetricThresholds = append(o.MetricThresholds, newDstElement)
		}
	}

	for _, sourceValue := range source.GetOverrides() {
		exists := false
		for _, currentValue := range o.Overrides {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Profile
			if sourceValue != nil {
				newDstElement = new(Profile)
				newDstElement.Merge(sourceValue)
			}
			o.Overrides = append(o.Overrides, newDstElement)
		}
	}

}

func (o *Profile) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Profile))
}

func (o *Profile_Location) GotenObjectExt() {}

func (o *Profile_Location) MakeFullFieldMask() *Profile_Location_FieldMask {
	return FullProfile_Location_FieldMask()
}

func (o *Profile_Location) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProfile_Location_FieldMask()
}

func (o *Profile_Location) MakeDiffFieldMask(other *Profile_Location) *Profile_Location_FieldMask {
	if o == nil && other == nil {
		return &Profile_Location_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProfile_Location_FieldMask()
	}

	res := &Profile_Location_FieldMask{}
	if o.GetCountryName() != other.GetCountryName() {
		res.Paths = append(res.Paths, &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorCountryName})
	}
	if o.GetAdministrativeAreaLevel1Name() != other.GetAdministrativeAreaLevel1Name() {
		res.Paths = append(res.Paths, &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name})
	}
	if o.GetAdministrativeAreaLevel2Name() != other.GetAdministrativeAreaLevel2Name() {
		res.Paths = append(res.Paths, &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name})
	}
	if o.GetAdministrativeAreaLevel3Name() != other.GetAdministrativeAreaLevel3Name() {
		res.Paths = append(res.Paths, &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name})
	}
	return res
}

func (o *Profile_Location) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Profile_Location))
}

func (o *Profile_Location) Clone() *Profile_Location {
	if o == nil {
		return nil
	}
	result := &Profile_Location{}
	result.CountryName = o.CountryName
	result.AdministrativeAreaLevel1Name = o.AdministrativeAreaLevel1Name
	result.AdministrativeAreaLevel2Name = o.AdministrativeAreaLevel2Name
	result.AdministrativeAreaLevel3Name = o.AdministrativeAreaLevel3Name
	return result
}

func (o *Profile_Location) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Profile_Location) Merge(source *Profile_Location) {
	o.CountryName = source.GetCountryName()
	o.AdministrativeAreaLevel1Name = source.GetAdministrativeAreaLevel1Name()
	o.AdministrativeAreaLevel2Name = source.GetAdministrativeAreaLevel2Name()
	o.AdministrativeAreaLevel3Name = source.GetAdministrativeAreaLevel3Name()
}

func (o *Profile_Location) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Profile_Location))
}

func (o *Profile_Filter) GotenObjectExt() {}

func (o *Profile_Filter) MakeFullFieldMask() *Profile_Filter_FieldMask {
	return FullProfile_Filter_FieldMask()
}

func (o *Profile_Filter) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProfile_Filter_FieldMask()
}

func (o *Profile_Filter) MakeDiffFieldMask(other *Profile_Filter) *Profile_Filter_FieldMask {
	if o == nil && other == nil {
		return &Profile_Filter_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProfile_Filter_FieldMask()
	}

	res := &Profile_Filter_FieldMask{}

	if len(o.GetSourceLocations()) == len(other.GetSourceLocations()) {
		for i, lValue := range o.GetSourceLocations() {
			rValue := other.GetSourceLocations()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorSourceLocations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorSourceLocations})
	}

	if len(o.GetSourceAsnNames()) == len(other.GetSourceAsnNames()) {
		for i, lValue := range o.GetSourceAsnNames() {
			rValue := other.GetSourceAsnNames()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorSourceAsnNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorSourceAsnNames})
	}

	if len(o.GetTargets()) == len(other.GetTargets()) {
		for i, lValue := range o.GetTargets() {
			rValue := other.GetTargets()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorTargets})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorTargets})
	}
	return res
}

func (o *Profile_Filter) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Profile_Filter))
}

func (o *Profile_Filter) Clone() *Profile_Filter {
	if o == nil {
		return nil
	}
	result := &Profile_Filter{}
	result.SourceLocations = make([]*Profile_Location, len(o.SourceLocations))
	for i, sourceValue := range o.SourceLocations {
		result.SourceLocations[i] = sourceValue.Clone()
	}
	result.SourceAsnNames = make([]string, len(o.SourceAsnNames))
	for i, sourceValue := range o.SourceAsnNames {
		result.SourceAsnNames[i] = sourceValue
	}
	result.Targets = make([]string, len(o.Targets))
	for i, sourceValue := range o.Targets {
		result.Targets[i] = sourceValue
	}
	return result
}

func (o *Profile_Filter) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Profile_Filter) Merge(source *Profile_Filter) {
	for _, sourceValue := range source.GetSourceLocations() {
		exists := false
		for _, currentValue := range o.SourceLocations {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Profile_Location
			if sourceValue != nil {
				newDstElement = new(Profile_Location)
				newDstElement.Merge(sourceValue)
			}
			o.SourceLocations = append(o.SourceLocations, newDstElement)
		}
	}

	for _, sourceValue := range source.GetSourceAsnNames() {
		exists := false
		for _, currentValue := range o.SourceAsnNames {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.SourceAsnNames = append(o.SourceAsnNames, newDstElement)
		}
	}

	for _, sourceValue := range source.GetTargets() {
		exists := false
		for _, currentValue := range o.Targets {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Targets = append(o.Targets, newDstElement)
		}
	}

}

func (o *Profile_Filter) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Profile_Filter))
}

func (o *Profile_MetricThreshold) GotenObjectExt() {}

func (o *Profile_MetricThreshold) MakeFullFieldMask() *Profile_MetricThreshold_FieldMask {
	return FullProfile_MetricThreshold_FieldMask()
}

func (o *Profile_MetricThreshold) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProfile_MetricThreshold_FieldMask()
}

func (o *Profile_MetricThreshold) MakeDiffFieldMask(other *Profile_MetricThreshold) *Profile_MetricThreshold_FieldMask {
	if o == nil && other == nil {
		return &Profile_MetricThreshold_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProfile_MetricThreshold_FieldMask()
	}

	res := &Profile_MetricThreshold_FieldMask{}
	if o.GetAggregationReducer() != other.GetAggregationReducer() {
		res.Paths = append(res.Paths, &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorAggregationReducer})
	}
	if o.GetMetricType() != other.GetMetricType() {
		res.Paths = append(res.Paths, &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorMetricType})
	}
	if o.GetValue() != other.GetValue() {
		res.Paths = append(res.Paths, &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorValue})
	}
	return res
}

func (o *Profile_MetricThreshold) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Profile_MetricThreshold))
}

func (o *Profile_MetricThreshold) Clone() *Profile_MetricThreshold {
	if o == nil {
		return nil
	}
	result := &Profile_MetricThreshold{}
	result.AggregationReducer = o.AggregationReducer
	result.MetricType = o.MetricType
	result.Value = o.Value
	return result
}

func (o *Profile_MetricThreshold) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Profile_MetricThreshold) Merge(source *Profile_MetricThreshold) {
	o.AggregationReducer = source.GetAggregationReducer()
	o.MetricType = source.GetMetricType()
	o.Value = source.GetValue()
}

func (o *Profile_MetricThreshold) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Profile_MetricThreshold))
}

func (o *QualityProfile) GotenObjectExt() {}

func (o *QualityProfile) MakeFullFieldMask() *QualityProfile_FieldMask {
	return FullQualityProfile_FieldMask()
}

func (o *QualityProfile) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullQualityProfile_FieldMask()
}

func (o *QualityProfile) MakeDiffFieldMask(other *QualityProfile) *QualityProfile_FieldMask {
	if o == nil && other == nil {
		return &QualityProfile_FieldMask{}
	}
	if o == nil || other == nil {
		return FullQualityProfile_FieldMask()
	}

	res := &QualityProfile_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorDisplayName})
	}
	if o.GetDescription() != other.GetDescription() {
		res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorDescription})
	}
	if o.GetSourceProject().String() != other.GetSourceProject().String() {
		res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorSourceProject})
	}

	if len(o.GetProfiles()) == len(other.GetProfiles()) {
		for i, lValue := range o.GetProfiles() {
			rValue := other.GetProfiles()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorProfiles})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorProfiles})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &QualityProfile_FieldSubPath{selector: QualityProfile_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *QualityProfile) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*QualityProfile))
}

func (o *QualityProfile) Clone() *QualityProfile {
	if o == nil {
		return nil
	}
	result := &QualityProfile{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Description = o.Description
	if o.SourceProject == nil {
		result.SourceProject = nil
	} else if data, err := o.SourceProject.ProtoString(); err != nil {
		panic(err)
	} else {
		result.SourceProject = &project.Reference{}
		if err := result.SourceProject.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Profiles = make([]*Profile, len(o.Profiles))
	for i, sourceValue := range o.Profiles {
		result.Profiles[i] = sourceValue.Clone()
	}
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *QualityProfile) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *QualityProfile) Merge(source *QualityProfile) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	o.Description = source.GetDescription()
	if source.GetSourceProject() != nil {
		if data, err := source.GetSourceProject().ProtoString(); err != nil {
			panic(err)
		} else {
			o.SourceProject = &project.Reference{}
			if err := o.SourceProject.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.SourceProject = nil
	}
	for _, sourceValue := range source.GetProfiles() {
		exists := false
		for _, currentValue := range o.Profiles {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *Profile
			if sourceValue != nil {
				newDstElement = new(Profile)
				newDstElement.Merge(sourceValue)
			}
			o.Profiles = append(o.Profiles, newDstElement)
		}
	}

	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *QualityProfile) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*QualityProfile))
}
