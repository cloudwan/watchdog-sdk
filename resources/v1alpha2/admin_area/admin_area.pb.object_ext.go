// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/admin_area.proto
// DO NOT EDIT!!!

package admin_area

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &latlng.LatLng{}
)

func (o *BBox) GotenObjectExt() {}

func (o *BBox) MakeFullFieldMask() *BBox_FieldMask {
	return FullBBox_FieldMask()
}

func (o *BBox) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBBox_FieldMask()
}

func (o *BBox) MakeDiffFieldMask(other *BBox) *BBox_FieldMask {
	if o == nil && other == nil {
		return &BBox_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBBox_FieldMask()
	}

	res := &BBox_FieldMask{}
	if !proto.Equal(o.GetSouthWest(), other.GetSouthWest()) {
		res.Paths = append(res.Paths, &BBox_FieldTerminalPath{selector: BBox_FieldPathSelectorSouthWest})
	}
	if !proto.Equal(o.GetNorthEast(), other.GetNorthEast()) {
		res.Paths = append(res.Paths, &BBox_FieldTerminalPath{selector: BBox_FieldPathSelectorNorthEast})
	}
	return res
}

func (o *BBox) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BBox))
}

func (o *BBox) Clone() *BBox {
	if o == nil {
		return nil
	}
	result := &BBox{}
	result.SouthWest = proto.Clone(o.SouthWest).(*latlng.LatLng)
	result.NorthEast = proto.Clone(o.NorthEast).(*latlng.LatLng)
	return result
}

func (o *BBox) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BBox) Merge(source *BBox) {
	if source.GetSouthWest() != nil {
		if o.SouthWest == nil {
			o.SouthWest = new(latlng.LatLng)
		}
		proto.Merge(o.SouthWest, source.GetSouthWest())
	}
	if source.GetNorthEast() != nil {
		if o.NorthEast == nil {
			o.NorthEast = new(latlng.LatLng)
		}
		proto.Merge(o.NorthEast, source.GetNorthEast())
	}
}

func (o *BBox) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BBox))
}

func (o *Geometry) GotenObjectExt() {}

func (o *Geometry) MakeFullFieldMask() *Geometry_FieldMask {
	return FullGeometry_FieldMask()
}

func (o *Geometry) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGeometry_FieldMask()
}

func (o *Geometry) MakeDiffFieldMask(other *Geometry) *Geometry_FieldMask {
	if o == nil && other == nil {
		return &Geometry_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGeometry_FieldMask()
	}

	res := &Geometry_FieldMask{}
	if !proto.Equal(o.GetCenter(), other.GetCenter()) {
		res.Paths = append(res.Paths, &Geometry_FieldTerminalPath{selector: Geometry_FieldPathSelectorCenter})
	}
	{
		subMask := o.GetBbox().MakeDiffFieldMask(other.GetBbox())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Geometry_FieldTerminalPath{selector: Geometry_FieldPathSelectorBbox})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Geometry_FieldSubPath{selector: Geometry_FieldPathSelectorBbox, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Geometry) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Geometry))
}

func (o *Geometry) Clone() *Geometry {
	if o == nil {
		return nil
	}
	result := &Geometry{}
	result.Center = proto.Clone(o.Center).(*latlng.LatLng)
	result.Bbox = o.Bbox.Clone()
	return result
}

func (o *Geometry) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Geometry) Merge(source *Geometry) {
	if source.GetCenter() != nil {
		if o.Center == nil {
			o.Center = new(latlng.LatLng)
		}
		proto.Merge(o.Center, source.GetCenter())
	}
	if source.GetBbox() != nil {
		if o.Bbox == nil {
			o.Bbox = new(BBox)
		}
		o.Bbox.Merge(source.GetBbox())
	}
}

func (o *Geometry) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Geometry))
}

func (o *AdminHierarchy) GotenObjectExt() {}

func (o *AdminHierarchy) MakeFullFieldMask() *AdminHierarchy_FieldMask {
	return FullAdminHierarchy_FieldMask()
}

func (o *AdminHierarchy) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAdminHierarchy_FieldMask()
}

func (o *AdminHierarchy) MakeDiffFieldMask(other *AdminHierarchy) *AdminHierarchy_FieldMask {
	if o == nil && other == nil {
		return &AdminHierarchy_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAdminHierarchy_FieldMask()
	}

	res := &AdminHierarchy_FieldMask{}
	if o.GetContinent().String() != other.GetContinent().String() {
		res.Paths = append(res.Paths, &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorContinent})
	}
	if o.GetCountry().String() != other.GetCountry().String() {
		res.Paths = append(res.Paths, &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorCountry})
	}
	if o.GetAdmin1().String() != other.GetAdmin1().String() {
		res.Paths = append(res.Paths, &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin1})
	}
	if o.GetAdmin2().String() != other.GetAdmin2().String() {
		res.Paths = append(res.Paths, &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin2})
	}
	if o.GetAdmin3().String() != other.GetAdmin3().String() {
		res.Paths = append(res.Paths, &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin3})
	}
	if o.GetAdmin4().String() != other.GetAdmin4().String() {
		res.Paths = append(res.Paths, &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin4})
	}
	if o.GetAdmin5().String() != other.GetAdmin5().String() {
		res.Paths = append(res.Paths, &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin5})
	}
	return res
}

func (o *AdminHierarchy) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AdminHierarchy))
}

func (o *AdminHierarchy) Clone() *AdminHierarchy {
	if o == nil {
		return nil
	}
	result := &AdminHierarchy{}
	if o.Continent == nil {
		result.Continent = nil
	} else if data, err := o.Continent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Continent = &Reference{}
		if err := result.Continent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Country == nil {
		result.Country = nil
	} else if data, err := o.Country.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Country = &Reference{}
		if err := result.Country.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Admin1 == nil {
		result.Admin1 = nil
	} else if data, err := o.Admin1.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Admin1 = &Reference{}
		if err := result.Admin1.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Admin2 == nil {
		result.Admin2 = nil
	} else if data, err := o.Admin2.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Admin2 = &Reference{}
		if err := result.Admin2.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Admin3 == nil {
		result.Admin3 = nil
	} else if data, err := o.Admin3.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Admin3 = &Reference{}
		if err := result.Admin3.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Admin4 == nil {
		result.Admin4 = nil
	} else if data, err := o.Admin4.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Admin4 = &Reference{}
		if err := result.Admin4.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Admin5 == nil {
		result.Admin5 = nil
	} else if data, err := o.Admin5.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Admin5 = &Reference{}
		if err := result.Admin5.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *AdminHierarchy) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AdminHierarchy) Merge(source *AdminHierarchy) {
	if source.GetContinent() != nil {
		if data, err := source.GetContinent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Continent = &Reference{}
			if err := o.Continent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Continent = nil
	}
	if source.GetCountry() != nil {
		if data, err := source.GetCountry().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Country = &Reference{}
			if err := o.Country.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Country = nil
	}
	if source.GetAdmin1() != nil {
		if data, err := source.GetAdmin1().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Admin1 = &Reference{}
			if err := o.Admin1.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Admin1 = nil
	}
	if source.GetAdmin2() != nil {
		if data, err := source.GetAdmin2().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Admin2 = &Reference{}
			if err := o.Admin2.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Admin2 = nil
	}
	if source.GetAdmin3() != nil {
		if data, err := source.GetAdmin3().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Admin3 = &Reference{}
			if err := o.Admin3.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Admin3 = nil
	}
	if source.GetAdmin4() != nil {
		if data, err := source.GetAdmin4().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Admin4 = &Reference{}
			if err := o.Admin4.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Admin4 = nil
	}
	if source.GetAdmin5() != nil {
		if data, err := source.GetAdmin5().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Admin5 = &Reference{}
			if err := o.Admin5.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Admin5 = nil
	}
}

func (o *AdminHierarchy) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AdminHierarchy))
}

func (o *AdminArea) GotenObjectExt() {}

func (o *AdminArea) MakeFullFieldMask() *AdminArea_FieldMask {
	return FullAdminArea_FieldMask()
}

func (o *AdminArea) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAdminArea_FieldMask()
}

func (o *AdminArea) MakeDiffFieldMask(other *AdminArea) *AdminArea_FieldMask {
	if o == nil && other == nil {
		return &AdminArea_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAdminArea_FieldMask()
	}

	res := &AdminArea_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetHierarchy().MakeDiffFieldMask(other.GetHierarchy())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorHierarchy})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AdminArea_FieldSubPath{selector: AdminArea_FieldPathSelectorHierarchy, subPath: subpath})
			}
		}
	}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorType})
	}
	{
		subMask := o.GetLabelGeometry().MakeDiffFieldMask(other.GetLabelGeometry())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorLabelGeometry})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AdminArea_FieldSubPath{selector: AdminArea_FieldPathSelectorLabelGeometry, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetGeometry().MakeDiffFieldMask(other.GetGeometry())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorGeometry})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AdminArea_FieldSubPath{selector: AdminArea_FieldPathSelectorGeometry, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AdminArea_FieldSubPath{selector: AdminArea_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}

	if len(o.GetLocalLanguageNames()) == len(other.GetLocalLanguageNames()) {
		for i, lValue := range o.GetLocalLanguageNames() {
			rValue := other.GetLocalLanguageNames()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorLocalLanguageNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorLocalLanguageNames})
	}
	return res
}

func (o *AdminArea) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AdminArea))
}

func (o *AdminArea) Clone() *AdminArea {
	if o == nil {
		return nil
	}
	result := &AdminArea{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Hierarchy = o.Hierarchy.Clone()
	result.Type = o.Type
	result.LabelGeometry = o.LabelGeometry.Clone()
	result.Geometry = o.Geometry.Clone()
	result.Metadata = o.Metadata.Clone()
	result.LocalLanguageNames = map[string]string{}
	for key, sourceValue := range o.LocalLanguageNames {
		result.LocalLanguageNames[key] = sourceValue
	}
	return result
}

func (o *AdminArea) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AdminArea) Merge(source *AdminArea) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetHierarchy() != nil {
		if o.Hierarchy == nil {
			o.Hierarchy = new(AdminHierarchy)
		}
		o.Hierarchy.Merge(source.GetHierarchy())
	}
	o.Type = source.GetType()
	if source.GetLabelGeometry() != nil {
		if o.LabelGeometry == nil {
			o.LabelGeometry = new(Geometry)
		}
		o.LabelGeometry.Merge(source.GetLabelGeometry())
	}
	if source.GetGeometry() != nil {
		if o.Geometry == nil {
			o.Geometry = new(Geometry)
		}
		o.Geometry.Merge(source.GetGeometry())
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetLocalLanguageNames() != nil {
		if o.LocalLanguageNames == nil {
			o.LocalLanguageNames = make(map[string]string, len(source.GetLocalLanguageNames()))
		}
		for key, sourceValue := range source.GetLocalLanguageNames() {
			o.LocalLanguageNames[key] = sourceValue
		}
	}
}

func (o *AdminArea) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AdminArea))
}
