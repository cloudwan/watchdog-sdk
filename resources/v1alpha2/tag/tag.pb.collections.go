// Code generated by protoc-gen-goten-resource
// Resource: Tag
// DO NOT EDIT!!!

package tag

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &probing_distribution.ProbingDistribution{}
	_ = &project.Project{}
)

type TagList []*Tag

func (l TagList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Tag))
}

func (l TagList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(TagList)...)
}

func (l TagList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TagList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l TagList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Tag)
}

func (l TagList) Length() int {
	return len(l)
}

type TagChangeList []*TagChange

func (l TagChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*TagChange))
}

func (l TagChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(TagChangeList)...)
}

func (l TagChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TagChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l TagChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*TagChange)
}

func (l TagChangeList) Length() int {
	return len(l)
}

type TagNameList []*Name

func (l TagNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l TagNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(TagNameList)...)
}

func (l TagNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TagNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l TagNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l TagNameList) Length() int {
	return len(l)
}

type TagReferenceList []*Reference

func (l TagReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l TagReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(TagReferenceList)...)
}

func (l TagReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TagReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l TagReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l TagReferenceList) Length() int {
	return len(l)
}

type TagParentNameList []*ParentName

func (l TagParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l TagParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(TagParentNameList)...)
}

func (l TagParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TagParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l TagParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l TagParentNameList) Length() int {
	return len(l)
}

type TagParentReferenceList []*ParentReference

func (l TagParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l TagParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(TagParentReferenceList)...)
}

func (l TagParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l TagParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l TagParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l TagParentReferenceList) Length() int {
	return len(l)
}

type TagMap map[Name]*Tag

func (m TagMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m TagMap) Set(res gotenresource.Resource) {
	tRes := res.(*Tag)
	m[*tRes.Name] = tRes
}

func (m TagMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m TagMap) Length() int {
	return len(m)
}

func (m TagMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type TagChangeMap map[Name]*TagChange

func (m TagChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m TagChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*TagChange)
	m[*tChange.GetTagName()] = tChange
}

func (m TagChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m TagChangeMap) Length() int {
	return len(m)
}

func (m TagChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
