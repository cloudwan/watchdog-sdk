// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/tag.proto
// DO NOT EDIT!!!

package tag

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &probing_distribution.ProbingDistribution{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tag Resource
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Tag. Id
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// User-friendly name of tag.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Tag state. Contains resource counters.
	State *Tag_State `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty" firestore:"state"`
	// metadata is additional information of the tag.
	Metadata *ntt_meta.Meta `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
}

func (m *Tag) Reset() {
	*m = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_tag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Tag) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Tag) ProtoMessage() {}

func (m *Tag) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_tag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Tag) GotenMessage() {}

// Deprecated, Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_tag_proto_rawDescGZIP(), []int{0}
}

func (m *Tag) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Tag) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Tag) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Tag) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Tag) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Tag) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Tag) GetState() *Tag_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Tag) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Tag) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Tag"))
	}
	m.Name = fv
}

func (m *Tag) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Tag"))
	}
	m.DisplayName = fv
}

func (m *Tag) SetState(fv *Tag_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Tag"))
	}
	m.State = fv
}

func (m *Tag) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Tag"))
	}
	m.Metadata = fv
}

type Tag_State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Counter per using resource type, e.g. "watchdog.edgelq.com/Probe": 32
	// indicates there are 32 agents associated with this tag via their
	// `metadata.tag` field.
	ResourceTypeCounters map[string]int64 `protobuf:"bytes,3,rep,name=resource_type_counters,json=resourceTypeCounters,proto3" json:"resource_type_counters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" firestore:"resourceTypeCounters"`
	// As resource_type_counters, but counters are per each region
	RegionalResourceCounters map[string]*Tag_State_RegionalCounter `protobuf:"bytes,6,rep,name=regional_resource_counters,json=regionalResourceCounters,proto3" json:"regional_resource_counters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"regionalResourceCounters"`
	// List of back-references to distributions pointing to this tag via target
	// selector
	DistributionsViaTargetSelector []*probing_distribution.Reference `protobuf:"bytes,4,rep,customtype=Reference,name=distributions_via_target_selector,json=distributionsViaTargetSelector,proto3" json:"distributions_via_target_selector,omitempty" firestore:"distributionsViaTargetSelector"`
	// List og back-references to distributions pointing to this tag via probe
	// selector
	DistributionsViaProbeSelector []*probing_distribution.Reference `protobuf:"bytes,5,rep,customtype=Reference,name=distributions_via_probe_selector,json=distributionsViaProbeSelector,proto3" json:"distributions_via_probe_selector,omitempty" firestore:"distributionsViaProbeSelector"`
}

func (m *Tag_State) Reset() {
	*m = Tag_State{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_tag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Tag_State) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Tag_State) ProtoMessage() {}

func (m *Tag_State) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_tag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Tag_State) GotenMessage() {}

// Deprecated, Use Tag_State.ProtoReflect.Descriptor instead.
func (*Tag_State) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_tag_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Tag_State) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Tag_State) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Tag_State) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Tag_State) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Tag_State) GetResourceTypeCounters() map[string]int64 {
	if m != nil {
		return m.ResourceTypeCounters
	}
	return nil
}

func (m *Tag_State) GetRegionalResourceCounters() map[string]*Tag_State_RegionalCounter {
	if m != nil {
		return m.RegionalResourceCounters
	}
	return nil
}

func (m *Tag_State) GetDistributionsViaTargetSelector() []*probing_distribution.Reference {
	if m != nil {
		return m.DistributionsViaTargetSelector
	}
	return nil
}

func (m *Tag_State) GetDistributionsViaProbeSelector() []*probing_distribution.Reference {
	if m != nil {
		return m.DistributionsViaProbeSelector
	}
	return nil
}

func (m *Tag_State) SetResourceTypeCounters(fv map[string]int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypeCounters", "Tag_State"))
	}
	m.ResourceTypeCounters = fv
}

func (m *Tag_State) SetRegionalResourceCounters(fv map[string]*Tag_State_RegionalCounter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionalResourceCounters", "Tag_State"))
	}
	m.RegionalResourceCounters = fv
}

func (m *Tag_State) SetDistributionsViaTargetSelector(fv []*probing_distribution.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DistributionsViaTargetSelector", "Tag_State"))
	}
	m.DistributionsViaTargetSelector = fv
}

func (m *Tag_State) SetDistributionsViaProbeSelector(fv []*probing_distribution.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DistributionsViaProbeSelector", "Tag_State"))
	}
	m.DistributionsViaProbeSelector = fv
}

type Tag_State_RegionalCounter struct {
	state          protoimpl.MessageState
	sizeCache      protoimpl.SizeCache
	unknownFields  protoimpl.UnknownFields
	ByResourceType map[string]int64 `protobuf:"bytes,1,rep,name=by_resource_type,json=byResourceType,proto3" json:"by_resource_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" firestore:"byResourceType"`
}

func (m *Tag_State_RegionalCounter) Reset() {
	*m = Tag_State_RegionalCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_tag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Tag_State_RegionalCounter) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Tag_State_RegionalCounter) ProtoMessage() {}

func (m *Tag_State_RegionalCounter) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_tag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Tag_State_RegionalCounter) GotenMessage() {}

// Deprecated, Use Tag_State_RegionalCounter.ProtoReflect.Descriptor instead.
func (*Tag_State_RegionalCounter) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_tag_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Tag_State_RegionalCounter) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Tag_State_RegionalCounter) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Tag_State_RegionalCounter) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Tag_State_RegionalCounter) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Tag_State_RegionalCounter) GetByResourceType() map[string]int64 {
	if m != nil {
		return m.ByResourceType
	}
	return nil
}

func (m *Tag_State_RegionalCounter) SetByResourceType(fv map[string]int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ByResourceType", "Tag_State_RegionalCounter"))
	}
	m.ByResourceType = fv
}

var watchdog_proto_v1alpha2_tag_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_tag_proto_rawDesc = []byte{
	0x0a, 0x21, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x09, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xb2, 0xda, 0x21, 0x07, 0x0a,
	0x05, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0xe8, 0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x70,
	0x0a, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x7c, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x61, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x70,
	0x0a, 0x21, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x76, 0x69, 0x61, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0xb2, 0xda, 0x21, 0x19, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0xea, 0xde, 0x21, 0x04, 0x0a, 0x02, 0x18, 0x01,
	0x52, 0x1e, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x56,
	0x69, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x6e, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0xb2, 0xda, 0x21, 0x19,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0xea, 0xde, 0x21, 0x04, 0x0a, 0x02, 0x18,
	0x01, 0x52, 0x1d, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x56, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0xc4, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x2e, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x41, 0x0a, 0x13, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x7d, 0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x54, 0x61, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0xa1, 0x01, 0xea, 0x41, 0x38, 0x0a, 0x17, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61, 0x67, 0x12, 0x1d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x7d, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x67, 0x7d, 0x92, 0xd9, 0x21,
	0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x07, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x08, 0x2e, 0x7b,
	0x31, 0x2c, 0x31, 0x32, 0x38, 0x7d, 0x50, 0x05, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x25, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xe2, 0xde, 0x21,
	0x02, 0x08, 0x01, 0x42, 0xfd, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x3c, 0x0a,
	0x09, 0x74, 0x61, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x74, 0x61, 0x67, 0x0a, 0x1c, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x08, 0x54, 0x61, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x74, 0x61, 0x67, 0x3b, 0x74, 0x61, 0x67, 0xd2, 0x84,
	0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xf2, 0x85, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x74, 0x61,
	0x67, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x74, 0x61, 0x67,
	0xa2, 0x80, 0xd1, 0x02, 0x3e, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x74, 0x61, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_tag_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_tag_proto_rawDescData = watchdog_proto_v1alpha2_tag_proto_rawDesc
)

func watchdog_proto_v1alpha2_tag_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_tag_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_tag_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_tag_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_tag_proto_rawDescData
}

var watchdog_proto_v1alpha2_tag_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var watchdog_proto_v1alpha2_tag_proto_goTypes = []interface{}{
	(*Tag)(nil),                       // 0: ntt.watchdog.v1alpha2.Tag
	(*Tag_State)(nil),                 // 1: ntt.watchdog.v1alpha2.Tag.State
	(*Tag_State_RegionalCounter)(nil), // 2: ntt.watchdog.v1alpha2.Tag.State.RegionalCounter
	nil,                               // 3: ntt.watchdog.v1alpha2.Tag.State.ResourceTypeCountersEntry
	nil,                               // 4: ntt.watchdog.v1alpha2.Tag.State.RegionalResourceCountersEntry
	nil,                               // 5: ntt.watchdog.v1alpha2.Tag.State.RegionalCounter.ByResourceTypeEntry
	(*ntt_meta.Meta)(nil),             // 6: ntt.types.Meta
}
var watchdog_proto_v1alpha2_tag_proto_depIdxs = []int32{
	1, // 0: ntt.watchdog.v1alpha2.Tag.state:type_name -> ntt.watchdog.v1alpha2.Tag.State
	6, // 1: ntt.watchdog.v1alpha2.Tag.metadata:type_name -> ntt.types.Meta
	3, // 2: ntt.watchdog.v1alpha2.Tag.State.resource_type_counters:type_name -> ntt.watchdog.v1alpha2.Tag.State.ResourceTypeCountersEntry
	4, // 3: ntt.watchdog.v1alpha2.Tag.State.regional_resource_counters:type_name -> ntt.watchdog.v1alpha2.Tag.State.RegionalResourceCountersEntry
	5, // 4: ntt.watchdog.v1alpha2.Tag.State.RegionalCounter.by_resource_type:type_name -> ntt.watchdog.v1alpha2.Tag.State.RegionalCounter.ByResourceTypeEntry
	2, // 5: ntt.watchdog.v1alpha2.Tag.State.RegionalResourceCountersEntry.value:type_name -> ntt.watchdog.v1alpha2.Tag.State.RegionalCounter
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_tag_proto_init() }
func watchdog_proto_v1alpha2_tag_proto_init() {
	if watchdog_proto_v1alpha2_tag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_tag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_tag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag_State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_tag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag_State_RegionalCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_tag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_tag_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_tag_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_tag_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_tag_proto = out.File
	watchdog_proto_v1alpha2_tag_proto_rawDesc = nil
	watchdog_proto_v1alpha2_tag_proto_goTypes = nil
	watchdog_proto_v1alpha2_tag_proto_depIdxs = nil
}
