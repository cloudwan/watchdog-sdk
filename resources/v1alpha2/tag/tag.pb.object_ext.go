// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/tag.proto
// DO NOT EDIT!!!

package tag

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &probing_distribution.ProbingDistribution{}
	_ = &project.Project{}
)

func (o *Tag) GotenObjectExt() {}

func (o *Tag) MakeFullFieldMask() *Tag_FieldMask {
	return FullTag_FieldMask()
}

func (o *Tag) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTag_FieldMask()
}

func (o *Tag) MakeDiffFieldMask(other *Tag) *Tag_FieldMask {
	if o == nil && other == nil {
		return &Tag_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTag_FieldMask()
	}

	res := &Tag_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &Tag_FieldTerminalPath{selector: Tag_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &Tag_FieldTerminalPath{selector: Tag_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetState().MakeDiffFieldMask(other.GetState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Tag_FieldTerminalPath{selector: Tag_FieldPathSelectorState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Tag_FieldSubPath{selector: Tag_FieldPathSelectorState, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &Tag_FieldTerminalPath{selector: Tag_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &Tag_FieldSubPath{selector: Tag_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	return res
}

func (o *Tag) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Tag))
}

func (o *Tag) Clone() *Tag {
	if o == nil {
		return nil
	}
	result := &Tag{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.State = o.State.Clone()
	result.Metadata = o.Metadata.Clone()
	return result
}

func (o *Tag) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Tag) Merge(source *Tag) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetState() != nil {
		if o.State == nil {
			o.State = new(Tag_State)
		}
		o.State.Merge(source.GetState())
	}
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
}

func (o *Tag) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Tag))
}

func (o *Tag_State) GotenObjectExt() {}

func (o *Tag_State) MakeFullFieldMask() *Tag_State_FieldMask {
	return FullTag_State_FieldMask()
}

func (o *Tag_State) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTag_State_FieldMask()
}

func (o *Tag_State) MakeDiffFieldMask(other *Tag_State) *Tag_State_FieldMask {
	if o == nil && other == nil {
		return &Tag_State_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTag_State_FieldMask()
	}

	res := &Tag_State_FieldMask{}

	if len(o.GetResourceTypeCounters()) == len(other.GetResourceTypeCounters()) {
		for i, lValue := range o.GetResourceTypeCounters() {
			rValue := other.GetResourceTypeCounters()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorResourceTypeCounters})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorResourceTypeCounters})
	}

	if len(o.GetRegionalResourceCounters()) == len(other.GetRegionalResourceCounters()) {
		for i, lValue := range o.GetRegionalResourceCounters() {
			rValue := other.GetRegionalResourceCounters()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorRegionalResourceCounters})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorRegionalResourceCounters})
	}

	if len(o.GetDistributionsViaTargetSelector()) == len(other.GetDistributionsViaTargetSelector()) {
		for i, lValue := range o.GetDistributionsViaTargetSelector() {
			rValue := other.GetDistributionsViaTargetSelector()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorDistributionsViaTargetSelector})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorDistributionsViaTargetSelector})
	}

	if len(o.GetDistributionsViaProbeSelector()) == len(other.GetDistributionsViaProbeSelector()) {
		for i, lValue := range o.GetDistributionsViaProbeSelector() {
			rValue := other.GetDistributionsViaProbeSelector()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorDistributionsViaProbeSelector})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorDistributionsViaProbeSelector})
	}
	return res
}

func (o *Tag_State) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Tag_State))
}

func (o *Tag_State) Clone() *Tag_State {
	if o == nil {
		return nil
	}
	result := &Tag_State{}
	result.ResourceTypeCounters = map[string]int64{}
	for key, sourceValue := range o.ResourceTypeCounters {
		result.ResourceTypeCounters[key] = sourceValue
	}
	result.RegionalResourceCounters = map[string]*Tag_State_RegionalCounter{}
	for key, sourceValue := range o.RegionalResourceCounters {
		result.RegionalResourceCounters[key] = sourceValue.Clone()
	}
	result.DistributionsViaTargetSelector = make([]*probing_distribution.Reference, len(o.DistributionsViaTargetSelector))
	for i, sourceValue := range o.DistributionsViaTargetSelector {
		if sourceValue == nil {
			result.DistributionsViaTargetSelector[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.DistributionsViaTargetSelector[i] = &probing_distribution.Reference{}
			if err := result.DistributionsViaTargetSelector[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.DistributionsViaProbeSelector = make([]*probing_distribution.Reference, len(o.DistributionsViaProbeSelector))
	for i, sourceValue := range o.DistributionsViaProbeSelector {
		if sourceValue == nil {
			result.DistributionsViaProbeSelector[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.DistributionsViaProbeSelector[i] = &probing_distribution.Reference{}
			if err := result.DistributionsViaProbeSelector[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *Tag_State) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Tag_State) Merge(source *Tag_State) {
	if source.GetResourceTypeCounters() != nil {
		if o.ResourceTypeCounters == nil {
			o.ResourceTypeCounters = make(map[string]int64, len(source.GetResourceTypeCounters()))
		}
		for key, sourceValue := range source.GetResourceTypeCounters() {
			o.ResourceTypeCounters[key] = sourceValue
		}
	}
	if source.GetRegionalResourceCounters() != nil {
		if o.RegionalResourceCounters == nil {
			o.RegionalResourceCounters = make(map[string]*Tag_State_RegionalCounter, len(source.GetRegionalResourceCounters()))
		}
		for key, sourceValue := range source.GetRegionalResourceCounters() {
			if sourceValue != nil {
				if o.RegionalResourceCounters[key] == nil {
					o.RegionalResourceCounters[key] = new(Tag_State_RegionalCounter)
				}
				o.RegionalResourceCounters[key].Merge(sourceValue)
			}
		}
	}
	for _, sourceValue := range source.GetDistributionsViaTargetSelector() {
		exists := false
		for _, currentValue := range o.DistributionsViaTargetSelector {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_distribution.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_distribution.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.DistributionsViaTargetSelector = append(o.DistributionsViaTargetSelector, newDstElement)
		}
	}
	sort.Slice(o.DistributionsViaTargetSelector, func(i, j int) bool {
		leftVal, _ := o.DistributionsViaTargetSelector[i].ProtoString()
		rightVal, _ := o.DistributionsViaTargetSelector[j].ProtoString()
		return leftVal < rightVal
	})

	for _, sourceValue := range source.GetDistributionsViaProbeSelector() {
		exists := false
		for _, currentValue := range o.DistributionsViaProbeSelector {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *probing_distribution.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &probing_distribution.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.DistributionsViaProbeSelector = append(o.DistributionsViaProbeSelector, newDstElement)
		}
	}
	sort.Slice(o.DistributionsViaProbeSelector, func(i, j int) bool {
		leftVal, _ := o.DistributionsViaProbeSelector[i].ProtoString()
		rightVal, _ := o.DistributionsViaProbeSelector[j].ProtoString()
		return leftVal < rightVal
	})

}

func (o *Tag_State) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Tag_State))
}

func (o *Tag_State_RegionalCounter) GotenObjectExt() {}

func (o *Tag_State_RegionalCounter) MakeFullFieldMask() *Tag_State_RegionalCounter_FieldMask {
	return FullTag_State_RegionalCounter_FieldMask()
}

func (o *Tag_State_RegionalCounter) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullTag_State_RegionalCounter_FieldMask()
}

func (o *Tag_State_RegionalCounter) MakeDiffFieldMask(other *Tag_State_RegionalCounter) *Tag_State_RegionalCounter_FieldMask {
	if o == nil && other == nil {
		return &Tag_State_RegionalCounter_FieldMask{}
	}
	if o == nil || other == nil {
		return FullTag_State_RegionalCounter_FieldMask()
	}

	res := &Tag_State_RegionalCounter_FieldMask{}

	if len(o.GetByResourceType()) == len(other.GetByResourceType()) {
		for i, lValue := range o.GetByResourceType() {
			rValue := other.GetByResourceType()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &TagStateRegionalCounter_FieldTerminalPath{selector: TagStateRegionalCounter_FieldPathSelectorByResourceType})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &TagStateRegionalCounter_FieldTerminalPath{selector: TagStateRegionalCounter_FieldPathSelectorByResourceType})
	}
	return res
}

func (o *Tag_State_RegionalCounter) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*Tag_State_RegionalCounter))
}

func (o *Tag_State_RegionalCounter) Clone() *Tag_State_RegionalCounter {
	if o == nil {
		return nil
	}
	result := &Tag_State_RegionalCounter{}
	result.ByResourceType = map[string]int64{}
	for key, sourceValue := range o.ByResourceType {
		result.ByResourceType[key] = sourceValue
	}
	return result
}

func (o *Tag_State_RegionalCounter) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *Tag_State_RegionalCounter) Merge(source *Tag_State_RegionalCounter) {
	if source.GetByResourceType() != nil {
		if o.ByResourceType == nil {
			o.ByResourceType = make(map[string]int64, len(source.GetByResourceType()))
		}
		for key, sourceValue := range source.GetByResourceType() {
			o.ByResourceType[key] = sourceValue
		}
	}
}

func (o *Tag_State_RegionalCounter) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*Tag_State_RegionalCounter))
}
