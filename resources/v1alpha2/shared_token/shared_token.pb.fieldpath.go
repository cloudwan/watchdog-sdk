// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/shared_token.proto
// DO NOT EDIT!!!

package shared_token

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SharedToken_FieldPath interface {
	gotenobject.FieldPath
	Selector() SharedToken_FieldPathSelector
	Get(source *SharedToken) []interface{}
	GetSingle(source *SharedToken) (interface{}, bool)
	ClearValue(item *SharedToken)

	// Those methods build corresponding SharedToken_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SharedToken_FieldPathValue
	WithIArrayOfValues(values interface{}) SharedToken_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SharedToken_FieldPathArrayItemValue
}

type SharedToken_FieldPathSelector int32

const (
	SharedToken_FieldPathSelectorName                       SharedToken_FieldPathSelector = 0
	SharedToken_FieldPathSelectorDisplayName                SharedToken_FieldPathSelector = 1
	SharedToken_FieldPathSelectorQuota                      SharedToken_FieldPathSelector = 2
	SharedToken_FieldPathSelectorProbeTemplate              SharedToken_FieldPathSelector = 3
	SharedToken_FieldPathSelectorDeduplicationFieldPaths    SharedToken_FieldPathSelector = 4
	SharedToken_FieldPathSelectorSecret                     SharedToken_FieldPathSelector = 5
	SharedToken_FieldPathSelectorMetadata                   SharedToken_FieldPathSelector = 6
	SharedToken_FieldPathSelectorAssociateExistingProbeOnly SharedToken_FieldPathSelector = 7
)

func (s SharedToken_FieldPathSelector) String() string {
	switch s {
	case SharedToken_FieldPathSelectorName:
		return "name"
	case SharedToken_FieldPathSelectorDisplayName:
		return "display_name"
	case SharedToken_FieldPathSelectorQuota:
		return "quota"
	case SharedToken_FieldPathSelectorProbeTemplate:
		return "probe_template"
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		return "deduplication_field_paths"
	case SharedToken_FieldPathSelectorSecret:
		return "secret"
	case SharedToken_FieldPathSelectorMetadata:
		return "metadata"
	case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
		return "associate_existing_probe_only"
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", s))
	}
}

func BuildSharedToken_FieldPath(fp gotenobject.RawFieldPath) (SharedToken_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SharedToken")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorDisplayName}, nil
		case "quota":
			return &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorQuota}, nil
		case "probe_template", "probeTemplate", "probe-template":
			return &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorProbeTemplate}, nil
		case "deduplication_field_paths", "deduplicationFieldPaths", "deduplication-field-paths":
			return &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorDeduplicationFieldPaths}, nil
		case "secret":
			return &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorSecret}, nil
		case "metadata":
			return &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorMetadata}, nil
		case "associate_existing_probe_only", "associateExistingProbeOnly", "associate-existing-probe-only":
			return &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorAssociateExistingProbeOnly}, nil
		}
	} else {
		switch fp[0] {
		case "probe_template", "probeTemplate", "probe-template":
			if subpath, err := BuildSharedTokenProbeTemplate_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SharedToken_FieldSubPath{selector: SharedToken_FieldPathSelectorProbeTemplate, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SharedToken_FieldSubPath{selector: SharedToken_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SharedToken", fp)
}

func ParseSharedToken_FieldPath(rawField string) (SharedToken_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSharedToken_FieldPath(fp)
}

func MustParseSharedToken_FieldPath(rawField string) SharedToken_FieldPath {
	fp, err := ParseSharedToken_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SharedToken_FieldTerminalPath struct {
	selector SharedToken_FieldPathSelector
}

var _ SharedToken_FieldPath = (*SharedToken_FieldTerminalPath)(nil)

func (fp *SharedToken_FieldTerminalPath) Selector() SharedToken_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SharedToken_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SharedToken_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SharedToken
func (fp *SharedToken_FieldTerminalPath) Get(source *SharedToken) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SharedToken_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case SharedToken_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case SharedToken_FieldPathSelectorQuota:
			values = append(values, source.Quota)
		case SharedToken_FieldPathSelectorProbeTemplate:
			if source.ProbeTemplate != nil {
				values = append(values, source.ProbeTemplate)
			}
		case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
			for _, value := range source.GetDeduplicationFieldPaths() {
				values = append(values, value)
			}
		case SharedToken_FieldPathSelectorSecret:
			values = append(values, source.Secret)
		case SharedToken_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
			values = append(values, source.AssociateExistingProbeOnly)
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fp.selector))
		}
	}
	return
}

func (fp *SharedToken_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SharedToken))
}

// GetSingle returns value pointed by specific field of from source SharedToken
func (fp *SharedToken_FieldTerminalPath) GetSingle(source *SharedToken) (interface{}, bool) {
	switch fp.selector {
	case SharedToken_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case SharedToken_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case SharedToken_FieldPathSelectorQuota:
		return source.GetQuota(), source != nil
	case SharedToken_FieldPathSelectorProbeTemplate:
		res := source.GetProbeTemplate()
		return res, res != nil
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		res := source.GetDeduplicationFieldPaths()
		return res, res != nil
	case SharedToken_FieldPathSelectorSecret:
		return source.GetSecret(), source != nil
	case SharedToken_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
		return source.GetAssociateExistingProbeOnly(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fp.selector))
	}
}

func (fp *SharedToken_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SharedToken))
}

// GetDefault returns a default value of the field type
func (fp *SharedToken_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SharedToken_FieldPathSelectorName:
		return (*Name)(nil)
	case SharedToken_FieldPathSelectorDisplayName:
		return ""
	case SharedToken_FieldPathSelectorQuota:
		return int32(0)
	case SharedToken_FieldPathSelectorProbeTemplate:
		return (*SharedToken_ProbeTemplate)(nil)
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		return ([]string)(nil)
	case SharedToken_FieldPathSelectorSecret:
		return ""
	case SharedToken_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fp.selector))
	}
}

func (fp *SharedToken_FieldTerminalPath) ClearValue(item *SharedToken) {
	if item != nil {
		switch fp.selector {
		case SharedToken_FieldPathSelectorName:
			item.Name = nil
		case SharedToken_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case SharedToken_FieldPathSelectorQuota:
			item.Quota = int32(0)
		case SharedToken_FieldPathSelectorProbeTemplate:
			item.ProbeTemplate = nil
		case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
			item.DeduplicationFieldPaths = nil
		case SharedToken_FieldPathSelectorSecret:
			item.Secret = ""
		case SharedToken_FieldPathSelectorMetadata:
			item.Metadata = nil
		case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
			item.AssociateExistingProbeOnly = false
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fp.selector))
		}
	}
}

func (fp *SharedToken_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SharedToken))
}

// IsLeaf - whether field path is holds simple value
func (fp *SharedToken_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SharedToken_FieldPathSelectorName ||
		fp.selector == SharedToken_FieldPathSelectorDisplayName ||
		fp.selector == SharedToken_FieldPathSelectorQuota ||
		fp.selector == SharedToken_FieldPathSelectorDeduplicationFieldPaths ||
		fp.selector == SharedToken_FieldPathSelectorSecret ||
		fp.selector == SharedToken_FieldPathSelectorAssociateExistingProbeOnly
}

func (fp *SharedToken_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SharedToken_FieldTerminalPath) WithIValue(value interface{}) SharedToken_FieldPathValue {
	switch fp.selector {
	case SharedToken_FieldPathSelectorName:
		return &SharedToken_FieldTerminalPathValue{SharedToken_FieldTerminalPath: *fp, value: value.(*Name)}
	case SharedToken_FieldPathSelectorDisplayName:
		return &SharedToken_FieldTerminalPathValue{SharedToken_FieldTerminalPath: *fp, value: value.(string)}
	case SharedToken_FieldPathSelectorQuota:
		return &SharedToken_FieldTerminalPathValue{SharedToken_FieldTerminalPath: *fp, value: value.(int32)}
	case SharedToken_FieldPathSelectorProbeTemplate:
		return &SharedToken_FieldTerminalPathValue{SharedToken_FieldTerminalPath: *fp, value: value.(*SharedToken_ProbeTemplate)}
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		return &SharedToken_FieldTerminalPathValue{SharedToken_FieldTerminalPath: *fp, value: value.([]string)}
	case SharedToken_FieldPathSelectorSecret:
		return &SharedToken_FieldTerminalPathValue{SharedToken_FieldTerminalPath: *fp, value: value.(string)}
	case SharedToken_FieldPathSelectorMetadata:
		return &SharedToken_FieldTerminalPathValue{SharedToken_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
		return &SharedToken_FieldTerminalPathValue{SharedToken_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fp.selector))
	}
}

func (fp *SharedToken_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SharedToken_FieldTerminalPath) WithIArrayOfValues(values interface{}) SharedToken_FieldPathArrayOfValues {
	fpaov := &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp}
	switch fp.selector {
	case SharedToken_FieldPathSelectorName:
		return &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp, values: values.([]*Name)}
	case SharedToken_FieldPathSelectorDisplayName:
		return &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp, values: values.([]string)}
	case SharedToken_FieldPathSelectorQuota:
		return &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp, values: values.([]int32)}
	case SharedToken_FieldPathSelectorProbeTemplate:
		return &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp, values: values.([]*SharedToken_ProbeTemplate)}
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		return &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp, values: values.([][]string)}
	case SharedToken_FieldPathSelectorSecret:
		return &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp, values: values.([]string)}
	case SharedToken_FieldPathSelectorMetadata:
		return &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
		return &SharedToken_FieldTerminalPathArrayOfValues{SharedToken_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fp.selector))
	}
	return fpaov
}

func (fp *SharedToken_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SharedToken_FieldTerminalPath) WithIArrayItemValue(value interface{}) SharedToken_FieldPathArrayItemValue {
	switch fp.selector {
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		return &SharedToken_FieldTerminalPathArrayItemValue{SharedToken_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fp.selector))
	}
}

func (fp *SharedToken_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SharedToken_FieldSubPath struct {
	selector SharedToken_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SharedToken_FieldPath = (*SharedToken_FieldSubPath)(nil)

func (fps *SharedToken_FieldSubPath) Selector() SharedToken_FieldPathSelector {
	return fps.selector
}
func (fps *SharedToken_FieldSubPath) AsProbeTemplateSubPath() (SharedTokenProbeTemplate_FieldPath, bool) {
	res, ok := fps.subPath.(SharedTokenProbeTemplate_FieldPath)
	return res, ok
}
func (fps *SharedToken_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SharedToken_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SharedToken_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SharedToken
func (fps *SharedToken_FieldSubPath) Get(source *SharedToken) (values []interface{}) {
	if asProbeTemplateFieldPath, ok := fps.AsProbeTemplateSubPath(); ok {
		values = append(values, asProbeTemplateFieldPath.Get(source.GetProbeTemplate())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fps.selector))
	}
	return
}

func (fps *SharedToken_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SharedToken))
}

// GetSingle returns value of selected field from source SharedToken
func (fps *SharedToken_FieldSubPath) GetSingle(source *SharedToken) (interface{}, bool) {
	switch fps.selector {
	case SharedToken_FieldPathSelectorProbeTemplate:
		if source.GetProbeTemplate() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbeTemplate())
	case SharedToken_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fps.selector))
	}
}

func (fps *SharedToken_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SharedToken))
}

// GetDefault returns a default value of the field type
func (fps *SharedToken_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SharedToken_FieldSubPath) ClearValue(item *SharedToken) {
	if item != nil {
		switch fps.selector {
		case SharedToken_FieldPathSelectorProbeTemplate:
			fps.subPath.ClearValueRaw(item.ProbeTemplate)
		case SharedToken_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fps.selector))
		}
	}
}

func (fps *SharedToken_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SharedToken))
}

// IsLeaf - whether field path is holds simple value
func (fps *SharedToken_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SharedToken_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SharedToken_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SharedToken_FieldSubPath) WithIValue(value interface{}) SharedToken_FieldPathValue {
	return &SharedToken_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SharedToken_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SharedToken_FieldSubPath) WithIArrayOfValues(values interface{}) SharedToken_FieldPathArrayOfValues {
	return &SharedToken_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SharedToken_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SharedToken_FieldSubPath) WithIArrayItemValue(value interface{}) SharedToken_FieldPathArrayItemValue {
	return &SharedToken_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SharedToken_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SharedToken_FieldPathValue allows storing values for SharedToken fields according to their type
type SharedToken_FieldPathValue interface {
	SharedToken_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SharedToken)
	CompareWith(*SharedToken) (cmp int, comparable bool)
}

func ParseSharedToken_FieldPathValue(pathStr, valueStr string) (SharedToken_FieldPathValue, error) {
	fp, err := ParseSharedToken_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SharedToken field path value from %s: %v", valueStr, err)
	}
	return fpv.(SharedToken_FieldPathValue), nil
}

func MustParseSharedToken_FieldPathValue(pathStr, valueStr string) SharedToken_FieldPathValue {
	fpv, err := ParseSharedToken_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SharedToken_FieldTerminalPathValue struct {
	SharedToken_FieldTerminalPath
	value interface{}
}

var _ SharedToken_FieldPathValue = (*SharedToken_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SharedToken' as interface{}
func (fpv *SharedToken_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SharedToken_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *SharedToken_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *SharedToken_FieldTerminalPathValue) AsQuotaValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *SharedToken_FieldTerminalPathValue) AsProbeTemplateValue() (*SharedToken_ProbeTemplate, bool) {
	res, ok := fpv.value.(*SharedToken_ProbeTemplate)
	return res, ok
}
func (fpv *SharedToken_FieldTerminalPathValue) AsDeduplicationFieldPathsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *SharedToken_FieldTerminalPathValue) AsSecretValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *SharedToken_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *SharedToken_FieldTerminalPathValue) AsAssociateExistingProbeOnlyValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object SharedToken
func (fpv *SharedToken_FieldTerminalPathValue) SetTo(target **SharedToken) {
	if *target == nil {
		*target = new(SharedToken)
	}
	switch fpv.selector {
	case SharedToken_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case SharedToken_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case SharedToken_FieldPathSelectorQuota:
		(*target).Quota = fpv.value.(int32)
	case SharedToken_FieldPathSelectorProbeTemplate:
		(*target).ProbeTemplate = fpv.value.(*SharedToken_ProbeTemplate)
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		(*target).DeduplicationFieldPaths = fpv.value.([]string)
	case SharedToken_FieldPathSelectorSecret:
		(*target).Secret = fpv.value.(string)
	case SharedToken_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
		(*target).AssociateExistingProbeOnly = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fpv.selector))
	}
}

func (fpv *SharedToken_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SharedToken)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SharedToken_FieldTerminalPathValue' with the value under path in 'SharedToken'.
func (fpv *SharedToken_FieldTerminalPathValue) CompareWith(source *SharedToken) (int, bool) {
	switch fpv.selector {
	case SharedToken_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SharedToken_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SharedToken_FieldPathSelectorQuota:
		leftValue := fpv.value.(int32)
		rightValue := source.GetQuota()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SharedToken_FieldPathSelectorProbeTemplate:
		return 0, false
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		return 0, false
	case SharedToken_FieldPathSelectorSecret:
		leftValue := fpv.value.(string)
		rightValue := source.GetSecret()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SharedToken_FieldPathSelectorMetadata:
		return 0, false
	case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAssociateExistingProbeOnly()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fpv.selector))
	}
}

func (fpv *SharedToken_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SharedToken))
}

type SharedToken_FieldSubPathValue struct {
	SharedToken_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SharedToken_FieldPathValue = (*SharedToken_FieldSubPathValue)(nil)

func (fpvs *SharedToken_FieldSubPathValue) AsProbeTemplatePathValue() (SharedTokenProbeTemplate_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(SharedTokenProbeTemplate_FieldPathValue)
	return res, ok
}
func (fpvs *SharedToken_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *SharedToken_FieldSubPathValue) SetTo(target **SharedToken) {
	if *target == nil {
		*target = new(SharedToken)
	}
	switch fpvs.Selector() {
	case SharedToken_FieldPathSelectorProbeTemplate:
		fpvs.subPathValue.(SharedTokenProbeTemplate_FieldPathValue).SetTo(&(*target).ProbeTemplate)
	case SharedToken_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fpvs.Selector()))
	}
}

func (fpvs *SharedToken_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SharedToken)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SharedToken_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SharedToken_FieldSubPathValue) CompareWith(source *SharedToken) (int, bool) {
	switch fpvs.Selector() {
	case SharedToken_FieldPathSelectorProbeTemplate:
		return fpvs.subPathValue.(SharedTokenProbeTemplate_FieldPathValue).CompareWith(source.GetProbeTemplate())
	case SharedToken_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fpvs.Selector()))
	}
}

func (fpvs *SharedToken_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SharedToken))
}

// SharedToken_FieldPathArrayItemValue allows storing single item in Path-specific values for SharedToken according to their type
// Present only for array (repeated) types.
type SharedToken_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SharedToken_FieldPath
	ContainsValue(*SharedToken) bool
}

// ParseSharedToken_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSharedToken_FieldPathArrayItemValue(pathStr, valueStr string) (SharedToken_FieldPathArrayItemValue, error) {
	fp, err := ParseSharedToken_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SharedToken field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SharedToken_FieldPathArrayItemValue), nil
}

func MustParseSharedToken_FieldPathArrayItemValue(pathStr, valueStr string) SharedToken_FieldPathArrayItemValue {
	fpaiv, err := ParseSharedToken_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SharedToken_FieldTerminalPathArrayItemValue struct {
	SharedToken_FieldTerminalPath
	value interface{}
}

var _ SharedToken_FieldPathArrayItemValue = (*SharedToken_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SharedToken as interface{}
func (fpaiv *SharedToken_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SharedToken_FieldTerminalPathArrayItemValue) AsDeduplicationFieldPathsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *SharedToken_FieldTerminalPathArrayItemValue) GetSingle(source *SharedToken) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SharedToken_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SharedToken))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SharedToken'
func (fpaiv *SharedToken_FieldTerminalPathArrayItemValue) ContainsValue(source *SharedToken) bool {
	slice := fpaiv.SharedToken_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SharedToken_FieldSubPathArrayItemValue struct {
	SharedToken_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SharedToken_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SharedToken_FieldSubPathArrayItemValue) AsProbeTemplatePathItemValue() (SharedTokenProbeTemplate_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(SharedTokenProbeTemplate_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *SharedToken_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SharedToken'
func (fpaivs *SharedToken_FieldSubPathArrayItemValue) ContainsValue(source *SharedToken) bool {
	switch fpaivs.Selector() {
	case SharedToken_FieldPathSelectorProbeTemplate:
		return fpaivs.subPathItemValue.(SharedTokenProbeTemplate_FieldPathArrayItemValue).ContainsValue(source.GetProbeTemplate())
	case SharedToken_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken: %d", fpaivs.Selector()))
	}
}

// SharedToken_FieldPathArrayOfValues allows storing slice of values for SharedToken fields according to their type
type SharedToken_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SharedToken_FieldPath
}

func ParseSharedToken_FieldPathArrayOfValues(pathStr, valuesStr string) (SharedToken_FieldPathArrayOfValues, error) {
	fp, err := ParseSharedToken_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SharedToken field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SharedToken_FieldPathArrayOfValues), nil
}

func MustParseSharedToken_FieldPathArrayOfValues(pathStr, valuesStr string) SharedToken_FieldPathArrayOfValues {
	fpaov, err := ParseSharedToken_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SharedToken_FieldTerminalPathArrayOfValues struct {
	SharedToken_FieldTerminalPath
	values interface{}
}

var _ SharedToken_FieldPathArrayOfValues = (*SharedToken_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SharedToken_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case SharedToken_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case SharedToken_FieldPathSelectorQuota:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case SharedToken_FieldPathSelectorProbeTemplate:
		for _, v := range fpaov.values.([]*SharedToken_ProbeTemplate) {
			values = append(values, v)
		}
	case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case SharedToken_FieldPathSelectorSecret:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case SharedToken_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) AsQuotaArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) AsProbeTemplateArrayOfValues() ([]*SharedToken_ProbeTemplate, bool) {
	res, ok := fpaov.values.([]*SharedToken_ProbeTemplate)
	return res, ok
}
func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) AsDeduplicationFieldPathsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) AsSecretArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *SharedToken_FieldTerminalPathArrayOfValues) AsAssociateExistingProbeOnlyArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type SharedToken_FieldSubPathArrayOfValues struct {
	SharedToken_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SharedToken_FieldPathArrayOfValues = (*SharedToken_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SharedToken_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SharedToken_FieldSubPathArrayOfValues) AsProbeTemplatePathArrayOfValues() (SharedTokenProbeTemplate_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(SharedTokenProbeTemplate_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *SharedToken_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SharedTokenProbeTemplate_FieldPath interface {
	gotenobject.FieldPath
	Selector() SharedTokenProbeTemplate_FieldPathSelector
	Get(source *SharedToken_ProbeTemplate) []interface{}
	GetSingle(source *SharedToken_ProbeTemplate) (interface{}, bool)
	ClearValue(item *SharedToken_ProbeTemplate)

	// Those methods build corresponding SharedTokenProbeTemplate_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SharedTokenProbeTemplate_FieldPathValue
	WithIArrayOfValues(values interface{}) SharedTokenProbeTemplate_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SharedTokenProbeTemplate_FieldPathArrayItemValue
}

type SharedTokenProbeTemplate_FieldPathSelector int32

const (
	SharedTokenProbeTemplate_FieldPathSelectorMetadata    SharedTokenProbeTemplate_FieldPathSelector = 0
	SharedTokenProbeTemplate_FieldPathSelectorDisplayName SharedTokenProbeTemplate_FieldPathSelector = 1
	SharedTokenProbeTemplate_FieldPathSelectorSpec        SharedTokenProbeTemplate_FieldPathSelector = 2
)

func (s SharedTokenProbeTemplate_FieldPathSelector) String() string {
	switch s {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		return "metadata"
	case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
		return "display_name"
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		return "spec"
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", s))
	}
}

func BuildSharedTokenProbeTemplate_FieldPath(fp gotenobject.RawFieldPath) (SharedTokenProbeTemplate_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SharedToken_ProbeTemplate")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "metadata":
			return &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorMetadata}, nil
		case "display_name", "displayName", "display-name":
			return &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorDisplayName}, nil
		case "spec":
			return &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorSpec}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := BuildSharedTokenProbeTemplateMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SharedTokenProbeTemplate_FieldSubPath{selector: SharedTokenProbeTemplate_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildSharedTokenProbeTemplateSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SharedTokenProbeTemplate_FieldSubPath{selector: SharedTokenProbeTemplate_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SharedToken_ProbeTemplate", fp)
}

func ParseSharedTokenProbeTemplate_FieldPath(rawField string) (SharedTokenProbeTemplate_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSharedTokenProbeTemplate_FieldPath(fp)
}

func MustParseSharedTokenProbeTemplate_FieldPath(rawField string) SharedTokenProbeTemplate_FieldPath {
	fp, err := ParseSharedTokenProbeTemplate_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SharedTokenProbeTemplate_FieldTerminalPath struct {
	selector SharedTokenProbeTemplate_FieldPathSelector
}

var _ SharedTokenProbeTemplate_FieldPath = (*SharedTokenProbeTemplate_FieldTerminalPath)(nil)

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) Selector() SharedTokenProbeTemplate_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SharedTokenProbeTemplate_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SharedTokenProbeTemplate_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SharedToken_ProbeTemplate
func (fp *SharedTokenProbeTemplate_FieldTerminalPath) Get(source *SharedToken_ProbeTemplate) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case SharedTokenProbeTemplate_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fp.selector))
		}
	}
	return
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SharedToken_ProbeTemplate))
}

// GetSingle returns value pointed by specific field of from source SharedToken_ProbeTemplate
func (fp *SharedTokenProbeTemplate_FieldTerminalPath) GetSingle(source *SharedToken_ProbeTemplate) (interface{}, bool) {
	switch fp.selector {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SharedToken_ProbeTemplate))
}

// GetDefault returns a default value of the field type
func (fp *SharedTokenProbeTemplate_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		return (*SharedToken_ProbeTemplate_Meta)(nil)
	case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
		return ""
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		return (*SharedToken_ProbeTemplate_Spec)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) ClearValue(item *SharedToken_ProbeTemplate) {
	if item != nil {
		switch fp.selector {
		case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
			item.Metadata = nil
		case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case SharedTokenProbeTemplate_FieldPathSelectorSpec:
			item.Spec = nil
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fp.selector))
		}
	}
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SharedToken_ProbeTemplate))
}

// IsLeaf - whether field path is holds simple value
func (fp *SharedTokenProbeTemplate_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SharedTokenProbeTemplate_FieldPathSelectorDisplayName
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) WithIValue(value interface{}) SharedTokenProbeTemplate_FieldPathValue {
	switch fp.selector {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		return &SharedTokenProbeTemplate_FieldTerminalPathValue{SharedTokenProbeTemplate_FieldTerminalPath: *fp, value: value.(*SharedToken_ProbeTemplate_Meta)}
	case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
		return &SharedTokenProbeTemplate_FieldTerminalPathValue{SharedTokenProbeTemplate_FieldTerminalPath: *fp, value: value.(string)}
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		return &SharedTokenProbeTemplate_FieldTerminalPathValue{SharedTokenProbeTemplate_FieldTerminalPath: *fp, value: value.(*SharedToken_ProbeTemplate_Spec)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) WithIArrayOfValues(values interface{}) SharedTokenProbeTemplate_FieldPathArrayOfValues {
	fpaov := &SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplate_FieldTerminalPath: *fp}
	switch fp.selector {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		return &SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplate_FieldTerminalPath: *fp, values: values.([]*SharedToken_ProbeTemplate_Meta)}
	case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
		return &SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplate_FieldTerminalPath: *fp, values: values.([]string)}
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		return &SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplate_FieldTerminalPath: *fp, values: values.([]*SharedToken_ProbeTemplate_Spec)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fp.selector))
	}
	return fpaov
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) WithIArrayItemValue(value interface{}) SharedTokenProbeTemplate_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplate_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SharedTokenProbeTemplate_FieldSubPath struct {
	selector SharedTokenProbeTemplate_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SharedTokenProbeTemplate_FieldPath = (*SharedTokenProbeTemplate_FieldSubPath)(nil)

func (fps *SharedTokenProbeTemplate_FieldSubPath) Selector() SharedTokenProbeTemplate_FieldPathSelector {
	return fps.selector
}
func (fps *SharedTokenProbeTemplate_FieldSubPath) AsMetadataSubPath() (SharedTokenProbeTemplateMeta_FieldPath, bool) {
	res, ok := fps.subPath.(SharedTokenProbeTemplateMeta_FieldPath)
	return res, ok
}
func (fps *SharedTokenProbeTemplate_FieldSubPath) AsSpecSubPath() (SharedTokenProbeTemplateSpec_FieldPath, bool) {
	res, ok := fps.subPath.(SharedTokenProbeTemplateSpec_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SharedTokenProbeTemplate_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SharedTokenProbeTemplate_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SharedToken_ProbeTemplate
func (fps *SharedTokenProbeTemplate_FieldSubPath) Get(source *SharedToken_ProbeTemplate) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fps.selector))
	}
	return
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SharedToken_ProbeTemplate))
}

// GetSingle returns value of selected field from source SharedToken_ProbeTemplate
func (fps *SharedTokenProbeTemplate_FieldSubPath) GetSingle(source *SharedToken_ProbeTemplate) (interface{}, bool) {
	switch fps.selector {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fps.selector))
	}
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SharedToken_ProbeTemplate))
}

// GetDefault returns a default value of the field type
func (fps *SharedTokenProbeTemplate_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) ClearValue(item *SharedToken_ProbeTemplate) {
	if item != nil {
		switch fps.selector {
		case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case SharedTokenProbeTemplate_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fps.selector))
		}
	}
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SharedToken_ProbeTemplate))
}

// IsLeaf - whether field path is holds simple value
func (fps *SharedTokenProbeTemplate_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SharedTokenProbeTemplate_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) WithIValue(value interface{}) SharedTokenProbeTemplate_FieldPathValue {
	return &SharedTokenProbeTemplate_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) WithIArrayOfValues(values interface{}) SharedTokenProbeTemplate_FieldPathArrayOfValues {
	return &SharedTokenProbeTemplate_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) WithIArrayItemValue(value interface{}) SharedTokenProbeTemplate_FieldPathArrayItemValue {
	return &SharedTokenProbeTemplate_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SharedTokenProbeTemplate_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SharedTokenProbeTemplate_FieldPathValue allows storing values for ProbeTemplate fields according to their type
type SharedTokenProbeTemplate_FieldPathValue interface {
	SharedTokenProbeTemplate_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SharedToken_ProbeTemplate)
	CompareWith(*SharedToken_ProbeTemplate) (cmp int, comparable bool)
}

func ParseSharedTokenProbeTemplate_FieldPathValue(pathStr, valueStr string) (SharedTokenProbeTemplate_FieldPathValue, error) {
	fp, err := ParseSharedTokenProbeTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeTemplate field path value from %s: %v", valueStr, err)
	}
	return fpv.(SharedTokenProbeTemplate_FieldPathValue), nil
}

func MustParseSharedTokenProbeTemplate_FieldPathValue(pathStr, valueStr string) SharedTokenProbeTemplate_FieldPathValue {
	fpv, err := ParseSharedTokenProbeTemplate_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SharedTokenProbeTemplate_FieldTerminalPathValue struct {
	SharedTokenProbeTemplate_FieldTerminalPath
	value interface{}
}

var _ SharedTokenProbeTemplate_FieldPathValue = (*SharedTokenProbeTemplate_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbeTemplate' as interface{}
func (fpv *SharedTokenProbeTemplate_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SharedTokenProbeTemplate_FieldTerminalPathValue) AsMetadataValue() (*SharedToken_ProbeTemplate_Meta, bool) {
	res, ok := fpv.value.(*SharedToken_ProbeTemplate_Meta)
	return res, ok
}
func (fpv *SharedTokenProbeTemplate_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *SharedTokenProbeTemplate_FieldTerminalPathValue) AsSpecValue() (*SharedToken_ProbeTemplate_Spec, bool) {
	res, ok := fpv.value.(*SharedToken_ProbeTemplate_Spec)
	return res, ok
}

// SetTo stores value for selected field for object ProbeTemplate
func (fpv *SharedTokenProbeTemplate_FieldTerminalPathValue) SetTo(target **SharedToken_ProbeTemplate) {
	if *target == nil {
		*target = new(SharedToken_ProbeTemplate)
	}
	switch fpv.selector {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*SharedToken_ProbeTemplate_Meta)
	case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*SharedToken_ProbeTemplate_Spec)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fpv.selector))
	}
}

func (fpv *SharedTokenProbeTemplate_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SharedToken_ProbeTemplate)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SharedTokenProbeTemplate_FieldTerminalPathValue' with the value under path in 'SharedToken_ProbeTemplate'.
func (fpv *SharedTokenProbeTemplate_FieldTerminalPathValue) CompareWith(source *SharedToken_ProbeTemplate) (int, bool) {
	switch fpv.selector {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		return 0, false
	case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fpv.selector))
	}
}

func (fpv *SharedTokenProbeTemplate_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SharedToken_ProbeTemplate))
}

type SharedTokenProbeTemplate_FieldSubPathValue struct {
	SharedTokenProbeTemplate_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SharedTokenProbeTemplate_FieldPathValue = (*SharedTokenProbeTemplate_FieldSubPathValue)(nil)

func (fpvs *SharedTokenProbeTemplate_FieldSubPathValue) AsMetadataPathValue() (SharedTokenProbeTemplateMeta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(SharedTokenProbeTemplateMeta_FieldPathValue)
	return res, ok
}
func (fpvs *SharedTokenProbeTemplate_FieldSubPathValue) AsSpecPathValue() (SharedTokenProbeTemplateSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(SharedTokenProbeTemplateSpec_FieldPathValue)
	return res, ok
}

func (fpvs *SharedTokenProbeTemplate_FieldSubPathValue) SetTo(target **SharedToken_ProbeTemplate) {
	if *target == nil {
		*target = new(SharedToken_ProbeTemplate)
	}
	switch fpvs.Selector() {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		fpvs.subPathValue.(SharedTokenProbeTemplateMeta_FieldPathValue).SetTo(&(*target).Metadata)
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		fpvs.subPathValue.(SharedTokenProbeTemplateSpec_FieldPathValue).SetTo(&(*target).Spec)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fpvs.Selector()))
	}
}

func (fpvs *SharedTokenProbeTemplate_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SharedToken_ProbeTemplate)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SharedTokenProbeTemplate_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SharedTokenProbeTemplate_FieldSubPathValue) CompareWith(source *SharedToken_ProbeTemplate) (int, bool) {
	switch fpvs.Selector() {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(SharedTokenProbeTemplateMeta_FieldPathValue).CompareWith(source.GetMetadata())
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		return fpvs.subPathValue.(SharedTokenProbeTemplateSpec_FieldPathValue).CompareWith(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fpvs.Selector()))
	}
}

func (fpvs *SharedTokenProbeTemplate_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SharedToken_ProbeTemplate))
}

// SharedTokenProbeTemplate_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbeTemplate according to their type
// Present only for array (repeated) types.
type SharedTokenProbeTemplate_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SharedTokenProbeTemplate_FieldPath
	ContainsValue(*SharedToken_ProbeTemplate) bool
}

// ParseSharedTokenProbeTemplate_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSharedTokenProbeTemplate_FieldPathArrayItemValue(pathStr, valueStr string) (SharedTokenProbeTemplate_FieldPathArrayItemValue, error) {
	fp, err := ParseSharedTokenProbeTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeTemplate field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SharedTokenProbeTemplate_FieldPathArrayItemValue), nil
}

func MustParseSharedTokenProbeTemplate_FieldPathArrayItemValue(pathStr, valueStr string) SharedTokenProbeTemplate_FieldPathArrayItemValue {
	fpaiv, err := ParseSharedTokenProbeTemplate_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SharedTokenProbeTemplate_FieldTerminalPathArrayItemValue struct {
	SharedTokenProbeTemplate_FieldTerminalPath
	value interface{}
}

var _ SharedTokenProbeTemplate_FieldPathArrayItemValue = (*SharedTokenProbeTemplate_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SharedToken_ProbeTemplate as interface{}
func (fpaiv *SharedTokenProbeTemplate_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SharedTokenProbeTemplate_FieldTerminalPathArrayItemValue) GetSingle(source *SharedToken_ProbeTemplate) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SharedTokenProbeTemplate_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SharedToken_ProbeTemplate))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeTemplate'
func (fpaiv *SharedTokenProbeTemplate_FieldTerminalPathArrayItemValue) ContainsValue(source *SharedToken_ProbeTemplate) bool {
	slice := fpaiv.SharedTokenProbeTemplate_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SharedTokenProbeTemplate_FieldSubPathArrayItemValue struct {
	SharedTokenProbeTemplate_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SharedTokenProbeTemplate_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SharedTokenProbeTemplate_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (SharedTokenProbeTemplateMeta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(SharedTokenProbeTemplateMeta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *SharedTokenProbeTemplate_FieldSubPathArrayItemValue) AsSpecPathItemValue() (SharedTokenProbeTemplateSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(SharedTokenProbeTemplateSpec_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeTemplate'
func (fpaivs *SharedTokenProbeTemplate_FieldSubPathArrayItemValue) ContainsValue(source *SharedToken_ProbeTemplate) bool {
	switch fpaivs.Selector() {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(SharedTokenProbeTemplateMeta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(SharedTokenProbeTemplateSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate: %d", fpaivs.Selector()))
	}
}

// SharedTokenProbeTemplate_FieldPathArrayOfValues allows storing slice of values for ProbeTemplate fields according to their type
type SharedTokenProbeTemplate_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SharedTokenProbeTemplate_FieldPath
}

func ParseSharedTokenProbeTemplate_FieldPathArrayOfValues(pathStr, valuesStr string) (SharedTokenProbeTemplate_FieldPathArrayOfValues, error) {
	fp, err := ParseSharedTokenProbeTemplate_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeTemplate field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SharedTokenProbeTemplate_FieldPathArrayOfValues), nil
}

func MustParseSharedTokenProbeTemplate_FieldPathArrayOfValues(pathStr, valuesStr string) SharedTokenProbeTemplate_FieldPathArrayOfValues {
	fpaov, err := ParseSharedTokenProbeTemplate_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues struct {
	SharedTokenProbeTemplate_FieldTerminalPath
	values interface{}
}

var _ SharedTokenProbeTemplate_FieldPathArrayOfValues = (*SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*SharedToken_ProbeTemplate_Meta) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplate_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*SharedToken_ProbeTemplate_Spec) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*SharedToken_ProbeTemplate_Meta, bool) {
	res, ok := fpaov.values.([]*SharedToken_ProbeTemplate_Meta)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplate_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*SharedToken_ProbeTemplate_Spec, bool) {
	res, ok := fpaov.values.([]*SharedToken_ProbeTemplate_Spec)
	return res, ok
}

type SharedTokenProbeTemplate_FieldSubPathArrayOfValues struct {
	SharedTokenProbeTemplate_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SharedTokenProbeTemplate_FieldPathArrayOfValues = (*SharedTokenProbeTemplate_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SharedTokenProbeTemplate_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SharedTokenProbeTemplate_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (SharedTokenProbeTemplateMeta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(SharedTokenProbeTemplateMeta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *SharedTokenProbeTemplate_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (SharedTokenProbeTemplateSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(SharedTokenProbeTemplateSpec_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SharedTokenProbeTemplateMeta_FieldPath interface {
	gotenobject.FieldPath
	Selector() SharedTokenProbeTemplateMeta_FieldPathSelector
	Get(source *SharedToken_ProbeTemplate_Meta) []interface{}
	GetSingle(source *SharedToken_ProbeTemplate_Meta) (interface{}, bool)
	ClearValue(item *SharedToken_ProbeTemplate_Meta)

	// Those methods build corresponding SharedTokenProbeTemplateMeta_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SharedTokenProbeTemplateMeta_FieldPathValue
	WithIArrayOfValues(values interface{}) SharedTokenProbeTemplateMeta_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SharedTokenProbeTemplateMeta_FieldPathArrayItemValue
}

type SharedTokenProbeTemplateMeta_FieldPathSelector int32

const (
	SharedTokenProbeTemplateMeta_FieldPathSelectorTags        SharedTokenProbeTemplateMeta_FieldPathSelector = 0
	SharedTokenProbeTemplateMeta_FieldPathSelectorLabels      SharedTokenProbeTemplateMeta_FieldPathSelector = 1
	SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations SharedTokenProbeTemplateMeta_FieldPathSelector = 2
)

func (s SharedTokenProbeTemplateMeta_FieldPathSelector) String() string {
	switch s {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		return "tags"
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		return "labels"
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		return "annotations"
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", s))
	}
}

func BuildSharedTokenProbeTemplateMeta_FieldPath(fp gotenobject.RawFieldPath) (SharedTokenProbeTemplateMeta_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SharedToken_ProbeTemplate_Meta")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "tags":
			return &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorTags}, nil
		case "labels":
			return &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorLabels}, nil
		case "annotations":
			return &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations}, nil
		}
	} else {
		switch fp[0] {
		case "labels":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object SharedToken_ProbeTemplate_Meta)", fp)
			}
			return &SharedTokenProbeTemplateMeta_FieldPathMap{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorLabels, key: fp[1]}, nil
		case "annotations":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object SharedToken_ProbeTemplate_Meta)", fp)
			}
			return &SharedTokenProbeTemplateMeta_FieldPathMap{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SharedToken_ProbeTemplate_Meta", fp)
}

func ParseSharedTokenProbeTemplateMeta_FieldPath(rawField string) (SharedTokenProbeTemplateMeta_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSharedTokenProbeTemplateMeta_FieldPath(fp)
}

func MustParseSharedTokenProbeTemplateMeta_FieldPath(rawField string) SharedTokenProbeTemplateMeta_FieldPath {
	fp, err := ParseSharedTokenProbeTemplateMeta_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SharedTokenProbeTemplateMeta_FieldTerminalPath struct {
	selector SharedTokenProbeTemplateMeta_FieldPathSelector
}

var _ SharedTokenProbeTemplateMeta_FieldPath = (*SharedTokenProbeTemplateMeta_FieldTerminalPath)(nil)

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) Selector() SharedTokenProbeTemplateMeta_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SharedToken_ProbeTemplate_Meta
func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) Get(source *SharedToken_ProbeTemplate_Meta) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
			for _, value := range source.GetTags() {
				values = append(values, value)
			}
		case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
			values = append(values, source.Labels)
		case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
			values = append(values, source.Annotations)
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fp.selector))
		}
	}
	return
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SharedToken_ProbeTemplate_Meta))
}

// GetSingle returns value pointed by specific field of from source SharedToken_ProbeTemplate_Meta
func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) GetSingle(source *SharedToken_ProbeTemplate_Meta) (interface{}, bool) {
	switch fp.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		res := source.GetTags()
		return res, res != nil
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		res := source.GetLabels()
		return res, res != nil
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		res := source.GetAnnotations()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SharedToken_ProbeTemplate_Meta))
}

// GetDefault returns a default value of the field type
func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		return ([]string)(nil)
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		return (map[string]string)(nil)
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		return (map[string]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) ClearValue(item *SharedToken_ProbeTemplate_Meta) {
	if item != nil {
		switch fp.selector {
		case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
			item.Tags = nil
		case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
			item.Labels = nil
		case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
			item.Annotations = nil
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fp.selector))
		}
	}
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SharedToken_ProbeTemplate_Meta))
}

// IsLeaf - whether field path is holds simple value
func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SharedTokenProbeTemplateMeta_FieldPathSelectorTags ||
		fp.selector == SharedTokenProbeTemplateMeta_FieldPathSelectorLabels ||
		fp.selector == SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) WithIValue(value interface{}) SharedTokenProbeTemplateMeta_FieldPathValue {
	switch fp.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		return &SharedTokenProbeTemplateMeta_FieldTerminalPathValue{SharedTokenProbeTemplateMeta_FieldTerminalPath: *fp, value: value.([]string)}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		return &SharedTokenProbeTemplateMeta_FieldTerminalPathValue{SharedTokenProbeTemplateMeta_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		return &SharedTokenProbeTemplateMeta_FieldTerminalPathValue{SharedTokenProbeTemplateMeta_FieldTerminalPath: *fp, value: value.(map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) WithIArrayOfValues(values interface{}) SharedTokenProbeTemplateMeta_FieldPathArrayOfValues {
	fpaov := &SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateMeta_FieldTerminalPath: *fp}
	switch fp.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		return &SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateMeta_FieldTerminalPath: *fp, values: values.([][]string)}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		return &SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateMeta_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		return &SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateMeta_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fp.selector))
	}
	return fpaov
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) WithIArrayItemValue(value interface{}) SharedTokenProbeTemplateMeta_FieldPathArrayItemValue {
	switch fp.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		return &SharedTokenProbeTemplateMeta_FieldTerminalPathArrayItemValue{SharedTokenProbeTemplateMeta_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplateMeta_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type SharedTokenProbeTemplateMeta_FieldPathMap struct {
	key      string
	selector SharedTokenProbeTemplateMeta_FieldPathSelector
}

var _ SharedTokenProbeTemplateMeta_FieldPath = (*SharedTokenProbeTemplateMeta_FieldPathMap)(nil)

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) Selector() SharedTokenProbeTemplateMeta_FieldPathSelector {
	return fpm.selector
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source SharedToken_ProbeTemplate_Meta
func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) Get(source *SharedToken_ProbeTemplate_Meta) (values []interface{}) {
	switch fpm.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		if value, ok := source.GetLabels()[fpm.key]; ok {
			values = append(values, value)
		}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		if value, ok := source.GetAnnotations()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpm.selector))
	}
	return
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*SharedToken_ProbeTemplate_Meta))
}

// GetSingle returns value by selected field map key from source SharedToken_ProbeTemplate_Meta
func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) GetSingle(source *SharedToken_ProbeTemplate_Meta) (interface{}, bool) {
	switch fpm.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		res, ok := source.GetLabels()[fpm.key]
		return res, ok
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		res, ok := source.GetAnnotations()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpm.selector))
	}
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*SharedToken_ProbeTemplate_Meta))
}

// GetDefault returns a default value of the field type
func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		var v string
		return v
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpm.selector))
	}
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) ClearValue(item *SharedToken_ProbeTemplate_Meta) {
	if item != nil {
		switch fpm.selector {
		case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
			delete(item.Labels, fpm.key)
		case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
			delete(item.Annotations, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpm.selector))
		}
	}
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*SharedToken_ProbeTemplate_Meta))
}

// IsLeaf - whether field path is holds simple value
func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		return true
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpm.selector))
	}
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) WithIValue(value interface{}) SharedTokenProbeTemplateMeta_FieldPathValue {
	switch fpm.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		return &SharedTokenProbeTemplateMeta_FieldPathMapValue{SharedTokenProbeTemplateMeta_FieldPathMap: *fpm, value: value.(string)}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		return &SharedTokenProbeTemplateMeta_FieldPathMapValue{SharedTokenProbeTemplateMeta_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpm.selector))
	}
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) WithIArrayOfValues(values interface{}) SharedTokenProbeTemplateMeta_FieldPathArrayOfValues {
	switch fpm.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		return &SharedTokenProbeTemplateMeta_FieldPathMapArrayOfValues{SharedTokenProbeTemplateMeta_FieldPathMap: *fpm, values: values.([]string)}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		return &SharedTokenProbeTemplateMeta_FieldPathMapArrayOfValues{SharedTokenProbeTemplateMeta_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpm.selector))
	}
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) WithIArrayItemValue(value interface{}) SharedTokenProbeTemplateMeta_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *SharedTokenProbeTemplateMeta_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// SharedTokenProbeTemplateMeta_FieldPathValue allows storing values for Meta fields according to their type
type SharedTokenProbeTemplateMeta_FieldPathValue interface {
	SharedTokenProbeTemplateMeta_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SharedToken_ProbeTemplate_Meta)
	CompareWith(*SharedToken_ProbeTemplate_Meta) (cmp int, comparable bool)
}

func ParseSharedTokenProbeTemplateMeta_FieldPathValue(pathStr, valueStr string) (SharedTokenProbeTemplateMeta_FieldPathValue, error) {
	fp, err := ParseSharedTokenProbeTemplateMeta_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Meta field path value from %s: %v", valueStr, err)
	}
	return fpv.(SharedTokenProbeTemplateMeta_FieldPathValue), nil
}

func MustParseSharedTokenProbeTemplateMeta_FieldPathValue(pathStr, valueStr string) SharedTokenProbeTemplateMeta_FieldPathValue {
	fpv, err := ParseSharedTokenProbeTemplateMeta_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SharedTokenProbeTemplateMeta_FieldTerminalPathValue struct {
	SharedTokenProbeTemplateMeta_FieldTerminalPath
	value interface{}
}

var _ SharedTokenProbeTemplateMeta_FieldPathValue = (*SharedTokenProbeTemplateMeta_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Meta' as interface{}
func (fpv *SharedTokenProbeTemplateMeta_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SharedTokenProbeTemplateMeta_FieldTerminalPathValue) AsTagsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *SharedTokenProbeTemplateMeta_FieldTerminalPathValue) AsLabelsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *SharedTokenProbeTemplateMeta_FieldTerminalPathValue) AsAnnotationsValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}

// SetTo stores value for selected field for object Meta
func (fpv *SharedTokenProbeTemplateMeta_FieldTerminalPathValue) SetTo(target **SharedToken_ProbeTemplate_Meta) {
	if *target == nil {
		*target = new(SharedToken_ProbeTemplate_Meta)
	}
	switch fpv.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		(*target).Tags = fpv.value.([]string)
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		(*target).Labels = fpv.value.(map[string]string)
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		(*target).Annotations = fpv.value.(map[string]string)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpv.selector))
	}
}

func (fpv *SharedTokenProbeTemplateMeta_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SharedToken_ProbeTemplate_Meta)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SharedTokenProbeTemplateMeta_FieldTerminalPathValue' with the value under path in 'SharedToken_ProbeTemplate_Meta'.
func (fpv *SharedTokenProbeTemplateMeta_FieldTerminalPathValue) CompareWith(source *SharedToken_ProbeTemplate_Meta) (int, bool) {
	switch fpv.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		return 0, false
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		return 0, false
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpv.selector))
	}
}

func (fpv *SharedTokenProbeTemplateMeta_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SharedToken_ProbeTemplate_Meta))
}

type SharedTokenProbeTemplateMeta_FieldPathMapValue struct {
	SharedTokenProbeTemplateMeta_FieldPathMap
	value interface{}
}

var _ SharedTokenProbeTemplateMeta_FieldPathValue = (*SharedTokenProbeTemplateMeta_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Meta as interface{}
func (fpmv *SharedTokenProbeTemplateMeta_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *SharedTokenProbeTemplateMeta_FieldPathMapValue) AsLabelsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}
func (fpmv *SharedTokenProbeTemplateMeta_FieldPathMapValue) AsAnnotationsElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in Meta
func (fpmv *SharedTokenProbeTemplateMeta_FieldPathMapValue) SetTo(target **SharedToken_ProbeTemplate_Meta) {
	if *target == nil {
		*target = new(SharedToken_ProbeTemplate_Meta)
	}
	switch fpmv.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		if (*target).Labels == nil {
			(*target).Labels = make(map[string]string)
		}
		(*target).Labels[fpmv.key] = fpmv.value.(string)
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		if (*target).Annotations == nil {
			(*target).Annotations = make(map[string]string)
		}
		(*target).Annotations[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpmv.selector))
	}
}

func (fpmv *SharedTokenProbeTemplateMeta_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SharedToken_ProbeTemplate_Meta)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SharedTokenProbeTemplateMeta_FieldPathMapValue' with the value under path in 'SharedToken_ProbeTemplate_Meta'.
func (fpmv *SharedTokenProbeTemplateMeta_FieldPathMapValue) CompareWith(source *SharedToken_ProbeTemplate_Meta) (int, bool) {
	switch fpmv.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		leftValue := fpmv.value.(string)
		rightValue := source.GetLabels()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		leftValue := fpmv.value.(string)
		rightValue := source.GetAnnotations()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Meta: %d", fpmv.selector))
	}
}

func (fpmv *SharedTokenProbeTemplateMeta_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*SharedToken_ProbeTemplate_Meta))
}

// SharedTokenProbeTemplateMeta_FieldPathArrayItemValue allows storing single item in Path-specific values for Meta according to their type
// Present only for array (repeated) types.
type SharedTokenProbeTemplateMeta_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SharedTokenProbeTemplateMeta_FieldPath
	ContainsValue(*SharedToken_ProbeTemplate_Meta) bool
}

// ParseSharedTokenProbeTemplateMeta_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSharedTokenProbeTemplateMeta_FieldPathArrayItemValue(pathStr, valueStr string) (SharedTokenProbeTemplateMeta_FieldPathArrayItemValue, error) {
	fp, err := ParseSharedTokenProbeTemplateMeta_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Meta field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SharedTokenProbeTemplateMeta_FieldPathArrayItemValue), nil
}

func MustParseSharedTokenProbeTemplateMeta_FieldPathArrayItemValue(pathStr, valueStr string) SharedTokenProbeTemplateMeta_FieldPathArrayItemValue {
	fpaiv, err := ParseSharedTokenProbeTemplateMeta_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SharedTokenProbeTemplateMeta_FieldTerminalPathArrayItemValue struct {
	SharedTokenProbeTemplateMeta_FieldTerminalPath
	value interface{}
}

var _ SharedTokenProbeTemplateMeta_FieldPathArrayItemValue = (*SharedTokenProbeTemplateMeta_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SharedToken_ProbeTemplate_Meta as interface{}
func (fpaiv *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayItemValue) AsTagsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayItemValue) GetSingle(source *SharedToken_ProbeTemplate_Meta) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SharedToken_ProbeTemplate_Meta))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Meta'
func (fpaiv *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayItemValue) ContainsValue(source *SharedToken_ProbeTemplate_Meta) bool {
	slice := fpaiv.SharedTokenProbeTemplateMeta_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// SharedTokenProbeTemplateMeta_FieldPathArrayOfValues allows storing slice of values for Meta fields according to their type
type SharedTokenProbeTemplateMeta_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SharedTokenProbeTemplateMeta_FieldPath
}

func ParseSharedTokenProbeTemplateMeta_FieldPathArrayOfValues(pathStr, valuesStr string) (SharedTokenProbeTemplateMeta_FieldPathArrayOfValues, error) {
	fp, err := ParseSharedTokenProbeTemplateMeta_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Meta field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SharedTokenProbeTemplateMeta_FieldPathArrayOfValues), nil
}

func MustParseSharedTokenProbeTemplateMeta_FieldPathArrayOfValues(pathStr, valuesStr string) SharedTokenProbeTemplateMeta_FieldPathArrayOfValues {
	fpaov, err := ParseSharedTokenProbeTemplateMeta_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues struct {
	SharedTokenProbeTemplateMeta_FieldTerminalPath
	values interface{}
}

var _ SharedTokenProbeTemplateMeta_FieldPathArrayOfValues = (*SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues) AsTagsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues) AsLabelsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplateMeta_FieldTerminalPathArrayOfValues) AsAnnotationsArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}

type SharedTokenProbeTemplateMeta_FieldPathMapArrayOfValues struct {
	SharedTokenProbeTemplateMeta_FieldPathMap
	values interface{}
}

var _ SharedTokenProbeTemplateMeta_FieldPathArrayOfValues = (*SharedTokenProbeTemplateMeta_FieldPathMapArrayOfValues)(nil)

func (fpmaov *SharedTokenProbeTemplateMeta_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *SharedTokenProbeTemplateMeta_FieldPathMapArrayOfValues) AsLabelsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}
func (fpmaov *SharedTokenProbeTemplateMeta_FieldPathMapArrayOfValues) AsAnnotationsArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type SharedTokenProbeTemplateSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() SharedTokenProbeTemplateSpec_FieldPathSelector
	Get(source *SharedToken_ProbeTemplate_Spec) []interface{}
	GetSingle(source *SharedToken_ProbeTemplate_Spec) (interface{}, bool)
	ClearValue(item *SharedToken_ProbeTemplate_Spec)

	// Those methods build corresponding SharedTokenProbeTemplateSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) SharedTokenProbeTemplateSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) SharedTokenProbeTemplateSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) SharedTokenProbeTemplateSpec_FieldPathArrayItemValue
}

type SharedTokenProbeTemplateSpec_FieldPathSelector int32

const (
	SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup        SharedTokenProbeTemplateSpec_FieldPathSelector = 0
	SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation   SharedTokenProbeTemplateSpec_FieldPathSelector = 1
	SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery SharedTokenProbeTemplateSpec_FieldPathSelector = 2
	SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo       SharedTokenProbeTemplateSpec_FieldPathSelector = 3
	SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest  SharedTokenProbeTemplateSpec_FieldPathSelector = 4
	SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType         SharedTokenProbeTemplateSpec_FieldPathSelector = 5
	SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers     SharedTokenProbeTemplateSpec_FieldPathSelector = 6
)

func (s SharedTokenProbeTemplateSpec_FieldPathSelector) String() string {
	switch s {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
		return "probe_group"
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		return "primary_location"
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		return "location_discovery"
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		return "contact_info"
	case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
		return "disable_speedtest"
	case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
		return "agent_type"
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		return "target_servers"
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", s))
	}
}

func BuildSharedTokenProbeTemplateSpec_FieldPath(fp gotenobject.RawFieldPath) (SharedTokenProbeTemplateSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object SharedToken_ProbeTemplate_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_group", "probeGroup", "probe-group":
			return &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup}, nil
		case "primary_location", "primaryLocation", "primary-location":
			return &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation}, nil
		case "location_discovery", "locationDiscovery", "location-discovery":
			return &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery}, nil
		case "contact_info", "contactInfo", "contact-info":
			return &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo}, nil
		case "disable_speedtest", "disableSpeedtest", "disable-speedtest":
			return &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest}, nil
		case "agent_type", "agentType", "agent-type":
			return &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType}, nil
		case "target_servers", "targetServers", "target-servers":
			return &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers}, nil
		}
	} else {
		switch fp[0] {
		case "primary_location", "primaryLocation", "primary-location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SharedTokenProbeTemplateSpec_FieldSubPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation, subPath: subpath}, nil
			}
		case "location_discovery", "locationDiscovery", "location-discovery":
			if subpath, err := common.BuildLocationDiscoverySpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SharedTokenProbeTemplateSpec_FieldSubPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery, subPath: subpath}, nil
			}
		case "contact_info", "contactInfo", "contact-info":
			if subpath, err := common.BuildContactInformation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SharedTokenProbeTemplateSpec_FieldSubPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo, subPath: subpath}, nil
			}
		case "target_servers", "targetServers", "target-servers":
			if subpath, err := probe.BuildProbeSpecTargetServers_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &SharedTokenProbeTemplateSpec_FieldSubPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object SharedToken_ProbeTemplate_Spec", fp)
}

func ParseSharedTokenProbeTemplateSpec_FieldPath(rawField string) (SharedTokenProbeTemplateSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildSharedTokenProbeTemplateSpec_FieldPath(fp)
}

func MustParseSharedTokenProbeTemplateSpec_FieldPath(rawField string) SharedTokenProbeTemplateSpec_FieldPath {
	fp, err := ParseSharedTokenProbeTemplateSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type SharedTokenProbeTemplateSpec_FieldTerminalPath struct {
	selector SharedTokenProbeTemplateSpec_FieldPathSelector
}

var _ SharedTokenProbeTemplateSpec_FieldPath = (*SharedTokenProbeTemplateSpec_FieldTerminalPath)(nil)

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) Selector() SharedTokenProbeTemplateSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source SharedToken_ProbeTemplate_Spec
func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) Get(source *SharedToken_ProbeTemplate_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
			if source.ProbeGroup != nil {
				values = append(values, source.ProbeGroup)
			}
		case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
			if source.PrimaryLocation != nil {
				values = append(values, source.PrimaryLocation)
			}
		case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
			if source.LocationDiscovery != nil {
				values = append(values, source.LocationDiscovery)
			}
		case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
			if source.ContactInfo != nil {
				values = append(values, source.ContactInfo)
			}
		case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
			values = append(values, source.DisableSpeedtest)
		case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
			values = append(values, source.AgentType)
		case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
			if source.TargetServers != nil {
				values = append(values, source.TargetServers)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*SharedToken_ProbeTemplate_Spec))
}

// GetSingle returns value pointed by specific field of from source SharedToken_ProbeTemplate_Spec
func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) GetSingle(source *SharedToken_ProbeTemplate_Spec) (interface{}, bool) {
	switch fp.selector {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
		res := source.GetProbeGroup()
		return res, res != nil
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		res := source.GetPrimaryLocation()
		return res, res != nil
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		res := source.GetLocationDiscovery()
		return res, res != nil
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		res := source.GetContactInfo()
		return res, res != nil
	case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
		return source.GetDisableSpeedtest(), source != nil
	case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
		return source.GetAgentType(), source != nil
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		res := source.GetTargetServers()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*SharedToken_ProbeTemplate_Spec))
}

// GetDefault returns a default value of the field type
func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
		return (*probe_group.Reference)(nil)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		return (*common.Location)(nil)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		return (*common.LocationDiscoverySpec)(nil)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		return (*common.ContactInformation)(nil)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
		return false
	case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
		return probe.Probe_UNKNOWN
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		return (*probe.Probe_Spec_TargetServers)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) ClearValue(item *SharedToken_ProbeTemplate_Spec) {
	if item != nil {
		switch fp.selector {
		case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
			item.ProbeGroup = nil
		case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
			item.PrimaryLocation = nil
		case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
			item.LocationDiscovery = nil
		case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
			item.ContactInfo = nil
		case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
			item.DisableSpeedtest = false
		case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
			item.AgentType = probe.Probe_UNKNOWN
		case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
			item.TargetServers = nil
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fp.selector))
		}
	}
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*SharedToken_ProbeTemplate_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup ||
		fp.selector == SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest ||
		fp.selector == SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) WithIValue(value interface{}) SharedTokenProbeTemplateSpec_FieldPathValue {
	switch fp.selector {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathValue{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, value: value.(*probe_group.Reference)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathValue{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathValue{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, value: value.(*common.LocationDiscoverySpec)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathValue{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, value: value.(*common.ContactInformation)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathValue{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathValue{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, value: value.(probe.Probe_AgentType)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathValue{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, value: value.(*probe.Probe_Spec_TargetServers)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) SharedTokenProbeTemplateSpec_FieldPathArrayOfValues {
	fpaov := &SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, values: values.([]*probe_group.Reference)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, values: values.([]*common.LocationDiscoverySpec)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, values: values.([]*common.ContactInformation)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, values: values.([]probe.Probe_AgentType)}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		return &SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues{SharedTokenProbeTemplateSpec_FieldTerminalPath: *fp, values: values.([]*probe.Probe_Spec_TargetServers)}
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) SharedTokenProbeTemplateSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fp.selector))
	}
}

func (fp *SharedTokenProbeTemplateSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type SharedTokenProbeTemplateSpec_FieldSubPath struct {
	selector SharedTokenProbeTemplateSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ SharedTokenProbeTemplateSpec_FieldPath = (*SharedTokenProbeTemplateSpec_FieldSubPath)(nil)

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) Selector() SharedTokenProbeTemplateSpec_FieldPathSelector {
	return fps.selector
}
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) AsPrimaryLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) AsLocationDiscoverySubPath() (common.LocationDiscoverySpec_FieldPath, bool) {
	res, ok := fps.subPath.(common.LocationDiscoverySpec_FieldPath)
	return res, ok
}
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) AsContactInfoSubPath() (common.ContactInformation_FieldPath, bool) {
	res, ok := fps.subPath.(common.ContactInformation_FieldPath)
	return res, ok
}
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) AsTargetServersSubPath() (probe.ProbeSpecTargetServers_FieldPath, bool) {
	res, ok := fps.subPath.(probe.ProbeSpecTargetServers_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source SharedToken_ProbeTemplate_Spec
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) Get(source *SharedToken_ProbeTemplate_Spec) (values []interface{}) {
	if asLocationFieldPath, ok := fps.AsPrimaryLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetPrimaryLocation())...)
	} else if asLocationDiscoverySpecFieldPath, ok := fps.AsLocationDiscoverySubPath(); ok {
		values = append(values, asLocationDiscoverySpecFieldPath.Get(source.GetLocationDiscovery())...)
	} else if asContactInformationFieldPath, ok := fps.AsContactInfoSubPath(); ok {
		values = append(values, asContactInformationFieldPath.Get(source.GetContactInfo())...)
	} else if asTargetServersFieldPath, ok := fps.AsTargetServersSubPath(); ok {
		values = append(values, asTargetServersFieldPath.Get(source.GetTargetServers())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fps.selector))
	}
	return
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*SharedToken_ProbeTemplate_Spec))
}

// GetSingle returns value of selected field from source SharedToken_ProbeTemplate_Spec
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) GetSingle(source *SharedToken_ProbeTemplate_Spec) (interface{}, bool) {
	switch fps.selector {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		if source.GetPrimaryLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPrimaryLocation())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		if source.GetLocationDiscovery() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocationDiscovery())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		if source.GetContactInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetContactInfo())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		if source.GetTargetServers() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTargetServers())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fps.selector))
	}
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*SharedToken_ProbeTemplate_Spec))
}

// GetDefault returns a default value of the field type
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) ClearValue(item *SharedToken_ProbeTemplate_Spec) {
	if item != nil {
		switch fps.selector {
		case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
			fps.subPath.ClearValueRaw(item.PrimaryLocation)
		case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
			fps.subPath.ClearValueRaw(item.LocationDiscovery)
		case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
			fps.subPath.ClearValueRaw(item.ContactInfo)
		case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
			fps.subPath.ClearValueRaw(item.TargetServers)
		default:
			panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fps.selector))
		}
	}
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*SharedToken_ProbeTemplate_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) WithIValue(value interface{}) SharedTokenProbeTemplateSpec_FieldPathValue {
	return &SharedTokenProbeTemplateSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) WithIArrayOfValues(values interface{}) SharedTokenProbeTemplateSpec_FieldPathArrayOfValues {
	return &SharedTokenProbeTemplateSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) WithIArrayItemValue(value interface{}) SharedTokenProbeTemplateSpec_FieldPathArrayItemValue {
	return &SharedTokenProbeTemplateSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *SharedTokenProbeTemplateSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// SharedTokenProbeTemplateSpec_FieldPathValue allows storing values for Spec fields according to their type
type SharedTokenProbeTemplateSpec_FieldPathValue interface {
	SharedTokenProbeTemplateSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **SharedToken_ProbeTemplate_Spec)
	CompareWith(*SharedToken_ProbeTemplate_Spec) (cmp int, comparable bool)
}

func ParseSharedTokenProbeTemplateSpec_FieldPathValue(pathStr, valueStr string) (SharedTokenProbeTemplateSpec_FieldPathValue, error) {
	fp, err := ParseSharedTokenProbeTemplateSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(SharedTokenProbeTemplateSpec_FieldPathValue), nil
}

func MustParseSharedTokenProbeTemplateSpec_FieldPathValue(pathStr, valueStr string) SharedTokenProbeTemplateSpec_FieldPathValue {
	fpv, err := ParseSharedTokenProbeTemplateSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type SharedTokenProbeTemplateSpec_FieldTerminalPathValue struct {
	SharedTokenProbeTemplateSpec_FieldTerminalPath
	value interface{}
}

var _ SharedTokenProbeTemplateSpec_FieldPathValue = (*SharedTokenProbeTemplateSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) AsProbeGroupValue() (*probe_group.Reference, bool) {
	res, ok := fpv.value.(*probe_group.Reference)
	return res, ok
}
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) AsPrimaryLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) AsLocationDiscoveryValue() (*common.LocationDiscoverySpec, bool) {
	res, ok := fpv.value.(*common.LocationDiscoverySpec)
	return res, ok
}
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) AsContactInfoValue() (*common.ContactInformation, bool) {
	res, ok := fpv.value.(*common.ContactInformation)
	return res, ok
}
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) AsDisableSpeedtestValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) AsAgentTypeValue() (probe.Probe_AgentType, bool) {
	res, ok := fpv.value.(probe.Probe_AgentType)
	return res, ok
}
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) AsTargetServersValue() (*probe.Probe_Spec_TargetServers, bool) {
	res, ok := fpv.value.(*probe.Probe_Spec_TargetServers)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) SetTo(target **SharedToken_ProbeTemplate_Spec) {
	if *target == nil {
		*target = new(SharedToken_ProbeTemplate_Spec)
	}
	switch fpv.selector {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
		(*target).ProbeGroup = fpv.value.(*probe_group.Reference)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		(*target).PrimaryLocation = fpv.value.(*common.Location)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		(*target).LocationDiscovery = fpv.value.(*common.LocationDiscoverySpec)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		(*target).ContactInfo = fpv.value.(*common.ContactInformation)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
		(*target).DisableSpeedtest = fpv.value.(bool)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
		(*target).AgentType = fpv.value.(probe.Probe_AgentType)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		(*target).TargetServers = fpv.value.(*probe.Probe_Spec_TargetServers)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fpv.selector))
	}
}

func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SharedToken_ProbeTemplate_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'SharedTokenProbeTemplateSpec_FieldTerminalPathValue' with the value under path in 'SharedToken_ProbeTemplate_Spec'.
func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) CompareWith(source *SharedToken_ProbeTemplate_Spec) (int, bool) {
	switch fpv.selector {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
		leftValue := fpv.value.(*probe_group.Reference)
		rightValue := source.GetProbeGroup()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		return 0, false
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		return 0, false
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		return 0, false
	case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDisableSpeedtest()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
		leftValue := fpv.value.(probe.Probe_AgentType)
		rightValue := source.GetAgentType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fpv.selector))
	}
}

func (fpv *SharedTokenProbeTemplateSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*SharedToken_ProbeTemplate_Spec))
}

type SharedTokenProbeTemplateSpec_FieldSubPathValue struct {
	SharedTokenProbeTemplateSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ SharedTokenProbeTemplateSpec_FieldPathValue = (*SharedTokenProbeTemplateSpec_FieldSubPathValue)(nil)

func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) AsPrimaryLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) AsLocationDiscoveryPathValue() (common.LocationDiscoverySpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.LocationDiscoverySpec_FieldPathValue)
	return res, ok
}
func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) AsContactInfoPathValue() (common.ContactInformation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ContactInformation_FieldPathValue)
	return res, ok
}
func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) AsTargetServersPathValue() (probe.ProbeSpecTargetServers_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(probe.ProbeSpecTargetServers_FieldPathValue)
	return res, ok
}

func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) SetTo(target **SharedToken_ProbeTemplate_Spec) {
	if *target == nil {
		*target = new(SharedToken_ProbeTemplate_Spec)
	}
	switch fpvs.Selector() {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).PrimaryLocation)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		fpvs.subPathValue.(common.LocationDiscoverySpec_FieldPathValue).SetTo(&(*target).LocationDiscovery)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		fpvs.subPathValue.(common.ContactInformation_FieldPathValue).SetTo(&(*target).ContactInfo)
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		fpvs.subPathValue.(probe.ProbeSpecTargetServers_FieldPathValue).SetTo(&(*target).TargetServers)
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*SharedToken_ProbeTemplate_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) CompareWith(source *SharedToken_ProbeTemplate_Spec) (int, bool) {
	switch fpvs.Selector() {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetPrimaryLocation())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		return fpvs.subPathValue.(common.LocationDiscoverySpec_FieldPathValue).CompareWith(source.GetLocationDiscovery())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		return fpvs.subPathValue.(common.ContactInformation_FieldPathValue).CompareWith(source.GetContactInfo())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		return fpvs.subPathValue.(probe.ProbeSpecTargetServers_FieldPathValue).CompareWith(source.GetTargetServers())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *SharedTokenProbeTemplateSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*SharedToken_ProbeTemplate_Spec))
}

// SharedTokenProbeTemplateSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type SharedTokenProbeTemplateSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	SharedTokenProbeTemplateSpec_FieldPath
	ContainsValue(*SharedToken_ProbeTemplate_Spec) bool
}

// ParseSharedTokenProbeTemplateSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseSharedTokenProbeTemplateSpec_FieldPathArrayItemValue(pathStr, valueStr string) (SharedTokenProbeTemplateSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseSharedTokenProbeTemplateSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(SharedTokenProbeTemplateSpec_FieldPathArrayItemValue), nil
}

func MustParseSharedTokenProbeTemplateSpec_FieldPathArrayItemValue(pathStr, valueStr string) SharedTokenProbeTemplateSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseSharedTokenProbeTemplateSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type SharedTokenProbeTemplateSpec_FieldTerminalPathArrayItemValue struct {
	SharedTokenProbeTemplateSpec_FieldTerminalPath
	value interface{}
}

var _ SharedTokenProbeTemplateSpec_FieldPathArrayItemValue = (*SharedTokenProbeTemplateSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object SharedToken_ProbeTemplate_Spec as interface{}
func (fpaiv *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayItemValue) GetSingle(source *SharedToken_ProbeTemplate_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*SharedToken_ProbeTemplate_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *SharedToken_ProbeTemplate_Spec) bool {
	slice := fpaiv.SharedTokenProbeTemplateSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type SharedTokenProbeTemplateSpec_FieldSubPathArrayItemValue struct {
	SharedTokenProbeTemplateSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *SharedTokenProbeTemplateSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *SharedTokenProbeTemplateSpec_FieldSubPathArrayItemValue) AsPrimaryLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *SharedTokenProbeTemplateSpec_FieldSubPathArrayItemValue) AsLocationDiscoveryPathItemValue() (common.LocationDiscoverySpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.LocationDiscoverySpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *SharedTokenProbeTemplateSpec_FieldSubPathArrayItemValue) AsContactInfoPathItemValue() (common.ContactInformation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ContactInformation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *SharedTokenProbeTemplateSpec_FieldSubPathArrayItemValue) AsTargetServersPathItemValue() (probe.ProbeSpecTargetServers_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(probe.ProbeSpecTargetServers_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *SharedTokenProbeTemplateSpec_FieldSubPathArrayItemValue) ContainsValue(source *SharedToken_ProbeTemplate_Spec) bool {
	switch fpaivs.Selector() {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetPrimaryLocation())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		return fpaivs.subPathItemValue.(common.LocationDiscoverySpec_FieldPathArrayItemValue).ContainsValue(source.GetLocationDiscovery())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		return fpaivs.subPathItemValue.(common.ContactInformation_FieldPathArrayItemValue).ContainsValue(source.GetContactInfo())
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		return fpaivs.subPathItemValue.(probe.ProbeSpecTargetServers_FieldPathArrayItemValue).ContainsValue(source.GetTargetServers())
	default:
		panic(fmt.Sprintf("Invalid selector for SharedToken_ProbeTemplate_Spec: %d", fpaivs.Selector()))
	}
}

// SharedTokenProbeTemplateSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type SharedTokenProbeTemplateSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	SharedTokenProbeTemplateSpec_FieldPath
}

func ParseSharedTokenProbeTemplateSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (SharedTokenProbeTemplateSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseSharedTokenProbeTemplateSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(SharedTokenProbeTemplateSpec_FieldPathArrayOfValues), nil
}

func MustParseSharedTokenProbeTemplateSpec_FieldPathArrayOfValues(pathStr, valuesStr string) SharedTokenProbeTemplateSpec_FieldPathArrayOfValues {
	fpaov, err := ParseSharedTokenProbeTemplateSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues struct {
	SharedTokenProbeTemplateSpec_FieldTerminalPath
	values interface{}
}

var _ SharedTokenProbeTemplateSpec_FieldPathArrayOfValues = (*SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
		for _, v := range fpaov.values.([]*probe_group.Reference) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
		for _, v := range fpaov.values.([]*common.LocationDiscoverySpec) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
		for _, v := range fpaov.values.([]*common.ContactInformation) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
		for _, v := range fpaov.values.([]probe.Probe_AgentType) {
			values = append(values, v)
		}
	case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
		for _, v := range fpaov.values.([]*probe.Probe_Spec_TargetServers) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues) AsProbeGroupArrayOfValues() ([]*probe_group.Reference, bool) {
	res, ok := fpaov.values.([]*probe_group.Reference)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues) AsPrimaryLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues) AsLocationDiscoveryArrayOfValues() ([]*common.LocationDiscoverySpec, bool) {
	res, ok := fpaov.values.([]*common.LocationDiscoverySpec)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues) AsContactInfoArrayOfValues() ([]*common.ContactInformation, bool) {
	res, ok := fpaov.values.([]*common.ContactInformation)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues) AsDisableSpeedtestArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues) AsAgentTypeArrayOfValues() ([]probe.Probe_AgentType, bool) {
	res, ok := fpaov.values.([]probe.Probe_AgentType)
	return res, ok
}
func (fpaov *SharedTokenProbeTemplateSpec_FieldTerminalPathArrayOfValues) AsTargetServersArrayOfValues() ([]*probe.Probe_Spec_TargetServers, bool) {
	res, ok := fpaov.values.([]*probe.Probe_Spec_TargetServers)
	return res, ok
}

type SharedTokenProbeTemplateSpec_FieldSubPathArrayOfValues struct {
	SharedTokenProbeTemplateSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ SharedTokenProbeTemplateSpec_FieldPathArrayOfValues = (*SharedTokenProbeTemplateSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *SharedTokenProbeTemplateSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *SharedTokenProbeTemplateSpec_FieldSubPathArrayOfValues) AsPrimaryLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *SharedTokenProbeTemplateSpec_FieldSubPathArrayOfValues) AsLocationDiscoveryPathArrayOfValues() (common.LocationDiscoverySpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.LocationDiscoverySpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *SharedTokenProbeTemplateSpec_FieldSubPathArrayOfValues) AsContactInfoPathArrayOfValues() (common.ContactInformation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ContactInformation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *SharedTokenProbeTemplateSpec_FieldSubPathArrayOfValues) AsTargetServersPathArrayOfValues() (probe.ProbeSpecTargetServers_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(probe.ProbeSpecTargetServers_FieldPathArrayOfValues)
	return res, ok
}
