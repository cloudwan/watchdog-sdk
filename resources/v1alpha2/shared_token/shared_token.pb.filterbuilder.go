// Code generated by protoc-gen-goten-resource
// Resource: SharedToken
// DO NOT EDIT!!!

package shared_token

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	devices_project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &devices_project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.Actor{}
	_ = &iam_condition.Condition{}
	_ = &iam_organization.Organization{}
	_ = &iam_permission.Permission{}
	_ = &iam_project.Project{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &iam_user.User{}
	_ = &policy.Policy{}
	_ = &syncing_meta.SyncingMeta{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

type FilterBuilderOrCondition interface {
	_IsSharedTokenFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsSharedTokenFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp SharedToken_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      SharedToken_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Quota() *filterCndBuilderQuota {
	return &filterCndBuilderQuota{builder: b.builder}
}

func (b *filterCndBuilder) ProbeTemplate() *filterCndBuilderProbeTemplate {
	return &filterCndBuilderProbeTemplate{builder: b.builder}
}

func (b *filterCndBuilder) DeduplicationFieldPaths() *filterCndBuilderDeduplicationFieldPaths {
	return &filterCndBuilderDeduplicationFieldPaths{builder: b.builder}
}

func (b *filterCndBuilder) Secret() *filterCndBuilderSecret {
	return &filterCndBuilderSecret{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) AssociateExistingProbeOnly() *filterCndBuilderAssociateExistingProbeOnly {
	return &filterCndBuilderAssociateExistingProbeOnly{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderQuota struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderQuota) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderQuota) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderQuota) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderQuota) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderQuota) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderQuota) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderQuota) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Quota().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderQuota) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Quota().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderQuota) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Quota().FieldPath(),
	})
}

func (b *filterCndBuilderQuota) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Quota().FieldPath(),
	})
}

func (b *filterCndBuilderQuota) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Quota().WithValue(value),
	})
}

type filterCndBuilderProbeTemplate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplate) Eq(value *SharedToken_ProbeTemplate) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplate) Neq(value *SharedToken_ProbeTemplate) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplate) Gt(value *SharedToken_ProbeTemplate) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplate) Gte(value *SharedToken_ProbeTemplate) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplate) Lt(value *SharedToken_ProbeTemplate) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplate) Lte(value *SharedToken_ProbeTemplate) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplate) In(values []*SharedToken_ProbeTemplate) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplate) NotIn(values []*SharedToken_ProbeTemplate) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplate) compare(op gotenfilter.CompareOperator, value *SharedToken_ProbeTemplate) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplate) Metadata() *filterCndBuilderProbeTemplateMetadata {
	return &filterCndBuilderProbeTemplateMetadata{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplate) DisplayName() *filterCndBuilderProbeTemplateDisplayName {
	return &filterCndBuilderProbeTemplateDisplayName{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplate) Spec() *filterCndBuilderProbeTemplateSpec {
	return &filterCndBuilderProbeTemplateSpec{builder: b.builder}
}

type filterCndBuilderProbeTemplateMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateMetadata) Eq(value *SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateMetadata) Neq(value *SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateMetadata) Gt(value *SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateMetadata) Gte(value *SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateMetadata) Lt(value *SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateMetadata) Lte(value *SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateMetadata) In(values []*SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateMetadata) NotIn(values []*SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateMetadata) compare(op gotenfilter.CompareOperator, value *SharedToken_ProbeTemplate_Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateMetadata) Tags() *filterCndBuilderProbeTemplateMetadataTags {
	return &filterCndBuilderProbeTemplateMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateMetadata) Labels() *filterCndBuilderProbeTemplateMetadataLabels {
	return &filterCndBuilderProbeTemplateMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateMetadata) Annotations() *filterCndBuilderProbeTemplateMetadataAnnotations {
	return &filterCndBuilderProbeTemplateMetadataAnnotations{builder: b.builder}
}

type filterCndBuilderProbeTemplateMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().FieldPath(),
		Value:     NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderProbeTemplateMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderProbeTemplateMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataLabels) WithKey(key string) *mapFilterCndBuilderProbeTemplateMetadataLabels {
	return &mapFilterCndBuilderProbeTemplateMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderProbeTemplateMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderProbeTemplateMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderProbeTemplateMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderProbeTemplateMetadataAnnotations {
	return &mapFilterCndBuilderProbeTemplateMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderProbeTemplateMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderProbeTemplateMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderProbeTemplateDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().DisplayName().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpec) Eq(value *SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpec) Neq(value *SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpec) Gt(value *SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpec) Gte(value *SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpec) Lt(value *SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpec) Lte(value *SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpec) In(values []*SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpec) NotIn(values []*SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpec) compare(op gotenfilter.CompareOperator, value *SharedToken_ProbeTemplate_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpec) ProbeGroup() *filterCndBuilderProbeTemplateSpecProbeGroup {
	return &filterCndBuilderProbeTemplateSpecProbeGroup{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpec) PrimaryLocation() *filterCndBuilderProbeTemplateSpecPrimaryLocation {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocation{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpec) LocationDiscovery() *filterCndBuilderProbeTemplateSpecLocationDiscovery {
	return &filterCndBuilderProbeTemplateSpecLocationDiscovery{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpec) ContactInfo() *filterCndBuilderProbeTemplateSpecContactInfo {
	return &filterCndBuilderProbeTemplateSpecContactInfo{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpec) DisableSpeedtest() *filterCndBuilderProbeTemplateSpecDisableSpeedtest {
	return &filterCndBuilderProbeTemplateSpecDisableSpeedtest{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpec) AgentType() *filterCndBuilderProbeTemplateSpecAgentType {
	return &filterCndBuilderProbeTemplateSpecAgentType{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpec) TargetServers() *filterCndBuilderProbeTemplateSpecTargetServers {
	return &filterCndBuilderProbeTemplateSpecTargetServers{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecProbeGroup struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) Eq(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) Neq(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) Gt(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) Gte(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) Lt(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) Lte(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) In(values []*probe_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ProbeGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) NotIn(values []*probe_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ProbeGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ProbeGroup().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ProbeGroup().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecProbeGroup) compare(op gotenfilter.CompareOperator, value *probe_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ProbeGroup().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Address() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) AdminHierarchy() *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Coordinates() *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocation) Accuracy() *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) PostalCode() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) CountryCode() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) Continent() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) Country() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) AdminArea1() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) AdminArea2() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) AdminArea3() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) AdminArea4() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddress) StreetAddress() *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().Country().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Continent() *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Country() *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Admin1() *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Admin2() *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Admin3() *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Admin4() *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchy) Admin5() *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Coordinates().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecPrimaryLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().PrimaryLocation().Accuracy().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecLocationDiscovery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) Eq(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) Neq(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) Gt(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) Gte(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) Lt(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) Lte(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) In(values []*common.LocationDiscoverySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) NotIn(values []*common.LocationDiscoverySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) compare(op gotenfilter.CompareOperator, value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) Type() *filterCndBuilderProbeTemplateSpecLocationDiscoveryType {
	return &filterCndBuilderProbeTemplateSpecLocationDiscoveryType{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscovery) RequiredAccuracy() *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy {
	return &filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecLocationDiscoveryType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) Eq(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) Neq(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) Gt(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) Gte(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) Lt(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) Lte(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) In(values []common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) NotIn(values []common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().Type().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().Type().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryType) compare(op gotenfilter.CompareOperator, value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().Type().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().RequiredAccuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().RequiredAccuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().RequiredAccuracy().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().RequiredAccuracy().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecLocationDiscoveryRequiredAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().LocationDiscovery().RequiredAccuracy().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecContactInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) Eq(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) Neq(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) Gt(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) Gte(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) Lt(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) Lte(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) In(values []*common.ContactInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) NotIn(values []*common.ContactInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) compare(op gotenfilter.CompareOperator, value *common.ContactInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) FullName() *filterCndBuilderProbeTemplateSpecContactInfoFullName {
	return &filterCndBuilderProbeTemplateSpecContactInfoFullName{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) Email() *filterCndBuilderProbeTemplateSpecContactInfoEmail {
	return &filterCndBuilderProbeTemplateSpecContactInfoEmail{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecContactInfo) Phones() *filterCndBuilderProbeTemplateSpecContactInfoPhones {
	return &filterCndBuilderProbeTemplateSpecContactInfoPhones{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecContactInfoFullName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().FullName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().FullName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().FullName().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().FullName().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoFullName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().FullName().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecContactInfoEmail struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Email().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Email().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Email().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Email().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoEmail) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Email().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecContactInfoPhones struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Eq(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Neq(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Gt(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Gte(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Lt(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Lte(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) In(values [][]*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) NotIn(values [][]*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Contains(value *common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().FieldPath(),
		Value:     NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().WithItemValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) ContainsAnyOf(values []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) ContainsAll(values []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) compare(op gotenfilter.CompareOperator, value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Number() *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber {
	return &filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhones) Type() *filterCndBuilderProbeTemplateSpecContactInfoPhonesType {
	return &filterCndBuilderProbeTemplateSpecContactInfoPhonesType{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Number().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Number().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Number().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Number().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesNumber) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Number().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecContactInfoPhonesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) Eq(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) Neq(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) Gt(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) Gte(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) Lt(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) Lte(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) In(values []common.ContactInformation_PhoneType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) NotIn(values []common.ContactInformation_PhoneType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Type().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Type().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecContactInfoPhonesType) compare(op gotenfilter.CompareOperator, value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().ContactInfo().Phones().Type().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecDisableSpeedtest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().DisableSpeedtest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().DisableSpeedtest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().DisableSpeedtest().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().DisableSpeedtest().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecDisableSpeedtest) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().DisableSpeedtest().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecAgentType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) Eq(value probe.Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) Neq(value probe.Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) Gt(value probe.Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) Gte(value probe.Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) Lt(value probe.Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) Lte(value probe.Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) In(values []probe.Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().AgentType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) NotIn(values []probe.Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().AgentType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().AgentType().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().AgentType().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecAgentType) compare(op gotenfilter.CompareOperator, value probe.Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().AgentType().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecTargetServers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) Eq(value *probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) Neq(value *probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) Gt(value *probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) Gte(value *probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) Lt(value *probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) Lte(value *probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) In(values []*probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) NotIn(values []*probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) compare(op gotenfilter.CompareOperator, value *probe.Probe_Spec_TargetServers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) IcmpTarget() *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget {
	return &filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) UdpTarget() *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget {
	return &filterCndBuilderProbeTemplateSpecTargetServersUdpTarget{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) SpeedTestTarget() *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget {
	return &filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecTargetServers) TargetAddressType() *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType {
	return &filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) Eq(value *probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) Neq(value *probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) Gt(value *probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) Gte(value *probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) Lt(value *probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) Lte(value *probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) In(values []*probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) NotIn(values []*probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) compare(op gotenfilter.CompareOperator, value *probe.Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTarget) Enabled() *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled {
	return &filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersIcmpTargetEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().IcmpTarget().Enabled().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecTargetServersUdpTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) Eq(value *probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) Neq(value *probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) Gt(value *probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) Gte(value *probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) Lt(value *probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) Lte(value *probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) In(values []*probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) NotIn(values []*probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) compare(op gotenfilter.CompareOperator, value *probe.Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) Enabled() *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled {
	return &filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTarget) Port() *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort {
	return &filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Enabled().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Port().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Port().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Port().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Port().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersUdpTargetPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().UdpTarget().Port().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) Eq(value *probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) Neq(value *probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) Gt(value *probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) Gte(value *probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) Lt(value *probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) Lte(value *probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) In(values []*probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) NotIn(values []*probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) compare(op gotenfilter.CompareOperator, value *probe.Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().WithValue(value),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) Enabled() *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled {
	return &filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) UseTls() *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls {
	return &filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) TcpPort() *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort {
	return &filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort{builder: b.builder}
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTarget) TlsPort() *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort {
	return &filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort{builder: b.builder}
}

type filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().Enabled().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetUseTls) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().UseTls().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTcpPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TcpPort().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TlsPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TlsPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TlsPort().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TlsPort().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersSpeedTestTargetTlsPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().SpeedTestTarget().TlsPort().WithValue(value),
	})
}

type filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) Eq(value probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) Neq(value probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) Gt(value probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) Gte(value probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) Lt(value probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) Lte(value probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) In(values []probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().TargetAddressType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) NotIn(values []probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().TargetAddressType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().TargetAddressType().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().TargetAddressType().FieldPath(),
	})
}

func (b *filterCndBuilderProbeTemplateSpecTargetServersTargetAddressType) compare(op gotenfilter.CompareOperator, value probe.Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().ProbeTemplate().Spec().TargetServers().TargetAddressType().WithValue(value),
	})
}

type filterCndBuilderDeduplicationFieldPaths struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDeduplicationFieldPaths) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDeduplicationFieldPaths) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDeduplicationFieldPaths) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDeduplicationFieldPaths) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDeduplicationFieldPaths) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDeduplicationFieldPaths) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDeduplicationFieldPaths) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDeduplicationFieldPaths) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDeduplicationFieldPaths) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().FieldPath(),
	})
}

func (b *filterCndBuilderDeduplicationFieldPaths) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().FieldPath(),
	})
}

func (b *filterCndBuilderDeduplicationFieldPaths) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().FieldPath(),
		Value:     NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().WithItemValue(value),
	})
}

func (b *filterCndBuilderDeduplicationFieldPaths) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderDeduplicationFieldPaths) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderDeduplicationFieldPaths) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().DeduplicationFieldPaths().WithValue(value),
	})
}

type filterCndBuilderSecret struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSecret) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSecret) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSecret) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSecret) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSecret) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSecret) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSecret) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Secret().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSecret) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Secret().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSecret) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Secret().FieldPath(),
	})
}

func (b *filterCndBuilderSecret) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Secret().FieldPath(),
	})
}

func (b *filterCndBuilderSecret) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Secret().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewSharedTokenFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().Metadata().Tags()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().Metadata().Tags()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ApiVersion() *filterCndBuilderMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Uid() *filterCndBuilderMetadataOwnerReferencesUid {
	return &filterCndBuilderMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]SharedToken_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderAssociateExistingProbeOnly struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderAssociateExistingProbeOnly) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAssociateExistingProbeOnly) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAssociateExistingProbeOnly) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAssociateExistingProbeOnly) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAssociateExistingProbeOnly) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAssociateExistingProbeOnly) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAssociateExistingProbeOnly) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().AssociateExistingProbeOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAssociateExistingProbeOnly) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		SharedToken_FieldPathArrayOfValues: NewSharedTokenFieldPathBuilder().AssociateExistingProbeOnly().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAssociateExistingProbeOnly) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewSharedTokenFieldPathBuilder().AssociateExistingProbeOnly().FieldPath(),
	})
}

func (b *filterCndBuilderAssociateExistingProbeOnly) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewSharedTokenFieldPathBuilder().AssociateExistingProbeOnly().FieldPath(),
	})
}

func (b *filterCndBuilderAssociateExistingProbeOnly) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		SharedToken_FieldPathValue: NewSharedTokenFieldPathBuilder().AssociateExistingProbeOnly().WithValue(value),
	})
}
