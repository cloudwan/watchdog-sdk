// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/shared_token.proto
// DO NOT EDIT!!!

package shared_token

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

type SharedToken_FieldMask struct {
	Paths []SharedToken_FieldPath
}

func FullSharedToken_FieldMask() *SharedToken_FieldMask {
	res := &SharedToken_FieldMask{}
	res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorName})
	res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorQuota})
	res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorProbeTemplate})
	res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorDeduplicationFieldPaths})
	res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorSecret})
	res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorAssociateExistingProbeOnly})
	return res
}

func (fieldMask *SharedToken_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SharedToken_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SharedToken_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSharedToken_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SharedToken_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 8)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SharedToken_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SharedToken_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSharedToken_FieldPath(raw)
	})
}

func (fieldMask *SharedToken_FieldMask) ProtoMessage() {}

func (fieldMask *SharedToken_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SharedToken_FieldMask) Subtract(other *SharedToken_FieldMask) *SharedToken_FieldMask {
	result := &SharedToken_FieldMask{}
	removedSelectors := make([]bool, 8)
	otherSubMasks := map[SharedToken_FieldPathSelector]gotenobject.FieldMask{
		SharedToken_FieldPathSelectorProbeTemplate: &SharedToken_ProbeTemplate_FieldMask{},
		SharedToken_FieldPathSelectorMetadata:      &ntt_meta.Meta_FieldMask{},
	}
	mySubMasks := map[SharedToken_FieldPathSelector]gotenobject.FieldMask{
		SharedToken_FieldPathSelectorProbeTemplate: &SharedToken_ProbeTemplate_FieldMask{},
		SharedToken_FieldPathSelectorMetadata:      &ntt_meta.Meta_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SharedToken_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *SharedToken_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*SharedToken_FieldTerminalPath); ok {
					switch tp.selector {
					case SharedToken_FieldPathSelectorProbeTemplate:
						mySubMasks[SharedToken_FieldPathSelectorProbeTemplate] = FullSharedToken_ProbeTemplate_FieldMask()
					case SharedToken_FieldPathSelectorMetadata:
						mySubMasks[SharedToken_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					}
				} else if tp, ok := path.(*SharedToken_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &SharedToken_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SharedToken_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SharedToken_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SharedToken_FieldMask) FilterInputFields() *SharedToken_FieldMask {
	result := &SharedToken_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case SharedToken_FieldPathSelectorMetadata:
			if _, ok := path.(*SharedToken_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &SharedToken_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*SharedToken_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &SharedToken_FieldSubPath{selector: SharedToken_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SharedToken_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SharedToken_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SharedToken_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSharedToken_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SharedToken_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SharedToken_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SharedToken_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SharedToken_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SharedToken_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SharedToken_FieldMask) AppendPath(path SharedToken_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SharedToken_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SharedToken_FieldPath))
}

func (fieldMask *SharedToken_FieldMask) GetPaths() []SharedToken_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SharedToken_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SharedToken_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSharedToken_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SharedToken_FieldMask) Set(target, source *SharedToken) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SharedToken_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SharedToken), source.(*SharedToken))
}

func (fieldMask *SharedToken_FieldMask) Project(source *SharedToken) *SharedToken {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SharedToken{}
	probeTemplateMask := &SharedToken_ProbeTemplate_FieldMask{}
	wholeProbeTemplateAccepted := false
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SharedToken_FieldTerminalPath:
			switch tp.selector {
			case SharedToken_FieldPathSelectorName:
				result.Name = source.Name
			case SharedToken_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case SharedToken_FieldPathSelectorQuota:
				result.Quota = source.Quota
			case SharedToken_FieldPathSelectorProbeTemplate:
				result.ProbeTemplate = source.ProbeTemplate
				wholeProbeTemplateAccepted = true
			case SharedToken_FieldPathSelectorDeduplicationFieldPaths:
				result.DeduplicationFieldPaths = source.DeduplicationFieldPaths
			case SharedToken_FieldPathSelectorSecret:
				result.Secret = source.Secret
			case SharedToken_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case SharedToken_FieldPathSelectorAssociateExistingProbeOnly:
				result.AssociateExistingProbeOnly = source.AssociateExistingProbeOnly
			}
		case *SharedToken_FieldSubPath:
			switch tp.selector {
			case SharedToken_FieldPathSelectorProbeTemplate:
				probeTemplateMask.AppendPath(tp.subPath.(SharedTokenProbeTemplate_FieldPath))
			case SharedToken_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			}
		}
	}
	if wholeProbeTemplateAccepted == false && len(probeTemplateMask.Paths) > 0 {
		result.ProbeTemplate = probeTemplateMask.Project(source.GetProbeTemplate())
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	return result
}

func (fieldMask *SharedToken_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SharedToken))
}

func (fieldMask *SharedToken_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type SharedToken_ProbeTemplate_FieldMask struct {
	Paths []SharedTokenProbeTemplate_FieldPath
}

func FullSharedToken_ProbeTemplate_FieldMask() *SharedToken_ProbeTemplate_FieldMask {
	res := &SharedToken_ProbeTemplate_FieldMask{}
	res.Paths = append(res.Paths, &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorSpec})
	return res
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SharedToken_ProbeTemplate_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSharedTokenProbeTemplate_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SharedTokenProbeTemplate_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSharedTokenProbeTemplate_FieldPath(raw)
	})
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) ProtoMessage() {}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) Subtract(other *SharedToken_ProbeTemplate_FieldMask) *SharedToken_ProbeTemplate_FieldMask {
	result := &SharedToken_ProbeTemplate_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[SharedTokenProbeTemplate_FieldPathSelector]gotenobject.FieldMask{
		SharedTokenProbeTemplate_FieldPathSelectorMetadata: &SharedToken_ProbeTemplate_Meta_FieldMask{},
		SharedTokenProbeTemplate_FieldPathSelectorSpec:     &SharedToken_ProbeTemplate_Spec_FieldMask{},
	}
	mySubMasks := map[SharedTokenProbeTemplate_FieldPathSelector]gotenobject.FieldMask{
		SharedTokenProbeTemplate_FieldPathSelectorMetadata: &SharedToken_ProbeTemplate_Meta_FieldMask{},
		SharedTokenProbeTemplate_FieldPathSelectorSpec:     &SharedToken_ProbeTemplate_Spec_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SharedTokenProbeTemplate_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *SharedTokenProbeTemplate_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*SharedTokenProbeTemplate_FieldTerminalPath); ok {
					switch tp.selector {
					case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
						mySubMasks[SharedTokenProbeTemplate_FieldPathSelectorMetadata] = FullSharedToken_ProbeTemplate_Meta_FieldMask()
					case SharedTokenProbeTemplate_FieldPathSelectorSpec:
						mySubMasks[SharedTokenProbeTemplate_FieldPathSelectorSpec] = FullSharedToken_ProbeTemplate_Spec_FieldMask()
					}
				} else if tp, ok := path.(*SharedTokenProbeTemplate_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &SharedTokenProbeTemplate_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SharedToken_ProbeTemplate_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SharedToken_ProbeTemplate_FieldMask) FilterInputFields() *SharedToken_ProbeTemplate_FieldMask {
	result := &SharedToken_ProbeTemplate_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SharedToken_ProbeTemplate_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SharedTokenProbeTemplate_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSharedTokenProbeTemplate_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SharedToken_ProbeTemplate_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SharedToken_ProbeTemplate_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) AppendPath(path SharedTokenProbeTemplate_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SharedTokenProbeTemplate_FieldPath))
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) GetPaths() []SharedTokenProbeTemplate_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSharedTokenProbeTemplate_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) Set(target, source *SharedToken_ProbeTemplate) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SharedToken_ProbeTemplate), source.(*SharedToken_ProbeTemplate))
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) Project(source *SharedToken_ProbeTemplate) *SharedToken_ProbeTemplate {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SharedToken_ProbeTemplate{}
	metadataMask := &SharedToken_ProbeTemplate_Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &SharedToken_ProbeTemplate_Spec_FieldMask{}
	wholeSpecAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SharedTokenProbeTemplate_FieldTerminalPath:
			switch tp.selector {
			case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case SharedTokenProbeTemplate_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case SharedTokenProbeTemplate_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			}
		case *SharedTokenProbeTemplate_FieldSubPath:
			switch tp.selector {
			case SharedTokenProbeTemplate_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(SharedTokenProbeTemplateMeta_FieldPath))
			case SharedTokenProbeTemplate_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(SharedTokenProbeTemplateSpec_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	return result
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SharedToken_ProbeTemplate))
}

func (fieldMask *SharedToken_ProbeTemplate_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type SharedToken_ProbeTemplate_Meta_FieldMask struct {
	Paths []SharedTokenProbeTemplateMeta_FieldPath
}

func FullSharedToken_ProbeTemplate_Meta_FieldMask() *SharedToken_ProbeTemplate_Meta_FieldMask {
	res := &SharedToken_ProbeTemplate_Meta_FieldMask{}
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorTags})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorLabels})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations})
	return res
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSharedTokenProbeTemplateMeta_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SharedTokenProbeTemplateMeta_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSharedTokenProbeTemplateMeta_FieldPath(raw)
	})
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) ProtoMessage() {}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) Subtract(other *SharedToken_ProbeTemplate_Meta_FieldMask) *SharedToken_ProbeTemplate_Meta_FieldMask {
	result := &SharedToken_ProbeTemplate_Meta_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SharedTokenProbeTemplateMeta_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SharedToken_ProbeTemplate_Meta_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) FilterInputFields() *SharedToken_ProbeTemplate_Meta_FieldMask {
	result := &SharedToken_ProbeTemplate_Meta_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SharedTokenProbeTemplateMeta_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSharedTokenProbeTemplateMeta_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SharedToken_ProbeTemplate_Meta_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SharedToken_ProbeTemplate_Meta_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) AppendPath(path SharedTokenProbeTemplateMeta_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SharedTokenProbeTemplateMeta_FieldPath))
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) GetPaths() []SharedTokenProbeTemplateMeta_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSharedTokenProbeTemplateMeta_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) Set(target, source *SharedToken_ProbeTemplate_Meta) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SharedToken_ProbeTemplate_Meta), source.(*SharedToken_ProbeTemplate_Meta))
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) Project(source *SharedToken_ProbeTemplate_Meta) *SharedToken_ProbeTemplate_Meta {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SharedToken_ProbeTemplate_Meta{}
	var labelsMapKeys []string
	wholeLabelsAccepted := false
	var annotationsMapKeys []string
	wholeAnnotationsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SharedTokenProbeTemplateMeta_FieldTerminalPath:
			switch tp.selector {
			case SharedTokenProbeTemplateMeta_FieldPathSelectorTags:
				result.Tags = source.Tags
			case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
				result.Labels = source.Labels
				wholeLabelsAccepted = true
			case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
				result.Annotations = source.Annotations
				wholeAnnotationsAccepted = true
			}
		case *SharedTokenProbeTemplateMeta_FieldPathMap:
			switch tp.selector {
			case SharedTokenProbeTemplateMeta_FieldPathSelectorLabels:
				labelsMapKeys = append(labelsMapKeys, tp.key)
			case SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations:
				annotationsMapKeys = append(annotationsMapKeys, tp.key)
			}
		}
	}
	if wholeLabelsAccepted == false && len(labelsMapKeys) > 0 && source.GetLabels() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetLabels()
		for _, key := range labelsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Labels = copiedMap
	}
	if wholeAnnotationsAccepted == false && len(annotationsMapKeys) > 0 && source.GetAnnotations() != nil {
		copiedMap := map[string]string{}
		sourceMap := source.GetAnnotations()
		for _, key := range annotationsMapKeys {
			copiedMap[key] = sourceMap[key]
		}
		result.Annotations = copiedMap
	}
	return result
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SharedToken_ProbeTemplate_Meta))
}

func (fieldMask *SharedToken_ProbeTemplate_Meta_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type SharedToken_ProbeTemplate_Spec_FieldMask struct {
	Paths []SharedTokenProbeTemplateSpec_FieldPath
}

func FullSharedToken_ProbeTemplate_Spec_FieldMask() *SharedToken_ProbeTemplate_Spec_FieldMask {
	res := &SharedToken_ProbeTemplate_Spec_FieldMask{}
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType})
	res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers})
	return res
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseSharedTokenProbeTemplateSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*SharedTokenProbeTemplateSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseSharedTokenProbeTemplateSpec_FieldPath(raw)
	})
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) Subtract(other *SharedToken_ProbeTemplate_Spec_FieldMask) *SharedToken_ProbeTemplate_Spec_FieldMask {
	result := &SharedToken_ProbeTemplate_Spec_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[SharedTokenProbeTemplateSpec_FieldPathSelector]gotenobject.FieldMask{
		SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:   &common.Location_FieldMask{},
		SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery: &common.LocationDiscoverySpec_FieldMask{},
		SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:       &common.ContactInformation_FieldMask{},
		SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:     &probe.Probe_Spec_TargetServers_FieldMask{},
	}
	mySubMasks := map[SharedTokenProbeTemplateSpec_FieldPathSelector]gotenobject.FieldMask{
		SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:   &common.Location_FieldMask{},
		SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery: &common.LocationDiscoverySpec_FieldMask{},
		SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:       &common.ContactInformation_FieldMask{},
		SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:     &probe.Probe_Spec_TargetServers_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *SharedTokenProbeTemplateSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *SharedTokenProbeTemplateSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*SharedTokenProbeTemplateSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
						mySubMasks[SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation] = common.FullLocation_FieldMask()
					case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
						mySubMasks[SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery] = common.FullLocationDiscoverySpec_FieldMask()
					case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
						mySubMasks[SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo] = common.FullContactInformation_FieldMask()
					case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
						mySubMasks[SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers] = probe.FullProbe_Spec_TargetServers_FieldMask()
					}
				} else if tp, ok := path.(*SharedTokenProbeTemplateSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &SharedTokenProbeTemplateSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*SharedToken_ProbeTemplate_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) FilterInputFields() *SharedToken_ProbeTemplate_Spec_FieldMask {
	result := &SharedToken_ProbeTemplate_Spec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]SharedTokenProbeTemplateSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseSharedTokenProbeTemplateSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask SharedToken_ProbeTemplate_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask SharedToken_ProbeTemplate_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) AppendPath(path SharedTokenProbeTemplateSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(SharedTokenProbeTemplateSpec_FieldPath))
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) GetPaths() []SharedTokenProbeTemplateSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseSharedTokenProbeTemplateSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) Set(target, source *SharedToken_ProbeTemplate_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*SharedToken_ProbeTemplate_Spec), source.(*SharedToken_ProbeTemplate_Spec))
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) Project(source *SharedToken_ProbeTemplate_Spec) *SharedToken_ProbeTemplate_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &SharedToken_ProbeTemplate_Spec{}
	primaryLocationMask := &common.Location_FieldMask{}
	wholePrimaryLocationAccepted := false
	locationDiscoveryMask := &common.LocationDiscoverySpec_FieldMask{}
	wholeLocationDiscoveryAccepted := false
	contactInfoMask := &common.ContactInformation_FieldMask{}
	wholeContactInfoAccepted := false
	targetServersMask := &probe.Probe_Spec_TargetServers_FieldMask{}
	wholeTargetServersAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *SharedTokenProbeTemplateSpec_FieldTerminalPath:
			switch tp.selector {
			case SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup:
				result.ProbeGroup = source.ProbeGroup
			case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
				result.PrimaryLocation = source.PrimaryLocation
				wholePrimaryLocationAccepted = true
			case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
				result.LocationDiscovery = source.LocationDiscovery
				wholeLocationDiscoveryAccepted = true
			case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
				result.ContactInfo = source.ContactInfo
				wholeContactInfoAccepted = true
			case SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest:
				result.DisableSpeedtest = source.DisableSpeedtest
			case SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType:
				result.AgentType = source.AgentType
			case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
				result.TargetServers = source.TargetServers
				wholeTargetServersAccepted = true
			}
		case *SharedTokenProbeTemplateSpec_FieldSubPath:
			switch tp.selector {
			case SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation:
				primaryLocationMask.AppendPath(tp.subPath.(common.Location_FieldPath))
			case SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery:
				locationDiscoveryMask.AppendPath(tp.subPath.(common.LocationDiscoverySpec_FieldPath))
			case SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo:
				contactInfoMask.AppendPath(tp.subPath.(common.ContactInformation_FieldPath))
			case SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers:
				targetServersMask.AppendPath(tp.subPath.(probe.ProbeSpecTargetServers_FieldPath))
			}
		}
	}
	if wholePrimaryLocationAccepted == false && len(primaryLocationMask.Paths) > 0 {
		result.PrimaryLocation = primaryLocationMask.Project(source.GetPrimaryLocation())
	}
	if wholeLocationDiscoveryAccepted == false && len(locationDiscoveryMask.Paths) > 0 {
		result.LocationDiscovery = locationDiscoveryMask.Project(source.GetLocationDiscovery())
	}
	if wholeContactInfoAccepted == false && len(contactInfoMask.Paths) > 0 {
		result.ContactInfo = contactInfoMask.Project(source.GetContactInfo())
	}
	if wholeTargetServersAccepted == false && len(targetServersMask.Paths) > 0 {
		result.TargetServers = targetServersMask.Project(source.GetTargetServers())
	}
	return result
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*SharedToken_ProbeTemplate_Spec))
}

func (fieldMask *SharedToken_ProbeTemplate_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
