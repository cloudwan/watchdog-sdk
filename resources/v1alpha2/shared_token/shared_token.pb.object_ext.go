// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/shared_token.proto
// DO NOT EDIT!!!

package shared_token

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

func (o *SharedToken) GotenObjectExt() {}

func (o *SharedToken) MakeFullFieldMask() *SharedToken_FieldMask {
	return FullSharedToken_FieldMask()
}

func (o *SharedToken) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSharedToken_FieldMask()
}

func (o *SharedToken) MakeDiffFieldMask(other *SharedToken) *SharedToken_FieldMask {
	if o == nil && other == nil {
		return &SharedToken_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSharedToken_FieldMask()
	}

	res := &SharedToken_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorDisplayName})
	}
	if o.GetQuota() != other.GetQuota() {
		res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorQuota})
	}
	{
		subMask := o.GetProbeTemplate().MakeDiffFieldMask(other.GetProbeTemplate())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorProbeTemplate})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SharedToken_FieldSubPath{selector: SharedToken_FieldPathSelectorProbeTemplate, subPath: subpath})
			}
		}
	}

	if len(o.GetDeduplicationFieldPaths()) == len(other.GetDeduplicationFieldPaths()) {
		for i, lValue := range o.GetDeduplicationFieldPaths() {
			rValue := other.GetDeduplicationFieldPaths()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorDeduplicationFieldPaths})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorDeduplicationFieldPaths})
	}
	if o.GetSecret() != other.GetSecret() {
		res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorSecret})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SharedToken_FieldSubPath{selector: SharedToken_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetAssociateExistingProbeOnly() != other.GetAssociateExistingProbeOnly() {
		res.Paths = append(res.Paths, &SharedToken_FieldTerminalPath{selector: SharedToken_FieldPathSelectorAssociateExistingProbeOnly})
	}
	return res
}

func (o *SharedToken) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SharedToken))
}

func (o *SharedToken) Clone() *SharedToken {
	if o == nil {
		return nil
	}
	result := &SharedToken{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Quota = o.Quota
	result.ProbeTemplate = o.ProbeTemplate.Clone()
	result.DeduplicationFieldPaths = make([]string, len(o.DeduplicationFieldPaths))
	for i, sourceValue := range o.DeduplicationFieldPaths {
		result.DeduplicationFieldPaths[i] = sourceValue
	}
	result.Secret = o.Secret
	result.Metadata = o.Metadata.Clone()
	result.AssociateExistingProbeOnly = o.AssociateExistingProbeOnly
	return result
}

func (o *SharedToken) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SharedToken) Merge(source *SharedToken) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	o.Quota = source.GetQuota()
	if source.GetProbeTemplate() != nil {
		if o.ProbeTemplate == nil {
			o.ProbeTemplate = new(SharedToken_ProbeTemplate)
		}
		o.ProbeTemplate.Merge(source.GetProbeTemplate())
	}
	for _, sourceValue := range source.GetDeduplicationFieldPaths() {
		exists := false
		for _, currentValue := range o.DeduplicationFieldPaths {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.DeduplicationFieldPaths = append(o.DeduplicationFieldPaths, newDstElement)
		}
	}

	o.Secret = source.GetSecret()
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.AssociateExistingProbeOnly = source.GetAssociateExistingProbeOnly()
}

func (o *SharedToken) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SharedToken))
}

func (o *SharedToken_ProbeTemplate) GotenObjectExt() {}

func (o *SharedToken_ProbeTemplate) MakeFullFieldMask() *SharedToken_ProbeTemplate_FieldMask {
	return FullSharedToken_ProbeTemplate_FieldMask()
}

func (o *SharedToken_ProbeTemplate) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSharedToken_ProbeTemplate_FieldMask()
}

func (o *SharedToken_ProbeTemplate) MakeDiffFieldMask(other *SharedToken_ProbeTemplate) *SharedToken_ProbeTemplate_FieldMask {
	if o == nil && other == nil {
		return &SharedToken_ProbeTemplate_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSharedToken_ProbeTemplate_FieldMask()
	}

	res := &SharedToken_ProbeTemplate_FieldMask{}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplate_FieldSubPath{selector: SharedTokenProbeTemplate_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SharedTokenProbeTemplate_FieldTerminalPath{selector: SharedTokenProbeTemplate_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplate_FieldSubPath{selector: SharedTokenProbeTemplate_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	return res
}

func (o *SharedToken_ProbeTemplate) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SharedToken_ProbeTemplate))
}

func (o *SharedToken_ProbeTemplate) Clone() *SharedToken_ProbeTemplate {
	if o == nil {
		return nil
	}
	result := &SharedToken_ProbeTemplate{}
	result.Metadata = o.Metadata.Clone()
	result.DisplayName = o.DisplayName
	result.Spec = o.Spec.Clone()
	return result
}

func (o *SharedToken_ProbeTemplate) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SharedToken_ProbeTemplate) Merge(source *SharedToken_ProbeTemplate) {
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(SharedToken_ProbeTemplate_Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(SharedToken_ProbeTemplate_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
}

func (o *SharedToken_ProbeTemplate) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SharedToken_ProbeTemplate))
}

func (o *SharedToken_ProbeTemplate_Meta) GotenObjectExt() {}

func (o *SharedToken_ProbeTemplate_Meta) MakeFullFieldMask() *SharedToken_ProbeTemplate_Meta_FieldMask {
	return FullSharedToken_ProbeTemplate_Meta_FieldMask()
}

func (o *SharedToken_ProbeTemplate_Meta) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSharedToken_ProbeTemplate_Meta_FieldMask()
}

func (o *SharedToken_ProbeTemplate_Meta) MakeDiffFieldMask(other *SharedToken_ProbeTemplate_Meta) *SharedToken_ProbeTemplate_Meta_FieldMask {
	if o == nil && other == nil {
		return &SharedToken_ProbeTemplate_Meta_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSharedToken_ProbeTemplate_Meta_FieldMask()
	}

	res := &SharedToken_ProbeTemplate_Meta_FieldMask{}

	if len(o.GetTags()) == len(other.GetTags()) {
		for i, lValue := range o.GetTags() {
			rValue := other.GetTags()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorTags})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorTags})
	}

	if len(o.GetLabels()) == len(other.GetLabels()) {
		for i, lValue := range o.GetLabels() {
			rValue := other.GetLabels()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorLabels})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorLabels})
	}

	if len(o.GetAnnotations()) == len(other.GetAnnotations()) {
		for i, lValue := range o.GetAnnotations() {
			rValue := other.GetAnnotations()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &SharedTokenProbeTemplateMeta_FieldTerminalPath{selector: SharedTokenProbeTemplateMeta_FieldPathSelectorAnnotations})
	}
	return res
}

func (o *SharedToken_ProbeTemplate_Meta) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SharedToken_ProbeTemplate_Meta))
}

func (o *SharedToken_ProbeTemplate_Meta) Clone() *SharedToken_ProbeTemplate_Meta {
	if o == nil {
		return nil
	}
	result := &SharedToken_ProbeTemplate_Meta{}
	result.Tags = make([]string, len(o.Tags))
	for i, sourceValue := range o.Tags {
		result.Tags[i] = sourceValue
	}
	result.Labels = map[string]string{}
	for key, sourceValue := range o.Labels {
		result.Labels[key] = sourceValue
	}
	result.Annotations = map[string]string{}
	for key, sourceValue := range o.Annotations {
		result.Annotations[key] = sourceValue
	}
	return result
}

func (o *SharedToken_ProbeTemplate_Meta) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SharedToken_ProbeTemplate_Meta) Merge(source *SharedToken_ProbeTemplate_Meta) {
	for _, sourceValue := range source.GetTags() {
		exists := false
		for _, currentValue := range o.Tags {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Tags = append(o.Tags, newDstElement)
		}
	}

	if source.GetLabels() != nil {
		if o.Labels == nil {
			o.Labels = make(map[string]string, len(source.GetLabels()))
		}
		for key, sourceValue := range source.GetLabels() {
			o.Labels[key] = sourceValue
		}
	}
	if source.GetAnnotations() != nil {
		if o.Annotations == nil {
			o.Annotations = make(map[string]string, len(source.GetAnnotations()))
		}
		for key, sourceValue := range source.GetAnnotations() {
			o.Annotations[key] = sourceValue
		}
	}
}

func (o *SharedToken_ProbeTemplate_Meta) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SharedToken_ProbeTemplate_Meta))
}

func (o *SharedToken_ProbeTemplate_Spec) GotenObjectExt() {}

func (o *SharedToken_ProbeTemplate_Spec) MakeFullFieldMask() *SharedToken_ProbeTemplate_Spec_FieldMask {
	return FullSharedToken_ProbeTemplate_Spec_FieldMask()
}

func (o *SharedToken_ProbeTemplate_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullSharedToken_ProbeTemplate_Spec_FieldMask()
}

func (o *SharedToken_ProbeTemplate_Spec) MakeDiffFieldMask(other *SharedToken_ProbeTemplate_Spec) *SharedToken_ProbeTemplate_Spec_FieldMask {
	if o == nil && other == nil {
		return &SharedToken_ProbeTemplate_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullSharedToken_ProbeTemplate_Spec_FieldMask()
	}

	res := &SharedToken_ProbeTemplate_Spec_FieldMask{}
	if o.GetProbeGroup().String() != other.GetProbeGroup().String() {
		res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorProbeGroup})
	}
	{
		subMask := o.GetPrimaryLocation().MakeDiffFieldMask(other.GetPrimaryLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldSubPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorPrimaryLocation, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetLocationDiscovery().MakeDiffFieldMask(other.GetLocationDiscovery())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldSubPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorLocationDiscovery, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetContactInfo().MakeDiffFieldMask(other.GetContactInfo())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldSubPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorContactInfo, subPath: subpath})
			}
		}
	}
	if o.GetDisableSpeedtest() != other.GetDisableSpeedtest() {
		res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorDisableSpeedtest})
	}
	if o.GetAgentType() != other.GetAgentType() {
		res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorAgentType})
	}
	{
		subMask := o.GetTargetServers().MakeDiffFieldMask(other.GetTargetServers())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldTerminalPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &SharedTokenProbeTemplateSpec_FieldSubPath{selector: SharedTokenProbeTemplateSpec_FieldPathSelectorTargetServers, subPath: subpath})
			}
		}
	}
	return res
}

func (o *SharedToken_ProbeTemplate_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*SharedToken_ProbeTemplate_Spec))
}

func (o *SharedToken_ProbeTemplate_Spec) Clone() *SharedToken_ProbeTemplate_Spec {
	if o == nil {
		return nil
	}
	result := &SharedToken_ProbeTemplate_Spec{}
	if o.ProbeGroup == nil {
		result.ProbeGroup = nil
	} else if data, err := o.ProbeGroup.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ProbeGroup = &probe_group.Reference{}
		if err := result.ProbeGroup.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PrimaryLocation = o.PrimaryLocation.Clone()
	result.LocationDiscovery = o.LocationDiscovery.Clone()
	result.ContactInfo = o.ContactInfo.Clone()
	result.DisableSpeedtest = o.DisableSpeedtest
	result.AgentType = o.AgentType
	result.TargetServers = o.TargetServers.Clone()
	return result
}

func (o *SharedToken_ProbeTemplate_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *SharedToken_ProbeTemplate_Spec) Merge(source *SharedToken_ProbeTemplate_Spec) {
	if source.GetProbeGroup() != nil {
		if data, err := source.GetProbeGroup().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ProbeGroup = &probe_group.Reference{}
			if err := o.ProbeGroup.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ProbeGroup = nil
	}
	if source.GetPrimaryLocation() != nil {
		if o.PrimaryLocation == nil {
			o.PrimaryLocation = new(common.Location)
		}
		o.PrimaryLocation.Merge(source.GetPrimaryLocation())
	}
	if source.GetLocationDiscovery() != nil {
		if o.LocationDiscovery == nil {
			o.LocationDiscovery = new(common.LocationDiscoverySpec)
		}
		o.LocationDiscovery.Merge(source.GetLocationDiscovery())
	}
	if source.GetContactInfo() != nil {
		if o.ContactInfo == nil {
			o.ContactInfo = new(common.ContactInformation)
		}
		o.ContactInfo.Merge(source.GetContactInfo())
	}
	o.DisableSpeedtest = source.GetDisableSpeedtest()
	o.AgentType = source.GetAgentType()
	if source.GetTargetServers() != nil {
		if o.TargetServers == nil {
			o.TargetServers = new(probe.Probe_Spec_TargetServers)
		}
		o.TargetServers.Merge(source.GetTargetServers())
	}
}

func (o *SharedToken_ProbeTemplate_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*SharedToken_ProbeTemplate_Spec))
}
