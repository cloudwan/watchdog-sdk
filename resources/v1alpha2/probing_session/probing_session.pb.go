// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/probing_session.proto
// DO NOT EDIT!!!

package probing_session

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_distribution.ProbingDistribution{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProbingSessionType int32

const (
	ProbingSessionType_CLIENT ProbingSessionType = 0
	ProbingSessionType_SERVER ProbingSessionType = 1
)

var (
	ProbingSessionType_name = map[int32]string{
		0: "CLIENT",
		1: "SERVER",
	}

	ProbingSessionType_value = map[string]int32{
		"CLIENT": 0,
		"SERVER": 1,
	}
)

func (x ProbingSessionType) Enum() *ProbingSessionType {
	p := new(ProbingSessionType)
	*p = x
	return p
}

func (x ProbingSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (ProbingSessionType) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_probing_session_proto_enumTypes[0].Descriptor()
}

func (ProbingSessionType) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_probing_session_proto_enumTypes[0]
}

func (x ProbingSessionType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use ProbingSessionType.ProtoReflect.Descriptor instead.
func (ProbingSessionType) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_session_proto_rawDescGZIP(), []int{0}
}

// ProbingSession Resource
type ProbingSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ProbingSession
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Display name of ProbingSession
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// metadata describes additional information of the ProbingSession
	Metadata *ntt_meta.Meta `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// spec describes the to-be state of the ProbingSession
	Spec                *ProbingSession_Spec            `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	ProbingDistribution *probing_distribution.Reference `protobuf:"bytes,5,opt,customtype=Reference,name=probing_distribution,json=probingDistribution,proto3" json:"probing_distribution,omitempty" firestore:"probingDistribution"`
	// status shows the current status of the ProbingSession
	Status *ProbingSession_Status `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *ProbingSession) Reset() {
	*m = ProbingSession{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_session_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingSession) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingSession) ProtoMessage() {}

func (m *ProbingSession) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_session_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingSession) GotenMessage() {}

// Deprecated, Use ProbingSession.ProtoReflect.Descriptor instead.
func (*ProbingSession) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_session_proto_rawDescGZIP(), []int{0}
}

func (m *ProbingSession) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingSession) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingSession) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingSession) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingSession) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProbingSession) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ProbingSession) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProbingSession) GetSpec() *ProbingSession_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProbingSession) GetProbingDistribution() *probing_distribution.Reference {
	if m != nil {
		return m.ProbingDistribution
	}
	return nil
}

func (m *ProbingSession) GetStatus() *ProbingSession_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProbingSession) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ProbingSession"))
	}
	m.Name = fv
}

func (m *ProbingSession) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "ProbingSession"))
	}
	m.DisplayName = fv
}

func (m *ProbingSession) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "ProbingSession"))
	}
	m.Metadata = fv
}

func (m *ProbingSession) SetSpec(fv *ProbingSession_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "ProbingSession"))
	}
	m.Spec = fv
}

func (m *ProbingSession) SetProbingDistribution(fv *probing_distribution.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingDistribution", "ProbingSession"))
	}
	m.ProbingDistribution = fv
}

func (m *ProbingSession) SetStatus(fv *ProbingSession_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "ProbingSession"))
	}
	m.Status = fv
}

type ProbingSession_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// probe is the probe resource which is expexted to execute
	// the probe config.
	Probe  *probe.Reference          `protobuf:"bytes,1,opt,customtype=Reference,name=probe,proto3" json:"probe,omitempty" firestore:"probe"`
	Target *probing_target.Reference `protobuf:"bytes,2,opt,customtype=Reference,name=target,proto3" json:"target,omitempty" firestore:"target"`
	// group reference
	TargetGroup *probing_target_group.Reference `protobuf:"bytes,3,opt,customtype=Reference,name=target_group,json=targetGroup,proto3" json:"target_group,omitempty" firestore:"targetGroup"`
	// mode defines the mode for this probe target - icmp/udp/http/tcp
	Mode common.ProbingMode `protobuf:"varint,4,opt,name=mode,proto3,enum=ntt.watchdog.v1alpha2.ProbingMode" json:"mode,omitempty" firestore:"mode"`
	// ip_version defines which IP version should be used.
	IpVersion common.IpVersion `protobuf:"varint,5,opt,name=ip_version,json=ipVersion,proto3,enum=ntt.watchdog.v1alpha2.IpVersion" json:"ip_version,omitempty" firestore:"ipVersion"`
	// address is the actual target for the probe - IP addreses/http endpoint
	Address string `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	// addresses list the list of IP addresses that this target is reachable on
	// used for managed targets that might have dual stack
	Addresses []string           `protobuf:"bytes,7,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	Port      uint32             `protobuf:"varint,8,opt,name=port,proto3" json:"port,omitempty" firestore:"port"`
	Type      ProbingSessionType `protobuf:"varint,9,opt,name=type,proto3,enum=ntt.watchdog.v1alpha2.ProbingSessionType" json:"type,omitempty" firestore:"type"`
	// Interval defines probing interval
	Interval *duration.Duration `protobuf:"bytes,10,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// TOS for ipv4 or Traffic class for ipv6. Don't set it (use defaults or
	// distribution overrides)
	Tos uint32 `protobuf:"varint,11,opt,name=tos,proto3" json:"tos,omitempty" firestore:"tos"`
	// Path Probing settings.
	PathProbing *common.PathProbe `protobuf:"bytes,12,opt,name=path_probing,json=pathProbing,proto3" json:"path_probing,omitempty" firestore:"pathProbing"`
	// Speedtest specific settings
	SpeedtestSettings *common.SpeedTestSettings `protobuf:"bytes,13,opt,name=speedtest_settings,json=speedtestSettings,proto3" json:"speedtest_settings,omitempty" firestore:"speedtestSettings"`
	// HTTP Probing Settings
	HttpProbingConfig *common.HTTPProbingConfig `protobuf:"bytes,14,opt,name=http_probing_config,json=httpProbingConfig,proto3" json:"http_probing_config,omitempty" firestore:"httpProbingConfig"`
	// Proxy configuration (for speedtest and http)
	ProxyConfiguration *common.ProxyConfiguration `protobuf:"bytes,15,opt,name=proxy_configuration,json=proxyConfiguration,proto3" json:"proxy_configuration,omitempty" firestore:"proxyConfiguration"`
	// Target location type
	LocationType common.LocationType `protobuf:"varint,16,opt,name=location_type,json=locationType,proto3,enum=ntt.watchdog.v1alpha2.LocationType" json:"location_type,omitempty" firestore:"locationType"`
	// Specific target location if applicable
	Location   *common.Location `protobuf:"bytes,17,opt,name=location,proto3" json:"location,omitempty" firestore:"location"`
	EnablePcap bool             `protobuf:"varint,18,opt,name=enable_pcap,json=enablePcap,proto3" json:"enable_pcap,omitempty" firestore:"enablePcap"`
}

func (m *ProbingSession_Spec) Reset() {
	*m = ProbingSession_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_session_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingSession_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingSession_Spec) ProtoMessage() {}

func (m *ProbingSession_Spec) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_session_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingSession_Spec) GotenMessage() {}

// Deprecated, Use ProbingSession_Spec.ProtoReflect.Descriptor instead.
func (*ProbingSession_Spec) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_session_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ProbingSession_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingSession_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingSession_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingSession_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingSession_Spec) GetProbe() *probe.Reference {
	if m != nil {
		return m.Probe
	}
	return nil
}

func (m *ProbingSession_Spec) GetTarget() *probing_target.Reference {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ProbingSession_Spec) GetTargetGroup() *probing_target_group.Reference {
	if m != nil {
		return m.TargetGroup
	}
	return nil
}

func (m *ProbingSession_Spec) GetMode() common.ProbingMode {
	if m != nil {
		return m.Mode
	}
	return common.ProbingMode_PROBING_MODE_UNSPECIFIED
}

func (m *ProbingSession_Spec) GetIpVersion() common.IpVersion {
	if m != nil {
		return m.IpVersion
	}
	return common.IpVersion_IP_VERSION_UNSPECIFIED
}

func (m *ProbingSession_Spec) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ProbingSession_Spec) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *ProbingSession_Spec) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return uint32(0)
}

func (m *ProbingSession_Spec) GetType() ProbingSessionType {
	if m != nil {
		return m.Type
	}
	return ProbingSessionType_CLIENT
}

func (m *ProbingSession_Spec) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ProbingSession_Spec) GetTos() uint32 {
	if m != nil {
		return m.Tos
	}
	return uint32(0)
}

func (m *ProbingSession_Spec) GetPathProbing() *common.PathProbe {
	if m != nil {
		return m.PathProbing
	}
	return nil
}

func (m *ProbingSession_Spec) GetSpeedtestSettings() *common.SpeedTestSettings {
	if m != nil {
		return m.SpeedtestSettings
	}
	return nil
}

func (m *ProbingSession_Spec) GetHttpProbingConfig() *common.HTTPProbingConfig {
	if m != nil {
		return m.HttpProbingConfig
	}
	return nil
}

func (m *ProbingSession_Spec) GetProxyConfiguration() *common.ProxyConfiguration {
	if m != nil {
		return m.ProxyConfiguration
	}
	return nil
}

func (m *ProbingSession_Spec) GetLocationType() common.LocationType {
	if m != nil {
		return m.LocationType
	}
	return common.LocationType_LOCATION_TYPE_UNSPECIFIED
}

func (m *ProbingSession_Spec) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ProbingSession_Spec) GetEnablePcap() bool {
	if m != nil {
		return m.EnablePcap
	}
	return false
}

func (m *ProbingSession_Spec) SetProbe(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Probe", "ProbingSession_Spec"))
	}
	m.Probe = fv
}

func (m *ProbingSession_Spec) SetTarget(fv *probing_target.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "ProbingSession_Spec"))
	}
	m.Target = fv
}

func (m *ProbingSession_Spec) SetTargetGroup(fv *probing_target_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetGroup", "ProbingSession_Spec"))
	}
	m.TargetGroup = fv
}

func (m *ProbingSession_Spec) SetMode(fv common.ProbingMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "ProbingSession_Spec"))
	}
	m.Mode = fv
}

func (m *ProbingSession_Spec) SetIpVersion(fv common.IpVersion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpVersion", "ProbingSession_Spec"))
	}
	m.IpVersion = fv
}

func (m *ProbingSession_Spec) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "ProbingSession_Spec"))
	}
	m.Address = fv
}

func (m *ProbingSession_Spec) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "ProbingSession_Spec"))
	}
	m.Addresses = fv
}

func (m *ProbingSession_Spec) SetPort(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Port", "ProbingSession_Spec"))
	}
	m.Port = fv
}

func (m *ProbingSession_Spec) SetType(fv ProbingSessionType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "ProbingSession_Spec"))
	}
	m.Type = fv
}

func (m *ProbingSession_Spec) SetInterval(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "ProbingSession_Spec"))
	}
	m.Interval = fv
}

func (m *ProbingSession_Spec) SetTos(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tos", "ProbingSession_Spec"))
	}
	m.Tos = fv
}

func (m *ProbingSession_Spec) SetPathProbing(fv *common.PathProbe) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathProbing", "ProbingSession_Spec"))
	}
	m.PathProbing = fv
}

func (m *ProbingSession_Spec) SetSpeedtestSettings(fv *common.SpeedTestSettings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SpeedtestSettings", "ProbingSession_Spec"))
	}
	m.SpeedtestSettings = fv
}

func (m *ProbingSession_Spec) SetHttpProbingConfig(fv *common.HTTPProbingConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpProbingConfig", "ProbingSession_Spec"))
	}
	m.HttpProbingConfig = fv
}

func (m *ProbingSession_Spec) SetProxyConfiguration(fv *common.ProxyConfiguration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfiguration", "ProbingSession_Spec"))
	}
	m.ProxyConfiguration = fv
}

func (m *ProbingSession_Spec) SetLocationType(fv common.LocationType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocationType", "ProbingSession_Spec"))
	}
	m.LocationType = fv
}

func (m *ProbingSession_Spec) SetLocation(fv *common.Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "ProbingSession_Spec"))
	}
	m.Location = fv
}

func (m *ProbingSession_Spec) SetEnablePcap(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnablePcap", "ProbingSession_Spec"))
	}
	m.EnablePcap = fv
}

type ProbingSession_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ProbingSession_Status) Reset() {
	*m = ProbingSession_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_session_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingSession_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingSession_Status) ProtoMessage() {}

func (m *ProbingSession_Status) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_session_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingSession_Status) GotenMessage() {}

// Deprecated, Use ProbingSession_Status.ProtoReflect.Descriptor instead.
func (*ProbingSession_Status) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_session_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ProbingSession_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingSession_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingSession_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingSession_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

var watchdog_proto_v1alpha2_probing_session_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_probing_session_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x10, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xb2, 0xda, 0x21, 0x12, 0x0a, 0x10,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0xe2, 0xde, 0x21, 0x12, 0x2a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x6e, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xfa, 0x41, 0x15, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0xb2, 0xda, 0x21, 0x19, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x03, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x04, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0xab, 0x08, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x41, 0x07, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0xb2, 0xda, 0x21, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x10, 0x02, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x04, 0x52, 0x05, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2f, 0xfa, 0x41, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xb2, 0xda, 0x21, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x10, 0x03, 0xe2, 0xde, 0x21,
	0x02, 0x08, 0x04, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x01, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0xca, 0xc6, 0x27,
	0x08, 0x1a, 0x06, 0x1a, 0x04, 0x08, 0xff, 0xff, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x1a, 0x05, 0x1a, 0x03, 0x08, 0xff, 0x01, 0x52,
	0x03, 0x74, 0x6f, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0b, 0x70, 0x61,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5a, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x63, 0x61, 0x70, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x63, 0x61, 0x70,
	0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0xc2, 0x04, 0xea, 0x41, 0x6b,
	0x0a, 0x22, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c,
	0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x92, 0xd9, 0x21, 0x94, 0x01,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x4a, 0x41, 0x08, 0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a,
	0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x0d, 0x0a, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x08, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x05, 0x6a, 0x1c, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0xaa, 0xd9, 0x21, 0xf4, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0a, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x0a, 0x0d, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x0a, 0x0f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x09, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x12, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xda, 0x94, 0x23,
	0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x2c, 0x22, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x02, 0x2a,
	0x2c, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x42, 0x87, 0x03,
	0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x54, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x0a, 0x1c, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x13, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x3b, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0xd2, 0x84, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xa2, 0x80, 0xd1, 0x02,
	0x56, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_probing_session_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_probing_session_proto_rawDescData = watchdog_proto_v1alpha2_probing_session_proto_rawDesc
)

func watchdog_proto_v1alpha2_probing_session_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_probing_session_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_probing_session_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_probing_session_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_probing_session_proto_rawDescData
}

var watchdog_proto_v1alpha2_probing_session_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var watchdog_proto_v1alpha2_probing_session_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var watchdog_proto_v1alpha2_probing_session_proto_goTypes = []interface{}{
	(ProbingSessionType)(0),           // 0: ntt.watchdog.v1alpha2.ProbingSessionType
	(*ProbingSession)(nil),            // 1: ntt.watchdog.v1alpha2.ProbingSession
	(*ProbingSession_Spec)(nil),       // 2: ntt.watchdog.v1alpha2.ProbingSession.Spec
	(*ProbingSession_Status)(nil),     // 3: ntt.watchdog.v1alpha2.ProbingSession.Status
	(*ntt_meta.Meta)(nil),             // 4: ntt.types.Meta
	(common.ProbingMode)(0),           // 5: ntt.watchdog.v1alpha2.ProbingMode
	(common.IpVersion)(0),             // 6: ntt.watchdog.v1alpha2.IpVersion
	(*duration.Duration)(nil),         // 7: google.protobuf.Duration
	(*common.PathProbe)(nil),          // 8: ntt.watchdog.v1alpha2.PathProbe
	(*common.SpeedTestSettings)(nil),  // 9: ntt.watchdog.v1alpha2.SpeedTestSettings
	(*common.HTTPProbingConfig)(nil),  // 10: ntt.watchdog.v1alpha2.HTTPProbingConfig
	(*common.ProxyConfiguration)(nil), // 11: ntt.watchdog.v1alpha2.ProxyConfiguration
	(common.LocationType)(0),          // 12: ntt.watchdog.v1alpha2.LocationType
	(*common.Location)(nil),           // 13: ntt.watchdog.v1alpha2.Location
}
var watchdog_proto_v1alpha2_probing_session_proto_depIdxs = []int32{
	4,  // 0: ntt.watchdog.v1alpha2.ProbingSession.metadata:type_name -> ntt.types.Meta
	2,  // 1: ntt.watchdog.v1alpha2.ProbingSession.spec:type_name -> ntt.watchdog.v1alpha2.ProbingSession.Spec
	3,  // 2: ntt.watchdog.v1alpha2.ProbingSession.status:type_name -> ntt.watchdog.v1alpha2.ProbingSession.Status
	5,  // 3: ntt.watchdog.v1alpha2.ProbingSession.Spec.mode:type_name -> ntt.watchdog.v1alpha2.ProbingMode
	6,  // 4: ntt.watchdog.v1alpha2.ProbingSession.Spec.ip_version:type_name -> ntt.watchdog.v1alpha2.IpVersion
	0,  // 5: ntt.watchdog.v1alpha2.ProbingSession.Spec.type:type_name -> ntt.watchdog.v1alpha2.ProbingSessionType
	7,  // 6: ntt.watchdog.v1alpha2.ProbingSession.Spec.interval:type_name -> google.protobuf.Duration
	8,  // 7: ntt.watchdog.v1alpha2.ProbingSession.Spec.path_probing:type_name -> ntt.watchdog.v1alpha2.PathProbe
	9,  // 8: ntt.watchdog.v1alpha2.ProbingSession.Spec.speedtest_settings:type_name -> ntt.watchdog.v1alpha2.SpeedTestSettings
	10, // 9: ntt.watchdog.v1alpha2.ProbingSession.Spec.http_probing_config:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig
	11, // 10: ntt.watchdog.v1alpha2.ProbingSession.Spec.proxy_configuration:type_name -> ntt.watchdog.v1alpha2.ProxyConfiguration
	12, // 11: ntt.watchdog.v1alpha2.ProbingSession.Spec.location_type:type_name -> ntt.watchdog.v1alpha2.LocationType
	13, // 12: ntt.watchdog.v1alpha2.ProbingSession.Spec.location:type_name -> ntt.watchdog.v1alpha2.Location
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_probing_session_proto_init() }
func watchdog_proto_v1alpha2_probing_session_proto_init() {
	if watchdog_proto_v1alpha2_probing_session_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_probing_session_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_session_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingSession_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_session_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingSession_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_probing_session_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_probing_session_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_probing_session_proto_depIdxs,
		EnumInfos:         watchdog_proto_v1alpha2_probing_session_proto_enumTypes,
		MessageInfos:      watchdog_proto_v1alpha2_probing_session_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_probing_session_proto = out.File
	watchdog_proto_v1alpha2_probing_session_proto_rawDesc = nil
	watchdog_proto_v1alpha2_probing_session_proto_goTypes = nil
	watchdog_proto_v1alpha2_probing_session_proto_depIdxs = nil
}
