// Code generated by protoc-gen-goten-resource
// Resource: ProbingSession
// DO NOT EDIT!!!

package probing_session

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_distribution.ProbingDistribution{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

type ProbingSessionList []*ProbingSession

func (l ProbingSessionList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ProbingSession))
}

func (l ProbingSessionList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ProbingSessionList)...)
}

func (l ProbingSessionList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingSessionList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ProbingSessionList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ProbingSession)
}

func (l ProbingSessionList) Length() int {
	return len(l)
}

type ProbingSessionChangeList []*ProbingSessionChange

func (l ProbingSessionChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ProbingSessionChange))
}

func (l ProbingSessionChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ProbingSessionChangeList)...)
}

func (l ProbingSessionChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingSessionChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ProbingSessionChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ProbingSessionChange)
}

func (l ProbingSessionChangeList) Length() int {
	return len(l)
}

type ProbingSessionNameList []*Name

func (l ProbingSessionNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ProbingSessionNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ProbingSessionNameList)...)
}

func (l ProbingSessionNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingSessionNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingSessionNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ProbingSessionNameList) Length() int {
	return len(l)
}

type ProbingSessionReferenceList []*Reference

func (l ProbingSessionReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ProbingSessionReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ProbingSessionReferenceList)...)
}

func (l ProbingSessionReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingSessionReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingSessionReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ProbingSessionReferenceList) Length() int {
	return len(l)
}

type ProbingSessionParentNameList []*ParentName

func (l ProbingSessionParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ProbingSessionParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ProbingSessionParentNameList)...)
}

func (l ProbingSessionParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingSessionParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingSessionParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ProbingSessionParentNameList) Length() int {
	return len(l)
}

type ProbingSessionParentReferenceList []*ParentReference

func (l ProbingSessionParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ProbingSessionParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ProbingSessionParentReferenceList)...)
}

func (l ProbingSessionParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingSessionParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingSessionParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ProbingSessionParentReferenceList) Length() int {
	return len(l)
}

type ProbingSessionMap map[Name]*ProbingSession

func (m ProbingSessionMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ProbingSessionMap) Set(res gotenresource.Resource) {
	tRes := res.(*ProbingSession)
	m[*tRes.Name] = tRes
}

func (m ProbingSessionMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingSessionMap) Length() int {
	return len(m)
}

func (m ProbingSessionMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ProbingSessionChangeMap map[Name]*ProbingSessionChange

func (m ProbingSessionChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ProbingSessionChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ProbingSessionChange)
	m[*tChange.GetProbingSessionName()] = tChange
}

func (m ProbingSessionChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingSessionChangeMap) Length() int {
	return len(m)
}

func (m ProbingSessionChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
