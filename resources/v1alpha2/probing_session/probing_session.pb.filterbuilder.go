// Code generated by protoc-gen-goten-resource
// Resource: ProbingSession
// DO NOT EDIT!!!

package probing_session

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	devices_project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
	structpb "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &devices_project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.Actor{}
	_ = &iam_condition.Condition{}
	_ = &iam_organization.Organization{}
	_ = &iam_permission.Permission{}
	_ = &iam_project.Project{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &iam_user.User{}
	_ = &policy.Policy{}
	_ = &syncing_meta.SyncingMeta{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &structpb.Struct{}
	_ = &timestamp.Timestamp{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probe_group.ProbeGroup{}
	_ = &probing_distribution.ProbingDistribution{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

type FilterBuilderOrCondition interface {
	_IsProbingSessionFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsProbingSessionFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp ProbingSession_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      ProbingSession_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) ProbingDistribution() *filterCndBuilderProbingDistribution {
	return &filterCndBuilderProbingDistribution{builder: b.builder}
}

func (b *filterCndBuilder) Status() *filterCndBuilderStatus {
	return &filterCndBuilderStatus{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewProbingSessionFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingSessionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProbingSession_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingSessionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProbingSession_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProbingSession_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProbingSession_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ApiVersion() *filterCndBuilderMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Uid() *filterCndBuilderMetadataOwnerReferencesUid {
	return &filterCndBuilderMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProbingSession_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProbingSession_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *ProbingSession_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *ProbingSession_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *ProbingSession_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *ProbingSession_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *ProbingSession_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *ProbingSession_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*ProbingSession_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*ProbingSession_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *ProbingSession_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) Probe() *filterCndBuilderSpecProbe {
	return &filterCndBuilderSpecProbe{builder: b.builder}
}

func (b *filterCndBuilderSpec) Target() *filterCndBuilderSpecTarget {
	return &filterCndBuilderSpecTarget{builder: b.builder}
}

func (b *filterCndBuilderSpec) TargetGroup() *filterCndBuilderSpecTargetGroup {
	return &filterCndBuilderSpecTargetGroup{builder: b.builder}
}

func (b *filterCndBuilderSpec) Mode() *filterCndBuilderSpecMode {
	return &filterCndBuilderSpecMode{builder: b.builder}
}

func (b *filterCndBuilderSpec) IpVersion() *filterCndBuilderSpecIpVersion {
	return &filterCndBuilderSpecIpVersion{builder: b.builder}
}

func (b *filterCndBuilderSpec) Address() *filterCndBuilderSpecAddress {
	return &filterCndBuilderSpecAddress{builder: b.builder}
}

func (b *filterCndBuilderSpec) Addresses() *filterCndBuilderSpecAddresses {
	return &filterCndBuilderSpecAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpec) Port() *filterCndBuilderSpecPort {
	return &filterCndBuilderSpecPort{builder: b.builder}
}

func (b *filterCndBuilderSpec) Type() *filterCndBuilderSpecType {
	return &filterCndBuilderSpecType{builder: b.builder}
}

func (b *filterCndBuilderSpec) Interval() *filterCndBuilderSpecInterval {
	return &filterCndBuilderSpecInterval{builder: b.builder}
}

func (b *filterCndBuilderSpec) Tos() *filterCndBuilderSpecTos {
	return &filterCndBuilderSpecTos{builder: b.builder}
}

func (b *filterCndBuilderSpec) PathProbing() *filterCndBuilderSpecPathProbing {
	return &filterCndBuilderSpecPathProbing{builder: b.builder}
}

func (b *filterCndBuilderSpec) SpeedtestSettings() *filterCndBuilderSpecSpeedtestSettings {
	return &filterCndBuilderSpecSpeedtestSettings{builder: b.builder}
}

func (b *filterCndBuilderSpec) HttpProbingConfig() *filterCndBuilderSpecHttpProbingConfig {
	return &filterCndBuilderSpecHttpProbingConfig{builder: b.builder}
}

func (b *filterCndBuilderSpec) ProxyConfiguration() *filterCndBuilderSpecProxyConfiguration {
	return &filterCndBuilderSpecProxyConfiguration{builder: b.builder}
}

func (b *filterCndBuilderSpec) LocationType() *filterCndBuilderSpecLocationType {
	return &filterCndBuilderSpecLocationType{builder: b.builder}
}

func (b *filterCndBuilderSpec) Location() *filterCndBuilderSpecLocation {
	return &filterCndBuilderSpecLocation{builder: b.builder}
}

type filterCndBuilderSpecProbe struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbe) Eq(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbe) Neq(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbe) Gt(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbe) Gte(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbe) Lt(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbe) Lte(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbe) In(values []*probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Probe().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbe) NotIn(values []*probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Probe().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbe) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Probe().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbe) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Probe().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbe) compare(op gotenfilter.CompareOperator, value *probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Probe().WithValue(value),
	})
}

type filterCndBuilderSpecTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTarget) Eq(value *probing_target.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTarget) Neq(value *probing_target.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTarget) Gt(value *probing_target.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTarget) Gte(value *probing_target.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTarget) Lt(value *probing_target.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTarget) Lte(value *probing_target.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTarget) In(values []*probing_target.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Target().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTarget) NotIn(values []*probing_target.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Target().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Target().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Target().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTarget) compare(op gotenfilter.CompareOperator, value *probing_target.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Target().WithValue(value),
	})
}

type filterCndBuilderSpecTargetGroup struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetGroup) Eq(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetGroup) Neq(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetGroup) Gt(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetGroup) Gte(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetGroup) Lt(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetGroup) Lte(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetGroup) In(values []*probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().TargetGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetGroup) NotIn(values []*probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().TargetGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetGroup) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().TargetGroup().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetGroup) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().TargetGroup().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetGroup) compare(op gotenfilter.CompareOperator, value *probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().TargetGroup().WithValue(value),
	})
}

type filterCndBuilderSpecMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecMode) Eq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecMode) Neq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecMode) Gt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecMode) Gte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecMode) Lt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecMode) Lte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecMode) In(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecMode) NotIn(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecMode) compare(op gotenfilter.CompareOperator, value common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecIpVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecIpVersion) Eq(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecIpVersion) Neq(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecIpVersion) Gt(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecIpVersion) Gte(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecIpVersion) Lt(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecIpVersion) Lte(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecIpVersion) In(values []common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().IpVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIpVersion) NotIn(values []common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().IpVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIpVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().IpVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIpVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().IpVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIpVersion) compare(op gotenfilter.CompareOperator, value common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().IpVersion().WithValue(value),
	})
}

type filterCndBuilderSpecAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Address().WithValue(value),
	})
}

type filterCndBuilderSpecAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Addresses().FieldPath(),
		Value:     NewProbingSessionFieldPathBuilder().Spec().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingSessionFieldPathBuilder().Spec().Addresses()
	itemValues := make([]ProbingSession_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingSessionFieldPathBuilder().Spec().Addresses()
	itemValues := make([]ProbingSession_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPort) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPort) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPort) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPort) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPort) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPort) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPort) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Port().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPort) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Port().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Port().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Port().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPort) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Port().WithValue(value),
	})
}

type filterCndBuilderSpecType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecType) Eq(value ProbingSessionType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecType) Neq(value ProbingSessionType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecType) Gt(value ProbingSessionType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecType) Gte(value ProbingSessionType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecType) Lt(value ProbingSessionType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecType) Lte(value ProbingSessionType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecType) In(values []ProbingSessionType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecType) NotIn(values []ProbingSessionType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecType) compare(op gotenfilter.CompareOperator, value ProbingSessionType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Type().WithValue(value),
	})
}

type filterCndBuilderSpecInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecTos struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTos) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTos) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTos) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTos) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTos) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTos) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTos) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Tos().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTos) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Tos().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTos) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Tos().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTos) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Tos().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTos) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Tos().WithValue(value),
	})
}

type filterCndBuilderSpecPathProbing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPathProbing) Eq(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPathProbing) Neq(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPathProbing) Gt(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPathProbing) Gte(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPathProbing) Lt(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPathProbing) Lte(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPathProbing) In(values []*common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbing) NotIn(values []*common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbing) compare(op gotenfilter.CompareOperator, value *common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().PathProbing().WithValue(value),
	})
}

func (b *filterCndBuilderSpecPathProbing) Enabled() *filterCndBuilderSpecPathProbingEnabled {
	return &filterCndBuilderSpecPathProbingEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecPathProbing) Mode() *filterCndBuilderSpecPathProbingMode {
	return &filterCndBuilderSpecPathProbingMode{builder: b.builder}
}

func (b *filterCndBuilderSpecPathProbing) Interval() *filterCndBuilderSpecPathProbingInterval {
	return &filterCndBuilderSpecPathProbingInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecPathProbing) IntervalSec() *filterCndBuilderSpecPathProbingIntervalSec {
	return &filterCndBuilderSpecPathProbingIntervalSec{builder: b.builder}
}

func (b *filterCndBuilderSpecPathProbing) Attempts() *filterCndBuilderSpecPathProbingAttempts {
	return &filterCndBuilderSpecPathProbingAttempts{builder: b.builder}
}

func (b *filterCndBuilderSpecPathProbing) MaxTtl() *filterCndBuilderSpecPathProbingMaxTtl {
	return &filterCndBuilderSpecPathProbingMaxTtl{builder: b.builder}
}

type filterCndBuilderSpecPathProbingEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPathProbingEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPathProbingEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPathProbingEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPathProbingEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPathProbingEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPathProbingEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPathProbingEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecPathProbingMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPathProbingMode) Eq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPathProbingMode) Neq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPathProbingMode) Gt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPathProbingMode) Gte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPathProbingMode) Lt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPathProbingMode) Lte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPathProbingMode) In(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingMode) NotIn(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingMode) compare(op gotenfilter.CompareOperator, value common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecPathProbingInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPathProbingInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPathProbingInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPathProbingInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPathProbingInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPathProbingInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPathProbingInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPathProbingInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecPathProbingIntervalSec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingIntervalSec) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().PathProbing().IntervalSec().WithValue(value),
	})
}

type filterCndBuilderSpecPathProbingAttempts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPathProbingAttempts) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPathProbingAttempts) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPathProbingAttempts) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPathProbingAttempts) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPathProbingAttempts) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPathProbingAttempts) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPathProbingAttempts) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Attempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingAttempts) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Attempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingAttempts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Attempts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingAttempts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Attempts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingAttempts) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().PathProbing().Attempts().WithValue(value),
	})
}

type filterCndBuilderSpecPathProbingMaxTtl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().MaxTtl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().PathProbing().MaxTtl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().MaxTtl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().PathProbing().MaxTtl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPathProbingMaxTtl) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().PathProbing().MaxTtl().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestSettings struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestSettings) Eq(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettings) Neq(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettings) Gt(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettings) Gte(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettings) Lt(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettings) Lte(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettings) In(values []*common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettings) NotIn(values []*common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettings) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettings) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettings) compare(op gotenfilter.CompareOperator, value *common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettings) Duration() *filterCndBuilderSpecSpeedtestSettingsDuration {
	return &filterCndBuilderSpecSpeedtestSettingsDuration{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestSettings) UseTls() *filterCndBuilderSpecSpeedtestSettingsUseTls {
	return &filterCndBuilderSpecSpeedtestSettingsUseTls{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestSettings) ServerSelection() *filterCndBuilderSpecSpeedtestSettingsServerSelection {
	return &filterCndBuilderSpecSpeedtestSettingsServerSelection{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestSettings) TcpPort() *filterCndBuilderSpecSpeedtestSettingsTcpPort {
	return &filterCndBuilderSpecSpeedtestSettingsTcpPort{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestSettings) TlsPort() *filterCndBuilderSpecSpeedtestSettingsTlsPort {
	return &filterCndBuilderSpecSpeedtestSettingsTlsPort{builder: b.builder}
}

type filterCndBuilderSpecSpeedtestSettingsDuration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsDuration) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().Duration().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestSettingsUseTls struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsUseTls) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().UseTls().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestSettingsServerSelection struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) Eq(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) Neq(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) Gt(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) Gte(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) Lt(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) Lte(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) In(values []common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().ServerSelection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) NotIn(values []common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().ServerSelection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().ServerSelection().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().ServerSelection().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsServerSelection) compare(op gotenfilter.CompareOperator, value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().ServerSelection().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestSettingsTcpPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsTcpPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TcpPort().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestSettingsTlsPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TlsPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TlsPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TlsPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TlsPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestSettingsTlsPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().SpeedtestSettings().TlsPort().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfig) Eq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfig) Neq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfig) Gt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfig) Gte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfig) Lt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfig) Lte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfig) In(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfig) NotIn(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfig) HttpRequest() *filterCndBuilderSpecHttpProbingConfigHttpRequest {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequest{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfig) AuthConfig() *filterCndBuilderSpecHttpProbingConfigAuthConfig {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfig{builder: b.builder}
}

type filterCndBuilderSpecHttpProbingConfigHttpRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) Url() *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) RequestHeaders() *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) RequestMethod() *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) ExpectedResponseCode() *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) Timeout() *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) RequestBody() *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) AuthenticationMethod() *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequest) UrlFormEncodedBody() *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody {
	return &filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody{builder: b.builder}
}

type filterCndBuilderSpecHttpProbingConfigHttpRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Url().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders {
	return &mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Eq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Neq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Gt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Gte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Lt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Lte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) In(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) NotIn(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithValue(value),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) WithKey(key string) *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody {
	return &mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Eq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Neq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Gt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Gte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Lt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) Lte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) In(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) NotIn(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigHttpRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) Eq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) Neq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) Gt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) Gte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) Lt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) Lte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) In(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) NotIn(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) Username() *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigUsername{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) Password() *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) TokenRequest() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) TokenResponseHeader() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) TokenResponseBodyKey() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) RequestHeaderTokenKey() *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfig) TokenResponseBodyExpiryKey() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey{builder: b.builder}
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigUsername struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigUsername) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Username().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().Password().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) Url() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) RequestHeaders() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) RequestMethod() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) ExpectedResponseCode() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) Timeout() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) RequestBody() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) AuthenticationMethod() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequest) UrlFormEncodedBody() *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody {
	return &filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody{builder: b.builder}
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Eq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Neq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) In(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) NotIn(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithValue(value),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) WithKey(key string) *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody {
	return &mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Eq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Neq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) In(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) NotIn(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseHeader) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigRequestHeaderTokenKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithValue(value),
	})
}

type filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithValue(value),
	})
}

type filterCndBuilderSpecProxyConfiguration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProxyConfiguration) Eq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProxyConfiguration) Neq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProxyConfiguration) Gt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProxyConfiguration) Gte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProxyConfiguration) Lt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProxyConfiguration) Lte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProxyConfiguration) In(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfiguration) NotIn(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfiguration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfiguration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfiguration) compare(op gotenfilter.CompareOperator, value *common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProxyConfiguration) ProxySetting() *filterCndBuilderSpecProxyConfigurationProxySetting {
	return &filterCndBuilderSpecProxyConfigurationProxySetting{builder: b.builder}
}

func (b *filterCndBuilderSpecProxyConfiguration) HttpProxy() *filterCndBuilderSpecProxyConfigurationHttpProxy {
	return &filterCndBuilderSpecProxyConfigurationHttpProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecProxyConfiguration) HttpsProxy() *filterCndBuilderSpecProxyConfigurationHttpsProxy {
	return &filterCndBuilderSpecProxyConfigurationHttpsProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecProxyConfiguration) NoProxy() *filterCndBuilderSpecProxyConfigurationNoProxy {
	return &filterCndBuilderSpecProxyConfigurationNoProxy{builder: b.builder}
}

type filterCndBuilderSpecProxyConfigurationProxySetting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) Eq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) Neq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) Gt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) Gte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) Lt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) Lte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) In(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) NotIn(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationProxySetting) compare(op gotenfilter.CompareOperator, value common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().ProxySetting().WithValue(value),
	})
}

type filterCndBuilderSpecProxyConfigurationHttpProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationHttpProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpProxy().WithValue(value),
	})
}

type filterCndBuilderSpecProxyConfigurationHttpsProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationHttpsProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().HttpsProxy().WithValue(value),
	})
}

type filterCndBuilderSpecProxyConfigurationNoProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProxyConfigurationNoProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().ProxyConfiguration().NoProxy().WithValue(value),
	})
}

type filterCndBuilderSpecLocationType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationType) Eq(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationType) Neq(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationType) Gt(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationType) Gte(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationType) Lt(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationType) Lte(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationType) In(values []common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().LocationType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationType) NotIn(values []common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().LocationType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().LocationType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().LocationType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationType) compare(op gotenfilter.CompareOperator, value common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().LocationType().WithValue(value),
	})
}

type filterCndBuilderSpecLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().WithValue(value),
	})
}

func (b *filterCndBuilderSpecLocation) Address() *filterCndBuilderSpecLocationAddress {
	return &filterCndBuilderSpecLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderSpecLocation) AdminHierarchy() *filterCndBuilderSpecLocationAdminHierarchy {
	return &filterCndBuilderSpecLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderSpecLocation) Coordinates() *filterCndBuilderSpecLocationCoordinates {
	return &filterCndBuilderSpecLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderSpecLocation) Accuracy() *filterCndBuilderSpecLocationAccuracy {
	return &filterCndBuilderSpecLocationAccuracy{builder: b.builder}
}

type filterCndBuilderSpecLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().WithValue(value),
	})
}

func (b *filterCndBuilderSpecLocationAddress) PostalCode() *filterCndBuilderSpecLocationAddressPostalCode {
	return &filterCndBuilderSpecLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAddress) CountryCode() *filterCndBuilderSpecLocationAddressCountryCode {
	return &filterCndBuilderSpecLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAddress) Continent() *filterCndBuilderSpecLocationAddressContinent {
	return &filterCndBuilderSpecLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAddress) Country() *filterCndBuilderSpecLocationAddressCountry {
	return &filterCndBuilderSpecLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAddress) AdminArea1() *filterCndBuilderSpecLocationAddressAdminArea1 {
	return &filterCndBuilderSpecLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAddress) AdminArea2() *filterCndBuilderSpecLocationAddressAdminArea2 {
	return &filterCndBuilderSpecLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAddress) AdminArea3() *filterCndBuilderSpecLocationAddressAdminArea3 {
	return &filterCndBuilderSpecLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAddress) AdminArea4() *filterCndBuilderSpecLocationAddressAdminArea4 {
	return &filterCndBuilderSpecLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAddress) StreetAddress() *filterCndBuilderSpecLocationAddressStreetAddress {
	return &filterCndBuilderSpecLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderSpecLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().Country().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Continent() *filterCndBuilderSpecLocationAdminHierarchyContinent {
	return &filterCndBuilderSpecLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Country() *filterCndBuilderSpecLocationAdminHierarchyCountry {
	return &filterCndBuilderSpecLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Admin1() *filterCndBuilderSpecLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderSpecLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Admin2() *filterCndBuilderSpecLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderSpecLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Admin3() *filterCndBuilderSpecLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderSpecLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Admin4() *filterCndBuilderSpecLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderSpecLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationAdminHierarchy) Admin5() *filterCndBuilderSpecLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderSpecLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderSpecLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderSpecLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Coordinates().WithValue(value),
	})
}

type filterCndBuilderSpecLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Spec().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Spec().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Spec().Location().Accuracy().WithValue(value),
	})
}

type filterCndBuilderProbingDistribution struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProbingDistribution) Eq(value *probing_distribution.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProbingDistribution) Neq(value *probing_distribution.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProbingDistribution) Gt(value *probing_distribution.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProbingDistribution) Gte(value *probing_distribution.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProbingDistribution) Lt(value *probing_distribution.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProbingDistribution) Lte(value *probing_distribution.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProbingDistribution) In(values []*probing_distribution.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().ProbingDistribution().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbingDistribution) NotIn(values []*probing_distribution.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().ProbingDistribution().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProbingDistribution) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().ProbingDistribution().FieldPath(),
	})
}

func (b *filterCndBuilderProbingDistribution) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().ProbingDistribution().FieldPath(),
	})
}

func (b *filterCndBuilderProbingDistribution) compare(op gotenfilter.CompareOperator, value *probing_distribution.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().ProbingDistribution().WithValue(value),
	})
}

type filterCndBuilderStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatus) Eq(value *ProbingSession_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatus) Neq(value *ProbingSession_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatus) Gt(value *ProbingSession_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatus) Gte(value *ProbingSession_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatus) Lt(value *ProbingSession_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatus) Lte(value *ProbingSession_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatus) In(values []*ProbingSession_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) NotIn(values []*ProbingSession_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingSession_FieldPathArrayOfValues: NewProbingSessionFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingSessionFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingSessionFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) compare(op gotenfilter.CompareOperator, value *ProbingSession_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                      op,
		ProbingSession_FieldPathValue: NewProbingSessionFieldPathBuilder().Status().WithValue(value),
	})
}
