// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_session.proto
// DO NOT EDIT!!!

package probing_session

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_distribution.ProbingDistribution{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingSession_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingSession_FieldPathSelector
	Get(source *ProbingSession) []interface{}
	GetSingle(source *ProbingSession) (interface{}, bool)
	ClearValue(item *ProbingSession)

	// Those methods build corresponding ProbingSession_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingSession_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingSession_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingSession_FieldPathArrayItemValue
}

type ProbingSession_FieldPathSelector int32

const (
	ProbingSession_FieldPathSelectorName                ProbingSession_FieldPathSelector = 0
	ProbingSession_FieldPathSelectorDisplayName         ProbingSession_FieldPathSelector = 1
	ProbingSession_FieldPathSelectorMetadata            ProbingSession_FieldPathSelector = 2
	ProbingSession_FieldPathSelectorSpec                ProbingSession_FieldPathSelector = 3
	ProbingSession_FieldPathSelectorProbingDistribution ProbingSession_FieldPathSelector = 4
	ProbingSession_FieldPathSelectorStatus              ProbingSession_FieldPathSelector = 5
)

func (s ProbingSession_FieldPathSelector) String() string {
	switch s {
	case ProbingSession_FieldPathSelectorName:
		return "name"
	case ProbingSession_FieldPathSelectorDisplayName:
		return "display_name"
	case ProbingSession_FieldPathSelectorMetadata:
		return "metadata"
	case ProbingSession_FieldPathSelectorSpec:
		return "spec"
	case ProbingSession_FieldPathSelectorProbingDistribution:
		return "probing_distribution"
	case ProbingSession_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", s))
	}
}

func BuildProbingSession_FieldPath(fp gotenobject.RawFieldPath) (ProbingSession_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingSession")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProbingSession_FieldTerminalPath{selector: ProbingSession_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &ProbingSession_FieldTerminalPath{selector: ProbingSession_FieldPathSelectorDisplayName}, nil
		case "metadata":
			return &ProbingSession_FieldTerminalPath{selector: ProbingSession_FieldPathSelectorMetadata}, nil
		case "spec":
			return &ProbingSession_FieldTerminalPath{selector: ProbingSession_FieldPathSelectorSpec}, nil
		case "probing_distribution", "probingDistribution", "probing-distribution":
			return &ProbingSession_FieldTerminalPath{selector: ProbingSession_FieldPathSelectorProbingDistribution}, nil
		case "status":
			return &ProbingSession_FieldTerminalPath{selector: ProbingSession_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingSession_FieldSubPath{selector: ProbingSession_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildProbingSessionSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingSession_FieldSubPath{selector: ProbingSession_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildProbingSessionStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingSession_FieldSubPath{selector: ProbingSession_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingSession", fp)
}

func ParseProbingSession_FieldPath(rawField string) (ProbingSession_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingSession_FieldPath(fp)
}

func MustParseProbingSession_FieldPath(rawField string) ProbingSession_FieldPath {
	fp, err := ParseProbingSession_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingSession_FieldTerminalPath struct {
	selector ProbingSession_FieldPathSelector
}

var _ ProbingSession_FieldPath = (*ProbingSession_FieldTerminalPath)(nil)

func (fp *ProbingSession_FieldTerminalPath) Selector() ProbingSession_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingSession_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingSession_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingSession
func (fp *ProbingSession_FieldTerminalPath) Get(source *ProbingSession) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingSession_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProbingSession_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case ProbingSession_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case ProbingSession_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case ProbingSession_FieldPathSelectorProbingDistribution:
			if source.ProbingDistribution != nil {
				values = append(values, source.ProbingDistribution)
			}
		case ProbingSession_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingSession_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingSession))
}

// GetSingle returns value pointed by specific field of from source ProbingSession
func (fp *ProbingSession_FieldTerminalPath) GetSingle(source *ProbingSession) (interface{}, bool) {
	switch fp.selector {
	case ProbingSession_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProbingSession_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case ProbingSession_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ProbingSession_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case ProbingSession_FieldPathSelectorProbingDistribution:
		res := source.GetProbingDistribution()
		return res, res != nil
	case ProbingSession_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fp.selector))
	}
}

func (fp *ProbingSession_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingSession))
}

// GetDefault returns a default value of the field type
func (fp *ProbingSession_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingSession_FieldPathSelectorName:
		return (*Name)(nil)
	case ProbingSession_FieldPathSelectorDisplayName:
		return ""
	case ProbingSession_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case ProbingSession_FieldPathSelectorSpec:
		return (*ProbingSession_Spec)(nil)
	case ProbingSession_FieldPathSelectorProbingDistribution:
		return (*probing_distribution.Reference)(nil)
	case ProbingSession_FieldPathSelectorStatus:
		return (*ProbingSession_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fp.selector))
	}
}

func (fp *ProbingSession_FieldTerminalPath) ClearValue(item *ProbingSession) {
	if item != nil {
		switch fp.selector {
		case ProbingSession_FieldPathSelectorName:
			item.Name = nil
		case ProbingSession_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case ProbingSession_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ProbingSession_FieldPathSelectorSpec:
			item.Spec = nil
		case ProbingSession_FieldPathSelectorProbingDistribution:
			item.ProbingDistribution = nil
		case ProbingSession_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fp.selector))
		}
	}
}

func (fp *ProbingSession_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingSession))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingSession_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingSession_FieldPathSelectorName ||
		fp.selector == ProbingSession_FieldPathSelectorDisplayName ||
		fp.selector == ProbingSession_FieldPathSelectorProbingDistribution
}

func (fp *ProbingSession_FieldTerminalPath) WithIValue(value interface{}) ProbingSession_FieldPathValue {
	switch fp.selector {
	case ProbingSession_FieldPathSelectorName:
		return &ProbingSession_FieldTerminalPathValue{ProbingSession_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProbingSession_FieldPathSelectorDisplayName:
		return &ProbingSession_FieldTerminalPathValue{ProbingSession_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingSession_FieldPathSelectorMetadata:
		return &ProbingSession_FieldTerminalPathValue{ProbingSession_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case ProbingSession_FieldPathSelectorSpec:
		return &ProbingSession_FieldTerminalPathValue{ProbingSession_FieldTerminalPath: *fp, value: value.(*ProbingSession_Spec)}
	case ProbingSession_FieldPathSelectorProbingDistribution:
		return &ProbingSession_FieldTerminalPathValue{ProbingSession_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	case ProbingSession_FieldPathSelectorStatus:
		return &ProbingSession_FieldTerminalPathValue{ProbingSession_FieldTerminalPath: *fp, value: value.(*ProbingSession_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fp.selector))
	}
}

func (fp *ProbingSession_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingSession_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingSession_FieldPathArrayOfValues {
	fpaov := &ProbingSession_FieldTerminalPathArrayOfValues{ProbingSession_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingSession_FieldPathSelectorName:
		return &ProbingSession_FieldTerminalPathArrayOfValues{ProbingSession_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProbingSession_FieldPathSelectorDisplayName:
		return &ProbingSession_FieldTerminalPathArrayOfValues{ProbingSession_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingSession_FieldPathSelectorMetadata:
		return &ProbingSession_FieldTerminalPathArrayOfValues{ProbingSession_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case ProbingSession_FieldPathSelectorSpec:
		return &ProbingSession_FieldTerminalPathArrayOfValues{ProbingSession_FieldTerminalPath: *fp, values: values.([]*ProbingSession_Spec)}
	case ProbingSession_FieldPathSelectorProbingDistribution:
		return &ProbingSession_FieldTerminalPathArrayOfValues{ProbingSession_FieldTerminalPath: *fp, values: values.([]*probing_distribution.Reference)}
	case ProbingSession_FieldPathSelectorStatus:
		return &ProbingSession_FieldTerminalPathArrayOfValues{ProbingSession_FieldTerminalPath: *fp, values: values.([]*ProbingSession_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingSession_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingSession_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingSession_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fp.selector))
	}
}

func (fp *ProbingSession_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingSession_FieldSubPath struct {
	selector ProbingSession_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingSession_FieldPath = (*ProbingSession_FieldSubPath)(nil)

func (fps *ProbingSession_FieldSubPath) Selector() ProbingSession_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingSession_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *ProbingSession_FieldSubPath) AsSpecSubPath() (ProbingSessionSpec_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingSessionSpec_FieldPath)
	return res, ok
}
func (fps *ProbingSession_FieldSubPath) AsStatusSubPath() (ProbingSessionStatus_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingSessionStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingSession_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingSession_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingSession
func (fps *ProbingSession_FieldSubPath) Get(source *ProbingSession) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else if asStatusFieldPath, ok := fps.AsStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStatus())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fps.selector))
	}
	return
}

func (fps *ProbingSession_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingSession))
}

// GetSingle returns value of selected field from source ProbingSession
func (fps *ProbingSession_FieldSubPath) GetSingle(source *ProbingSession) (interface{}, bool) {
	switch fps.selector {
	case ProbingSession_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case ProbingSession_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case ProbingSession_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fps.selector))
	}
}

func (fps *ProbingSession_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingSession))
}

// GetDefault returns a default value of the field type
func (fps *ProbingSession_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingSession_FieldSubPath) ClearValue(item *ProbingSession) {
	if item != nil {
		switch fps.selector {
		case ProbingSession_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case ProbingSession_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case ProbingSession_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fps.selector))
		}
	}
}

func (fps *ProbingSession_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingSession))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingSession_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingSession_FieldSubPath) WithIValue(value interface{}) ProbingSession_FieldPathValue {
	return &ProbingSession_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingSession_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingSession_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingSession_FieldPathArrayOfValues {
	return &ProbingSession_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingSession_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingSession_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingSession_FieldPathArrayItemValue {
	return &ProbingSession_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingSession_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingSession_FieldPathValue allows storing values for ProbingSession fields according to their type
type ProbingSession_FieldPathValue interface {
	ProbingSession_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingSession)
	CompareWith(*ProbingSession) (cmp int, comparable bool)
}

func ParseProbingSession_FieldPathValue(pathStr, valueStr string) (ProbingSession_FieldPathValue, error) {
	fp, err := ParseProbingSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingSession field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingSession_FieldPathValue), nil
}

func MustParseProbingSession_FieldPathValue(pathStr, valueStr string) ProbingSession_FieldPathValue {
	fpv, err := ParseProbingSession_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingSession_FieldTerminalPathValue struct {
	ProbingSession_FieldTerminalPath
	value interface{}
}

var _ ProbingSession_FieldPathValue = (*ProbingSession_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbingSession' as interface{}
func (fpv *ProbingSession_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingSession_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProbingSession_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingSession_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *ProbingSession_FieldTerminalPathValue) AsSpecValue() (*ProbingSession_Spec, bool) {
	res, ok := fpv.value.(*ProbingSession_Spec)
	return res, ok
}
func (fpv *ProbingSession_FieldTerminalPathValue) AsProbingDistributionValue() (*probing_distribution.Reference, bool) {
	res, ok := fpv.value.(*probing_distribution.Reference)
	return res, ok
}
func (fpv *ProbingSession_FieldTerminalPathValue) AsStatusValue() (*ProbingSession_Status, bool) {
	res, ok := fpv.value.(*ProbingSession_Status)
	return res, ok
}

// SetTo stores value for selected field for object ProbingSession
func (fpv *ProbingSession_FieldTerminalPathValue) SetTo(target **ProbingSession) {
	if *target == nil {
		*target = new(ProbingSession)
	}
	switch fpv.selector {
	case ProbingSession_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProbingSession_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case ProbingSession_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case ProbingSession_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*ProbingSession_Spec)
	case ProbingSession_FieldPathSelectorProbingDistribution:
		(*target).ProbingDistribution = fpv.value.(*probing_distribution.Reference)
	case ProbingSession_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*ProbingSession_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fpv.selector))
	}
}

func (fpv *ProbingSession_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingSession)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingSession_FieldTerminalPathValue' with the value under path in 'ProbingSession'.
func (fpv *ProbingSession_FieldTerminalPathValue) CompareWith(source *ProbingSession) (int, bool) {
	switch fpv.selector {
	case ProbingSession_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSession_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSession_FieldPathSelectorMetadata:
		return 0, false
	case ProbingSession_FieldPathSelectorSpec:
		return 0, false
	case ProbingSession_FieldPathSelectorProbingDistribution:
		leftValue := fpv.value.(*probing_distribution.Reference)
		rightValue := source.GetProbingDistribution()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSession_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fpv.selector))
	}
}

func (fpv *ProbingSession_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingSession))
}

type ProbingSession_FieldSubPathValue struct {
	ProbingSession_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingSession_FieldPathValue = (*ProbingSession_FieldSubPathValue)(nil)

func (fpvs *ProbingSession_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingSession_FieldSubPathValue) AsSpecPathValue() (ProbingSessionSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingSessionSpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingSession_FieldSubPathValue) AsStatusPathValue() (ProbingSessionStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingSessionStatus_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingSession_FieldSubPathValue) SetTo(target **ProbingSession) {
	if *target == nil {
		*target = new(ProbingSession)
	}
	switch fpvs.Selector() {
	case ProbingSession_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case ProbingSession_FieldPathSelectorSpec:
		fpvs.subPathValue.(ProbingSessionSpec_FieldPathValue).SetTo(&(*target).Spec)
	case ProbingSession_FieldPathSelectorStatus:
		fpvs.subPathValue.(ProbingSessionStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingSession_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingSession)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingSession_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingSession_FieldSubPathValue) CompareWith(source *ProbingSession) (int, bool) {
	switch fpvs.Selector() {
	case ProbingSession_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case ProbingSession_FieldPathSelectorSpec:
		return fpvs.subPathValue.(ProbingSessionSpec_FieldPathValue).CompareWith(source.GetSpec())
	case ProbingSession_FieldPathSelectorStatus:
		return fpvs.subPathValue.(ProbingSessionStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingSession_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingSession))
}

// ProbingSession_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbingSession according to their type
// Present only for array (repeated) types.
type ProbingSession_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingSession_FieldPath
	ContainsValue(*ProbingSession) bool
}

// ParseProbingSession_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingSession_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingSession_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingSession field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingSession_FieldPathArrayItemValue), nil
}

func MustParseProbingSession_FieldPathArrayItemValue(pathStr, valueStr string) ProbingSession_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingSession_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingSession_FieldTerminalPathArrayItemValue struct {
	ProbingSession_FieldTerminalPath
	value interface{}
}

var _ ProbingSession_FieldPathArrayItemValue = (*ProbingSession_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingSession as interface{}
func (fpaiv *ProbingSession_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingSession_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingSession) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingSession_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingSession))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingSession'
func (fpaiv *ProbingSession_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingSession) bool {
	slice := fpaiv.ProbingSession_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingSession_FieldSubPathArrayItemValue struct {
	ProbingSession_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingSession_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingSession_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingSession_FieldSubPathArrayItemValue) AsSpecPathItemValue() (ProbingSessionSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingSessionSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingSession_FieldSubPathArrayItemValue) AsStatusPathItemValue() (ProbingSessionStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingSessionStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingSession'
func (fpaivs *ProbingSession_FieldSubPathArrayItemValue) ContainsValue(source *ProbingSession) bool {
	switch fpaivs.Selector() {
	case ProbingSession_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case ProbingSession_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(ProbingSessionSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case ProbingSession_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(ProbingSessionStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession: %d", fpaivs.Selector()))
	}
}

// ProbingSession_FieldPathArrayOfValues allows storing slice of values for ProbingSession fields according to their type
type ProbingSession_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingSession_FieldPath
}

func ParseProbingSession_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingSession_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingSession field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingSession_FieldPathArrayOfValues), nil
}

func MustParseProbingSession_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingSession_FieldPathArrayOfValues {
	fpaov, err := ParseProbingSession_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingSession_FieldTerminalPathArrayOfValues struct {
	ProbingSession_FieldTerminalPath
	values interface{}
}

var _ ProbingSession_FieldPathArrayOfValues = (*ProbingSession_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingSession_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingSession_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProbingSession_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingSession_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case ProbingSession_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*ProbingSession_Spec) {
			values = append(values, v)
		}
	case ProbingSession_FieldPathSelectorProbingDistribution:
		for _, v := range fpaov.values.([]*probing_distribution.Reference) {
			values = append(values, v)
		}
	case ProbingSession_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*ProbingSession_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingSession_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProbingSession_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingSession_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *ProbingSession_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*ProbingSession_Spec, bool) {
	res, ok := fpaov.values.([]*ProbingSession_Spec)
	return res, ok
}
func (fpaov *ProbingSession_FieldTerminalPathArrayOfValues) AsProbingDistributionArrayOfValues() ([]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([]*probing_distribution.Reference)
	return res, ok
}
func (fpaov *ProbingSession_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*ProbingSession_Status, bool) {
	res, ok := fpaov.values.([]*ProbingSession_Status)
	return res, ok
}

type ProbingSession_FieldSubPathArrayOfValues struct {
	ProbingSession_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingSession_FieldPathArrayOfValues = (*ProbingSession_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingSession_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingSession_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingSession_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (ProbingSessionSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingSessionSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingSession_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (ProbingSessionStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingSessionStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingSessionSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingSessionSpec_FieldPathSelector
	Get(source *ProbingSession_Spec) []interface{}
	GetSingle(source *ProbingSession_Spec) (interface{}, bool)
	ClearValue(item *ProbingSession_Spec)

	// Those methods build corresponding ProbingSessionSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingSessionSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingSessionSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingSessionSpec_FieldPathArrayItemValue
}

type ProbingSessionSpec_FieldPathSelector int32

const (
	ProbingSessionSpec_FieldPathSelectorProbe              ProbingSessionSpec_FieldPathSelector = 0
	ProbingSessionSpec_FieldPathSelectorTarget             ProbingSessionSpec_FieldPathSelector = 1
	ProbingSessionSpec_FieldPathSelectorTargetGroup        ProbingSessionSpec_FieldPathSelector = 2
	ProbingSessionSpec_FieldPathSelectorMode               ProbingSessionSpec_FieldPathSelector = 3
	ProbingSessionSpec_FieldPathSelectorIpVersion          ProbingSessionSpec_FieldPathSelector = 4
	ProbingSessionSpec_FieldPathSelectorAddress            ProbingSessionSpec_FieldPathSelector = 5
	ProbingSessionSpec_FieldPathSelectorAddresses          ProbingSessionSpec_FieldPathSelector = 6
	ProbingSessionSpec_FieldPathSelectorPort               ProbingSessionSpec_FieldPathSelector = 7
	ProbingSessionSpec_FieldPathSelectorType               ProbingSessionSpec_FieldPathSelector = 8
	ProbingSessionSpec_FieldPathSelectorInterval           ProbingSessionSpec_FieldPathSelector = 9
	ProbingSessionSpec_FieldPathSelectorTos                ProbingSessionSpec_FieldPathSelector = 10
	ProbingSessionSpec_FieldPathSelectorPathProbing        ProbingSessionSpec_FieldPathSelector = 11
	ProbingSessionSpec_FieldPathSelectorSpeedtestSettings  ProbingSessionSpec_FieldPathSelector = 12
	ProbingSessionSpec_FieldPathSelectorHttpProbingConfig  ProbingSessionSpec_FieldPathSelector = 13
	ProbingSessionSpec_FieldPathSelectorProxyConfiguration ProbingSessionSpec_FieldPathSelector = 14
	ProbingSessionSpec_FieldPathSelectorLocationType       ProbingSessionSpec_FieldPathSelector = 15
	ProbingSessionSpec_FieldPathSelectorLocation           ProbingSessionSpec_FieldPathSelector = 16
)

func (s ProbingSessionSpec_FieldPathSelector) String() string {
	switch s {
	case ProbingSessionSpec_FieldPathSelectorProbe:
		return "probe"
	case ProbingSessionSpec_FieldPathSelectorTarget:
		return "target"
	case ProbingSessionSpec_FieldPathSelectorTargetGroup:
		return "target_group"
	case ProbingSessionSpec_FieldPathSelectorMode:
		return "mode"
	case ProbingSessionSpec_FieldPathSelectorIpVersion:
		return "ip_version"
	case ProbingSessionSpec_FieldPathSelectorAddress:
		return "address"
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		return "addresses"
	case ProbingSessionSpec_FieldPathSelectorPort:
		return "port"
	case ProbingSessionSpec_FieldPathSelectorType:
		return "type"
	case ProbingSessionSpec_FieldPathSelectorInterval:
		return "interval"
	case ProbingSessionSpec_FieldPathSelectorTos:
		return "tos"
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		return "path_probing"
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		return "speedtest_settings"
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		return "http_probing_config"
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		return "proxy_configuration"
	case ProbingSessionSpec_FieldPathSelectorLocationType:
		return "location_type"
	case ProbingSessionSpec_FieldPathSelectorLocation:
		return "location"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", s))
	}
}

func BuildProbingSessionSpec_FieldPath(fp gotenobject.RawFieldPath) (ProbingSessionSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingSession_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorProbe}, nil
		case "target":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorTarget}, nil
		case "target_group", "targetGroup", "target-group":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorTargetGroup}, nil
		case "mode":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorMode}, nil
		case "ip_version", "ipVersion", "ip-version":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorIpVersion}, nil
		case "address":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorAddress}, nil
		case "addresses":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorAddresses}, nil
		case "port":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorPort}, nil
		case "type":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorType}, nil
		case "interval":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorInterval}, nil
		case "tos":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorTos}, nil
		case "path_probing", "pathProbing", "path-probing":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorPathProbing}, nil
		case "speedtest_settings", "speedtestSettings", "speedtest-settings":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorSpeedtestSettings}, nil
		case "http_probing_config", "httpProbingConfig", "http-probing-config":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorHttpProbingConfig}, nil
		case "proxy_configuration", "proxyConfiguration", "proxy-configuration":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorProxyConfiguration}, nil
		case "location_type", "locationType", "location-type":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorLocationType}, nil
		case "location":
			return &ProbingSessionSpec_FieldTerminalPath{selector: ProbingSessionSpec_FieldPathSelectorLocation}, nil
		}
	} else {
		switch fp[0] {
		case "path_probing", "pathProbing", "path-probing":
			if subpath, err := common.BuildPathProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingSessionSpec_FieldSubPath{selector: ProbingSessionSpec_FieldPathSelectorPathProbing, subPath: subpath}, nil
			}
		case "speedtest_settings", "speedtestSettings", "speedtest-settings":
			if subpath, err := common.BuildSpeedTestSettings_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingSessionSpec_FieldSubPath{selector: ProbingSessionSpec_FieldPathSelectorSpeedtestSettings, subPath: subpath}, nil
			}
		case "http_probing_config", "httpProbingConfig", "http-probing-config":
			if subpath, err := common.BuildHTTPProbingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingSessionSpec_FieldSubPath{selector: ProbingSessionSpec_FieldPathSelectorHttpProbingConfig, subPath: subpath}, nil
			}
		case "proxy_configuration", "proxyConfiguration", "proxy-configuration":
			if subpath, err := common.BuildProxyConfiguration_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingSessionSpec_FieldSubPath{selector: ProbingSessionSpec_FieldPathSelectorProxyConfiguration, subPath: subpath}, nil
			}
		case "location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingSessionSpec_FieldSubPath{selector: ProbingSessionSpec_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingSession_Spec", fp)
}

func ParseProbingSessionSpec_FieldPath(rawField string) (ProbingSessionSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingSessionSpec_FieldPath(fp)
}

func MustParseProbingSessionSpec_FieldPath(rawField string) ProbingSessionSpec_FieldPath {
	fp, err := ParseProbingSessionSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingSessionSpec_FieldTerminalPath struct {
	selector ProbingSessionSpec_FieldPathSelector
}

var _ ProbingSessionSpec_FieldPath = (*ProbingSessionSpec_FieldTerminalPath)(nil)

func (fp *ProbingSessionSpec_FieldTerminalPath) Selector() ProbingSessionSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingSessionSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingSessionSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingSession_Spec
func (fp *ProbingSessionSpec_FieldTerminalPath) Get(source *ProbingSession_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingSessionSpec_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case ProbingSessionSpec_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		case ProbingSessionSpec_FieldPathSelectorTargetGroup:
			if source.TargetGroup != nil {
				values = append(values, source.TargetGroup)
			}
		case ProbingSessionSpec_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case ProbingSessionSpec_FieldPathSelectorIpVersion:
			values = append(values, source.IpVersion)
		case ProbingSessionSpec_FieldPathSelectorAddress:
			values = append(values, source.Address)
		case ProbingSessionSpec_FieldPathSelectorAddresses:
			for _, value := range source.GetAddresses() {
				values = append(values, value)
			}
		case ProbingSessionSpec_FieldPathSelectorPort:
			values = append(values, source.Port)
		case ProbingSessionSpec_FieldPathSelectorType:
			values = append(values, source.Type)
		case ProbingSessionSpec_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case ProbingSessionSpec_FieldPathSelectorTos:
			values = append(values, source.Tos)
		case ProbingSessionSpec_FieldPathSelectorPathProbing:
			if source.PathProbing != nil {
				values = append(values, source.PathProbing)
			}
		case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
			if source.SpeedtestSettings != nil {
				values = append(values, source.SpeedtestSettings)
			}
		case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
			if source.HttpProbingConfig != nil {
				values = append(values, source.HttpProbingConfig)
			}
		case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
			if source.ProxyConfiguration != nil {
				values = append(values, source.ProxyConfiguration)
			}
		case ProbingSessionSpec_FieldPathSelectorLocationType:
			values = append(values, source.LocationType)
		case ProbingSessionSpec_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingSessionSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingSession_Spec))
}

// GetSingle returns value pointed by specific field of from source ProbingSession_Spec
func (fp *ProbingSessionSpec_FieldTerminalPath) GetSingle(source *ProbingSession_Spec) (interface{}, bool) {
	switch fp.selector {
	case ProbingSessionSpec_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorTargetGroup:
		res := source.GetTargetGroup()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case ProbingSessionSpec_FieldPathSelectorIpVersion:
		return source.GetIpVersion(), source != nil
	case ProbingSessionSpec_FieldPathSelectorAddress:
		return source.GetAddress(), source != nil
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		res := source.GetAddresses()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorPort:
		return source.GetPort(), source != nil
	case ProbingSessionSpec_FieldPathSelectorType:
		return source.GetType(), source != nil
	case ProbingSessionSpec_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorTos:
		return source.GetTos(), source != nil
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		res := source.GetPathProbing()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		res := source.GetSpeedtestSettings()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		res := source.GetHttpProbingConfig()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		res := source.GetProxyConfiguration()
		return res, res != nil
	case ProbingSessionSpec_FieldPathSelectorLocationType:
		return source.GetLocationType(), source != nil
	case ProbingSessionSpec_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fp.selector))
	}
}

func (fp *ProbingSessionSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingSession_Spec))
}

// GetDefault returns a default value of the field type
func (fp *ProbingSessionSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingSessionSpec_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	case ProbingSessionSpec_FieldPathSelectorTarget:
		return (*probing_target.Reference)(nil)
	case ProbingSessionSpec_FieldPathSelectorTargetGroup:
		return (*probing_target_group.Reference)(nil)
	case ProbingSessionSpec_FieldPathSelectorMode:
		return common.ProbingMode_PROBING_MODE_UNSPECIFIED
	case ProbingSessionSpec_FieldPathSelectorIpVersion:
		return common.IpVersion_IP_VERSION_UNSPECIFIED
	case ProbingSessionSpec_FieldPathSelectorAddress:
		return ""
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		return ([]string)(nil)
	case ProbingSessionSpec_FieldPathSelectorPort:
		return uint32(0)
	case ProbingSessionSpec_FieldPathSelectorType:
		return ProbingSessionType_CLIENT
	case ProbingSessionSpec_FieldPathSelectorInterval:
		return (*duration.Duration)(nil)
	case ProbingSessionSpec_FieldPathSelectorTos:
		return uint32(0)
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		return (*common.PathProbe)(nil)
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		return (*common.SpeedTestSettings)(nil)
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		return (*common.HTTPProbingConfig)(nil)
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		return (*common.ProxyConfiguration)(nil)
	case ProbingSessionSpec_FieldPathSelectorLocationType:
		return common.LocationType_LOCATION_TYPE_UNSPECIFIED
	case ProbingSessionSpec_FieldPathSelectorLocation:
		return (*common.Location)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fp.selector))
	}
}

func (fp *ProbingSessionSpec_FieldTerminalPath) ClearValue(item *ProbingSession_Spec) {
	if item != nil {
		switch fp.selector {
		case ProbingSessionSpec_FieldPathSelectorProbe:
			item.Probe = nil
		case ProbingSessionSpec_FieldPathSelectorTarget:
			item.Target = nil
		case ProbingSessionSpec_FieldPathSelectorTargetGroup:
			item.TargetGroup = nil
		case ProbingSessionSpec_FieldPathSelectorMode:
			item.Mode = common.ProbingMode_PROBING_MODE_UNSPECIFIED
		case ProbingSessionSpec_FieldPathSelectorIpVersion:
			item.IpVersion = common.IpVersion_IP_VERSION_UNSPECIFIED
		case ProbingSessionSpec_FieldPathSelectorAddress:
			item.Address = ""
		case ProbingSessionSpec_FieldPathSelectorAddresses:
			item.Addresses = nil
		case ProbingSessionSpec_FieldPathSelectorPort:
			item.Port = uint32(0)
		case ProbingSessionSpec_FieldPathSelectorType:
			item.Type = ProbingSessionType_CLIENT
		case ProbingSessionSpec_FieldPathSelectorInterval:
			item.Interval = nil
		case ProbingSessionSpec_FieldPathSelectorTos:
			item.Tos = uint32(0)
		case ProbingSessionSpec_FieldPathSelectorPathProbing:
			item.PathProbing = nil
		case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
			item.SpeedtestSettings = nil
		case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
			item.HttpProbingConfig = nil
		case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
			item.ProxyConfiguration = nil
		case ProbingSessionSpec_FieldPathSelectorLocationType:
			item.LocationType = common.LocationType_LOCATION_TYPE_UNSPECIFIED
		case ProbingSessionSpec_FieldPathSelectorLocation:
			item.Location = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fp.selector))
		}
	}
}

func (fp *ProbingSessionSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingSession_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingSessionSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingSessionSpec_FieldPathSelectorProbe ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorTarget ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorTargetGroup ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorMode ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorIpVersion ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorAddress ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorAddresses ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorPort ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorType ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorInterval ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorTos ||
		fp.selector == ProbingSessionSpec_FieldPathSelectorLocationType
}

func (fp *ProbingSessionSpec_FieldTerminalPath) WithIValue(value interface{}) ProbingSessionSpec_FieldPathValue {
	switch fp.selector {
	case ProbingSessionSpec_FieldPathSelectorProbe:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ProbingSessionSpec_FieldPathSelectorTarget:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*probing_target.Reference)}
	case ProbingSessionSpec_FieldPathSelectorTargetGroup:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*probing_target_group.Reference)}
	case ProbingSessionSpec_FieldPathSelectorMode:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(common.ProbingMode)}
	case ProbingSessionSpec_FieldPathSelectorIpVersion:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(common.IpVersion)}
	case ProbingSessionSpec_FieldPathSelectorAddress:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.([]string)}
	case ProbingSessionSpec_FieldPathSelectorPort:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(uint32)}
	case ProbingSessionSpec_FieldPathSelectorType:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(ProbingSessionType)}
	case ProbingSessionSpec_FieldPathSelectorInterval:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case ProbingSessionSpec_FieldPathSelectorTos:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(uint32)}
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*common.PathProbe)}
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*common.SpeedTestSettings)}
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*common.HTTPProbingConfig)}
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*common.ProxyConfiguration)}
	case ProbingSessionSpec_FieldPathSelectorLocationType:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(common.LocationType)}
	case ProbingSessionSpec_FieldPathSelectorLocation:
		return &ProbingSessionSpec_FieldTerminalPathValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(*common.Location)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fp.selector))
	}
}

func (fp *ProbingSessionSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingSessionSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingSessionSpec_FieldPathArrayOfValues {
	fpaov := &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingSessionSpec_FieldPathSelectorProbe:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ProbingSessionSpec_FieldPathSelectorTarget:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*probing_target.Reference)}
	case ProbingSessionSpec_FieldPathSelectorTargetGroup:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Reference)}
	case ProbingSessionSpec_FieldPathSelectorMode:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]common.ProbingMode)}
	case ProbingSessionSpec_FieldPathSelectorIpVersion:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]common.IpVersion)}
	case ProbingSessionSpec_FieldPathSelectorAddress:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([][]string)}
	case ProbingSessionSpec_FieldPathSelectorPort:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]uint32)}
	case ProbingSessionSpec_FieldPathSelectorType:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]ProbingSessionType)}
	case ProbingSessionSpec_FieldPathSelectorInterval:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case ProbingSessionSpec_FieldPathSelectorTos:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]uint32)}
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*common.PathProbe)}
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*common.SpeedTestSettings)}
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*common.HTTPProbingConfig)}
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*common.ProxyConfiguration)}
	case ProbingSessionSpec_FieldPathSelectorLocationType:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]common.LocationType)}
	case ProbingSessionSpec_FieldPathSelectorLocation:
		return &ProbingSessionSpec_FieldTerminalPathArrayOfValues{ProbingSessionSpec_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingSessionSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingSessionSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingSessionSpec_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		return &ProbingSessionSpec_FieldTerminalPathArrayItemValue{ProbingSessionSpec_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fp.selector))
	}
}

func (fp *ProbingSessionSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingSessionSpec_FieldSubPath struct {
	selector ProbingSessionSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingSessionSpec_FieldPath = (*ProbingSessionSpec_FieldSubPath)(nil)

func (fps *ProbingSessionSpec_FieldSubPath) Selector() ProbingSessionSpec_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingSessionSpec_FieldSubPath) AsPathProbingSubPath() (common.PathProbe_FieldPath, bool) {
	res, ok := fps.subPath.(common.PathProbe_FieldPath)
	return res, ok
}
func (fps *ProbingSessionSpec_FieldSubPath) AsSpeedtestSettingsSubPath() (common.SpeedTestSettings_FieldPath, bool) {
	res, ok := fps.subPath.(common.SpeedTestSettings_FieldPath)
	return res, ok
}
func (fps *ProbingSessionSpec_FieldSubPath) AsHttpProbingConfigSubPath() (common.HTTPProbingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(common.HTTPProbingConfig_FieldPath)
	return res, ok
}
func (fps *ProbingSessionSpec_FieldSubPath) AsProxyConfigurationSubPath() (common.ProxyConfiguration_FieldPath, bool) {
	res, ok := fps.subPath.(common.ProxyConfiguration_FieldPath)
	return res, ok
}
func (fps *ProbingSessionSpec_FieldSubPath) AsLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingSessionSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingSessionSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingSession_Spec
func (fps *ProbingSessionSpec_FieldSubPath) Get(source *ProbingSession_Spec) (values []interface{}) {
	if asPathProbeFieldPath, ok := fps.AsPathProbingSubPath(); ok {
		values = append(values, asPathProbeFieldPath.Get(source.GetPathProbing())...)
	} else if asSpeedTestSettingsFieldPath, ok := fps.AsSpeedtestSettingsSubPath(); ok {
		values = append(values, asSpeedTestSettingsFieldPath.Get(source.GetSpeedtestSettings())...)
	} else if asHTTPProbingConfigFieldPath, ok := fps.AsHttpProbingConfigSubPath(); ok {
		values = append(values, asHTTPProbingConfigFieldPath.Get(source.GetHttpProbingConfig())...)
	} else if asProxyConfigurationFieldPath, ok := fps.AsProxyConfigurationSubPath(); ok {
		values = append(values, asProxyConfigurationFieldPath.Get(source.GetProxyConfiguration())...)
	} else if asLocationFieldPath, ok := fps.AsLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetLocation())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fps.selector))
	}
	return
}

func (fps *ProbingSessionSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingSession_Spec))
}

// GetSingle returns value of selected field from source ProbingSession_Spec
func (fps *ProbingSessionSpec_FieldSubPath) GetSingle(source *ProbingSession_Spec) (interface{}, bool) {
	switch fps.selector {
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		if source.GetPathProbing() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPathProbing())
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		if source.GetSpeedtestSettings() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpeedtestSettings())
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		if source.GetHttpProbingConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHttpProbingConfig())
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		if source.GetProxyConfiguration() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProxyConfiguration())
	case ProbingSessionSpec_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fps.selector))
	}
}

func (fps *ProbingSessionSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingSession_Spec))
}

// GetDefault returns a default value of the field type
func (fps *ProbingSessionSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingSessionSpec_FieldSubPath) ClearValue(item *ProbingSession_Spec) {
	if item != nil {
		switch fps.selector {
		case ProbingSessionSpec_FieldPathSelectorPathProbing:
			fps.subPath.ClearValueRaw(item.PathProbing)
		case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
			fps.subPath.ClearValueRaw(item.SpeedtestSettings)
		case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
			fps.subPath.ClearValueRaw(item.HttpProbingConfig)
		case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
			fps.subPath.ClearValueRaw(item.ProxyConfiguration)
		case ProbingSessionSpec_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fps.selector))
		}
	}
}

func (fps *ProbingSessionSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingSession_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingSessionSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingSessionSpec_FieldSubPath) WithIValue(value interface{}) ProbingSessionSpec_FieldPathValue {
	return &ProbingSessionSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingSessionSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingSessionSpec_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingSessionSpec_FieldPathArrayOfValues {
	return &ProbingSessionSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingSessionSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingSessionSpec_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingSessionSpec_FieldPathArrayItemValue {
	return &ProbingSessionSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingSessionSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingSessionSpec_FieldPathValue allows storing values for Spec fields according to their type
type ProbingSessionSpec_FieldPathValue interface {
	ProbingSessionSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingSession_Spec)
	CompareWith(*ProbingSession_Spec) (cmp int, comparable bool)
}

func ParseProbingSessionSpec_FieldPathValue(pathStr, valueStr string) (ProbingSessionSpec_FieldPathValue, error) {
	fp, err := ParseProbingSessionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingSessionSpec_FieldPathValue), nil
}

func MustParseProbingSessionSpec_FieldPathValue(pathStr, valueStr string) ProbingSessionSpec_FieldPathValue {
	fpv, err := ParseProbingSessionSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingSessionSpec_FieldTerminalPathValue struct {
	ProbingSessionSpec_FieldTerminalPath
	value interface{}
}

var _ ProbingSessionSpec_FieldPathValue = (*ProbingSessionSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsTargetValue() (*probing_target.Reference, bool) {
	res, ok := fpv.value.(*probing_target.Reference)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsTargetGroupValue() (*probing_target_group.Reference, bool) {
	res, ok := fpv.value.(*probing_target_group.Reference)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsModeValue() (common.ProbingMode, bool) {
	res, ok := fpv.value.(common.ProbingMode)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsIpVersionValue() (common.IpVersion, bool) {
	res, ok := fpv.value.(common.IpVersion)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsPortValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsTypeValue() (ProbingSessionType, bool) {
	res, ok := fpv.value.(ProbingSessionType)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsIntervalValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsTosValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsPathProbingValue() (*common.PathProbe, bool) {
	res, ok := fpv.value.(*common.PathProbe)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsSpeedtestSettingsValue() (*common.SpeedTestSettings, bool) {
	res, ok := fpv.value.(*common.SpeedTestSettings)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsHttpProbingConfigValue() (*common.HTTPProbingConfig, bool) {
	res, ok := fpv.value.(*common.HTTPProbingConfig)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsProxyConfigurationValue() (*common.ProxyConfiguration, bool) {
	res, ok := fpv.value.(*common.ProxyConfiguration)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsLocationTypeValue() (common.LocationType, bool) {
	res, ok := fpv.value.(common.LocationType)
	return res, ok
}
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) AsLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) SetTo(target **ProbingSession_Spec) {
	if *target == nil {
		*target = new(ProbingSession_Spec)
	}
	switch fpv.selector {
	case ProbingSessionSpec_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	case ProbingSessionSpec_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Reference)
	case ProbingSessionSpec_FieldPathSelectorTargetGroup:
		(*target).TargetGroup = fpv.value.(*probing_target_group.Reference)
	case ProbingSessionSpec_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(common.ProbingMode)
	case ProbingSessionSpec_FieldPathSelectorIpVersion:
		(*target).IpVersion = fpv.value.(common.IpVersion)
	case ProbingSessionSpec_FieldPathSelectorAddress:
		(*target).Address = fpv.value.(string)
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		(*target).Addresses = fpv.value.([]string)
	case ProbingSessionSpec_FieldPathSelectorPort:
		(*target).Port = fpv.value.(uint32)
	case ProbingSessionSpec_FieldPathSelectorType:
		(*target).Type = fpv.value.(ProbingSessionType)
	case ProbingSessionSpec_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*duration.Duration)
	case ProbingSessionSpec_FieldPathSelectorTos:
		(*target).Tos = fpv.value.(uint32)
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		(*target).PathProbing = fpv.value.(*common.PathProbe)
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		(*target).SpeedtestSettings = fpv.value.(*common.SpeedTestSettings)
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		(*target).HttpProbingConfig = fpv.value.(*common.HTTPProbingConfig)
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		(*target).ProxyConfiguration = fpv.value.(*common.ProxyConfiguration)
	case ProbingSessionSpec_FieldPathSelectorLocationType:
		(*target).LocationType = fpv.value.(common.LocationType)
	case ProbingSessionSpec_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*common.Location)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fpv.selector))
	}
}

func (fpv *ProbingSessionSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingSession_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingSessionSpec_FieldTerminalPathValue' with the value under path in 'ProbingSession_Spec'.
func (fpv *ProbingSessionSpec_FieldTerminalPathValue) CompareWith(source *ProbingSession_Spec) (int, bool) {
	switch fpv.selector {
	case ProbingSessionSpec_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Reference)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorTargetGroup:
		leftValue := fpv.value.(*probing_target_group.Reference)
		rightValue := source.GetTargetGroup()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorMode:
		leftValue := fpv.value.(common.ProbingMode)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorIpVersion:
		leftValue := fpv.value.(common.IpVersion)
		rightValue := source.GetIpVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		return 0, false
	case ProbingSessionSpec_FieldPathSelectorPort:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetPort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorType:
		leftValue := fpv.value.(ProbingSessionType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorInterval:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetInterval()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorTos:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetTos()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		return 0, false
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		return 0, false
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		return 0, false
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		return 0, false
	case ProbingSessionSpec_FieldPathSelectorLocationType:
		leftValue := fpv.value.(common.LocationType)
		rightValue := source.GetLocationType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingSessionSpec_FieldPathSelectorLocation:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fpv.selector))
	}
}

func (fpv *ProbingSessionSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingSession_Spec))
}

type ProbingSessionSpec_FieldSubPathValue struct {
	ProbingSessionSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingSessionSpec_FieldPathValue = (*ProbingSessionSpec_FieldSubPathValue)(nil)

func (fpvs *ProbingSessionSpec_FieldSubPathValue) AsPathProbingPathValue() (common.PathProbe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.PathProbe_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingSessionSpec_FieldSubPathValue) AsSpeedtestSettingsPathValue() (common.SpeedTestSettings_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.SpeedTestSettings_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingSessionSpec_FieldSubPathValue) AsHttpProbingConfigPathValue() (common.HTTPProbingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingSessionSpec_FieldSubPathValue) AsProxyConfigurationPathValue() (common.ProxyConfiguration_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ProxyConfiguration_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingSessionSpec_FieldSubPathValue) AsLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingSessionSpec_FieldSubPathValue) SetTo(target **ProbingSession_Spec) {
	if *target == nil {
		*target = new(ProbingSession_Spec)
	}
	switch fpvs.Selector() {
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		fpvs.subPathValue.(common.PathProbe_FieldPathValue).SetTo(&(*target).PathProbing)
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		fpvs.subPathValue.(common.SpeedTestSettings_FieldPathValue).SetTo(&(*target).SpeedtestSettings)
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue).SetTo(&(*target).HttpProbingConfig)
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		fpvs.subPathValue.(common.ProxyConfiguration_FieldPathValue).SetTo(&(*target).ProxyConfiguration)
	case ProbingSessionSpec_FieldPathSelectorLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).Location)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingSessionSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingSession_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingSessionSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingSessionSpec_FieldSubPathValue) CompareWith(source *ProbingSession_Spec) (int, bool) {
	switch fpvs.Selector() {
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		return fpvs.subPathValue.(common.PathProbe_FieldPathValue).CompareWith(source.GetPathProbing())
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		return fpvs.subPathValue.(common.SpeedTestSettings_FieldPathValue).CompareWith(source.GetSpeedtestSettings())
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		return fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue).CompareWith(source.GetHttpProbingConfig())
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		return fpvs.subPathValue.(common.ProxyConfiguration_FieldPathValue).CompareWith(source.GetProxyConfiguration())
	case ProbingSessionSpec_FieldPathSelectorLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetLocation())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingSessionSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingSession_Spec))
}

// ProbingSessionSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type ProbingSessionSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingSessionSpec_FieldPath
	ContainsValue(*ProbingSession_Spec) bool
}

// ParseProbingSessionSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingSessionSpec_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingSessionSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingSessionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingSessionSpec_FieldPathArrayItemValue), nil
}

func MustParseProbingSessionSpec_FieldPathArrayItemValue(pathStr, valueStr string) ProbingSessionSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingSessionSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingSessionSpec_FieldTerminalPathArrayItemValue struct {
	ProbingSessionSpec_FieldTerminalPath
	value interface{}
}

var _ ProbingSessionSpec_FieldPathArrayItemValue = (*ProbingSessionSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingSession_Spec as interface{}
func (fpaiv *ProbingSessionSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbingSessionSpec_FieldTerminalPathArrayItemValue) AsAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProbingSessionSpec_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingSession_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingSessionSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingSession_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *ProbingSessionSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingSession_Spec) bool {
	slice := fpaiv.ProbingSessionSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingSessionSpec_FieldSubPathArrayItemValue struct {
	ProbingSessionSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingSessionSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingSessionSpec_FieldSubPathArrayItemValue) AsPathProbingPathItemValue() (common.PathProbe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.PathProbe_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingSessionSpec_FieldSubPathArrayItemValue) AsSpeedtestSettingsPathItemValue() (common.SpeedTestSettings_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.SpeedTestSettings_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingSessionSpec_FieldSubPathArrayItemValue) AsHttpProbingConfigPathItemValue() (common.HTTPProbingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.HTTPProbingConfig_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingSessionSpec_FieldSubPathArrayItemValue) AsProxyConfigurationPathItemValue() (common.ProxyConfiguration_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ProxyConfiguration_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingSessionSpec_FieldSubPathArrayItemValue) AsLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *ProbingSessionSpec_FieldSubPathArrayItemValue) ContainsValue(source *ProbingSession_Spec) bool {
	switch fpaivs.Selector() {
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		return fpaivs.subPathItemValue.(common.PathProbe_FieldPathArrayItemValue).ContainsValue(source.GetPathProbing())
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		return fpaivs.subPathItemValue.(common.SpeedTestSettings_FieldPathArrayItemValue).ContainsValue(source.GetSpeedtestSettings())
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		return fpaivs.subPathItemValue.(common.HTTPProbingConfig_FieldPathArrayItemValue).ContainsValue(source.GetHttpProbingConfig())
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		return fpaivs.subPathItemValue.(common.ProxyConfiguration_FieldPathArrayItemValue).ContainsValue(source.GetProxyConfiguration())
	case ProbingSessionSpec_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Spec: %d", fpaivs.Selector()))
	}
}

// ProbingSessionSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type ProbingSessionSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingSessionSpec_FieldPath
}

func ParseProbingSessionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingSessionSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingSessionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingSessionSpec_FieldPathArrayOfValues), nil
}

func MustParseProbingSessionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingSessionSpec_FieldPathArrayOfValues {
	fpaov, err := ParseProbingSessionSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingSessionSpec_FieldTerminalPathArrayOfValues struct {
	ProbingSessionSpec_FieldTerminalPath
	values interface{}
}

var _ ProbingSessionSpec_FieldPathArrayOfValues = (*ProbingSessionSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingSessionSpec_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Reference) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorTargetGroup:
		for _, v := range fpaov.values.([]*probing_target_group.Reference) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]common.ProbingMode) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorIpVersion:
		for _, v := range fpaov.values.([]common.IpVersion) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorPort:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorType:
		for _, v := range fpaov.values.([]ProbingSessionType) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorTos:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorPathProbing:
		for _, v := range fpaov.values.([]*common.PathProbe) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorSpeedtestSettings:
		for _, v := range fpaov.values.([]*common.SpeedTestSettings) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorHttpProbingConfig:
		for _, v := range fpaov.values.([]*common.HTTPProbingConfig) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorProxyConfiguration:
		for _, v := range fpaov.values.([]*common.ProxyConfiguration) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorLocationType:
		for _, v := range fpaov.values.([]common.LocationType) {
			values = append(values, v)
		}
	case ProbingSessionSpec_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target.Reference)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsTargetGroupArrayOfValues() ([]*probing_target_group.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Reference)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]common.ProbingMode, bool) {
	res, ok := fpaov.values.([]common.ProbingMode)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsIpVersionArrayOfValues() ([]common.IpVersion, bool) {
	res, ok := fpaov.values.([]common.IpVersion)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsPortArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]ProbingSessionType, bool) {
	res, ok := fpaov.values.([]ProbingSessionType)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsTosArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsPathProbingArrayOfValues() ([]*common.PathProbe, bool) {
	res, ok := fpaov.values.([]*common.PathProbe)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsSpeedtestSettingsArrayOfValues() ([]*common.SpeedTestSettings, bool) {
	res, ok := fpaov.values.([]*common.SpeedTestSettings)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsHttpProbingConfigArrayOfValues() ([]*common.HTTPProbingConfig, bool) {
	res, ok := fpaov.values.([]*common.HTTPProbingConfig)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsProxyConfigurationArrayOfValues() ([]*common.ProxyConfiguration, bool) {
	res, ok := fpaov.values.([]*common.ProxyConfiguration)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsLocationTypeArrayOfValues() ([]common.LocationType, bool) {
	res, ok := fpaov.values.([]common.LocationType)
	return res, ok
}
func (fpaov *ProbingSessionSpec_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}

type ProbingSessionSpec_FieldSubPathArrayOfValues struct {
	ProbingSessionSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingSessionSpec_FieldPathArrayOfValues = (*ProbingSessionSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingSessionSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingSessionSpec_FieldSubPathArrayOfValues) AsPathProbingPathArrayOfValues() (common.PathProbe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.PathProbe_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingSessionSpec_FieldSubPathArrayOfValues) AsSpeedtestSettingsPathArrayOfValues() (common.SpeedTestSettings_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.SpeedTestSettings_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingSessionSpec_FieldSubPathArrayOfValues) AsHttpProbingConfigPathArrayOfValues() (common.HTTPProbingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.HTTPProbingConfig_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingSessionSpec_FieldSubPathArrayOfValues) AsProxyConfigurationPathArrayOfValues() (common.ProxyConfiguration_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ProxyConfiguration_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingSessionSpec_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingSessionStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingSessionStatus_FieldPathSelector
	Get(source *ProbingSession_Status) []interface{}
	GetSingle(source *ProbingSession_Status) (interface{}, bool)
	ClearValue(item *ProbingSession_Status)

	// Those methods build corresponding ProbingSessionStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingSessionStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingSessionStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingSessionStatus_FieldPathArrayItemValue
}

type ProbingSessionStatus_FieldPathSelector int32

func (s ProbingSessionStatus_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", s))
	}
}

func BuildProbingSessionStatus_FieldPath(fp gotenobject.RawFieldPath) (ProbingSessionStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingSession_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingSession_Status", fp)
}

func ParseProbingSessionStatus_FieldPath(rawField string) (ProbingSessionStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingSessionStatus_FieldPath(fp)
}

func MustParseProbingSessionStatus_FieldPath(rawField string) ProbingSessionStatus_FieldPath {
	fp, err := ParseProbingSessionStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingSessionStatus_FieldTerminalPath struct {
	selector ProbingSessionStatus_FieldPathSelector
}

var _ ProbingSessionStatus_FieldPath = (*ProbingSessionStatus_FieldTerminalPath)(nil)

func (fp *ProbingSessionStatus_FieldTerminalPath) Selector() ProbingSessionStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingSessionStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingSessionStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingSession_Status
func (fp *ProbingSessionStatus_FieldTerminalPath) Get(source *ProbingSession_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingSessionStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingSession_Status))
}

// GetSingle returns value pointed by specific field of from source ProbingSession_Status
func (fp *ProbingSessionStatus_FieldTerminalPath) GetSingle(source *ProbingSession_Status) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fp.selector))
	}
}

func (fp *ProbingSessionStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingSession_Status))
}

// GetDefault returns a default value of the field type
func (fp *ProbingSessionStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fp.selector))
	}
}

func (fp *ProbingSessionStatus_FieldTerminalPath) ClearValue(item *ProbingSession_Status) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fp.selector))
		}
	}
}

func (fp *ProbingSessionStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingSession_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingSessionStatus_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ProbingSessionStatus_FieldTerminalPath) WithIValue(value interface{}) ProbingSessionStatus_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fp.selector))
	}
}

func (fp *ProbingSessionStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingSessionStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingSessionStatus_FieldPathArrayOfValues {
	fpaov := &ProbingSessionStatus_FieldTerminalPathArrayOfValues{ProbingSessionStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingSessionStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingSessionStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingSessionStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fp.selector))
	}
}

func (fp *ProbingSessionStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbingSessionStatus_FieldPathValue allows storing values for Status fields according to their type
type ProbingSessionStatus_FieldPathValue interface {
	ProbingSessionStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingSession_Status)
	CompareWith(*ProbingSession_Status) (cmp int, comparable bool)
}

func ParseProbingSessionStatus_FieldPathValue(pathStr, valueStr string) (ProbingSessionStatus_FieldPathValue, error) {
	fp, err := ParseProbingSessionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingSessionStatus_FieldPathValue), nil
}

func MustParseProbingSessionStatus_FieldPathValue(pathStr, valueStr string) ProbingSessionStatus_FieldPathValue {
	fpv, err := ParseProbingSessionStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingSessionStatus_FieldTerminalPathValue struct {
	ProbingSessionStatus_FieldTerminalPath
	value interface{}
}

var _ ProbingSessionStatus_FieldPathValue = (*ProbingSessionStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *ProbingSessionStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object Status
func (fpv *ProbingSessionStatus_FieldTerminalPathValue) SetTo(target **ProbingSession_Status) {
	if *target == nil {
		*target = new(ProbingSession_Status)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fpv.selector))
	}
}

func (fpv *ProbingSessionStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingSession_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingSessionStatus_FieldTerminalPathValue' with the value under path in 'ProbingSession_Status'.
func (fpv *ProbingSessionStatus_FieldTerminalPathValue) CompareWith(source *ProbingSession_Status) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingSession_Status: %d", fpv.selector))
	}
}

func (fpv *ProbingSessionStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingSession_Status))
}

// ProbingSessionStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type ProbingSessionStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingSessionStatus_FieldPath
	ContainsValue(*ProbingSession_Status) bool
}

// ParseProbingSessionStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingSessionStatus_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingSessionStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingSessionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingSessionStatus_FieldPathArrayItemValue), nil
}

func MustParseProbingSessionStatus_FieldPathArrayItemValue(pathStr, valueStr string) ProbingSessionStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingSessionStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingSessionStatus_FieldTerminalPathArrayItemValue struct {
	ProbingSessionStatus_FieldTerminalPath
	value interface{}
}

var _ ProbingSessionStatus_FieldPathArrayItemValue = (*ProbingSessionStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingSession_Status as interface{}
func (fpaiv *ProbingSessionStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingSessionStatus_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingSession_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingSessionStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingSession_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *ProbingSessionStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingSession_Status) bool {
	slice := fpaiv.ProbingSessionStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbingSessionStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type ProbingSessionStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingSessionStatus_FieldPath
}

func ParseProbingSessionStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingSessionStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingSessionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingSessionStatus_FieldPathArrayOfValues), nil
}

func MustParseProbingSessionStatus_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingSessionStatus_FieldPathArrayOfValues {
	fpaov, err := ParseProbingSessionStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingSessionStatus_FieldTerminalPathArrayOfValues struct {
	ProbingSessionStatus_FieldTerminalPath
	values interface{}
}

var _ ProbingSessionStatus_FieldPathArrayOfValues = (*ProbingSessionStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingSessionStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}
