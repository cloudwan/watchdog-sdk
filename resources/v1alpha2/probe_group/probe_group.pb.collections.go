// Code generated by protoc-gen-goten-resource
// Resource: ProbeGroup
// DO NOT EDIT!!!

package probe_group

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
)

type ProbeGroupList []*ProbeGroup

func (l ProbeGroupList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ProbeGroup))
}

func (l ProbeGroupList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ProbeGroupList)...)
}

func (l ProbeGroupList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeGroupList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ProbeGroupList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ProbeGroup)
}

func (l ProbeGroupList) Length() int {
	return len(l)
}

type ProbeGroupChangeList []*ProbeGroupChange

func (l ProbeGroupChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ProbeGroupChange))
}

func (l ProbeGroupChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ProbeGroupChangeList)...)
}

func (l ProbeGroupChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeGroupChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ProbeGroupChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ProbeGroupChange)
}

func (l ProbeGroupChangeList) Length() int {
	return len(l)
}

type ProbeGroupNameList []*Name

func (l ProbeGroupNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ProbeGroupNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ProbeGroupNameList)...)
}

func (l ProbeGroupNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeGroupNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbeGroupNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ProbeGroupNameList) Length() int {
	return len(l)
}

type ProbeGroupReferenceList []*Reference

func (l ProbeGroupReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ProbeGroupReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ProbeGroupReferenceList)...)
}

func (l ProbeGroupReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeGroupReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbeGroupReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ProbeGroupReferenceList) Length() int {
	return len(l)
}

type ProbeGroupParentNameList []*ParentName

func (l ProbeGroupParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ProbeGroupParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ProbeGroupParentNameList)...)
}

func (l ProbeGroupParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeGroupParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbeGroupParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ProbeGroupParentNameList) Length() int {
	return len(l)
}

type ProbeGroupParentReferenceList []*ParentReference

func (l ProbeGroupParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ProbeGroupParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ProbeGroupParentReferenceList)...)
}

func (l ProbeGroupParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeGroupParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbeGroupParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ProbeGroupParentReferenceList) Length() int {
	return len(l)
}

type ProbeGroupMap map[Name]*ProbeGroup

func (m ProbeGroupMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ProbeGroupMap) Set(res gotenresource.Resource) {
	tRes := res.(*ProbeGroup)
	m[*tRes.Name] = tRes
}

func (m ProbeGroupMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbeGroupMap) Length() int {
	return len(m)
}

func (m ProbeGroupMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ProbeGroupChangeMap map[Name]*ProbeGroupChange

func (m ProbeGroupChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ProbeGroupChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ProbeGroupChange)
	m[*tChange.GetProbeGroupName()] = tChange
}

func (m ProbeGroupChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbeGroupChangeMap) Length() int {
	return len(m)
}

func (m ProbeGroupChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
