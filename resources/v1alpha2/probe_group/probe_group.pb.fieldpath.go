// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probe_group.proto
// DO NOT EDIT!!!

package probe_group

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeGroup_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeGroup_FieldPathSelector
	Get(source *ProbeGroup) []interface{}
	GetSingle(source *ProbeGroup) (interface{}, bool)
	ClearValue(item *ProbeGroup)

	// Those methods build corresponding ProbeGroup_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeGroup_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeGroup_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeGroup_FieldPathArrayItemValue
}

type ProbeGroup_FieldPathSelector int32

const (
	ProbeGroup_FieldPathSelectorName        ProbeGroup_FieldPathSelector = 0
	ProbeGroup_FieldPathSelectorDisplayName ProbeGroup_FieldPathSelector = 1
	ProbeGroup_FieldPathSelectorState       ProbeGroup_FieldPathSelector = 2
	ProbeGroup_FieldPathSelectorMetadata    ProbeGroup_FieldPathSelector = 3
)

func (s ProbeGroup_FieldPathSelector) String() string {
	switch s {
	case ProbeGroup_FieldPathSelectorName:
		return "name"
	case ProbeGroup_FieldPathSelectorDisplayName:
		return "display_name"
	case ProbeGroup_FieldPathSelectorState:
		return "state"
	case ProbeGroup_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", s))
	}
}

func BuildProbeGroup_FieldPath(fp gotenobject.RawFieldPath) (ProbeGroup_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbeGroup")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProbeGroup_FieldTerminalPath{selector: ProbeGroup_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &ProbeGroup_FieldTerminalPath{selector: ProbeGroup_FieldPathSelectorDisplayName}, nil
		case "state":
			return &ProbeGroup_FieldTerminalPath{selector: ProbeGroup_FieldPathSelectorState}, nil
		case "metadata":
			return &ProbeGroup_FieldTerminalPath{selector: ProbeGroup_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "state":
			if subpath, err := BuildProbeGroupState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeGroup_FieldSubPath{selector: ProbeGroup_FieldPathSelectorState, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeGroup_FieldSubPath{selector: ProbeGroup_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbeGroup", fp)
}

func ParseProbeGroup_FieldPath(rawField string) (ProbeGroup_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeGroup_FieldPath(fp)
}

func MustParseProbeGroup_FieldPath(rawField string) ProbeGroup_FieldPath {
	fp, err := ParseProbeGroup_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeGroup_FieldTerminalPath struct {
	selector ProbeGroup_FieldPathSelector
}

var _ ProbeGroup_FieldPath = (*ProbeGroup_FieldTerminalPath)(nil)

func (fp *ProbeGroup_FieldTerminalPath) Selector() ProbeGroup_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeGroup_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeGroup_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbeGroup
func (fp *ProbeGroup_FieldTerminalPath) Get(source *ProbeGroup) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeGroup_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProbeGroup_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case ProbeGroup_FieldPathSelectorState:
			if source.State != nil {
				values = append(values, source.State)
			}
		case ProbeGroup_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeGroup_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbeGroup))
}

// GetSingle returns value pointed by specific field of from source ProbeGroup
func (fp *ProbeGroup_FieldTerminalPath) GetSingle(source *ProbeGroup) (interface{}, bool) {
	switch fp.selector {
	case ProbeGroup_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProbeGroup_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case ProbeGroup_FieldPathSelectorState:
		res := source.GetState()
		return res, res != nil
	case ProbeGroup_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fp.selector))
	}
}

func (fp *ProbeGroup_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbeGroup))
}

// GetDefault returns a default value of the field type
func (fp *ProbeGroup_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeGroup_FieldPathSelectorName:
		return (*Name)(nil)
	case ProbeGroup_FieldPathSelectorDisplayName:
		return ""
	case ProbeGroup_FieldPathSelectorState:
		return (*ProbeGroup_State)(nil)
	case ProbeGroup_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fp.selector))
	}
}

func (fp *ProbeGroup_FieldTerminalPath) ClearValue(item *ProbeGroup) {
	if item != nil {
		switch fp.selector {
		case ProbeGroup_FieldPathSelectorName:
			item.Name = nil
		case ProbeGroup_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case ProbeGroup_FieldPathSelectorState:
			item.State = nil
		case ProbeGroup_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fp.selector))
		}
	}
}

func (fp *ProbeGroup_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbeGroup))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeGroup_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeGroup_FieldPathSelectorName ||
		fp.selector == ProbeGroup_FieldPathSelectorDisplayName
}

func (fp *ProbeGroup_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbeGroup_FieldTerminalPath) WithIValue(value interface{}) ProbeGroup_FieldPathValue {
	switch fp.selector {
	case ProbeGroup_FieldPathSelectorName:
		return &ProbeGroup_FieldTerminalPathValue{ProbeGroup_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProbeGroup_FieldPathSelectorDisplayName:
		return &ProbeGroup_FieldTerminalPathValue{ProbeGroup_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeGroup_FieldPathSelectorState:
		return &ProbeGroup_FieldTerminalPathValue{ProbeGroup_FieldTerminalPath: *fp, value: value.(*ProbeGroup_State)}
	case ProbeGroup_FieldPathSelectorMetadata:
		return &ProbeGroup_FieldTerminalPathValue{ProbeGroup_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fp.selector))
	}
}

func (fp *ProbeGroup_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeGroup_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeGroup_FieldPathArrayOfValues {
	fpaov := &ProbeGroup_FieldTerminalPathArrayOfValues{ProbeGroup_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeGroup_FieldPathSelectorName:
		return &ProbeGroup_FieldTerminalPathArrayOfValues{ProbeGroup_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProbeGroup_FieldPathSelectorDisplayName:
		return &ProbeGroup_FieldTerminalPathArrayOfValues{ProbeGroup_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeGroup_FieldPathSelectorState:
		return &ProbeGroup_FieldTerminalPathArrayOfValues{ProbeGroup_FieldTerminalPath: *fp, values: values.([]*ProbeGroup_State)}
	case ProbeGroup_FieldPathSelectorMetadata:
		return &ProbeGroup_FieldTerminalPathArrayOfValues{ProbeGroup_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeGroup_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeGroup_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeGroup_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fp.selector))
	}
}

func (fp *ProbeGroup_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbeGroup_FieldSubPath struct {
	selector ProbeGroup_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbeGroup_FieldPath = (*ProbeGroup_FieldSubPath)(nil)

func (fps *ProbeGroup_FieldSubPath) Selector() ProbeGroup_FieldPathSelector {
	return fps.selector
}
func (fps *ProbeGroup_FieldSubPath) AsStateSubPath() (ProbeGroupState_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeGroupState_FieldPath)
	return res, ok
}
func (fps *ProbeGroup_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbeGroup_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbeGroup_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbeGroup
func (fps *ProbeGroup_FieldSubPath) Get(source *ProbeGroup) (values []interface{}) {
	if asStateFieldPath, ok := fps.AsStateSubPath(); ok {
		values = append(values, asStateFieldPath.Get(source.GetState())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fps.selector))
	}
	return
}

func (fps *ProbeGroup_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbeGroup))
}

// GetSingle returns value of selected field from source ProbeGroup
func (fps *ProbeGroup_FieldSubPath) GetSingle(source *ProbeGroup) (interface{}, bool) {
	switch fps.selector {
	case ProbeGroup_FieldPathSelectorState:
		if source.GetState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetState())
	case ProbeGroup_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fps.selector))
	}
}

func (fps *ProbeGroup_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbeGroup))
}

// GetDefault returns a default value of the field type
func (fps *ProbeGroup_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbeGroup_FieldSubPath) ClearValue(item *ProbeGroup) {
	if item != nil {
		switch fps.selector {
		case ProbeGroup_FieldPathSelectorState:
			fps.subPath.ClearValueRaw(item.State)
		case ProbeGroup_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fps.selector))
		}
	}
}

func (fps *ProbeGroup_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbeGroup))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbeGroup_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbeGroup_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProbeGroup_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProbeGroup_FieldSubPath) WithIValue(value interface{}) ProbeGroup_FieldPathValue {
	return &ProbeGroup_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbeGroup_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbeGroup_FieldSubPath) WithIArrayOfValues(values interface{}) ProbeGroup_FieldPathArrayOfValues {
	return &ProbeGroup_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbeGroup_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbeGroup_FieldSubPath) WithIArrayItemValue(value interface{}) ProbeGroup_FieldPathArrayItemValue {
	return &ProbeGroup_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbeGroup_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbeGroup_FieldPathValue allows storing values for ProbeGroup fields according to their type
type ProbeGroup_FieldPathValue interface {
	ProbeGroup_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbeGroup)
	CompareWith(*ProbeGroup) (cmp int, comparable bool)
}

func ParseProbeGroup_FieldPathValue(pathStr, valueStr string) (ProbeGroup_FieldPathValue, error) {
	fp, err := ParseProbeGroup_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeGroup field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeGroup_FieldPathValue), nil
}

func MustParseProbeGroup_FieldPathValue(pathStr, valueStr string) ProbeGroup_FieldPathValue {
	fpv, err := ParseProbeGroup_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeGroup_FieldTerminalPathValue struct {
	ProbeGroup_FieldTerminalPath
	value interface{}
}

var _ ProbeGroup_FieldPathValue = (*ProbeGroup_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbeGroup' as interface{}
func (fpv *ProbeGroup_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeGroup_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProbeGroup_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeGroup_FieldTerminalPathValue) AsStateValue() (*ProbeGroup_State, bool) {
	res, ok := fpv.value.(*ProbeGroup_State)
	return res, ok
}
func (fpv *ProbeGroup_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object ProbeGroup
func (fpv *ProbeGroup_FieldTerminalPathValue) SetTo(target **ProbeGroup) {
	if *target == nil {
		*target = new(ProbeGroup)
	}
	switch fpv.selector {
	case ProbeGroup_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProbeGroup_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case ProbeGroup_FieldPathSelectorState:
		(*target).State = fpv.value.(*ProbeGroup_State)
	case ProbeGroup_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fpv.selector))
	}
}

func (fpv *ProbeGroup_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeGroup)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeGroup_FieldTerminalPathValue' with the value under path in 'ProbeGroup'.
func (fpv *ProbeGroup_FieldTerminalPathValue) CompareWith(source *ProbeGroup) (int, bool) {
	switch fpv.selector {
	case ProbeGroup_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeGroup_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeGroup_FieldPathSelectorState:
		return 0, false
	case ProbeGroup_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fpv.selector))
	}
}

func (fpv *ProbeGroup_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbeGroup))
}

type ProbeGroup_FieldSubPathValue struct {
	ProbeGroup_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbeGroup_FieldPathValue = (*ProbeGroup_FieldSubPathValue)(nil)

func (fpvs *ProbeGroup_FieldSubPathValue) AsStatePathValue() (ProbeGroupState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeGroupState_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeGroup_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *ProbeGroup_FieldSubPathValue) SetTo(target **ProbeGroup) {
	if *target == nil {
		*target = new(ProbeGroup)
	}
	switch fpvs.Selector() {
	case ProbeGroup_FieldPathSelectorState:
		fpvs.subPathValue.(ProbeGroupState_FieldPathValue).SetTo(&(*target).State)
	case ProbeGroup_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeGroup_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeGroup)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbeGroup_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbeGroup_FieldSubPathValue) CompareWith(source *ProbeGroup) (int, bool) {
	switch fpvs.Selector() {
	case ProbeGroup_FieldPathSelectorState:
		return fpvs.subPathValue.(ProbeGroupState_FieldPathValue).CompareWith(source.GetState())
	case ProbeGroup_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeGroup_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbeGroup))
}

// ProbeGroup_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbeGroup according to their type
// Present only for array (repeated) types.
type ProbeGroup_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeGroup_FieldPath
	ContainsValue(*ProbeGroup) bool
}

// ParseProbeGroup_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeGroup_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeGroup_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeGroup_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeGroup field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeGroup_FieldPathArrayItemValue), nil
}

func MustParseProbeGroup_FieldPathArrayItemValue(pathStr, valueStr string) ProbeGroup_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeGroup_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeGroup_FieldTerminalPathArrayItemValue struct {
	ProbeGroup_FieldTerminalPath
	value interface{}
}

var _ ProbeGroup_FieldPathArrayItemValue = (*ProbeGroup_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbeGroup as interface{}
func (fpaiv *ProbeGroup_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeGroup_FieldTerminalPathArrayItemValue) GetSingle(source *ProbeGroup) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeGroup_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbeGroup))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeGroup'
func (fpaiv *ProbeGroup_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbeGroup) bool {
	slice := fpaiv.ProbeGroup_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbeGroup_FieldSubPathArrayItemValue struct {
	ProbeGroup_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbeGroup_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbeGroup_FieldSubPathArrayItemValue) AsStatePathItemValue() (ProbeGroupState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeGroupState_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeGroup_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbeGroup'
func (fpaivs *ProbeGroup_FieldSubPathArrayItemValue) ContainsValue(source *ProbeGroup) bool {
	switch fpaivs.Selector() {
	case ProbeGroup_FieldPathSelectorState:
		return fpaivs.subPathItemValue.(ProbeGroupState_FieldPathArrayItemValue).ContainsValue(source.GetState())
	case ProbeGroup_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup: %d", fpaivs.Selector()))
	}
}

// ProbeGroup_FieldPathArrayOfValues allows storing slice of values for ProbeGroup fields according to their type
type ProbeGroup_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeGroup_FieldPath
}

func ParseProbeGroup_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeGroup_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeGroup_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbeGroup field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeGroup_FieldPathArrayOfValues), nil
}

func MustParseProbeGroup_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeGroup_FieldPathArrayOfValues {
	fpaov, err := ParseProbeGroup_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeGroup_FieldTerminalPathArrayOfValues struct {
	ProbeGroup_FieldTerminalPath
	values interface{}
}

var _ ProbeGroup_FieldPathArrayOfValues = (*ProbeGroup_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeGroup_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeGroup_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProbeGroup_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeGroup_FieldPathSelectorState:
		for _, v := range fpaov.values.([]*ProbeGroup_State) {
			values = append(values, v)
		}
	case ProbeGroup_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeGroup_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProbeGroup_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeGroup_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]*ProbeGroup_State, bool) {
	res, ok := fpaov.values.([]*ProbeGroup_State)
	return res, ok
}
func (fpaov *ProbeGroup_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type ProbeGroup_FieldSubPathArrayOfValues struct {
	ProbeGroup_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbeGroup_FieldPathArrayOfValues = (*ProbeGroup_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbeGroup_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbeGroup_FieldSubPathArrayOfValues) AsStatePathArrayOfValues() (ProbeGroupState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeGroupState_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeGroup_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeGroupState_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeGroupState_FieldPathSelector
	Get(source *ProbeGroup_State) []interface{}
	GetSingle(source *ProbeGroup_State) (interface{}, bool)
	ClearValue(item *ProbeGroup_State)

	// Those methods build corresponding ProbeGroupState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeGroupState_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeGroupState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeGroupState_FieldPathArrayItemValue
}

type ProbeGroupState_FieldPathSelector int32

const (
	ProbeGroupState_FieldPathSelectorTargetCount          ProbeGroupState_FieldPathSelector = 0
	ProbeGroupState_FieldPathSelectorRegionalTargetCounts ProbeGroupState_FieldPathSelector = 1
)

func (s ProbeGroupState_FieldPathSelector) String() string {
	switch s {
	case ProbeGroupState_FieldPathSelectorTargetCount:
		return "target_count"
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		return "regional_target_counts"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", s))
	}
}

func BuildProbeGroupState_FieldPath(fp gotenobject.RawFieldPath) (ProbeGroupState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbeGroup_State")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "target_count", "targetCount", "target-count":
			return &ProbeGroupState_FieldTerminalPath{selector: ProbeGroupState_FieldPathSelectorTargetCount}, nil
		case "regional_target_counts", "regionalTargetCounts", "regional-target-counts":
			return &ProbeGroupState_FieldTerminalPath{selector: ProbeGroupState_FieldPathSelectorRegionalTargetCounts}, nil
		}
	} else {
		switch fp[0] {
		case "regional_target_counts", "regionalTargetCounts", "regional-target-counts":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object ProbeGroup_State)", fp)
			}
			return &ProbeGroupState_FieldPathMap{selector: ProbeGroupState_FieldPathSelectorRegionalTargetCounts, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbeGroup_State", fp)
}

func ParseProbeGroupState_FieldPath(rawField string) (ProbeGroupState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeGroupState_FieldPath(fp)
}

func MustParseProbeGroupState_FieldPath(rawField string) ProbeGroupState_FieldPath {
	fp, err := ParseProbeGroupState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeGroupState_FieldTerminalPath struct {
	selector ProbeGroupState_FieldPathSelector
}

var _ ProbeGroupState_FieldPath = (*ProbeGroupState_FieldTerminalPath)(nil)

func (fp *ProbeGroupState_FieldTerminalPath) Selector() ProbeGroupState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeGroupState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeGroupState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbeGroup_State
func (fp *ProbeGroupState_FieldTerminalPath) Get(source *ProbeGroup_State) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeGroupState_FieldPathSelectorTargetCount:
			values = append(values, source.TargetCount)
		case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
			values = append(values, source.RegionalTargetCounts)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeGroupState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbeGroup_State))
}

// GetSingle returns value pointed by specific field of from source ProbeGroup_State
func (fp *ProbeGroupState_FieldTerminalPath) GetSingle(source *ProbeGroup_State) (interface{}, bool) {
	switch fp.selector {
	case ProbeGroupState_FieldPathSelectorTargetCount:
		return source.GetTargetCount(), source != nil
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		res := source.GetRegionalTargetCounts()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fp.selector))
	}
}

func (fp *ProbeGroupState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbeGroup_State))
}

// GetDefault returns a default value of the field type
func (fp *ProbeGroupState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeGroupState_FieldPathSelectorTargetCount:
		return int64(0)
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		return (map[string]int64)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fp.selector))
	}
}

func (fp *ProbeGroupState_FieldTerminalPath) ClearValue(item *ProbeGroup_State) {
	if item != nil {
		switch fp.selector {
		case ProbeGroupState_FieldPathSelectorTargetCount:
			item.TargetCount = int64(0)
		case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
			item.RegionalTargetCounts = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fp.selector))
		}
	}
}

func (fp *ProbeGroupState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbeGroup_State))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeGroupState_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeGroupState_FieldPathSelectorTargetCount ||
		fp.selector == ProbeGroupState_FieldPathSelectorRegionalTargetCounts
}

func (fp *ProbeGroupState_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbeGroupState_FieldTerminalPath) WithIValue(value interface{}) ProbeGroupState_FieldPathValue {
	switch fp.selector {
	case ProbeGroupState_FieldPathSelectorTargetCount:
		return &ProbeGroupState_FieldTerminalPathValue{ProbeGroupState_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		return &ProbeGroupState_FieldTerminalPathValue{ProbeGroupState_FieldTerminalPath: *fp, value: value.(map[string]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fp.selector))
	}
}

func (fp *ProbeGroupState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeGroupState_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeGroupState_FieldPathArrayOfValues {
	fpaov := &ProbeGroupState_FieldTerminalPathArrayOfValues{ProbeGroupState_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeGroupState_FieldPathSelectorTargetCount:
		return &ProbeGroupState_FieldTerminalPathArrayOfValues{ProbeGroupState_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		return &ProbeGroupState_FieldTerminalPathArrayOfValues{ProbeGroupState_FieldTerminalPath: *fp, values: values.([]map[string]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeGroupState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeGroupState_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeGroupState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fp.selector))
	}
}

func (fp *ProbeGroupState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ProbeGroupState_FieldPathMap struct {
	key      string
	selector ProbeGroupState_FieldPathSelector
}

var _ ProbeGroupState_FieldPath = (*ProbeGroupState_FieldPathMap)(nil)

func (fpm *ProbeGroupState_FieldPathMap) Selector() ProbeGroupState_FieldPathSelector {
	return fpm.selector
}

func (fpm *ProbeGroupState_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ProbeGroupState_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ProbeGroupState_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source ProbeGroup_State
func (fpm *ProbeGroupState_FieldPathMap) Get(source *ProbeGroup_State) (values []interface{}) {
	switch fpm.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		if value, ok := source.GetRegionalTargetCounts()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpm.selector))
	}
	return
}

func (fpm *ProbeGroupState_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*ProbeGroup_State))
}

// GetSingle returns value by selected field map key from source ProbeGroup_State
func (fpm *ProbeGroupState_FieldPathMap) GetSingle(source *ProbeGroup_State) (interface{}, bool) {
	switch fpm.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		res, ok := source.GetRegionalTargetCounts()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpm.selector))
	}
}

func (fpm *ProbeGroupState_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*ProbeGroup_State))
}

// GetDefault returns a default value of the field type
func (fpm *ProbeGroupState_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		var v int64
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpm.selector))
	}
}

func (fpm *ProbeGroupState_FieldPathMap) ClearValue(item *ProbeGroup_State) {
	if item != nil {
		switch fpm.selector {
		case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
			delete(item.RegionalTargetCounts, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpm.selector))
		}
	}
}

func (fpm *ProbeGroupState_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*ProbeGroup_State))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ProbeGroupState_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpm.selector))
	}
}

func (fpm *ProbeGroupState_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *ProbeGroupState_FieldPathMap) WithIValue(value interface{}) ProbeGroupState_FieldPathValue {
	switch fpm.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		return &ProbeGroupState_FieldPathMapValue{ProbeGroupState_FieldPathMap: *fpm, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpm.selector))
	}
}

func (fpm *ProbeGroupState_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ProbeGroupState_FieldPathMap) WithIArrayOfValues(values interface{}) ProbeGroupState_FieldPathArrayOfValues {
	switch fpm.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		return &ProbeGroupState_FieldPathMapArrayOfValues{ProbeGroupState_FieldPathMap: *fpm, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpm.selector))
	}
}

func (fpm *ProbeGroupState_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ProbeGroupState_FieldPathMap) WithIArrayItemValue(value interface{}) ProbeGroupState_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ProbeGroupState_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// ProbeGroupState_FieldPathValue allows storing values for State fields according to their type
type ProbeGroupState_FieldPathValue interface {
	ProbeGroupState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbeGroup_State)
	CompareWith(*ProbeGroup_State) (cmp int, comparable bool)
}

func ParseProbeGroupState_FieldPathValue(pathStr, valueStr string) (ProbeGroupState_FieldPathValue, error) {
	fp, err := ParseProbeGroupState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeGroupState_FieldPathValue), nil
}

func MustParseProbeGroupState_FieldPathValue(pathStr, valueStr string) ProbeGroupState_FieldPathValue {
	fpv, err := ParseProbeGroupState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeGroupState_FieldTerminalPathValue struct {
	ProbeGroupState_FieldTerminalPath
	value interface{}
}

var _ ProbeGroupState_FieldPathValue = (*ProbeGroupState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'State' as interface{}
func (fpv *ProbeGroupState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeGroupState_FieldTerminalPathValue) AsTargetCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbeGroupState_FieldTerminalPathValue) AsRegionalTargetCountsValue() (map[string]int64, bool) {
	res, ok := fpv.value.(map[string]int64)
	return res, ok
}

// SetTo stores value for selected field for object State
func (fpv *ProbeGroupState_FieldTerminalPathValue) SetTo(target **ProbeGroup_State) {
	if *target == nil {
		*target = new(ProbeGroup_State)
	}
	switch fpv.selector {
	case ProbeGroupState_FieldPathSelectorTargetCount:
		(*target).TargetCount = fpv.value.(int64)
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		(*target).RegionalTargetCounts = fpv.value.(map[string]int64)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpv.selector))
	}
}

func (fpv *ProbeGroupState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeGroup_State)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeGroupState_FieldTerminalPathValue' with the value under path in 'ProbeGroup_State'.
func (fpv *ProbeGroupState_FieldTerminalPathValue) CompareWith(source *ProbeGroup_State) (int, bool) {
	switch fpv.selector {
	case ProbeGroupState_FieldPathSelectorTargetCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetTargetCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpv.selector))
	}
}

func (fpv *ProbeGroupState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbeGroup_State))
}

type ProbeGroupState_FieldPathMapValue struct {
	ProbeGroupState_FieldPathMap
	value interface{}
}

var _ ProbeGroupState_FieldPathValue = (*ProbeGroupState_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in State as interface{}
func (fpmv *ProbeGroupState_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ProbeGroupState_FieldPathMapValue) AsRegionalTargetCountsElementValue() (int64, bool) {
	res, ok := fpmv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field in State
func (fpmv *ProbeGroupState_FieldPathMapValue) SetTo(target **ProbeGroup_State) {
	if *target == nil {
		*target = new(ProbeGroup_State)
	}
	switch fpmv.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		if (*target).RegionalTargetCounts == nil {
			(*target).RegionalTargetCounts = make(map[string]int64)
		}
		(*target).RegionalTargetCounts[fpmv.key] = fpmv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpmv.selector))
	}
}

func (fpmv *ProbeGroupState_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbeGroup_State)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeGroupState_FieldPathMapValue' with the value under path in 'ProbeGroup_State'.
func (fpmv *ProbeGroupState_FieldPathMapValue) CompareWith(source *ProbeGroup_State) (int, bool) {
	switch fpmv.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		leftValue := fpmv.value.(int64)
		rightValue := source.GetRegionalTargetCounts()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbeGroup_State: %d", fpmv.selector))
	}
}

func (fpmv *ProbeGroupState_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*ProbeGroup_State))
}

// ProbeGroupState_FieldPathArrayItemValue allows storing single item in Path-specific values for State according to their type
// Present only for array (repeated) types.
type ProbeGroupState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeGroupState_FieldPath
	ContainsValue(*ProbeGroup_State) bool
}

// ParseProbeGroupState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeGroupState_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeGroupState_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeGroupState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeGroupState_FieldPathArrayItemValue), nil
}

func MustParseProbeGroupState_FieldPathArrayItemValue(pathStr, valueStr string) ProbeGroupState_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeGroupState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeGroupState_FieldTerminalPathArrayItemValue struct {
	ProbeGroupState_FieldTerminalPath
	value interface{}
}

var _ ProbeGroupState_FieldPathArrayItemValue = (*ProbeGroupState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbeGroup_State as interface{}
func (fpaiv *ProbeGroupState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeGroupState_FieldTerminalPathArrayItemValue) GetSingle(source *ProbeGroup_State) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeGroupState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbeGroup_State))
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaiv *ProbeGroupState_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbeGroup_State) bool {
	slice := fpaiv.ProbeGroupState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeGroupState_FieldPathArrayOfValues allows storing slice of values for State fields according to their type
type ProbeGroupState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeGroupState_FieldPath
}

func ParseProbeGroupState_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeGroupState_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeGroupState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeGroupState_FieldPathArrayOfValues), nil
}

func MustParseProbeGroupState_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeGroupState_FieldPathArrayOfValues {
	fpaov, err := ParseProbeGroupState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeGroupState_FieldTerminalPathArrayOfValues struct {
	ProbeGroupState_FieldTerminalPath
	values interface{}
}

var _ ProbeGroupState_FieldPathArrayOfValues = (*ProbeGroupState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeGroupState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeGroupState_FieldPathSelectorTargetCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		for _, v := range fpaov.values.([]map[string]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeGroupState_FieldTerminalPathArrayOfValues) AsTargetCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbeGroupState_FieldTerminalPathArrayOfValues) AsRegionalTargetCountsArrayOfValues() ([]map[string]int64, bool) {
	res, ok := fpaov.values.([]map[string]int64)
	return res, ok
}

type ProbeGroupState_FieldPathMapArrayOfValues struct {
	ProbeGroupState_FieldPathMap
	values interface{}
}

var _ ProbeGroupState_FieldPathArrayOfValues = (*ProbeGroupState_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ProbeGroupState_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ProbeGroupState_FieldPathSelectorRegionalTargetCounts:
		for _, v := range fpmaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ProbeGroupState_FieldPathMapArrayOfValues) AsRegionalTargetCountsArrayOfElementValues() ([]int64, bool) {
	res, ok := fpmaov.values.([]int64)
	return res, ok
}
