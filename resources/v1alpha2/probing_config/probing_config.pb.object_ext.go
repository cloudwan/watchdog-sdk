// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_config.proto
// DO NOT EDIT!!!

package probing_config

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

func (o *ProbingConfig) GotenObjectExt() {}

func (o *ProbingConfig) MakeFullFieldMask() *ProbingConfig_FieldMask {
	return FullProbingConfig_FieldMask()
}

func (o *ProbingConfig) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingConfig_FieldMask()
}

func (o *ProbingConfig) MakeDiffFieldMask(other *ProbingConfig) *ProbingConfig_FieldMask {
	if o == nil && other == nil {
		return &ProbingConfig_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingConfig_FieldMask()
	}

	res := &ProbingConfig_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfig_FieldSubPath{selector: ProbingConfig_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfig_FieldSubPath{selector: ProbingConfig_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfig_FieldSubPath{selector: ProbingConfig_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ProbingConfig) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingConfig))
}

func (o *ProbingConfig) Clone() *ProbingConfig {
	if o == nil {
		return nil
	}
	result := &ProbingConfig{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Metadata = o.Metadata.Clone()
	result.Spec = o.Spec.Clone()
	result.Status = o.Status.Clone()
	return result
}

func (o *ProbingConfig) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingConfig) Merge(source *ProbingConfig) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(ProbingConfig_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(ProbingConfig_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *ProbingConfig) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingConfig))
}

func (o *ProbingConfig_ProbingSession) GotenObjectExt() {}

func (o *ProbingConfig_ProbingSession) MakeFullFieldMask() *ProbingConfig_ProbingSession_FieldMask {
	return FullProbingConfig_ProbingSession_FieldMask()
}

func (o *ProbingConfig_ProbingSession) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingConfig_ProbingSession_FieldMask()
}

func (o *ProbingConfig_ProbingSession) MakeDiffFieldMask(other *ProbingConfig_ProbingSession) *ProbingConfig_ProbingSession_FieldMask {
	if o == nil && other == nil {
		return &ProbingConfig_ProbingSession_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingConfig_ProbingSession_FieldMask()
	}

	res := &ProbingConfig_ProbingSession_FieldMask{}
	if o.GetTarget().String() != other.GetTarget().String() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTarget})
	}
	if o.GetTargetDisplayName() != other.GetTargetDisplayName() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName})
	}
	if o.GetTargetGroup().String() != other.GetTargetGroup().String() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTargetGroup})
	}
	if o.GetMode() != other.GetMode() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorMode})
	}
	if o.GetIpVersion() != other.GetIpVersion() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorIpVersion})
	}
	if o.GetAddress() != other.GetAddress() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorAddress})
	}
	if o.GetGroupName() != other.GetGroupName() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorGroupName})
	}
	if o.GetCategory() != other.GetCategory() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorCategory})
	}
	if o.GetLocationType() != other.GetLocationType() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorLocationType})
	}
	{
		subMask := o.GetLocation().MakeDiffFieldMask(other.GetLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorLocation, subPath: subpath})
			}
		}
	}
	if o.GetIntervalSec() != other.GetIntervalSec() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorIntervalSec})
	}
	if !proto.Equal(o.GetInterval(), other.GetInterval()) {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorInterval})
	}
	if o.GetTos() != other.GetTos() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTos})
	}
	if o.GetWindowSize() != other.GetWindowSize() {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorWindowSize})
	}
	{
		subMask := o.GetPathProbing().MakeDiffFieldMask(other.GetPathProbing())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorPathProbing})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorPathProbing, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSpeedtestSettings().MakeDiffFieldMask(other.GetSpeedtestSettings())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetHttpProbingConfig().MakeDiffFieldMask(other.GetHttpProbingConfig())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetProxyConfiguration().MakeDiffFieldMask(other.GetProxyConfiguration())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration, subPath: subpath})
			}
		}
	}

	if len(o.GetAddresses()) == len(other.GetAddresses()) {
		for i, lValue := range o.GetAddresses() {
			rValue := other.GetAddresses()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorAddresses})
	}
	return res
}

func (o *ProbingConfig_ProbingSession) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingConfig_ProbingSession))
}

func (o *ProbingConfig_ProbingSession) Clone() *ProbingConfig_ProbingSession {
	if o == nil {
		return nil
	}
	result := &ProbingConfig_ProbingSession{}
	if o.Target == nil {
		result.Target = nil
	} else if data, err := o.Target.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Target = &probing_target.Name{}
		if err := result.Target.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.TargetDisplayName = o.TargetDisplayName
	if o.TargetGroup == nil {
		result.TargetGroup = nil
	} else if data, err := o.TargetGroup.ProtoString(); err != nil {
		panic(err)
	} else {
		result.TargetGroup = &probing_target_group.Reference{}
		if err := result.TargetGroup.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Mode = o.Mode
	result.IpVersion = o.IpVersion
	result.Address = o.Address
	result.GroupName = o.GroupName
	result.Category = o.Category
	result.LocationType = o.LocationType
	result.Location = o.Location.Clone()
	result.IntervalSec = o.IntervalSec
	result.Interval = proto.Clone(o.Interval).(*duration.Duration)
	result.Tos = o.Tos
	result.WindowSize = o.WindowSize
	result.PathProbing = o.PathProbing.Clone()
	result.SpeedtestSettings = o.SpeedtestSettings.Clone()
	result.HttpProbingConfig = o.HttpProbingConfig.Clone()
	result.ProxyConfiguration = o.ProxyConfiguration.Clone()
	result.Addresses = make([]string, len(o.Addresses))
	for i, sourceValue := range o.Addresses {
		result.Addresses[i] = sourceValue
	}
	return result
}

func (o *ProbingConfig_ProbingSession) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingConfig_ProbingSession) Merge(source *ProbingConfig_ProbingSession) {
	if source.GetTarget() != nil {
		if data, err := source.GetTarget().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Target = &probing_target.Name{}
			if err := o.Target.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Target = nil
	}
	o.TargetDisplayName = source.GetTargetDisplayName()
	if source.GetTargetGroup() != nil {
		if data, err := source.GetTargetGroup().ProtoString(); err != nil {
			panic(err)
		} else {
			o.TargetGroup = &probing_target_group.Reference{}
			if err := o.TargetGroup.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.TargetGroup = nil
	}
	o.Mode = source.GetMode()
	o.IpVersion = source.GetIpVersion()
	o.Address = source.GetAddress()
	o.GroupName = source.GetGroupName()
	o.Category = source.GetCategory()
	o.LocationType = source.GetLocationType()
	if source.GetLocation() != nil {
		if o.Location == nil {
			o.Location = new(common.Location)
		}
		o.Location.Merge(source.GetLocation())
	}
	o.IntervalSec = source.GetIntervalSec()
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(duration.Duration)
		}
		proto.Merge(o.Interval, source.GetInterval())
	}
	o.Tos = source.GetTos()
	o.WindowSize = source.GetWindowSize()
	if source.GetPathProbing() != nil {
		if o.PathProbing == nil {
			o.PathProbing = new(common.PathProbe)
		}
		o.PathProbing.Merge(source.GetPathProbing())
	}
	if source.GetSpeedtestSettings() != nil {
		if o.SpeedtestSettings == nil {
			o.SpeedtestSettings = new(common.SpeedTestSettings)
		}
		o.SpeedtestSettings.Merge(source.GetSpeedtestSettings())
	}
	if source.GetHttpProbingConfig() != nil {
		if o.HttpProbingConfig == nil {
			o.HttpProbingConfig = new(common.HTTPProbingConfig)
		}
		o.HttpProbingConfig.Merge(source.GetHttpProbingConfig())
	}
	if source.GetProxyConfiguration() != nil {
		if o.ProxyConfiguration == nil {
			o.ProxyConfiguration = new(common.ProxyConfiguration)
		}
		o.ProxyConfiguration.Merge(source.GetProxyConfiguration())
	}
	for _, sourceValue := range source.GetAddresses() {
		exists := false
		for _, currentValue := range o.Addresses {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Addresses = append(o.Addresses, newDstElement)
		}
	}

}

func (o *ProbingConfig_ProbingSession) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingConfig_ProbingSession))
}

func (o *ProbingConfig_Spec) GotenObjectExt() {}

func (o *ProbingConfig_Spec) MakeFullFieldMask() *ProbingConfig_Spec_FieldMask {
	return FullProbingConfig_Spec_FieldMask()
}

func (o *ProbingConfig_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingConfig_Spec_FieldMask()
}

func (o *ProbingConfig_Spec) MakeDiffFieldMask(other *ProbingConfig_Spec) *ProbingConfig_Spec_FieldMask {
	if o == nil && other == nil {
		return &ProbingConfig_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingConfig_Spec_FieldMask()
	}

	res := &ProbingConfig_Spec_FieldMask{}
	if o.GetProbe().String() != other.GetProbe().String() {
		res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorProbe})
	}

	if len(o.GetProbingSessions()) == len(other.GetProbingSessions()) {
		for i, lValue := range o.GetProbingSessions() {
			rValue := other.GetProbingSessions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorProbingSessions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorProbingSessions})
	}
	{
		subMask := o.GetSpeedtest().MakeDiffFieldMask(other.GetSpeedtest())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorSpeedtest})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfigSpec_FieldSubPath{selector: ProbingConfigSpec_FieldPathSelectorSpeedtest, subPath: subpath})
			}
		}
	}

	if len(o.GetTargetSessions()) == len(other.GetTargetSessions()) {
		for i, lValue := range o.GetTargetSessions() {
			rValue := other.GetTargetSessions()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorTargetSessions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorTargetSessions})
	}
	return res
}

func (o *ProbingConfig_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingConfig_Spec))
}

func (o *ProbingConfig_Spec) Clone() *ProbingConfig_Spec {
	if o == nil {
		return nil
	}
	result := &ProbingConfig_Spec{}
	if o.Probe == nil {
		result.Probe = nil
	} else if data, err := o.Probe.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Probe = &probe.Reference{}
		if err := result.Probe.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ProbingSessions = make([]*ProbingConfig_ProbingSession, len(o.ProbingSessions))
	for i, sourceValue := range o.ProbingSessions {
		result.ProbingSessions[i] = sourceValue.Clone()
	}
	result.Speedtest = o.Speedtest.Clone()
	result.TargetSessions = make([]*ProbingConfig_ProbingSession, len(o.TargetSessions))
	for i, sourceValue := range o.TargetSessions {
		result.TargetSessions[i] = sourceValue.Clone()
	}
	return result
}

func (o *ProbingConfig_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingConfig_Spec) Merge(source *ProbingConfig_Spec) {
	if source.GetProbe() != nil {
		if data, err := source.GetProbe().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Probe = &probe.Reference{}
			if err := o.Probe.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Probe = nil
	}
	sourceProbingSessions, origProbingSessionsKeys := map[string]*ProbingConfig_ProbingSession{}, map[string]bool{}
	newProbingSessions := make([]*ProbingConfig_ProbingSession, 0, len(o.ProbingSessions))
	for _, sourceValue := range source.GetProbingSessions() {
		key := fmt.Sprintf("%s", sourceValue.GetTarget())
		sourceProbingSessions[key] = sourceValue
	}
	for _, origValue := range o.ProbingSessions {
		key := fmt.Sprintf("%s", origValue.GetTarget())
		origProbingSessionsKeys[key] = true
		sourceValue := sourceProbingSessions[key]
		if sourceValue != nil {
			if origValue == nil {
				origValue = new(ProbingConfig_ProbingSession)
			}
			origValue.Merge(sourceValue)
		}
		newProbingSessions = append(newProbingSessions, origValue)
	}
	for key, sourceValue := range sourceProbingSessions {
		if origProbingSessionsKeys[key] == false {
			newProbingSessions = append(newProbingSessions, sourceValue.Clone())
		}
	}
	o.ProbingSessions = newProbingSessions
	sort.Slice(o.ProbingSessions, func(i, j int) bool {
		leftEl, rightEl := o.ProbingSessions[i], o.ProbingSessions[j]
		leftKey := fmt.Sprintf("%s", leftEl.GetTarget())
		rightKey := fmt.Sprintf("%s", rightEl.GetTarget())
		return leftKey < rightKey
	})

	if source.GetSpeedtest() != nil {
		if o.Speedtest == nil {
			o.Speedtest = new(ProbingConfig_Spec_SpeedTest)
		}
		o.Speedtest.Merge(source.GetSpeedtest())
	}
	sourceTargetSessions, origTargetSessionsKeys := map[string]*ProbingConfig_ProbingSession{}, map[string]bool{}
	newTargetSessions := make([]*ProbingConfig_ProbingSession, 0, len(o.TargetSessions))
	for _, sourceValue := range source.GetTargetSessions() {
		key := fmt.Sprintf("%s", sourceValue.GetTarget())
		sourceTargetSessions[key] = sourceValue
	}
	for _, origValue := range o.TargetSessions {
		key := fmt.Sprintf("%s", origValue.GetTarget())
		origTargetSessionsKeys[key] = true
		sourceValue := sourceTargetSessions[key]
		if sourceValue != nil {
			if origValue == nil {
				origValue = new(ProbingConfig_ProbingSession)
			}
			origValue.Merge(sourceValue)
		}
		newTargetSessions = append(newTargetSessions, origValue)
	}
	for key, sourceValue := range sourceTargetSessions {
		if origTargetSessionsKeys[key] == false {
			newTargetSessions = append(newTargetSessions, sourceValue.Clone())
		}
	}
	o.TargetSessions = newTargetSessions
	sort.Slice(o.TargetSessions, func(i, j int) bool {
		leftEl, rightEl := o.TargetSessions[i], o.TargetSessions[j]
		leftKey := fmt.Sprintf("%s", leftEl.GetTarget())
		rightKey := fmt.Sprintf("%s", rightEl.GetTarget())
		return leftKey < rightKey
	})

}

func (o *ProbingConfig_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingConfig_Spec))
}

func (o *ProbingConfig_Status) GotenObjectExt() {}

func (o *ProbingConfig_Status) MakeFullFieldMask() *ProbingConfig_Status_FieldMask {
	return FullProbingConfig_Status_FieldMask()
}

func (o *ProbingConfig_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingConfig_Status_FieldMask()
}

func (o *ProbingConfig_Status) MakeDiffFieldMask(other *ProbingConfig_Status) *ProbingConfig_Status_FieldMask {
	if o == nil && other == nil {
		return &ProbingConfig_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingConfig_Status_FieldMask()
	}

	res := &ProbingConfig_Status_FieldMask{}
	return res
}

func (o *ProbingConfig_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingConfig_Status))
}

func (o *ProbingConfig_Status) Clone() *ProbingConfig_Status {
	if o == nil {
		return nil
	}
	result := &ProbingConfig_Status{}
	return result
}

func (o *ProbingConfig_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingConfig_Status) Merge(source *ProbingConfig_Status) {
}

func (o *ProbingConfig_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingConfig_Status))
}

func (o *ProbingConfig_Spec_SpeedTest) GotenObjectExt() {}

func (o *ProbingConfig_Spec_SpeedTest) MakeFullFieldMask() *ProbingConfig_Spec_SpeedTest_FieldMask {
	return FullProbingConfig_Spec_SpeedTest_FieldMask()
}

func (o *ProbingConfig_Spec_SpeedTest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingConfig_Spec_SpeedTest_FieldMask()
}

func (o *ProbingConfig_Spec_SpeedTest) MakeDiffFieldMask(other *ProbingConfig_Spec_SpeedTest) *ProbingConfig_Spec_SpeedTest_FieldMask {
	if o == nil && other == nil {
		return &ProbingConfig_Spec_SpeedTest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingConfig_Spec_SpeedTest_FieldMask()
	}

	res := &ProbingConfig_Spec_SpeedTest_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled})
	}
	if o.GetIntervalMinutes() != other.GetIntervalMinutes() {
		res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes})
	}
	if !proto.Equal(o.GetInterval(), other.GetInterval()) {
		res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorInterval})
	}

	if len(o.GetServers()) == len(other.GetServers()) {
		for i, lValue := range o.GetServers() {
			rValue := other.GetServers()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorServers})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorServers})
	}
	return res
}

func (o *ProbingConfig_Spec_SpeedTest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingConfig_Spec_SpeedTest))
}

func (o *ProbingConfig_Spec_SpeedTest) Clone() *ProbingConfig_Spec_SpeedTest {
	if o == nil {
		return nil
	}
	result := &ProbingConfig_Spec_SpeedTest{}
	result.Enabled = o.Enabled
	result.IntervalMinutes = o.IntervalMinutes
	result.Interval = proto.Clone(o.Interval).(*duration.Duration)
	result.Servers = make([]*ProbingConfig_Spec_SpeedTest_Server, len(o.Servers))
	for i, sourceValue := range o.Servers {
		result.Servers[i] = sourceValue.Clone()
	}
	return result
}

func (o *ProbingConfig_Spec_SpeedTest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingConfig_Spec_SpeedTest) Merge(source *ProbingConfig_Spec_SpeedTest) {
	o.Enabled = source.GetEnabled()
	o.IntervalMinutes = source.GetIntervalMinutes()
	if source.GetInterval() != nil {
		if o.Interval == nil {
			o.Interval = new(duration.Duration)
		}
		proto.Merge(o.Interval, source.GetInterval())
	}
	sourceServers, origServersKeys := map[string]*ProbingConfig_Spec_SpeedTest_Server{}, map[string]bool{}
	newServers := make([]*ProbingConfig_Spec_SpeedTest_Server, 0, len(o.Servers))
	for _, sourceValue := range source.GetServers() {
		key := fmt.Sprintf("%s", sourceValue.GetName())
		sourceServers[key] = sourceValue
	}
	for _, origValue := range o.Servers {
		key := fmt.Sprintf("%s", origValue.GetName())
		origServersKeys[key] = true
		sourceValue := sourceServers[key]
		if sourceValue != nil {
			if origValue == nil {
				origValue = new(ProbingConfig_Spec_SpeedTest_Server)
			}
			origValue.Merge(sourceValue)
		}
		newServers = append(newServers, origValue)
	}
	for key, sourceValue := range sourceServers {
		if origServersKeys[key] == false {
			newServers = append(newServers, sourceValue.Clone())
		}
	}
	o.Servers = newServers

}

func (o *ProbingConfig_Spec_SpeedTest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingConfig_Spec_SpeedTest))
}

func (o *ProbingConfig_Spec_SpeedTest_Server) GotenObjectExt() {}

func (o *ProbingConfig_Spec_SpeedTest_Server) MakeFullFieldMask() *ProbingConfig_Spec_SpeedTest_Server_FieldMask {
	return FullProbingConfig_Spec_SpeedTest_Server_FieldMask()
}

func (o *ProbingConfig_Spec_SpeedTest_Server) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingConfig_Spec_SpeedTest_Server_FieldMask()
}

func (o *ProbingConfig_Spec_SpeedTest_Server) MakeDiffFieldMask(other *ProbingConfig_Spec_SpeedTest_Server) *ProbingConfig_Spec_SpeedTest_Server_FieldMask {
	if o == nil && other == nil {
		return &ProbingConfig_Spec_SpeedTest_Server_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingConfig_Spec_SpeedTest_Server_FieldMask()
	}

	res := &ProbingConfig_Spec_SpeedTest_Server_FieldMask{}
	if o.GetName() != other.GetName() {
		res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorName})
	}

	if len(o.GetIpAddresses()) == len(other.GetIpAddresses()) {
		for i, lValue := range o.GetIpAddresses() {
			rValue := other.GetIpAddresses()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses})
	}
	{
		subMask := o.GetLocation().MakeDiffFieldMask(other.GetLocation())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldSubPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation, subPath: subpath})
			}
		}
	}
	if o.GetTarget().String() != other.GetTarget().String() {
		res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget})
	}
	return res
}

func (o *ProbingConfig_Spec_SpeedTest_Server) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingConfig_Spec_SpeedTest_Server))
}

func (o *ProbingConfig_Spec_SpeedTest_Server) Clone() *ProbingConfig_Spec_SpeedTest_Server {
	if o == nil {
		return nil
	}
	result := &ProbingConfig_Spec_SpeedTest_Server{}
	result.Name = o.Name
	result.IpAddresses = make([]string, len(o.IpAddresses))
	for i, sourceValue := range o.IpAddresses {
		result.IpAddresses[i] = sourceValue
	}
	result.Location = o.Location.Clone()
	if o.Target == nil {
		result.Target = nil
	} else if data, err := o.Target.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Target = &probing_target.Name{}
		if err := result.Target.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ProbingConfig_Spec_SpeedTest_Server) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingConfig_Spec_SpeedTest_Server) Merge(source *ProbingConfig_Spec_SpeedTest_Server) {
	o.Name = source.GetName()
	for _, sourceValue := range source.GetIpAddresses() {
		exists := false
		for _, currentValue := range o.IpAddresses {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.IpAddresses = append(o.IpAddresses, newDstElement)
		}
	}

	if source.GetLocation() != nil {
		if o.Location == nil {
			o.Location = new(common.Location)
		}
		o.Location.Merge(source.GetLocation())
	}
	if source.GetTarget() != nil {
		if data, err := source.GetTarget().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Target = &probing_target.Name{}
			if err := o.Target.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Target = nil
	}
}

func (o *ProbingConfig_Spec_SpeedTest_Server) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingConfig_Spec_SpeedTest_Server))
}
