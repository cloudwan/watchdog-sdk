// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_config.proto
// DO NOT EDIT!!!

package probing_config

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingConfig_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingConfig_FieldPathSelector
	Get(source *ProbingConfig) []interface{}
	GetSingle(source *ProbingConfig) (interface{}, bool)
	ClearValue(item *ProbingConfig)

	// Those methods build corresponding ProbingConfig_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingConfig_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingConfig_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingConfig_FieldPathArrayItemValue
}

type ProbingConfig_FieldPathSelector int32

const (
	ProbingConfig_FieldPathSelectorName        ProbingConfig_FieldPathSelector = 0
	ProbingConfig_FieldPathSelectorDisplayName ProbingConfig_FieldPathSelector = 1
	ProbingConfig_FieldPathSelectorMetadata    ProbingConfig_FieldPathSelector = 2
	ProbingConfig_FieldPathSelectorSpec        ProbingConfig_FieldPathSelector = 3
	ProbingConfig_FieldPathSelectorStatus      ProbingConfig_FieldPathSelector = 4
)

func (s ProbingConfig_FieldPathSelector) String() string {
	switch s {
	case ProbingConfig_FieldPathSelectorName:
		return "name"
	case ProbingConfig_FieldPathSelectorDisplayName:
		return "display_name"
	case ProbingConfig_FieldPathSelectorMetadata:
		return "metadata"
	case ProbingConfig_FieldPathSelectorSpec:
		return "spec"
	case ProbingConfig_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", s))
	}
}

func BuildProbingConfig_FieldPath(fp gotenobject.RawFieldPath) (ProbingConfig_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingConfig")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorDisplayName}, nil
		case "metadata":
			return &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorMetadata}, nil
		case "spec":
			return &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorSpec}, nil
		case "status":
			return &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfig_FieldSubPath{selector: ProbingConfig_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildProbingConfigSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfig_FieldSubPath{selector: ProbingConfig_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildProbingConfigStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfig_FieldSubPath{selector: ProbingConfig_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingConfig", fp)
}

func ParseProbingConfig_FieldPath(rawField string) (ProbingConfig_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingConfig_FieldPath(fp)
}

func MustParseProbingConfig_FieldPath(rawField string) ProbingConfig_FieldPath {
	fp, err := ParseProbingConfig_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingConfig_FieldTerminalPath struct {
	selector ProbingConfig_FieldPathSelector
}

var _ ProbingConfig_FieldPath = (*ProbingConfig_FieldTerminalPath)(nil)

func (fp *ProbingConfig_FieldTerminalPath) Selector() ProbingConfig_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingConfig_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingConfig_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingConfig
func (fp *ProbingConfig_FieldTerminalPath) Get(source *ProbingConfig) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingConfig_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProbingConfig_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case ProbingConfig_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case ProbingConfig_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case ProbingConfig_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingConfig_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingConfig))
}

// GetSingle returns value pointed by specific field of from source ProbingConfig
func (fp *ProbingConfig_FieldTerminalPath) GetSingle(source *ProbingConfig) (interface{}, bool) {
	switch fp.selector {
	case ProbingConfig_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProbingConfig_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case ProbingConfig_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ProbingConfig_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case ProbingConfig_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fp.selector))
	}
}

func (fp *ProbingConfig_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingConfig))
}

// GetDefault returns a default value of the field type
func (fp *ProbingConfig_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingConfig_FieldPathSelectorName:
		return (*Name)(nil)
	case ProbingConfig_FieldPathSelectorDisplayName:
		return ""
	case ProbingConfig_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case ProbingConfig_FieldPathSelectorSpec:
		return (*ProbingConfig_Spec)(nil)
	case ProbingConfig_FieldPathSelectorStatus:
		return (*ProbingConfig_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fp.selector))
	}
}

func (fp *ProbingConfig_FieldTerminalPath) ClearValue(item *ProbingConfig) {
	if item != nil {
		switch fp.selector {
		case ProbingConfig_FieldPathSelectorName:
			item.Name = nil
		case ProbingConfig_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case ProbingConfig_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ProbingConfig_FieldPathSelectorSpec:
			item.Spec = nil
		case ProbingConfig_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fp.selector))
		}
	}
}

func (fp *ProbingConfig_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingConfig))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingConfig_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingConfig_FieldPathSelectorName ||
		fp.selector == ProbingConfig_FieldPathSelectorDisplayName
}

func (fp *ProbingConfig_FieldTerminalPath) WithIValue(value interface{}) ProbingConfig_FieldPathValue {
	switch fp.selector {
	case ProbingConfig_FieldPathSelectorName:
		return &ProbingConfig_FieldTerminalPathValue{ProbingConfig_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProbingConfig_FieldPathSelectorDisplayName:
		return &ProbingConfig_FieldTerminalPathValue{ProbingConfig_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingConfig_FieldPathSelectorMetadata:
		return &ProbingConfig_FieldTerminalPathValue{ProbingConfig_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case ProbingConfig_FieldPathSelectorSpec:
		return &ProbingConfig_FieldTerminalPathValue{ProbingConfig_FieldTerminalPath: *fp, value: value.(*ProbingConfig_Spec)}
	case ProbingConfig_FieldPathSelectorStatus:
		return &ProbingConfig_FieldTerminalPathValue{ProbingConfig_FieldTerminalPath: *fp, value: value.(*ProbingConfig_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fp.selector))
	}
}

func (fp *ProbingConfig_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingConfig_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingConfig_FieldPathArrayOfValues {
	fpaov := &ProbingConfig_FieldTerminalPathArrayOfValues{ProbingConfig_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingConfig_FieldPathSelectorName:
		return &ProbingConfig_FieldTerminalPathArrayOfValues{ProbingConfig_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProbingConfig_FieldPathSelectorDisplayName:
		return &ProbingConfig_FieldTerminalPathArrayOfValues{ProbingConfig_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingConfig_FieldPathSelectorMetadata:
		return &ProbingConfig_FieldTerminalPathArrayOfValues{ProbingConfig_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case ProbingConfig_FieldPathSelectorSpec:
		return &ProbingConfig_FieldTerminalPathArrayOfValues{ProbingConfig_FieldTerminalPath: *fp, values: values.([]*ProbingConfig_Spec)}
	case ProbingConfig_FieldPathSelectorStatus:
		return &ProbingConfig_FieldTerminalPathArrayOfValues{ProbingConfig_FieldTerminalPath: *fp, values: values.([]*ProbingConfig_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingConfig_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingConfig_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingConfig_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fp.selector))
	}
}

func (fp *ProbingConfig_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingConfig_FieldSubPath struct {
	selector ProbingConfig_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingConfig_FieldPath = (*ProbingConfig_FieldSubPath)(nil)

func (fps *ProbingConfig_FieldSubPath) Selector() ProbingConfig_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingConfig_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *ProbingConfig_FieldSubPath) AsSpecSubPath() (ProbingConfigSpec_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingConfigSpec_FieldPath)
	return res, ok
}
func (fps *ProbingConfig_FieldSubPath) AsStatusSubPath() (ProbingConfigStatus_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingConfigStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingConfig_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingConfig_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingConfig
func (fps *ProbingConfig_FieldSubPath) Get(source *ProbingConfig) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else if asStatusFieldPath, ok := fps.AsStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStatus())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fps.selector))
	}
	return
}

func (fps *ProbingConfig_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingConfig))
}

// GetSingle returns value of selected field from source ProbingConfig
func (fps *ProbingConfig_FieldSubPath) GetSingle(source *ProbingConfig) (interface{}, bool) {
	switch fps.selector {
	case ProbingConfig_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case ProbingConfig_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case ProbingConfig_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fps.selector))
	}
}

func (fps *ProbingConfig_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingConfig))
}

// GetDefault returns a default value of the field type
func (fps *ProbingConfig_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingConfig_FieldSubPath) ClearValue(item *ProbingConfig) {
	if item != nil {
		switch fps.selector {
		case ProbingConfig_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case ProbingConfig_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case ProbingConfig_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fps.selector))
		}
	}
}

func (fps *ProbingConfig_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingConfig))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingConfig_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingConfig_FieldSubPath) WithIValue(value interface{}) ProbingConfig_FieldPathValue {
	return &ProbingConfig_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingConfig_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingConfig_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingConfig_FieldPathArrayOfValues {
	return &ProbingConfig_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingConfig_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingConfig_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingConfig_FieldPathArrayItemValue {
	return &ProbingConfig_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingConfig_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingConfig_FieldPathValue allows storing values for ProbingConfig fields according to their type
type ProbingConfig_FieldPathValue interface {
	ProbingConfig_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingConfig)
	CompareWith(*ProbingConfig) (cmp int, comparable bool)
}

func ParseProbingConfig_FieldPathValue(pathStr, valueStr string) (ProbingConfig_FieldPathValue, error) {
	fp, err := ParseProbingConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingConfig field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingConfig_FieldPathValue), nil
}

func MustParseProbingConfig_FieldPathValue(pathStr, valueStr string) ProbingConfig_FieldPathValue {
	fpv, err := ParseProbingConfig_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingConfig_FieldTerminalPathValue struct {
	ProbingConfig_FieldTerminalPath
	value interface{}
}

var _ ProbingConfig_FieldPathValue = (*ProbingConfig_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbingConfig' as interface{}
func (fpv *ProbingConfig_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingConfig_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProbingConfig_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingConfig_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *ProbingConfig_FieldTerminalPathValue) AsSpecValue() (*ProbingConfig_Spec, bool) {
	res, ok := fpv.value.(*ProbingConfig_Spec)
	return res, ok
}
func (fpv *ProbingConfig_FieldTerminalPathValue) AsStatusValue() (*ProbingConfig_Status, bool) {
	res, ok := fpv.value.(*ProbingConfig_Status)
	return res, ok
}

// SetTo stores value for selected field for object ProbingConfig
func (fpv *ProbingConfig_FieldTerminalPathValue) SetTo(target **ProbingConfig) {
	if *target == nil {
		*target = new(ProbingConfig)
	}
	switch fpv.selector {
	case ProbingConfig_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProbingConfig_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case ProbingConfig_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case ProbingConfig_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*ProbingConfig_Spec)
	case ProbingConfig_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*ProbingConfig_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fpv.selector))
	}
}

func (fpv *ProbingConfig_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingConfig_FieldTerminalPathValue' with the value under path in 'ProbingConfig'.
func (fpv *ProbingConfig_FieldTerminalPathValue) CompareWith(source *ProbingConfig) (int, bool) {
	switch fpv.selector {
	case ProbingConfig_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfig_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfig_FieldPathSelectorMetadata:
		return 0, false
	case ProbingConfig_FieldPathSelectorSpec:
		return 0, false
	case ProbingConfig_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fpv.selector))
	}
}

func (fpv *ProbingConfig_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingConfig))
}

type ProbingConfig_FieldSubPathValue struct {
	ProbingConfig_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingConfig_FieldPathValue = (*ProbingConfig_FieldSubPathValue)(nil)

func (fpvs *ProbingConfig_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingConfig_FieldSubPathValue) AsSpecPathValue() (ProbingConfigSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingConfigSpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingConfig_FieldSubPathValue) AsStatusPathValue() (ProbingConfigStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingConfigStatus_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingConfig_FieldSubPathValue) SetTo(target **ProbingConfig) {
	if *target == nil {
		*target = new(ProbingConfig)
	}
	switch fpvs.Selector() {
	case ProbingConfig_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case ProbingConfig_FieldPathSelectorSpec:
		fpvs.subPathValue.(ProbingConfigSpec_FieldPathValue).SetTo(&(*target).Spec)
	case ProbingConfig_FieldPathSelectorStatus:
		fpvs.subPathValue.(ProbingConfigStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfig_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingConfig_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingConfig_FieldSubPathValue) CompareWith(source *ProbingConfig) (int, bool) {
	switch fpvs.Selector() {
	case ProbingConfig_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case ProbingConfig_FieldPathSelectorSpec:
		return fpvs.subPathValue.(ProbingConfigSpec_FieldPathValue).CompareWith(source.GetSpec())
	case ProbingConfig_FieldPathSelectorStatus:
		return fpvs.subPathValue.(ProbingConfigStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfig_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingConfig))
}

// ProbingConfig_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbingConfig according to their type
// Present only for array (repeated) types.
type ProbingConfig_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingConfig_FieldPath
	ContainsValue(*ProbingConfig) bool
}

// ParseProbingConfig_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingConfig_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingConfig_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingConfig field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingConfig_FieldPathArrayItemValue), nil
}

func MustParseProbingConfig_FieldPathArrayItemValue(pathStr, valueStr string) ProbingConfig_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingConfig_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingConfig_FieldTerminalPathArrayItemValue struct {
	ProbingConfig_FieldTerminalPath
	value interface{}
}

var _ ProbingConfig_FieldPathArrayItemValue = (*ProbingConfig_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingConfig as interface{}
func (fpaiv *ProbingConfig_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingConfig_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingConfig) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingConfig_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingConfig))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingConfig'
func (fpaiv *ProbingConfig_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingConfig) bool {
	slice := fpaiv.ProbingConfig_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingConfig_FieldSubPathArrayItemValue struct {
	ProbingConfig_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingConfig_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingConfig_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingConfig_FieldSubPathArrayItemValue) AsSpecPathItemValue() (ProbingConfigSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingConfigSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingConfig_FieldSubPathArrayItemValue) AsStatusPathItemValue() (ProbingConfigStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingConfigStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingConfig'
func (fpaivs *ProbingConfig_FieldSubPathArrayItemValue) ContainsValue(source *ProbingConfig) bool {
	switch fpaivs.Selector() {
	case ProbingConfig_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case ProbingConfig_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(ProbingConfigSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case ProbingConfig_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(ProbingConfigStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig: %d", fpaivs.Selector()))
	}
}

// ProbingConfig_FieldPathArrayOfValues allows storing slice of values for ProbingConfig fields according to their type
type ProbingConfig_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingConfig_FieldPath
}

func ParseProbingConfig_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingConfig_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingConfig_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingConfig field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingConfig_FieldPathArrayOfValues), nil
}

func MustParseProbingConfig_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingConfig_FieldPathArrayOfValues {
	fpaov, err := ParseProbingConfig_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingConfig_FieldTerminalPathArrayOfValues struct {
	ProbingConfig_FieldTerminalPath
	values interface{}
}

var _ ProbingConfig_FieldPathArrayOfValues = (*ProbingConfig_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingConfig_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingConfig_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProbingConfig_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingConfig_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case ProbingConfig_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*ProbingConfig_Spec) {
			values = append(values, v)
		}
	case ProbingConfig_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*ProbingConfig_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingConfig_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProbingConfig_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingConfig_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *ProbingConfig_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*ProbingConfig_Spec, bool) {
	res, ok := fpaov.values.([]*ProbingConfig_Spec)
	return res, ok
}
func (fpaov *ProbingConfig_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*ProbingConfig_Status, bool) {
	res, ok := fpaov.values.([]*ProbingConfig_Status)
	return res, ok
}

type ProbingConfig_FieldSubPathArrayOfValues struct {
	ProbingConfig_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingConfig_FieldPathArrayOfValues = (*ProbingConfig_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingConfig_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingConfig_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingConfig_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (ProbingConfigSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingConfigSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingConfig_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (ProbingConfigStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingConfigStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingConfigProbingSession_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingConfigProbingSession_FieldPathSelector
	Get(source *ProbingConfig_ProbingSession) []interface{}
	GetSingle(source *ProbingConfig_ProbingSession) (interface{}, bool)
	ClearValue(item *ProbingConfig_ProbingSession)

	// Those methods build corresponding ProbingConfigProbingSession_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingConfigProbingSession_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingConfigProbingSession_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingConfigProbingSession_FieldPathArrayItemValue
}

type ProbingConfigProbingSession_FieldPathSelector int32

const (
	ProbingConfigProbingSession_FieldPathSelectorTarget             ProbingConfigProbingSession_FieldPathSelector = 0
	ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName  ProbingConfigProbingSession_FieldPathSelector = 1
	ProbingConfigProbingSession_FieldPathSelectorTargetGroup        ProbingConfigProbingSession_FieldPathSelector = 2
	ProbingConfigProbingSession_FieldPathSelectorMode               ProbingConfigProbingSession_FieldPathSelector = 3
	ProbingConfigProbingSession_FieldPathSelectorIpVersion          ProbingConfigProbingSession_FieldPathSelector = 4
	ProbingConfigProbingSession_FieldPathSelectorAddress            ProbingConfigProbingSession_FieldPathSelector = 5
	ProbingConfigProbingSession_FieldPathSelectorGroupName          ProbingConfigProbingSession_FieldPathSelector = 6
	ProbingConfigProbingSession_FieldPathSelectorCategory           ProbingConfigProbingSession_FieldPathSelector = 7
	ProbingConfigProbingSession_FieldPathSelectorLocationType       ProbingConfigProbingSession_FieldPathSelector = 8
	ProbingConfigProbingSession_FieldPathSelectorLocation           ProbingConfigProbingSession_FieldPathSelector = 9
	ProbingConfigProbingSession_FieldPathSelectorIntervalSec        ProbingConfigProbingSession_FieldPathSelector = 10
	ProbingConfigProbingSession_FieldPathSelectorInterval           ProbingConfigProbingSession_FieldPathSelector = 11
	ProbingConfigProbingSession_FieldPathSelectorTos                ProbingConfigProbingSession_FieldPathSelector = 12
	ProbingConfigProbingSession_FieldPathSelectorWindowSize         ProbingConfigProbingSession_FieldPathSelector = 13
	ProbingConfigProbingSession_FieldPathSelectorPathProbing        ProbingConfigProbingSession_FieldPathSelector = 14
	ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings  ProbingConfigProbingSession_FieldPathSelector = 15
	ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig  ProbingConfigProbingSession_FieldPathSelector = 16
	ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration ProbingConfigProbingSession_FieldPathSelector = 17
	ProbingConfigProbingSession_FieldPathSelectorAddresses          ProbingConfigProbingSession_FieldPathSelector = 18
)

func (s ProbingConfigProbingSession_FieldPathSelector) String() string {
	switch s {
	case ProbingConfigProbingSession_FieldPathSelectorTarget:
		return "target"
	case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
		return "target_display_name"
	case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
		return "target_group"
	case ProbingConfigProbingSession_FieldPathSelectorMode:
		return "mode"
	case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
		return "ip_version"
	case ProbingConfigProbingSession_FieldPathSelectorAddress:
		return "address"
	case ProbingConfigProbingSession_FieldPathSelectorGroupName:
		return "group_name"
	case ProbingConfigProbingSession_FieldPathSelectorCategory:
		return "category"
	case ProbingConfigProbingSession_FieldPathSelectorLocationType:
		return "location_type"
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		return "location"
	case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
		return "interval_sec"
	case ProbingConfigProbingSession_FieldPathSelectorInterval:
		return "interval"
	case ProbingConfigProbingSession_FieldPathSelectorTos:
		return "tos"
	case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
		return "window_size"
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		return "path_probing"
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		return "speedtest_settings"
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		return "http_probing_config"
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		return "proxy_configuration"
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		return "addresses"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", s))
	}
}

func BuildProbingConfigProbingSession_FieldPath(fp gotenobject.RawFieldPath) (ProbingConfigProbingSession_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingConfig_ProbingSession")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "target":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTarget}, nil
		case "target_display_name", "targetDisplayName", "target-display-name":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName}, nil
		case "target_group", "targetGroup", "target-group":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTargetGroup}, nil
		case "mode":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorMode}, nil
		case "ip_version", "ipVersion", "ip-version":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorIpVersion}, nil
		case "address":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorAddress}, nil
		case "group_name", "groupName", "group-name":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorGroupName}, nil
		case "category":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorCategory}, nil
		case "location_type", "locationType", "location-type":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorLocationType}, nil
		case "location":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorLocation}, nil
		case "interval_sec", "intervalSec", "interval-sec":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorIntervalSec}, nil
		case "interval":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorInterval}, nil
		case "tos":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTos}, nil
		case "window_size", "windowSize", "window-size":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorWindowSize}, nil
		case "path_probing", "pathProbing", "path-probing":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorPathProbing}, nil
		case "speedtest_settings", "speedtestSettings", "speedtest-settings":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings}, nil
		case "http_probing_config", "httpProbingConfig", "http-probing-config":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig}, nil
		case "proxy_configuration", "proxyConfiguration", "proxy-configuration":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration}, nil
		case "addresses":
			return &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorAddresses}, nil
		}
	} else {
		switch fp[0] {
		case "location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "path_probing", "pathProbing", "path-probing":
			if subpath, err := common.BuildPathProbe_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorPathProbing, subPath: subpath}, nil
			}
		case "speedtest_settings", "speedtestSettings", "speedtest-settings":
			if subpath, err := common.BuildSpeedTestSettings_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings, subPath: subpath}, nil
			}
		case "http_probing_config", "httpProbingConfig", "http-probing-config":
			if subpath, err := common.BuildHTTPProbingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig, subPath: subpath}, nil
			}
		case "proxy_configuration", "proxyConfiguration", "proxy-configuration":
			if subpath, err := common.BuildProxyConfiguration_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigProbingSession_FieldSubPath{selector: ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingConfig_ProbingSession", fp)
}

func ParseProbingConfigProbingSession_FieldPath(rawField string) (ProbingConfigProbingSession_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingConfigProbingSession_FieldPath(fp)
}

func MustParseProbingConfigProbingSession_FieldPath(rawField string) ProbingConfigProbingSession_FieldPath {
	fp, err := ParseProbingConfigProbingSession_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingConfigProbingSession_FieldTerminalPath struct {
	selector ProbingConfigProbingSession_FieldPathSelector
}

var _ ProbingConfigProbingSession_FieldPath = (*ProbingConfigProbingSession_FieldTerminalPath)(nil)

func (fp *ProbingConfigProbingSession_FieldTerminalPath) Selector() ProbingConfigProbingSession_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingConfigProbingSession_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingConfigProbingSession_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingConfig_ProbingSession
func (fp *ProbingConfigProbingSession_FieldTerminalPath) Get(source *ProbingConfig_ProbingSession) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingConfigProbingSession_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
			values = append(values, source.TargetDisplayName)
		case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
			if source.TargetGroup != nil {
				values = append(values, source.TargetGroup)
			}
		case ProbingConfigProbingSession_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
			values = append(values, source.IpVersion)
		case ProbingConfigProbingSession_FieldPathSelectorAddress:
			values = append(values, source.Address)
		case ProbingConfigProbingSession_FieldPathSelectorGroupName:
			values = append(values, source.GroupName)
		case ProbingConfigProbingSession_FieldPathSelectorCategory:
			values = append(values, source.Category)
		case ProbingConfigProbingSession_FieldPathSelectorLocationType:
			values = append(values, source.LocationType)
		case ProbingConfigProbingSession_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
			values = append(values, source.IntervalSec)
		case ProbingConfigProbingSession_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case ProbingConfigProbingSession_FieldPathSelectorTos:
			values = append(values, source.Tos)
		case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
			values = append(values, source.WindowSize)
		case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
			if source.PathProbing != nil {
				values = append(values, source.PathProbing)
			}
		case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
			if source.SpeedtestSettings != nil {
				values = append(values, source.SpeedtestSettings)
			}
		case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
			if source.HttpProbingConfig != nil {
				values = append(values, source.HttpProbingConfig)
			}
		case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
			if source.ProxyConfiguration != nil {
				values = append(values, source.ProxyConfiguration)
			}
		case ProbingConfigProbingSession_FieldPathSelectorAddresses:
			for _, value := range source.GetAddresses() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingConfig_ProbingSession))
}

// GetSingle returns value pointed by specific field of from source ProbingConfig_ProbingSession
func (fp *ProbingConfigProbingSession_FieldTerminalPath) GetSingle(source *ProbingConfig_ProbingSession) (interface{}, bool) {
	switch fp.selector {
	case ProbingConfigProbingSession_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
		return source.GetTargetDisplayName(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
		res := source.GetTargetGroup()
		return res, res != nil
	case ProbingConfigProbingSession_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
		return source.GetIpVersion(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorAddress:
		return source.GetAddress(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorGroupName:
		return source.GetGroupName(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorCategory:
		return source.GetCategory(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorLocationType:
		return source.GetLocationType(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
		return source.GetIntervalSec(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case ProbingConfigProbingSession_FieldPathSelectorTos:
		return source.GetTos(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
		return source.GetWindowSize(), source != nil
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		res := source.GetPathProbing()
		return res, res != nil
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		res := source.GetSpeedtestSettings()
		return res, res != nil
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		res := source.GetHttpProbingConfig()
		return res, res != nil
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		res := source.GetProxyConfiguration()
		return res, res != nil
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		res := source.GetAddresses()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fp.selector))
	}
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingConfig_ProbingSession))
}

// GetDefault returns a default value of the field type
func (fp *ProbingConfigProbingSession_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingConfigProbingSession_FieldPathSelectorTarget:
		return (*probing_target.Name)(nil)
	case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
		return ""
	case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
		return (*probing_target_group.Reference)(nil)
	case ProbingConfigProbingSession_FieldPathSelectorMode:
		return common.ProbingMode_PROBING_MODE_UNSPECIFIED
	case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
		return common.IpVersion_IP_VERSION_UNSPECIFIED
	case ProbingConfigProbingSession_FieldPathSelectorAddress:
		return ""
	case ProbingConfigProbingSession_FieldPathSelectorGroupName:
		return ""
	case ProbingConfigProbingSession_FieldPathSelectorCategory:
		return ""
	case ProbingConfigProbingSession_FieldPathSelectorLocationType:
		return common.LocationType_LOCATION_TYPE_UNSPECIFIED
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		return (*common.Location)(nil)
	case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
		return int64(0)
	case ProbingConfigProbingSession_FieldPathSelectorInterval:
		return (*duration.Duration)(nil)
	case ProbingConfigProbingSession_FieldPathSelectorTos:
		return uint32(0)
	case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
		return uint32(0)
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		return (*common.PathProbe)(nil)
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		return (*common.SpeedTestSettings)(nil)
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		return (*common.HTTPProbingConfig)(nil)
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		return (*common.ProxyConfiguration)(nil)
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fp.selector))
	}
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) ClearValue(item *ProbingConfig_ProbingSession) {
	if item != nil {
		switch fp.selector {
		case ProbingConfigProbingSession_FieldPathSelectorTarget:
			item.Target = nil
		case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
			item.TargetDisplayName = ""
		case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
			item.TargetGroup = nil
		case ProbingConfigProbingSession_FieldPathSelectorMode:
			item.Mode = common.ProbingMode_PROBING_MODE_UNSPECIFIED
		case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
			item.IpVersion = common.IpVersion_IP_VERSION_UNSPECIFIED
		case ProbingConfigProbingSession_FieldPathSelectorAddress:
			item.Address = ""
		case ProbingConfigProbingSession_FieldPathSelectorGroupName:
			item.GroupName = ""
		case ProbingConfigProbingSession_FieldPathSelectorCategory:
			item.Category = ""
		case ProbingConfigProbingSession_FieldPathSelectorLocationType:
			item.LocationType = common.LocationType_LOCATION_TYPE_UNSPECIFIED
		case ProbingConfigProbingSession_FieldPathSelectorLocation:
			item.Location = nil
		case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
			item.IntervalSec = int64(0)
		case ProbingConfigProbingSession_FieldPathSelectorInterval:
			item.Interval = nil
		case ProbingConfigProbingSession_FieldPathSelectorTos:
			item.Tos = uint32(0)
		case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
			item.WindowSize = uint32(0)
		case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
			item.PathProbing = nil
		case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
			item.SpeedtestSettings = nil
		case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
			item.HttpProbingConfig = nil
		case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
			item.ProxyConfiguration = nil
		case ProbingConfigProbingSession_FieldPathSelectorAddresses:
			item.Addresses = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fp.selector))
		}
	}
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingConfig_ProbingSession))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingConfigProbingSession_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingConfigProbingSession_FieldPathSelectorTarget ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorTargetGroup ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorMode ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorIpVersion ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorAddress ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorGroupName ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorCategory ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorLocationType ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorIntervalSec ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorInterval ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorTos ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorWindowSize ||
		fp.selector == ProbingConfigProbingSession_FieldPathSelectorAddresses
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) WithIValue(value interface{}) ProbingConfigProbingSession_FieldPathValue {
	switch fp.selector {
	case ProbingConfigProbingSession_FieldPathSelectorTarget:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(*probing_target.Name)}
	case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(*probing_target_group.Reference)}
	case ProbingConfigProbingSession_FieldPathSelectorMode:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(common.ProbingMode)}
	case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(common.IpVersion)}
	case ProbingConfigProbingSession_FieldPathSelectorAddress:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingConfigProbingSession_FieldPathSelectorGroupName:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingConfigProbingSession_FieldPathSelectorCategory:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingConfigProbingSession_FieldPathSelectorLocationType:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(common.LocationType)}
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbingConfigProbingSession_FieldPathSelectorInterval:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case ProbingConfigProbingSession_FieldPathSelectorTos:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(uint32)}
	case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(uint32)}
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(*common.PathProbe)}
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(*common.SpeedTestSettings)}
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(*common.HTTPProbingConfig)}
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(*common.ProxyConfiguration)}
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		return &ProbingConfigProbingSession_FieldTerminalPathValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fp.selector))
	}
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingConfigProbingSession_FieldPathArrayOfValues {
	fpaov := &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingConfigProbingSession_FieldPathSelectorTarget:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]*probing_target.Name)}
	case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Reference)}
	case ProbingConfigProbingSession_FieldPathSelectorMode:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]common.ProbingMode)}
	case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]common.IpVersion)}
	case ProbingConfigProbingSession_FieldPathSelectorAddress:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingConfigProbingSession_FieldPathSelectorGroupName:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingConfigProbingSession_FieldPathSelectorCategory:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingConfigProbingSession_FieldPathSelectorLocationType:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]common.LocationType)}
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbingConfigProbingSession_FieldPathSelectorInterval:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case ProbingConfigProbingSession_FieldPathSelectorTos:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]uint32)}
	case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]uint32)}
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]*common.PathProbe)}
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]*common.SpeedTestSettings)}
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]*common.HTTPProbingConfig)}
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([]*common.ProxyConfiguration)}
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayOfValues{ProbingConfigProbingSession_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingConfigProbingSession_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		return &ProbingConfigProbingSession_FieldTerminalPathArrayItemValue{ProbingConfigProbingSession_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fp.selector))
	}
}

func (fp *ProbingConfigProbingSession_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingConfigProbingSession_FieldSubPath struct {
	selector ProbingConfigProbingSession_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingConfigProbingSession_FieldPath = (*ProbingConfigProbingSession_FieldSubPath)(nil)

func (fps *ProbingConfigProbingSession_FieldSubPath) Selector() ProbingConfigProbingSession_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingConfigProbingSession_FieldSubPath) AsLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *ProbingConfigProbingSession_FieldSubPath) AsPathProbingSubPath() (common.PathProbe_FieldPath, bool) {
	res, ok := fps.subPath.(common.PathProbe_FieldPath)
	return res, ok
}
func (fps *ProbingConfigProbingSession_FieldSubPath) AsSpeedtestSettingsSubPath() (common.SpeedTestSettings_FieldPath, bool) {
	res, ok := fps.subPath.(common.SpeedTestSettings_FieldPath)
	return res, ok
}
func (fps *ProbingConfigProbingSession_FieldSubPath) AsHttpProbingConfigSubPath() (common.HTTPProbingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(common.HTTPProbingConfig_FieldPath)
	return res, ok
}
func (fps *ProbingConfigProbingSession_FieldSubPath) AsProxyConfigurationSubPath() (common.ProxyConfiguration_FieldPath, bool) {
	res, ok := fps.subPath.(common.ProxyConfiguration_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingConfigProbingSession_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingConfigProbingSession_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingConfig_ProbingSession
func (fps *ProbingConfigProbingSession_FieldSubPath) Get(source *ProbingConfig_ProbingSession) (values []interface{}) {
	if asLocationFieldPath, ok := fps.AsLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetLocation())...)
	} else if asPathProbeFieldPath, ok := fps.AsPathProbingSubPath(); ok {
		values = append(values, asPathProbeFieldPath.Get(source.GetPathProbing())...)
	} else if asSpeedTestSettingsFieldPath, ok := fps.AsSpeedtestSettingsSubPath(); ok {
		values = append(values, asSpeedTestSettingsFieldPath.Get(source.GetSpeedtestSettings())...)
	} else if asHTTPProbingConfigFieldPath, ok := fps.AsHttpProbingConfigSubPath(); ok {
		values = append(values, asHTTPProbingConfigFieldPath.Get(source.GetHttpProbingConfig())...)
	} else if asProxyConfigurationFieldPath, ok := fps.AsProxyConfigurationSubPath(); ok {
		values = append(values, asProxyConfigurationFieldPath.Get(source.GetProxyConfiguration())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fps.selector))
	}
	return
}

func (fps *ProbingConfigProbingSession_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingConfig_ProbingSession))
}

// GetSingle returns value of selected field from source ProbingConfig_ProbingSession
func (fps *ProbingConfigProbingSession_FieldSubPath) GetSingle(source *ProbingConfig_ProbingSession) (interface{}, bool) {
	switch fps.selector {
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		if source.GetPathProbing() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPathProbing())
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		if source.GetSpeedtestSettings() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpeedtestSettings())
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		if source.GetHttpProbingConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHttpProbingConfig())
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		if source.GetProxyConfiguration() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProxyConfiguration())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fps.selector))
	}
}

func (fps *ProbingConfigProbingSession_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingConfig_ProbingSession))
}

// GetDefault returns a default value of the field type
func (fps *ProbingConfigProbingSession_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingConfigProbingSession_FieldSubPath) ClearValue(item *ProbingConfig_ProbingSession) {
	if item != nil {
		switch fps.selector {
		case ProbingConfigProbingSession_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
			fps.subPath.ClearValueRaw(item.PathProbing)
		case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
			fps.subPath.ClearValueRaw(item.SpeedtestSettings)
		case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
			fps.subPath.ClearValueRaw(item.HttpProbingConfig)
		case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
			fps.subPath.ClearValueRaw(item.ProxyConfiguration)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fps.selector))
		}
	}
}

func (fps *ProbingConfigProbingSession_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingConfig_ProbingSession))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingConfigProbingSession_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingConfigProbingSession_FieldSubPath) WithIValue(value interface{}) ProbingConfigProbingSession_FieldPathValue {
	return &ProbingConfigProbingSession_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingConfigProbingSession_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingConfigProbingSession_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingConfigProbingSession_FieldPathArrayOfValues {
	return &ProbingConfigProbingSession_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingConfigProbingSession_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingConfigProbingSession_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingConfigProbingSession_FieldPathArrayItemValue {
	return &ProbingConfigProbingSession_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingConfigProbingSession_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingConfigProbingSession_FieldPathValue allows storing values for ProbingSession fields according to their type
type ProbingConfigProbingSession_FieldPathValue interface {
	ProbingConfigProbingSession_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingConfig_ProbingSession)
	CompareWith(*ProbingConfig_ProbingSession) (cmp int, comparable bool)
}

func ParseProbingConfigProbingSession_FieldPathValue(pathStr, valueStr string) (ProbingConfigProbingSession_FieldPathValue, error) {
	fp, err := ParseProbingConfigProbingSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingSession field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingConfigProbingSession_FieldPathValue), nil
}

func MustParseProbingConfigProbingSession_FieldPathValue(pathStr, valueStr string) ProbingConfigProbingSession_FieldPathValue {
	fpv, err := ParseProbingConfigProbingSession_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingConfigProbingSession_FieldTerminalPathValue struct {
	ProbingConfigProbingSession_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigProbingSession_FieldPathValue = (*ProbingConfigProbingSession_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbingSession' as interface{}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsTargetValue() (*probing_target.Name, bool) {
	res, ok := fpv.value.(*probing_target.Name)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsTargetDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsTargetGroupValue() (*probing_target_group.Reference, bool) {
	res, ok := fpv.value.(*probing_target_group.Reference)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsModeValue() (common.ProbingMode, bool) {
	res, ok := fpv.value.(common.ProbingMode)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsIpVersionValue() (common.IpVersion, bool) {
	res, ok := fpv.value.(common.IpVersion)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsGroupNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsCategoryValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsLocationTypeValue() (common.LocationType, bool) {
	res, ok := fpv.value.(common.LocationType)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsIntervalSecValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsIntervalValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsTosValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsWindowSizeValue() (uint32, bool) {
	res, ok := fpv.value.(uint32)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsPathProbingValue() (*common.PathProbe, bool) {
	res, ok := fpv.value.(*common.PathProbe)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsSpeedtestSettingsValue() (*common.SpeedTestSettings, bool) {
	res, ok := fpv.value.(*common.SpeedTestSettings)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsHttpProbingConfigValue() (*common.HTTPProbingConfig, bool) {
	res, ok := fpv.value.(*common.HTTPProbingConfig)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsProxyConfigurationValue() (*common.ProxyConfiguration, bool) {
	res, ok := fpv.value.(*common.ProxyConfiguration)
	return res, ok
}
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) AsAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object ProbingSession
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) SetTo(target **ProbingConfig_ProbingSession) {
	if *target == nil {
		*target = new(ProbingConfig_ProbingSession)
	}
	switch fpv.selector {
	case ProbingConfigProbingSession_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Name)
	case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
		(*target).TargetDisplayName = fpv.value.(string)
	case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
		(*target).TargetGroup = fpv.value.(*probing_target_group.Reference)
	case ProbingConfigProbingSession_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(common.ProbingMode)
	case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
		(*target).IpVersion = fpv.value.(common.IpVersion)
	case ProbingConfigProbingSession_FieldPathSelectorAddress:
		(*target).Address = fpv.value.(string)
	case ProbingConfigProbingSession_FieldPathSelectorGroupName:
		(*target).GroupName = fpv.value.(string)
	case ProbingConfigProbingSession_FieldPathSelectorCategory:
		(*target).Category = fpv.value.(string)
	case ProbingConfigProbingSession_FieldPathSelectorLocationType:
		(*target).LocationType = fpv.value.(common.LocationType)
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*common.Location)
	case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
		(*target).IntervalSec = fpv.value.(int64)
	case ProbingConfigProbingSession_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*duration.Duration)
	case ProbingConfigProbingSession_FieldPathSelectorTos:
		(*target).Tos = fpv.value.(uint32)
	case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
		(*target).WindowSize = fpv.value.(uint32)
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		(*target).PathProbing = fpv.value.(*common.PathProbe)
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		(*target).SpeedtestSettings = fpv.value.(*common.SpeedTestSettings)
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		(*target).HttpProbingConfig = fpv.value.(*common.HTTPProbingConfig)
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		(*target).ProxyConfiguration = fpv.value.(*common.ProxyConfiguration)
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		(*target).Addresses = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_ProbingSession)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingConfigProbingSession_FieldTerminalPathValue' with the value under path in 'ProbingConfig_ProbingSession'.
func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) CompareWith(source *ProbingConfig_ProbingSession) (int, bool) {
	switch fpv.selector {
	case ProbingConfigProbingSession_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Name)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetTargetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
		leftValue := fpv.value.(*probing_target_group.Reference)
		rightValue := source.GetTargetGroup()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorMode:
		leftValue := fpv.value.(common.ProbingMode)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
		leftValue := fpv.value.(common.IpVersion)
		rightValue := source.GetIpVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorGroupName:
		leftValue := fpv.value.(string)
		rightValue := source.GetGroupName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorCategory:
		leftValue := fpv.value.(string)
		rightValue := source.GetCategory()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorLocationType:
		leftValue := fpv.value.(common.LocationType)
		rightValue := source.GetLocationType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		return 0, false
	case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
		leftValue := fpv.value.(int64)
		rightValue := source.GetIntervalSec()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorInterval:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetInterval()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorTos:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetTos()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
		leftValue := fpv.value.(uint32)
		rightValue := source.GetWindowSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		return 0, false
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		return 0, false
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		return 0, false
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		return 0, false
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigProbingSession_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingConfig_ProbingSession))
}

type ProbingConfigProbingSession_FieldSubPathValue struct {
	ProbingConfigProbingSession_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingConfigProbingSession_FieldPathValue = (*ProbingConfigProbingSession_FieldSubPathValue)(nil)

func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) AsLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) AsPathProbingPathValue() (common.PathProbe_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.PathProbe_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) AsSpeedtestSettingsPathValue() (common.SpeedTestSettings_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.SpeedTestSettings_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) AsHttpProbingConfigPathValue() (common.HTTPProbingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) AsProxyConfigurationPathValue() (common.ProxyConfiguration_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ProxyConfiguration_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) SetTo(target **ProbingConfig_ProbingSession) {
	if *target == nil {
		*target = new(ProbingConfig_ProbingSession)
	}
	switch fpvs.Selector() {
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).Location)
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		fpvs.subPathValue.(common.PathProbe_FieldPathValue).SetTo(&(*target).PathProbing)
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		fpvs.subPathValue.(common.SpeedTestSettings_FieldPathValue).SetTo(&(*target).SpeedtestSettings)
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue).SetTo(&(*target).HttpProbingConfig)
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		fpvs.subPathValue.(common.ProxyConfiguration_FieldPathValue).SetTo(&(*target).ProxyConfiguration)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_ProbingSession)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) CompareWith(source *ProbingConfig_ProbingSession) (int, bool) {
	switch fpvs.Selector() {
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetLocation())
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		return fpvs.subPathValue.(common.PathProbe_FieldPathValue).CompareWith(source.GetPathProbing())
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		return fpvs.subPathValue.(common.SpeedTestSettings_FieldPathValue).CompareWith(source.GetSpeedtestSettings())
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		return fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue).CompareWith(source.GetHttpProbingConfig())
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		return fpvs.subPathValue.(common.ProxyConfiguration_FieldPathValue).CompareWith(source.GetProxyConfiguration())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfigProbingSession_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingConfig_ProbingSession))
}

// ProbingConfigProbingSession_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbingSession according to their type
// Present only for array (repeated) types.
type ProbingConfigProbingSession_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingConfigProbingSession_FieldPath
	ContainsValue(*ProbingConfig_ProbingSession) bool
}

// ParseProbingConfigProbingSession_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingConfigProbingSession_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingConfigProbingSession_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingConfigProbingSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingSession field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingConfigProbingSession_FieldPathArrayItemValue), nil
}

func MustParseProbingConfigProbingSession_FieldPathArrayItemValue(pathStr, valueStr string) ProbingConfigProbingSession_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingConfigProbingSession_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingConfigProbingSession_FieldTerminalPathArrayItemValue struct {
	ProbingConfigProbingSession_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigProbingSession_FieldPathArrayItemValue = (*ProbingConfigProbingSession_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingConfig_ProbingSession as interface{}
func (fpaiv *ProbingConfigProbingSession_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbingConfigProbingSession_FieldTerminalPathArrayItemValue) AsAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProbingConfigProbingSession_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingConfig_ProbingSession) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingConfigProbingSession_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingConfig_ProbingSession))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingSession'
func (fpaiv *ProbingConfigProbingSession_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingConfig_ProbingSession) bool {
	slice := fpaiv.ProbingConfigProbingSession_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingConfigProbingSession_FieldSubPathArrayItemValue struct {
	ProbingConfigProbingSession_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingConfigProbingSession_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingConfigProbingSession_FieldSubPathArrayItemValue) AsLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingConfigProbingSession_FieldSubPathArrayItemValue) AsPathProbingPathItemValue() (common.PathProbe_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.PathProbe_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingConfigProbingSession_FieldSubPathArrayItemValue) AsSpeedtestSettingsPathItemValue() (common.SpeedTestSettings_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.SpeedTestSettings_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingConfigProbingSession_FieldSubPathArrayItemValue) AsHttpProbingConfigPathItemValue() (common.HTTPProbingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.HTTPProbingConfig_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingConfigProbingSession_FieldSubPathArrayItemValue) AsProxyConfigurationPathItemValue() (common.ProxyConfiguration_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ProxyConfiguration_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingSession'
func (fpaivs *ProbingConfigProbingSession_FieldSubPathArrayItemValue) ContainsValue(source *ProbingConfig_ProbingSession) bool {
	switch fpaivs.Selector() {
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		return fpaivs.subPathItemValue.(common.PathProbe_FieldPathArrayItemValue).ContainsValue(source.GetPathProbing())
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		return fpaivs.subPathItemValue.(common.SpeedTestSettings_FieldPathArrayItemValue).ContainsValue(source.GetSpeedtestSettings())
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		return fpaivs.subPathItemValue.(common.HTTPProbingConfig_FieldPathArrayItemValue).ContainsValue(source.GetHttpProbingConfig())
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		return fpaivs.subPathItemValue.(common.ProxyConfiguration_FieldPathArrayItemValue).ContainsValue(source.GetProxyConfiguration())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_ProbingSession: %d", fpaivs.Selector()))
	}
}

// ProbingConfigProbingSession_FieldPathArrayOfValues allows storing slice of values for ProbingSession fields according to their type
type ProbingConfigProbingSession_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingConfigProbingSession_FieldPath
}

func ParseProbingConfigProbingSession_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingConfigProbingSession_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingConfigProbingSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingSession field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingConfigProbingSession_FieldPathArrayOfValues), nil
}

func MustParseProbingConfigProbingSession_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingConfigProbingSession_FieldPathArrayOfValues {
	fpaov, err := ParseProbingConfigProbingSession_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingConfigProbingSession_FieldTerminalPathArrayOfValues struct {
	ProbingConfigProbingSession_FieldTerminalPath
	values interface{}
}

var _ ProbingConfigProbingSession_FieldPathArrayOfValues = (*ProbingConfigProbingSession_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingConfigProbingSession_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Name) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
		for _, v := range fpaov.values.([]*probing_target_group.Reference) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]common.ProbingMode) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
		for _, v := range fpaov.values.([]common.IpVersion) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorGroupName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorCategory:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorLocationType:
		for _, v := range fpaov.values.([]common.LocationType) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorTos:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
		for _, v := range fpaov.values.([]uint32) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
		for _, v := range fpaov.values.([]*common.PathProbe) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
		for _, v := range fpaov.values.([]*common.SpeedTestSettings) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
		for _, v := range fpaov.values.([]*common.HTTPProbingConfig) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
		for _, v := range fpaov.values.([]*common.ProxyConfiguration) {
			values = append(values, v)
		}
	case ProbingConfigProbingSession_FieldPathSelectorAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Name, bool) {
	res, ok := fpaov.values.([]*probing_target.Name)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsTargetDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsTargetGroupArrayOfValues() ([]*probing_target_group.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Reference)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]common.ProbingMode, bool) {
	res, ok := fpaov.values.([]common.ProbingMode)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsIpVersionArrayOfValues() ([]common.IpVersion, bool) {
	res, ok := fpaov.values.([]common.IpVersion)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsGroupNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsCategoryArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsLocationTypeArrayOfValues() ([]common.LocationType, bool) {
	res, ok := fpaov.values.([]common.LocationType)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsIntervalSecArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsTosArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsWindowSizeArrayOfValues() ([]uint32, bool) {
	res, ok := fpaov.values.([]uint32)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsPathProbingArrayOfValues() ([]*common.PathProbe, bool) {
	res, ok := fpaov.values.([]*common.PathProbe)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsSpeedtestSettingsArrayOfValues() ([]*common.SpeedTestSettings, bool) {
	res, ok := fpaov.values.([]*common.SpeedTestSettings)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsHttpProbingConfigArrayOfValues() ([]*common.HTTPProbingConfig, bool) {
	res, ok := fpaov.values.([]*common.HTTPProbingConfig)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsProxyConfigurationArrayOfValues() ([]*common.ProxyConfiguration, bool) {
	res, ok := fpaov.values.([]*common.ProxyConfiguration)
	return res, ok
}
func (fpaov *ProbingConfigProbingSession_FieldTerminalPathArrayOfValues) AsAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

type ProbingConfigProbingSession_FieldSubPathArrayOfValues struct {
	ProbingConfigProbingSession_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingConfigProbingSession_FieldPathArrayOfValues = (*ProbingConfigProbingSession_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingConfigProbingSession_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingConfigProbingSession_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingConfigProbingSession_FieldSubPathArrayOfValues) AsPathProbingPathArrayOfValues() (common.PathProbe_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.PathProbe_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingConfigProbingSession_FieldSubPathArrayOfValues) AsSpeedtestSettingsPathArrayOfValues() (common.SpeedTestSettings_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.SpeedTestSettings_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingConfigProbingSession_FieldSubPathArrayOfValues) AsHttpProbingConfigPathArrayOfValues() (common.HTTPProbingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.HTTPProbingConfig_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingConfigProbingSession_FieldSubPathArrayOfValues) AsProxyConfigurationPathArrayOfValues() (common.ProxyConfiguration_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ProxyConfiguration_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingConfigSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingConfigSpec_FieldPathSelector
	Get(source *ProbingConfig_Spec) []interface{}
	GetSingle(source *ProbingConfig_Spec) (interface{}, bool)
	ClearValue(item *ProbingConfig_Spec)

	// Those methods build corresponding ProbingConfigSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingConfigSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingConfigSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingConfigSpec_FieldPathArrayItemValue
}

type ProbingConfigSpec_FieldPathSelector int32

const (
	ProbingConfigSpec_FieldPathSelectorProbe           ProbingConfigSpec_FieldPathSelector = 0
	ProbingConfigSpec_FieldPathSelectorProbingSessions ProbingConfigSpec_FieldPathSelector = 1
	ProbingConfigSpec_FieldPathSelectorSpeedtest       ProbingConfigSpec_FieldPathSelector = 2
	ProbingConfigSpec_FieldPathSelectorTargetSessions  ProbingConfigSpec_FieldPathSelector = 3
)

func (s ProbingConfigSpec_FieldPathSelector) String() string {
	switch s {
	case ProbingConfigSpec_FieldPathSelectorProbe:
		return "probe"
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		return "probing_sessions"
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		return "speedtest"
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		return "target_sessions"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", s))
	}
}

func BuildProbingConfigSpec_FieldPath(fp gotenobject.RawFieldPath) (ProbingConfigSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingConfig_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe":
			return &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorProbe}, nil
		case "probing_sessions", "probingSessions", "probing-sessions":
			return &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorProbingSessions}, nil
		case "speedtest":
			return &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorSpeedtest}, nil
		case "target_sessions", "targetSessions", "target-sessions":
			return &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorTargetSessions}, nil
		}
	} else {
		switch fp[0] {
		case "probing_sessions", "probingSessions", "probing-sessions":
			if subpath, err := BuildProbingConfigProbingSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigSpec_FieldSubPath{selector: ProbingConfigSpec_FieldPathSelectorProbingSessions, subPath: subpath}, nil
			}
		case "speedtest":
			if subpath, err := BuildProbingConfigSpecSpeedTest_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigSpec_FieldSubPath{selector: ProbingConfigSpec_FieldPathSelectorSpeedtest, subPath: subpath}, nil
			}
		case "target_sessions", "targetSessions", "target-sessions":
			if subpath, err := BuildProbingConfigProbingSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigSpec_FieldSubPath{selector: ProbingConfigSpec_FieldPathSelectorTargetSessions, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingConfig_Spec", fp)
}

func ParseProbingConfigSpec_FieldPath(rawField string) (ProbingConfigSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingConfigSpec_FieldPath(fp)
}

func MustParseProbingConfigSpec_FieldPath(rawField string) ProbingConfigSpec_FieldPath {
	fp, err := ParseProbingConfigSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingConfigSpec_FieldTerminalPath struct {
	selector ProbingConfigSpec_FieldPathSelector
}

var _ ProbingConfigSpec_FieldPath = (*ProbingConfigSpec_FieldTerminalPath)(nil)

func (fp *ProbingConfigSpec_FieldTerminalPath) Selector() ProbingConfigSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingConfigSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingConfigSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingConfig_Spec
func (fp *ProbingConfigSpec_FieldTerminalPath) Get(source *ProbingConfig_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingConfigSpec_FieldPathSelectorProbe:
			if source.Probe != nil {
				values = append(values, source.Probe)
			}
		case ProbingConfigSpec_FieldPathSelectorProbingSessions:
			for _, value := range source.GetProbingSessions() {
				values = append(values, value)
			}
		case ProbingConfigSpec_FieldPathSelectorSpeedtest:
			if source.Speedtest != nil {
				values = append(values, source.Speedtest)
			}
		case ProbingConfigSpec_FieldPathSelectorTargetSessions:
			for _, value := range source.GetTargetSessions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingConfigSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingConfig_Spec))
}

// GetSingle returns value pointed by specific field of from source ProbingConfig_Spec
func (fp *ProbingConfigSpec_FieldTerminalPath) GetSingle(source *ProbingConfig_Spec) (interface{}, bool) {
	switch fp.selector {
	case ProbingConfigSpec_FieldPathSelectorProbe:
		res := source.GetProbe()
		return res, res != nil
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		res := source.GetProbingSessions()
		return res, res != nil
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		res := source.GetSpeedtest()
		return res, res != nil
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		res := source.GetTargetSessions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingConfig_Spec))
}

// GetDefault returns a default value of the field type
func (fp *ProbingConfigSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingConfigSpec_FieldPathSelectorProbe:
		return (*probe.Reference)(nil)
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		return ([]*ProbingConfig_ProbingSession)(nil)
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		return (*ProbingConfig_Spec_SpeedTest)(nil)
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		return ([]*ProbingConfig_ProbingSession)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpec_FieldTerminalPath) ClearValue(item *ProbingConfig_Spec) {
	if item != nil {
		switch fp.selector {
		case ProbingConfigSpec_FieldPathSelectorProbe:
			item.Probe = nil
		case ProbingConfigSpec_FieldPathSelectorProbingSessions:
			item.ProbingSessions = nil
		case ProbingConfigSpec_FieldPathSelectorSpeedtest:
			item.Speedtest = nil
		case ProbingConfigSpec_FieldPathSelectorTargetSessions:
			item.TargetSessions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fp.selector))
		}
	}
}

func (fp *ProbingConfigSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingConfig_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingConfigSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingConfigSpec_FieldPathSelectorProbe
}

func (fp *ProbingConfigSpec_FieldTerminalPath) WithIValue(value interface{}) ProbingConfigSpec_FieldPathValue {
	switch fp.selector {
	case ProbingConfigSpec_FieldPathSelectorProbe:
		return &ProbingConfigSpec_FieldTerminalPathValue{ProbingConfigSpec_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		return &ProbingConfigSpec_FieldTerminalPathValue{ProbingConfigSpec_FieldTerminalPath: *fp, value: value.([]*ProbingConfig_ProbingSession)}
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		return &ProbingConfigSpec_FieldTerminalPathValue{ProbingConfigSpec_FieldTerminalPath: *fp, value: value.(*ProbingConfig_Spec_SpeedTest)}
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		return &ProbingConfigSpec_FieldTerminalPathValue{ProbingConfigSpec_FieldTerminalPath: *fp, value: value.([]*ProbingConfig_ProbingSession)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingConfigSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingConfigSpec_FieldPathArrayOfValues {
	fpaov := &ProbingConfigSpec_FieldTerminalPathArrayOfValues{ProbingConfigSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingConfigSpec_FieldPathSelectorProbe:
		return &ProbingConfigSpec_FieldTerminalPathArrayOfValues{ProbingConfigSpec_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		return &ProbingConfigSpec_FieldTerminalPathArrayOfValues{ProbingConfigSpec_FieldTerminalPath: *fp, values: values.([][]*ProbingConfig_ProbingSession)}
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		return &ProbingConfigSpec_FieldTerminalPathArrayOfValues{ProbingConfigSpec_FieldTerminalPath: *fp, values: values.([]*ProbingConfig_Spec_SpeedTest)}
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		return &ProbingConfigSpec_FieldTerminalPathArrayOfValues{ProbingConfigSpec_FieldTerminalPath: *fp, values: values.([][]*ProbingConfig_ProbingSession)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingConfigSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingConfigSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingConfigSpec_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		return &ProbingConfigSpec_FieldTerminalPathArrayItemValue{ProbingConfigSpec_FieldTerminalPath: *fp, value: value.(*ProbingConfig_ProbingSession)}
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		return &ProbingConfigSpec_FieldTerminalPathArrayItemValue{ProbingConfigSpec_FieldTerminalPath: *fp, value: value.(*ProbingConfig_ProbingSession)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingConfigSpec_FieldSubPath struct {
	selector ProbingConfigSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingConfigSpec_FieldPath = (*ProbingConfigSpec_FieldSubPath)(nil)

func (fps *ProbingConfigSpec_FieldSubPath) Selector() ProbingConfigSpec_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingConfigSpec_FieldSubPath) AsProbingSessionsSubPath() (ProbingConfigProbingSession_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingConfigProbingSession_FieldPath)
	return res, ok
}
func (fps *ProbingConfigSpec_FieldSubPath) AsSpeedtestSubPath() (ProbingConfigSpecSpeedTest_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingConfigSpecSpeedTest_FieldPath)
	return res, ok
}
func (fps *ProbingConfigSpec_FieldSubPath) AsTargetSessionsSubPath() (ProbingConfigProbingSession_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingConfigProbingSession_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingConfigSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingConfigSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingConfig_Spec
func (fps *ProbingConfigSpec_FieldSubPath) Get(source *ProbingConfig_Spec) (values []interface{}) {
	if asProbingSessionFieldPath, ok := fps.AsProbingSessionsSubPath(); ok {
		for _, item := range source.GetProbingSessions() {
			values = append(values, asProbingSessionFieldPath.Get(item)...)
		}
	} else if asSpeedTestFieldPath, ok := fps.AsSpeedtestSubPath(); ok {
		values = append(values, asSpeedTestFieldPath.Get(source.GetSpeedtest())...)
	} else if asProbingSessionFieldPath, ok := fps.AsTargetSessionsSubPath(); ok {
		for _, item := range source.GetTargetSessions() {
			values = append(values, asProbingSessionFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fps.selector))
	}
	return
}

func (fps *ProbingConfigSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingConfig_Spec))
}

// GetSingle returns value of selected field from source ProbingConfig_Spec
func (fps *ProbingConfigSpec_FieldSubPath) GetSingle(source *ProbingConfig_Spec) (interface{}, bool) {
	switch fps.selector {
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		if len(source.GetProbingSessions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingSessions()[0])
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		if source.GetSpeedtest() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpeedtest())
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		if len(source.GetTargetSessions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTargetSessions()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fps.selector))
	}
}

func (fps *ProbingConfigSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingConfig_Spec))
}

// GetDefault returns a default value of the field type
func (fps *ProbingConfigSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingConfigSpec_FieldSubPath) ClearValue(item *ProbingConfig_Spec) {
	if item != nil {
		switch fps.selector {
		case ProbingConfigSpec_FieldPathSelectorProbingSessions:
			for _, subItem := range item.ProbingSessions {
				fps.subPath.ClearValueRaw(subItem)
			}
		case ProbingConfigSpec_FieldPathSelectorSpeedtest:
			fps.subPath.ClearValueRaw(item.Speedtest)
		case ProbingConfigSpec_FieldPathSelectorTargetSessions:
			for _, subItem := range item.TargetSessions {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fps.selector))
		}
	}
}

func (fps *ProbingConfigSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingConfig_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingConfigSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingConfigSpec_FieldSubPath) WithIValue(value interface{}) ProbingConfigSpec_FieldPathValue {
	return &ProbingConfigSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingConfigSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingConfigSpec_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingConfigSpec_FieldPathArrayOfValues {
	return &ProbingConfigSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingConfigSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingConfigSpec_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingConfigSpec_FieldPathArrayItemValue {
	return &ProbingConfigSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingConfigSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingConfigSpec_FieldPathValue allows storing values for Spec fields according to their type
type ProbingConfigSpec_FieldPathValue interface {
	ProbingConfigSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingConfig_Spec)
	CompareWith(*ProbingConfig_Spec) (cmp int, comparable bool)
}

func ParseProbingConfigSpec_FieldPathValue(pathStr, valueStr string) (ProbingConfigSpec_FieldPathValue, error) {
	fp, err := ParseProbingConfigSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingConfigSpec_FieldPathValue), nil
}

func MustParseProbingConfigSpec_FieldPathValue(pathStr, valueStr string) ProbingConfigSpec_FieldPathValue {
	fpv, err := ParseProbingConfigSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingConfigSpec_FieldTerminalPathValue struct {
	ProbingConfigSpec_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigSpec_FieldPathValue = (*ProbingConfigSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *ProbingConfigSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingConfigSpec_FieldTerminalPathValue) AsProbeValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ProbingConfigSpec_FieldTerminalPathValue) AsProbingSessionsValue() ([]*ProbingConfig_ProbingSession, bool) {
	res, ok := fpv.value.([]*ProbingConfig_ProbingSession)
	return res, ok
}
func (fpv *ProbingConfigSpec_FieldTerminalPathValue) AsSpeedtestValue() (*ProbingConfig_Spec_SpeedTest, bool) {
	res, ok := fpv.value.(*ProbingConfig_Spec_SpeedTest)
	return res, ok
}
func (fpv *ProbingConfigSpec_FieldTerminalPathValue) AsTargetSessionsValue() ([]*ProbingConfig_ProbingSession, bool) {
	res, ok := fpv.value.([]*ProbingConfig_ProbingSession)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *ProbingConfigSpec_FieldTerminalPathValue) SetTo(target **ProbingConfig_Spec) {
	if *target == nil {
		*target = new(ProbingConfig_Spec)
	}
	switch fpv.selector {
	case ProbingConfigSpec_FieldPathSelectorProbe:
		(*target).Probe = fpv.value.(*probe.Reference)
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		(*target).ProbingSessions = fpv.value.([]*ProbingConfig_ProbingSession)
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		(*target).Speedtest = fpv.value.(*ProbingConfig_Spec_SpeedTest)
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		(*target).TargetSessions = fpv.value.([]*ProbingConfig_ProbingSession)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingConfigSpec_FieldTerminalPathValue' with the value under path in 'ProbingConfig_Spec'.
func (fpv *ProbingConfigSpec_FieldTerminalPathValue) CompareWith(source *ProbingConfig_Spec) (int, bool) {
	switch fpv.selector {
	case ProbingConfigSpec_FieldPathSelectorProbe:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetProbe()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		return 0, false
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		return 0, false
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingConfig_Spec))
}

type ProbingConfigSpec_FieldSubPathValue struct {
	ProbingConfigSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingConfigSpec_FieldPathValue = (*ProbingConfigSpec_FieldSubPathValue)(nil)

func (fpvs *ProbingConfigSpec_FieldSubPathValue) AsProbingSessionsPathValue() (ProbingConfigProbingSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingConfigProbingSession_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingConfigSpec_FieldSubPathValue) AsSpeedtestPathValue() (ProbingConfigSpecSpeedTest_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingConfigSpecSpeedTest_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingConfigSpec_FieldSubPathValue) AsTargetSessionsPathValue() (ProbingConfigProbingSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingConfigProbingSession_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingConfigSpec_FieldSubPathValue) SetTo(target **ProbingConfig_Spec) {
	if *target == nil {
		*target = new(ProbingConfig_Spec)
	}
	switch fpvs.Selector() {
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		panic("FieldPath setter is unsupported for array subpaths")
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		fpvs.subPathValue.(ProbingConfigSpecSpeedTest_FieldPathValue).SetTo(&(*target).Speedtest)
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfigSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingConfigSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingConfigSpec_FieldSubPathValue) CompareWith(source *ProbingConfig_Spec) (int, bool) {
	switch fpvs.Selector() {
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		return 0, false // repeated field
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		return fpvs.subPathValue.(ProbingConfigSpecSpeedTest_FieldPathValue).CompareWith(source.GetSpeedtest())
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfigSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingConfig_Spec))
}

// ProbingConfigSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type ProbingConfigSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingConfigSpec_FieldPath
	ContainsValue(*ProbingConfig_Spec) bool
}

// ParseProbingConfigSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingConfigSpec_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingConfigSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingConfigSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingConfigSpec_FieldPathArrayItemValue), nil
}

func MustParseProbingConfigSpec_FieldPathArrayItemValue(pathStr, valueStr string) ProbingConfigSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingConfigSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingConfigSpec_FieldTerminalPathArrayItemValue struct {
	ProbingConfigSpec_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigSpec_FieldPathArrayItemValue = (*ProbingConfigSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingConfig_Spec as interface{}
func (fpaiv *ProbingConfigSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbingConfigSpec_FieldTerminalPathArrayItemValue) AsProbingSessionsItemValue() (*ProbingConfig_ProbingSession, bool) {
	res, ok := fpaiv.value.(*ProbingConfig_ProbingSession)
	return res, ok
}
func (fpaiv *ProbingConfigSpec_FieldTerminalPathArrayItemValue) AsTargetSessionsItemValue() (*ProbingConfig_ProbingSession, bool) {
	res, ok := fpaiv.value.(*ProbingConfig_ProbingSession)
	return res, ok
}

func (fpaiv *ProbingConfigSpec_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingConfig_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingConfigSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingConfig_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *ProbingConfigSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingConfig_Spec) bool {
	slice := fpaiv.ProbingConfigSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingConfigSpec_FieldSubPathArrayItemValue struct {
	ProbingConfigSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingConfigSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingConfigSpec_FieldSubPathArrayItemValue) AsProbingSessionsPathItemValue() (ProbingConfigProbingSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingConfigProbingSession_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingConfigSpec_FieldSubPathArrayItemValue) AsSpeedtestPathItemValue() (ProbingConfigSpecSpeedTest_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingConfigSpecSpeedTest_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingConfigSpec_FieldSubPathArrayItemValue) AsTargetSessionsPathItemValue() (ProbingConfigProbingSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingConfigProbingSession_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *ProbingConfigSpec_FieldSubPathArrayItemValue) ContainsValue(source *ProbingConfig_Spec) bool {
	switch fpaivs.Selector() {
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		return false // repeated/map field
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		return fpaivs.subPathItemValue.(ProbingConfigSpecSpeedTest_FieldPathArrayItemValue).ContainsValue(source.GetSpeedtest())
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec: %d", fpaivs.Selector()))
	}
}

// ProbingConfigSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type ProbingConfigSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingConfigSpec_FieldPath
}

func ParseProbingConfigSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingConfigSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingConfigSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingConfigSpec_FieldPathArrayOfValues), nil
}

func MustParseProbingConfigSpec_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingConfigSpec_FieldPathArrayOfValues {
	fpaov, err := ParseProbingConfigSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingConfigSpec_FieldTerminalPathArrayOfValues struct {
	ProbingConfigSpec_FieldTerminalPath
	values interface{}
}

var _ ProbingConfigSpec_FieldPathArrayOfValues = (*ProbingConfigSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingConfigSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingConfigSpec_FieldPathSelectorProbe:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ProbingConfigSpec_FieldPathSelectorProbingSessions:
		for _, v := range fpaov.values.([][]*ProbingConfig_ProbingSession) {
			values = append(values, v)
		}
	case ProbingConfigSpec_FieldPathSelectorSpeedtest:
		for _, v := range fpaov.values.([]*ProbingConfig_Spec_SpeedTest) {
			values = append(values, v)
		}
	case ProbingConfigSpec_FieldPathSelectorTargetSessions:
		for _, v := range fpaov.values.([][]*ProbingConfig_ProbingSession) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingConfigSpec_FieldTerminalPathArrayOfValues) AsProbeArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ProbingConfigSpec_FieldTerminalPathArrayOfValues) AsProbingSessionsArrayOfValues() ([][]*ProbingConfig_ProbingSession, bool) {
	res, ok := fpaov.values.([][]*ProbingConfig_ProbingSession)
	return res, ok
}
func (fpaov *ProbingConfigSpec_FieldTerminalPathArrayOfValues) AsSpeedtestArrayOfValues() ([]*ProbingConfig_Spec_SpeedTest, bool) {
	res, ok := fpaov.values.([]*ProbingConfig_Spec_SpeedTest)
	return res, ok
}
func (fpaov *ProbingConfigSpec_FieldTerminalPathArrayOfValues) AsTargetSessionsArrayOfValues() ([][]*ProbingConfig_ProbingSession, bool) {
	res, ok := fpaov.values.([][]*ProbingConfig_ProbingSession)
	return res, ok
}

type ProbingConfigSpec_FieldSubPathArrayOfValues struct {
	ProbingConfigSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingConfigSpec_FieldPathArrayOfValues = (*ProbingConfigSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingConfigSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingConfigSpec_FieldSubPathArrayOfValues) AsProbingSessionsPathArrayOfValues() (ProbingConfigProbingSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingConfigProbingSession_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingConfigSpec_FieldSubPathArrayOfValues) AsSpeedtestPathArrayOfValues() (ProbingConfigSpecSpeedTest_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingConfigSpecSpeedTest_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingConfigSpec_FieldSubPathArrayOfValues) AsTargetSessionsPathArrayOfValues() (ProbingConfigProbingSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingConfigProbingSession_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingConfigStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingConfigStatus_FieldPathSelector
	Get(source *ProbingConfig_Status) []interface{}
	GetSingle(source *ProbingConfig_Status) (interface{}, bool)
	ClearValue(item *ProbingConfig_Status)

	// Those methods build corresponding ProbingConfigStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingConfigStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingConfigStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingConfigStatus_FieldPathArrayItemValue
}

type ProbingConfigStatus_FieldPathSelector int32

func (s ProbingConfigStatus_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", s))
	}
}

func BuildProbingConfigStatus_FieldPath(fp gotenobject.RawFieldPath) (ProbingConfigStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingConfig_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingConfig_Status", fp)
}

func ParseProbingConfigStatus_FieldPath(rawField string) (ProbingConfigStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingConfigStatus_FieldPath(fp)
}

func MustParseProbingConfigStatus_FieldPath(rawField string) ProbingConfigStatus_FieldPath {
	fp, err := ParseProbingConfigStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingConfigStatus_FieldTerminalPath struct {
	selector ProbingConfigStatus_FieldPathSelector
}

var _ ProbingConfigStatus_FieldPath = (*ProbingConfigStatus_FieldTerminalPath)(nil)

func (fp *ProbingConfigStatus_FieldTerminalPath) Selector() ProbingConfigStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingConfigStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingConfigStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingConfig_Status
func (fp *ProbingConfigStatus_FieldTerminalPath) Get(source *ProbingConfig_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingConfigStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingConfig_Status))
}

// GetSingle returns value pointed by specific field of from source ProbingConfig_Status
func (fp *ProbingConfigStatus_FieldTerminalPath) GetSingle(source *ProbingConfig_Status) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fp.selector))
	}
}

func (fp *ProbingConfigStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingConfig_Status))
}

// GetDefault returns a default value of the field type
func (fp *ProbingConfigStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fp.selector))
	}
}

func (fp *ProbingConfigStatus_FieldTerminalPath) ClearValue(item *ProbingConfig_Status) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fp.selector))
		}
	}
}

func (fp *ProbingConfigStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingConfig_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingConfigStatus_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *ProbingConfigStatus_FieldTerminalPath) WithIValue(value interface{}) ProbingConfigStatus_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fp.selector))
	}
}

func (fp *ProbingConfigStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingConfigStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingConfigStatus_FieldPathArrayOfValues {
	fpaov := &ProbingConfigStatus_FieldTerminalPathArrayOfValues{ProbingConfigStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingConfigStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingConfigStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingConfigStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fp.selector))
	}
}

func (fp *ProbingConfigStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbingConfigStatus_FieldPathValue allows storing values for Status fields according to their type
type ProbingConfigStatus_FieldPathValue interface {
	ProbingConfigStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingConfig_Status)
	CompareWith(*ProbingConfig_Status) (cmp int, comparable bool)
}

func ParseProbingConfigStatus_FieldPathValue(pathStr, valueStr string) (ProbingConfigStatus_FieldPathValue, error) {
	fp, err := ParseProbingConfigStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingConfigStatus_FieldPathValue), nil
}

func MustParseProbingConfigStatus_FieldPathValue(pathStr, valueStr string) ProbingConfigStatus_FieldPathValue {
	fpv, err := ParseProbingConfigStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingConfigStatus_FieldTerminalPathValue struct {
	ProbingConfigStatus_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigStatus_FieldPathValue = (*ProbingConfigStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *ProbingConfigStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object Status
func (fpv *ProbingConfigStatus_FieldTerminalPathValue) SetTo(target **ProbingConfig_Status) {
	if *target == nil {
		*target = new(ProbingConfig_Status)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingConfigStatus_FieldTerminalPathValue' with the value under path in 'ProbingConfig_Status'.
func (fpv *ProbingConfigStatus_FieldTerminalPathValue) CompareWith(source *ProbingConfig_Status) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Status: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingConfig_Status))
}

// ProbingConfigStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type ProbingConfigStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingConfigStatus_FieldPath
	ContainsValue(*ProbingConfig_Status) bool
}

// ParseProbingConfigStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingConfigStatus_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingConfigStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingConfigStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingConfigStatus_FieldPathArrayItemValue), nil
}

func MustParseProbingConfigStatus_FieldPathArrayItemValue(pathStr, valueStr string) ProbingConfigStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingConfigStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingConfigStatus_FieldTerminalPathArrayItemValue struct {
	ProbingConfigStatus_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigStatus_FieldPathArrayItemValue = (*ProbingConfigStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingConfig_Status as interface{}
func (fpaiv *ProbingConfigStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingConfigStatus_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingConfig_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingConfigStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingConfig_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *ProbingConfigStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingConfig_Status) bool {
	slice := fpaiv.ProbingConfigStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbingConfigStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type ProbingConfigStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingConfigStatus_FieldPath
}

func ParseProbingConfigStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingConfigStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingConfigStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingConfigStatus_FieldPathArrayOfValues), nil
}

func MustParseProbingConfigStatus_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingConfigStatus_FieldPathArrayOfValues {
	fpaov, err := ParseProbingConfigStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingConfigStatus_FieldTerminalPathArrayOfValues struct {
	ProbingConfigStatus_FieldTerminalPath
	values interface{}
}

var _ ProbingConfigStatus_FieldPathArrayOfValues = (*ProbingConfigStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingConfigStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingConfigSpecSpeedTest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingConfigSpecSpeedTest_FieldPathSelector
	Get(source *ProbingConfig_Spec_SpeedTest) []interface{}
	GetSingle(source *ProbingConfig_Spec_SpeedTest) (interface{}, bool)
	ClearValue(item *ProbingConfig_Spec_SpeedTest)

	// Those methods build corresponding ProbingConfigSpecSpeedTest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingConfigSpecSpeedTest_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingConfigSpecSpeedTest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingConfigSpecSpeedTest_FieldPathArrayItemValue
}

type ProbingConfigSpecSpeedTest_FieldPathSelector int32

const (
	ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled         ProbingConfigSpecSpeedTest_FieldPathSelector = 0
	ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes ProbingConfigSpecSpeedTest_FieldPathSelector = 1
	ProbingConfigSpecSpeedTest_FieldPathSelectorInterval        ProbingConfigSpecSpeedTest_FieldPathSelector = 2
	ProbingConfigSpecSpeedTest_FieldPathSelectorServers         ProbingConfigSpecSpeedTest_FieldPathSelector = 3
)

func (s ProbingConfigSpecSpeedTest_FieldPathSelector) String() string {
	switch s {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
		return "enabled"
	case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
		return "interval_minutes"
	case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
		return "interval"
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		return "servers"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", s))
	}
}

func BuildProbingConfigSpecSpeedTest_FieldPath(fp gotenobject.RawFieldPath) (ProbingConfigSpecSpeedTest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingConfig_Spec_SpeedTest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled":
			return &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled}, nil
		case "interval_minutes", "intervalMinutes", "interval-minutes":
			return &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes}, nil
		case "interval":
			return &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorInterval}, nil
		case "servers":
			return &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorServers}, nil
		}
	} else {
		switch fp[0] {
		case "servers":
			if subpath, err := BuildProbingConfigSpecSpeedTestServer_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigSpecSpeedTest_FieldSubPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorServers, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingConfig_Spec_SpeedTest", fp)
}

func ParseProbingConfigSpecSpeedTest_FieldPath(rawField string) (ProbingConfigSpecSpeedTest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingConfigSpecSpeedTest_FieldPath(fp)
}

func MustParseProbingConfigSpecSpeedTest_FieldPath(rawField string) ProbingConfigSpecSpeedTest_FieldPath {
	fp, err := ParseProbingConfigSpecSpeedTest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingConfigSpecSpeedTest_FieldTerminalPath struct {
	selector ProbingConfigSpecSpeedTest_FieldPathSelector
}

var _ ProbingConfigSpecSpeedTest_FieldPath = (*ProbingConfigSpecSpeedTest_FieldTerminalPath)(nil)

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) Selector() ProbingConfigSpecSpeedTest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingConfig_Spec_SpeedTest
func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) Get(source *ProbingConfig_Spec_SpeedTest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
			values = append(values, source.IntervalMinutes)
		case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
			if source.Interval != nil {
				values = append(values, source.Interval)
			}
		case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
			for _, value := range source.GetServers() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingConfig_Spec_SpeedTest))
}

// GetSingle returns value pointed by specific field of from source ProbingConfig_Spec_SpeedTest
func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) GetSingle(source *ProbingConfig_Spec_SpeedTest) (interface{}, bool) {
	switch fp.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
		return source.GetIntervalMinutes(), source != nil
	case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
		res := source.GetInterval()
		return res, res != nil
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		res := source.GetServers()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingConfig_Spec_SpeedTest))
}

// GetDefault returns a default value of the field type
func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
		return false
	case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
		return int64(0)
	case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
		return (*duration.Duration)(nil)
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		return ([]*ProbingConfig_Spec_SpeedTest_Server)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) ClearValue(item *ProbingConfig_Spec_SpeedTest) {
	if item != nil {
		switch fp.selector {
		case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
			item.Enabled = false
		case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
			item.IntervalMinutes = int64(0)
		case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
			item.Interval = nil
		case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
			item.Servers = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fp.selector))
		}
	}
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingConfig_Spec_SpeedTest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled ||
		fp.selector == ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes ||
		fp.selector == ProbingConfigSpecSpeedTest_FieldPathSelectorInterval
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) WithIValue(value interface{}) ProbingConfigSpecSpeedTest_FieldPathValue {
	switch fp.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathValue{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, value: value.(bool)}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathValue{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathValue{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, value: value.(*duration.Duration)}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathValue{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, value: value.([]*ProbingConfig_Spec_SpeedTest_Server)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingConfigSpecSpeedTest_FieldPathArrayOfValues {
	fpaov := &ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, values: values.([]bool)}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, values: values.([]*duration.Duration)}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, values: values.([][]*ProbingConfig_Spec_SpeedTest_Server)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingConfigSpecSpeedTest_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		return &ProbingConfigSpecSpeedTest_FieldTerminalPathArrayItemValue{ProbingConfigSpecSpeedTest_FieldTerminalPath: *fp, value: value.(*ProbingConfig_Spec_SpeedTest_Server)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpecSpeedTest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingConfigSpecSpeedTest_FieldSubPath struct {
	selector ProbingConfigSpecSpeedTest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingConfigSpecSpeedTest_FieldPath = (*ProbingConfigSpecSpeedTest_FieldSubPath)(nil)

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) Selector() ProbingConfigSpecSpeedTest_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) AsServersSubPath() (ProbingConfigSpecSpeedTestServer_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingConfigSpecSpeedTestServer_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingConfig_Spec_SpeedTest
func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) Get(source *ProbingConfig_Spec_SpeedTest) (values []interface{}) {
	if asServerFieldPath, ok := fps.AsServersSubPath(); ok {
		for _, item := range source.GetServers() {
			values = append(values, asServerFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fps.selector))
	}
	return
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingConfig_Spec_SpeedTest))
}

// GetSingle returns value of selected field from source ProbingConfig_Spec_SpeedTest
func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) GetSingle(source *ProbingConfig_Spec_SpeedTest) (interface{}, bool) {
	switch fps.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		if len(source.GetServers()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServers()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fps.selector))
	}
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingConfig_Spec_SpeedTest))
}

// GetDefault returns a default value of the field type
func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) ClearValue(item *ProbingConfig_Spec_SpeedTest) {
	if item != nil {
		switch fps.selector {
		case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
			for _, subItem := range item.Servers {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fps.selector))
		}
	}
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingConfig_Spec_SpeedTest))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) WithIValue(value interface{}) ProbingConfigSpecSpeedTest_FieldPathValue {
	return &ProbingConfigSpecSpeedTest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingConfigSpecSpeedTest_FieldPathArrayOfValues {
	return &ProbingConfigSpecSpeedTest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingConfigSpecSpeedTest_FieldPathArrayItemValue {
	return &ProbingConfigSpecSpeedTest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingConfigSpecSpeedTest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingConfigSpecSpeedTest_FieldPathValue allows storing values for SpeedTest fields according to their type
type ProbingConfigSpecSpeedTest_FieldPathValue interface {
	ProbingConfigSpecSpeedTest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingConfig_Spec_SpeedTest)
	CompareWith(*ProbingConfig_Spec_SpeedTest) (cmp int, comparable bool)
}

func ParseProbingConfigSpecSpeedTest_FieldPathValue(pathStr, valueStr string) (ProbingConfigSpecSpeedTest_FieldPathValue, error) {
	fp, err := ParseProbingConfigSpecSpeedTest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SpeedTest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingConfigSpecSpeedTest_FieldPathValue), nil
}

func MustParseProbingConfigSpecSpeedTest_FieldPathValue(pathStr, valueStr string) ProbingConfigSpecSpeedTest_FieldPathValue {
	fpv, err := ParseProbingConfigSpecSpeedTest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingConfigSpecSpeedTest_FieldTerminalPathValue struct {
	ProbingConfigSpecSpeedTest_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigSpecSpeedTest_FieldPathValue = (*ProbingConfigSpecSpeedTest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SpeedTest' as interface{}
func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) AsIntervalMinutesValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) AsIntervalValue() (*duration.Duration, bool) {
	res, ok := fpv.value.(*duration.Duration)
	return res, ok
}
func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) AsServersValue() ([]*ProbingConfig_Spec_SpeedTest_Server, bool) {
	res, ok := fpv.value.([]*ProbingConfig_Spec_SpeedTest_Server)
	return res, ok
}

// SetTo stores value for selected field for object SpeedTest
func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) SetTo(target **ProbingConfig_Spec_SpeedTest) {
	if *target == nil {
		*target = new(ProbingConfig_Spec_SpeedTest)
	}
	switch fpv.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
		(*target).IntervalMinutes = fpv.value.(int64)
	case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
		(*target).Interval = fpv.value.(*duration.Duration)
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		(*target).Servers = fpv.value.([]*ProbingConfig_Spec_SpeedTest_Server)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_Spec_SpeedTest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingConfigSpecSpeedTest_FieldTerminalPathValue' with the value under path in 'ProbingConfig_Spec_SpeedTest'.
func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) CompareWith(source *ProbingConfig_Spec_SpeedTest) (int, bool) {
	switch fpv.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
		leftValue := fpv.value.(int64)
		rightValue := source.GetIntervalMinutes()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
		leftValue := fpv.value.(*duration.Duration)
		rightValue := source.GetInterval()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsDuration() == rightValue.AsDuration() {
			return 0, true
		} else if leftValue.AsDuration() < rightValue.AsDuration() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigSpecSpeedTest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingConfig_Spec_SpeedTest))
}

type ProbingConfigSpecSpeedTest_FieldSubPathValue struct {
	ProbingConfigSpecSpeedTest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingConfigSpecSpeedTest_FieldPathValue = (*ProbingConfigSpecSpeedTest_FieldSubPathValue)(nil)

func (fpvs *ProbingConfigSpecSpeedTest_FieldSubPathValue) AsServersPathValue() (ProbingConfigSpecSpeedTestServer_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingConfigSpecSpeedTestServer_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingConfigSpecSpeedTest_FieldSubPathValue) SetTo(target **ProbingConfig_Spec_SpeedTest) {
	if *target == nil {
		*target = new(ProbingConfig_Spec_SpeedTest)
	}
	switch fpvs.Selector() {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfigSpecSpeedTest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_Spec_SpeedTest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingConfigSpecSpeedTest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingConfigSpecSpeedTest_FieldSubPathValue) CompareWith(source *ProbingConfig_Spec_SpeedTest) (int, bool) {
	switch fpvs.Selector() {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfigSpecSpeedTest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingConfig_Spec_SpeedTest))
}

// ProbingConfigSpecSpeedTest_FieldPathArrayItemValue allows storing single item in Path-specific values for SpeedTest according to their type
// Present only for array (repeated) types.
type ProbingConfigSpecSpeedTest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingConfigSpecSpeedTest_FieldPath
	ContainsValue(*ProbingConfig_Spec_SpeedTest) bool
}

// ParseProbingConfigSpecSpeedTest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingConfigSpecSpeedTest_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingConfigSpecSpeedTest_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingConfigSpecSpeedTest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SpeedTest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingConfigSpecSpeedTest_FieldPathArrayItemValue), nil
}

func MustParseProbingConfigSpecSpeedTest_FieldPathArrayItemValue(pathStr, valueStr string) ProbingConfigSpecSpeedTest_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingConfigSpecSpeedTest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingConfigSpecSpeedTest_FieldTerminalPathArrayItemValue struct {
	ProbingConfigSpecSpeedTest_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigSpecSpeedTest_FieldPathArrayItemValue = (*ProbingConfigSpecSpeedTest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingConfig_Spec_SpeedTest as interface{}
func (fpaiv *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayItemValue) AsServersItemValue() (*ProbingConfig_Spec_SpeedTest_Server, bool) {
	res, ok := fpaiv.value.(*ProbingConfig_Spec_SpeedTest_Server)
	return res, ok
}

func (fpaiv *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingConfig_Spec_SpeedTest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingConfig_Spec_SpeedTest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SpeedTest'
func (fpaiv *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingConfig_Spec_SpeedTest) bool {
	slice := fpaiv.ProbingConfigSpecSpeedTest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingConfigSpecSpeedTest_FieldSubPathArrayItemValue struct {
	ProbingConfigSpecSpeedTest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingConfigSpecSpeedTest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingConfigSpecSpeedTest_FieldSubPathArrayItemValue) AsServersPathItemValue() (ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'SpeedTest'
func (fpaivs *ProbingConfigSpecSpeedTest_FieldSubPathArrayItemValue) ContainsValue(source *ProbingConfig_Spec_SpeedTest) bool {
	switch fpaivs.Selector() {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest: %d", fpaivs.Selector()))
	}
}

// ProbingConfigSpecSpeedTest_FieldPathArrayOfValues allows storing slice of values for SpeedTest fields according to their type
type ProbingConfigSpecSpeedTest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingConfigSpecSpeedTest_FieldPath
}

func ParseProbingConfigSpecSpeedTest_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingConfigSpecSpeedTest_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingConfigSpecSpeedTest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SpeedTest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingConfigSpecSpeedTest_FieldPathArrayOfValues), nil
}

func MustParseProbingConfigSpecSpeedTest_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingConfigSpecSpeedTest_FieldPathArrayOfValues {
	fpaov, err := ParseProbingConfigSpecSpeedTest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues struct {
	ProbingConfigSpecSpeedTest_FieldTerminalPath
	values interface{}
}

var _ ProbingConfigSpecSpeedTest_FieldPathArrayOfValues = (*ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
		for _, v := range fpaov.values.([]*duration.Duration) {
			values = append(values, v)
		}
	case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
		for _, v := range fpaov.values.([][]*ProbingConfig_Spec_SpeedTest_Server) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues) AsIntervalMinutesArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues) AsIntervalArrayOfValues() ([]*duration.Duration, bool) {
	res, ok := fpaov.values.([]*duration.Duration)
	return res, ok
}
func (fpaov *ProbingConfigSpecSpeedTest_FieldTerminalPathArrayOfValues) AsServersArrayOfValues() ([][]*ProbingConfig_Spec_SpeedTest_Server, bool) {
	res, ok := fpaov.values.([][]*ProbingConfig_Spec_SpeedTest_Server)
	return res, ok
}

type ProbingConfigSpecSpeedTest_FieldSubPathArrayOfValues struct {
	ProbingConfigSpecSpeedTest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingConfigSpecSpeedTest_FieldPathArrayOfValues = (*ProbingConfigSpecSpeedTest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingConfigSpecSpeedTest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingConfigSpecSpeedTest_FieldSubPathArrayOfValues) AsServersPathArrayOfValues() (ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingConfigSpecSpeedTestServer_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingConfigSpecSpeedTestServer_FieldPathSelector
	Get(source *ProbingConfig_Spec_SpeedTest_Server) []interface{}
	GetSingle(source *ProbingConfig_Spec_SpeedTest_Server) (interface{}, bool)
	ClearValue(item *ProbingConfig_Spec_SpeedTest_Server)

	// Those methods build corresponding ProbingConfigSpecSpeedTestServer_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingConfigSpecSpeedTestServer_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue
}

type ProbingConfigSpecSpeedTestServer_FieldPathSelector int32

const (
	ProbingConfigSpecSpeedTestServer_FieldPathSelectorName        ProbingConfigSpecSpeedTestServer_FieldPathSelector = 0
	ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses ProbingConfigSpecSpeedTestServer_FieldPathSelector = 1
	ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation    ProbingConfigSpecSpeedTestServer_FieldPathSelector = 2
	ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget      ProbingConfigSpecSpeedTestServer_FieldPathSelector = 3
)

func (s ProbingConfigSpecSpeedTestServer_FieldPathSelector) String() string {
	switch s {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
		return "name"
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		return "ip_addresses"
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		return "location"
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
		return "target"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", s))
	}
}

func BuildProbingConfigSpecSpeedTestServer_FieldPath(fp gotenobject.RawFieldPath) (ProbingConfigSpecSpeedTestServer_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingConfig_Spec_SpeedTest_Server")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorName}, nil
		case "ip_addresses", "ipAddresses", "ip-addresses":
			return &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses}, nil
		case "location":
			return &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation}, nil
		case "target":
			return &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget}, nil
		}
	} else {
		switch fp[0] {
		case "location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingConfigSpecSpeedTestServer_FieldSubPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingConfig_Spec_SpeedTest_Server", fp)
}

func ParseProbingConfigSpecSpeedTestServer_FieldPath(rawField string) (ProbingConfigSpecSpeedTestServer_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingConfigSpecSpeedTestServer_FieldPath(fp)
}

func MustParseProbingConfigSpecSpeedTestServer_FieldPath(rawField string) ProbingConfigSpecSpeedTestServer_FieldPath {
	fp, err := ParseProbingConfigSpecSpeedTestServer_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingConfigSpecSpeedTestServer_FieldTerminalPath struct {
	selector ProbingConfigSpecSpeedTestServer_FieldPathSelector
}

var _ ProbingConfigSpecSpeedTestServer_FieldPath = (*ProbingConfigSpecSpeedTestServer_FieldTerminalPath)(nil)

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) Selector() ProbingConfigSpecSpeedTestServer_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingConfig_Spec_SpeedTest_Server
func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) Get(source *ProbingConfig_Spec_SpeedTest_Server) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
			values = append(values, source.Name)
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
			for _, value := range source.GetIpAddresses() {
				values = append(values, value)
			}
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
			if source.Target != nil {
				values = append(values, source.Target)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingConfig_Spec_SpeedTest_Server))
}

// GetSingle returns value pointed by specific field of from source ProbingConfig_Spec_SpeedTest_Server
func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) GetSingle(source *ProbingConfig_Spec_SpeedTest_Server) (interface{}, bool) {
	switch fp.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
		return source.GetName(), source != nil
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		res := source.GetIpAddresses()
		return res, res != nil
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
		res := source.GetTarget()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingConfig_Spec_SpeedTest_Server))
}

// GetDefault returns a default value of the field type
func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
		return ""
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		return ([]string)(nil)
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		return (*common.Location)(nil)
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
		return (*probing_target.Name)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) ClearValue(item *ProbingConfig_Spec_SpeedTest_Server) {
	if item != nil {
		switch fp.selector {
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
			item.Name = ""
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
			item.IpAddresses = nil
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
			item.Location = nil
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
			item.Target = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fp.selector))
		}
	}
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingConfig_Spec_SpeedTest_Server))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingConfigSpecSpeedTestServer_FieldPathSelectorName ||
		fp.selector == ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses ||
		fp.selector == ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) WithIValue(value interface{}) ProbingConfigSpecSpeedTestServer_FieldPathValue {
	switch fp.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, value: value.([]string)}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, value: value.(*probing_target.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues {
	fpaov := &ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, values: values.([][]string)}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, values: values.([]*probing_target.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		return &ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayItemValue{ProbingConfigSpecSpeedTestServer_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fp.selector))
	}
}

func (fp *ProbingConfigSpecSpeedTestServer_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingConfigSpecSpeedTestServer_FieldSubPath struct {
	selector ProbingConfigSpecSpeedTestServer_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingConfigSpecSpeedTestServer_FieldPath = (*ProbingConfigSpecSpeedTestServer_FieldSubPath)(nil)

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) Selector() ProbingConfigSpecSpeedTestServer_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) AsLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingConfig_Spec_SpeedTest_Server
func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) Get(source *ProbingConfig_Spec_SpeedTest_Server) (values []interface{}) {
	if asLocationFieldPath, ok := fps.AsLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetLocation())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fps.selector))
	}
	return
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingConfig_Spec_SpeedTest_Server))
}

// GetSingle returns value of selected field from source ProbingConfig_Spec_SpeedTest_Server
func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) GetSingle(source *ProbingConfig_Spec_SpeedTest_Server) (interface{}, bool) {
	switch fps.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fps.selector))
	}
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingConfig_Spec_SpeedTest_Server))
}

// GetDefault returns a default value of the field type
func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) ClearValue(item *ProbingConfig_Spec_SpeedTest_Server) {
	if item != nil {
		switch fps.selector {
		case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fps.selector))
		}
	}
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingConfig_Spec_SpeedTest_Server))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) WithIValue(value interface{}) ProbingConfigSpecSpeedTestServer_FieldPathValue {
	return &ProbingConfigSpecSpeedTestServer_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues {
	return &ProbingConfigSpecSpeedTestServer_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue {
	return &ProbingConfigSpecSpeedTestServer_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingConfigSpecSpeedTestServer_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingConfigSpecSpeedTestServer_FieldPathValue allows storing values for Server fields according to their type
type ProbingConfigSpecSpeedTestServer_FieldPathValue interface {
	ProbingConfigSpecSpeedTestServer_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingConfig_Spec_SpeedTest_Server)
	CompareWith(*ProbingConfig_Spec_SpeedTest_Server) (cmp int, comparable bool)
}

func ParseProbingConfigSpecSpeedTestServer_FieldPathValue(pathStr, valueStr string) (ProbingConfigSpecSpeedTestServer_FieldPathValue, error) {
	fp, err := ParseProbingConfigSpecSpeedTestServer_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Server field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingConfigSpecSpeedTestServer_FieldPathValue), nil
}

func MustParseProbingConfigSpecSpeedTestServer_FieldPathValue(pathStr, valueStr string) ProbingConfigSpecSpeedTestServer_FieldPathValue {
	fpv, err := ParseProbingConfigSpecSpeedTestServer_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue struct {
	ProbingConfigSpecSpeedTestServer_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigSpecSpeedTestServer_FieldPathValue = (*ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Server' as interface{}
func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) AsIpAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) AsLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) AsTargetValue() (*probing_target.Name, bool) {
	res, ok := fpv.value.(*probing_target.Name)
	return res, ok
}

// SetTo stores value for selected field for object Server
func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) SetTo(target **ProbingConfig_Spec_SpeedTest_Server) {
	if *target == nil {
		*target = new(ProbingConfig_Spec_SpeedTest_Server)
	}
	switch fpv.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		(*target).IpAddresses = fpv.value.([]string)
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*common.Location)
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
		(*target).Target = fpv.value.(*probing_target.Name)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_Spec_SpeedTest_Server)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue' with the value under path in 'ProbingConfig_Spec_SpeedTest_Server'.
func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) CompareWith(source *ProbingConfig_Spec_SpeedTest_Server) (int, bool) {
	switch fpv.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		return 0, false
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		return 0, false
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
		leftValue := fpv.value.(*probing_target.Name)
		rightValue := source.GetTarget()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fpv.selector))
	}
}

func (fpv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingConfig_Spec_SpeedTest_Server))
}

type ProbingConfigSpecSpeedTestServer_FieldSubPathValue struct {
	ProbingConfigSpecSpeedTestServer_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingConfigSpecSpeedTestServer_FieldPathValue = (*ProbingConfigSpecSpeedTestServer_FieldSubPathValue)(nil)

func (fpvs *ProbingConfigSpecSpeedTestServer_FieldSubPathValue) AsLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingConfigSpecSpeedTestServer_FieldSubPathValue) SetTo(target **ProbingConfig_Spec_SpeedTest_Server) {
	if *target == nil {
		*target = new(ProbingConfig_Spec_SpeedTest_Server)
	}
	switch fpvs.Selector() {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).Location)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfigSpecSpeedTestServer_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingConfig_Spec_SpeedTest_Server)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingConfigSpecSpeedTestServer_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingConfigSpecSpeedTestServer_FieldSubPathValue) CompareWith(source *ProbingConfig_Spec_SpeedTest_Server) (int, bool) {
	switch fpvs.Selector() {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetLocation())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingConfigSpecSpeedTestServer_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingConfig_Spec_SpeedTest_Server))
}

// ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue allows storing single item in Path-specific values for Server according to their type
// Present only for array (repeated) types.
type ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingConfigSpecSpeedTestServer_FieldPath
	ContainsValue(*ProbingConfig_Spec_SpeedTest_Server) bool
}

// ParseProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingConfigSpecSpeedTestServer_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Server field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue), nil
}

func MustParseProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue(pathStr, valueStr string) ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayItemValue struct {
	ProbingConfigSpecSpeedTestServer_FieldTerminalPath
	value interface{}
}

var _ ProbingConfigSpecSpeedTestServer_FieldPathArrayItemValue = (*ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingConfig_Spec_SpeedTest_Server as interface{}
func (fpaiv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayItemValue) AsIpAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingConfig_Spec_SpeedTest_Server) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingConfig_Spec_SpeedTest_Server))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Server'
func (fpaiv *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingConfig_Spec_SpeedTest_Server) bool {
	slice := fpaiv.ProbingConfigSpecSpeedTestServer_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingConfigSpecSpeedTestServer_FieldSubPathArrayItemValue struct {
	ProbingConfigSpecSpeedTestServer_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingConfigSpecSpeedTestServer_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingConfigSpecSpeedTestServer_FieldSubPathArrayItemValue) AsLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Server'
func (fpaivs *ProbingConfigSpecSpeedTestServer_FieldSubPathArrayItemValue) ContainsValue(source *ProbingConfig_Spec_SpeedTest_Server) bool {
	switch fpaivs.Selector() {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingConfig_Spec_SpeedTest_Server: %d", fpaivs.Selector()))
	}
}

// ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues allows storing slice of values for Server fields according to their type
type ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingConfigSpecSpeedTestServer_FieldPath
}

func ParseProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingConfigSpecSpeedTestServer_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Server field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues), nil
}

func MustParseProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues {
	fpaov, err := ParseProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues struct {
	ProbingConfigSpecSpeedTestServer_FieldTerminalPath
	values interface{}
}

var _ ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues = (*ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
		for _, v := range fpaov.values.([]*probing_target.Name) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues) AsIpAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *ProbingConfigSpecSpeedTestServer_FieldTerminalPathArrayOfValues) AsTargetArrayOfValues() ([]*probing_target.Name, bool) {
	res, ok := fpaov.values.([]*probing_target.Name)
	return res, ok
}

type ProbingConfigSpecSpeedTestServer_FieldSubPathArrayOfValues struct {
	ProbingConfigSpecSpeedTestServer_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingConfigSpecSpeedTestServer_FieldPathArrayOfValues = (*ProbingConfigSpecSpeedTestServer_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingConfigSpecSpeedTestServer_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingConfigSpecSpeedTestServer_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
