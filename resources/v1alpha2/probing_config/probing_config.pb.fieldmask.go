// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_config.proto
// DO NOT EDIT!!!

package probing_config

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

type ProbingConfig_FieldMask struct {
	Paths []ProbingConfig_FieldPath
}

func FullProbingConfig_FieldMask() *ProbingConfig_FieldMask {
	res := &ProbingConfig_FieldMask{}
	res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorSpec})
	res.Paths = append(res.Paths, &ProbingConfig_FieldTerminalPath{selector: ProbingConfig_FieldPathSelectorStatus})
	return res
}

func (fieldMask *ProbingConfig_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingConfig_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingConfig_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingConfig_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingConfig_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingConfig_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingConfig_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingConfig_FieldPath(raw)
	})
}

func (fieldMask *ProbingConfig_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingConfig_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingConfig_FieldMask) Subtract(other *ProbingConfig_FieldMask) *ProbingConfig_FieldMask {
	result := &ProbingConfig_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[ProbingConfig_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfig_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
		ProbingConfig_FieldPathSelectorSpec:     &ProbingConfig_Spec_FieldMask{},
		ProbingConfig_FieldPathSelectorStatus:   &ProbingConfig_Status_FieldMask{},
	}
	mySubMasks := map[ProbingConfig_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfig_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
		ProbingConfig_FieldPathSelectorSpec:     &ProbingConfig_Spec_FieldMask{},
		ProbingConfig_FieldPathSelectorStatus:   &ProbingConfig_Status_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingConfig_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProbingConfig_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProbingConfig_FieldTerminalPath); ok {
					switch tp.selector {
					case ProbingConfig_FieldPathSelectorMetadata:
						mySubMasks[ProbingConfig_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					case ProbingConfig_FieldPathSelectorSpec:
						mySubMasks[ProbingConfig_FieldPathSelectorSpec] = FullProbingConfig_Spec_FieldMask()
					case ProbingConfig_FieldPathSelectorStatus:
						mySubMasks[ProbingConfig_FieldPathSelectorStatus] = FullProbingConfig_Status_FieldMask()
					}
				} else if tp, ok := path.(*ProbingConfig_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProbingConfig_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingConfig_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingConfig_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingConfig_FieldMask) FilterInputFields() *ProbingConfig_FieldMask {
	result := &ProbingConfig_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ProbingConfig_FieldPathSelectorMetadata:
			if _, ok := path.(*ProbingConfig_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProbingConfig_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ProbingConfig_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ProbingConfig_FieldSubPath{selector: ProbingConfig_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingConfig_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingConfig_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingConfig_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingConfig_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingConfig_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingConfig_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingConfig_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingConfig_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_FieldMask) AppendPath(path ProbingConfig_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingConfig_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingConfig_FieldPath))
}

func (fieldMask *ProbingConfig_FieldMask) GetPaths() []ProbingConfig_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingConfig_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingConfig_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingConfig_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingConfig_FieldMask) Set(target, source *ProbingConfig) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingConfig_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingConfig), source.(*ProbingConfig))
}

func (fieldMask *ProbingConfig_FieldMask) Project(source *ProbingConfig) *ProbingConfig {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingConfig{}
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	specMask := &ProbingConfig_Spec_FieldMask{}
	wholeSpecAccepted := false
	statusMask := &ProbingConfig_Status_FieldMask{}
	wholeStatusAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingConfig_FieldTerminalPath:
			switch tp.selector {
			case ProbingConfig_FieldPathSelectorName:
				result.Name = source.Name
			case ProbingConfig_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case ProbingConfig_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case ProbingConfig_FieldPathSelectorSpec:
				result.Spec = source.Spec
				wholeSpecAccepted = true
			case ProbingConfig_FieldPathSelectorStatus:
				result.Status = source.Status
				wholeStatusAccepted = true
			}
		case *ProbingConfig_FieldSubPath:
			switch tp.selector {
			case ProbingConfig_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			case ProbingConfig_FieldPathSelectorSpec:
				specMask.AppendPath(tp.subPath.(ProbingConfigSpec_FieldPath))
			case ProbingConfig_FieldPathSelectorStatus:
				statusMask.AppendPath(tp.subPath.(ProbingConfigStatus_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeSpecAccepted == false && len(specMask.Paths) > 0 {
		result.Spec = specMask.Project(source.GetSpec())
	}
	if wholeStatusAccepted == false && len(statusMask.Paths) > 0 {
		result.Status = statusMask.Project(source.GetStatus())
	}
	return result
}

func (fieldMask *ProbingConfig_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingConfig))
}

func (fieldMask *ProbingConfig_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProbingConfig_ProbingSession_FieldMask struct {
	Paths []ProbingConfigProbingSession_FieldPath
}

func FullProbingConfig_ProbingSession_FieldMask() *ProbingConfig_ProbingSession_FieldMask {
	res := &ProbingConfig_ProbingSession_FieldMask{}
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTarget})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTargetGroup})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorMode})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorIpVersion})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorAddress})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorGroupName})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorCategory})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorLocationType})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorLocation})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorIntervalSec})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorTos})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorWindowSize})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorPathProbing})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration})
	res.Paths = append(res.Paths, &ProbingConfigProbingSession_FieldTerminalPath{selector: ProbingConfigProbingSession_FieldPathSelectorAddresses})
	return res
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingConfig_ProbingSession_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingConfigProbingSession_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 19)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingConfigProbingSession_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingConfigProbingSession_FieldPath(raw)
	})
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) Subtract(other *ProbingConfig_ProbingSession_FieldMask) *ProbingConfig_ProbingSession_FieldMask {
	result := &ProbingConfig_ProbingSession_FieldMask{}
	removedSelectors := make([]bool, 19)
	otherSubMasks := map[ProbingConfigProbingSession_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfigProbingSession_FieldPathSelectorLocation:           &common.Location_FieldMask{},
		ProbingConfigProbingSession_FieldPathSelectorPathProbing:        &common.PathProbe_FieldMask{},
		ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:  &common.SpeedTestSettings_FieldMask{},
		ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:  &common.HTTPProbingConfig_FieldMask{},
		ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration: &common.ProxyConfiguration_FieldMask{},
	}
	mySubMasks := map[ProbingConfigProbingSession_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfigProbingSession_FieldPathSelectorLocation:           &common.Location_FieldMask{},
		ProbingConfigProbingSession_FieldPathSelectorPathProbing:        &common.PathProbe_FieldMask{},
		ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:  &common.SpeedTestSettings_FieldMask{},
		ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:  &common.HTTPProbingConfig_FieldMask{},
		ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration: &common.ProxyConfiguration_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingConfigProbingSession_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProbingConfigProbingSession_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProbingConfigProbingSession_FieldTerminalPath); ok {
					switch tp.selector {
					case ProbingConfigProbingSession_FieldPathSelectorLocation:
						mySubMasks[ProbingConfigProbingSession_FieldPathSelectorLocation] = common.FullLocation_FieldMask()
					case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
						mySubMasks[ProbingConfigProbingSession_FieldPathSelectorPathProbing] = common.FullPathProbe_FieldMask()
					case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
						mySubMasks[ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings] = common.FullSpeedTestSettings_FieldMask()
					case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
						mySubMasks[ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig] = common.FullHTTPProbingConfig_FieldMask()
					case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
						mySubMasks[ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration] = common.FullProxyConfiguration_FieldMask()
					}
				} else if tp, ok := path.(*ProbingConfigProbingSession_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProbingConfigProbingSession_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingConfig_ProbingSession_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingConfig_ProbingSession_FieldMask) FilterInputFields() *ProbingConfig_ProbingSession_FieldMask {
	result := &ProbingConfig_ProbingSession_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingConfig_ProbingSession_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingConfigProbingSession_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingConfigProbingSession_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingConfig_ProbingSession_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingConfig_ProbingSession_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) AppendPath(path ProbingConfigProbingSession_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingConfigProbingSession_FieldPath))
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) GetPaths() []ProbingConfigProbingSession_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingConfigProbingSession_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) Set(target, source *ProbingConfig_ProbingSession) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingConfig_ProbingSession), source.(*ProbingConfig_ProbingSession))
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) Project(source *ProbingConfig_ProbingSession) *ProbingConfig_ProbingSession {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingConfig_ProbingSession{}
	locationMask := &common.Location_FieldMask{}
	wholeLocationAccepted := false
	pathProbingMask := &common.PathProbe_FieldMask{}
	wholePathProbingAccepted := false
	speedtestSettingsMask := &common.SpeedTestSettings_FieldMask{}
	wholeSpeedtestSettingsAccepted := false
	httpProbingConfigMask := &common.HTTPProbingConfig_FieldMask{}
	wholeHttpProbingConfigAccepted := false
	proxyConfigurationMask := &common.ProxyConfiguration_FieldMask{}
	wholeProxyConfigurationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingConfigProbingSession_FieldTerminalPath:
			switch tp.selector {
			case ProbingConfigProbingSession_FieldPathSelectorTarget:
				result.Target = source.Target
			case ProbingConfigProbingSession_FieldPathSelectorTargetDisplayName:
				result.TargetDisplayName = source.TargetDisplayName
			case ProbingConfigProbingSession_FieldPathSelectorTargetGroup:
				result.TargetGroup = source.TargetGroup
			case ProbingConfigProbingSession_FieldPathSelectorMode:
				result.Mode = source.Mode
			case ProbingConfigProbingSession_FieldPathSelectorIpVersion:
				result.IpVersion = source.IpVersion
			case ProbingConfigProbingSession_FieldPathSelectorAddress:
				result.Address = source.Address
			case ProbingConfigProbingSession_FieldPathSelectorGroupName:
				result.GroupName = source.GroupName
			case ProbingConfigProbingSession_FieldPathSelectorCategory:
				result.Category = source.Category
			case ProbingConfigProbingSession_FieldPathSelectorLocationType:
				result.LocationType = source.LocationType
			case ProbingConfigProbingSession_FieldPathSelectorLocation:
				result.Location = source.Location
				wholeLocationAccepted = true
			case ProbingConfigProbingSession_FieldPathSelectorIntervalSec:
				result.IntervalSec = source.IntervalSec
			case ProbingConfigProbingSession_FieldPathSelectorInterval:
				result.Interval = source.Interval
			case ProbingConfigProbingSession_FieldPathSelectorTos:
				result.Tos = source.Tos
			case ProbingConfigProbingSession_FieldPathSelectorWindowSize:
				result.WindowSize = source.WindowSize
			case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
				result.PathProbing = source.PathProbing
				wholePathProbingAccepted = true
			case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
				result.SpeedtestSettings = source.SpeedtestSettings
				wholeSpeedtestSettingsAccepted = true
			case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
				result.HttpProbingConfig = source.HttpProbingConfig
				wholeHttpProbingConfigAccepted = true
			case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
				result.ProxyConfiguration = source.ProxyConfiguration
				wholeProxyConfigurationAccepted = true
			case ProbingConfigProbingSession_FieldPathSelectorAddresses:
				result.Addresses = source.Addresses
			}
		case *ProbingConfigProbingSession_FieldSubPath:
			switch tp.selector {
			case ProbingConfigProbingSession_FieldPathSelectorLocation:
				locationMask.AppendPath(tp.subPath.(common.Location_FieldPath))
			case ProbingConfigProbingSession_FieldPathSelectorPathProbing:
				pathProbingMask.AppendPath(tp.subPath.(common.PathProbe_FieldPath))
			case ProbingConfigProbingSession_FieldPathSelectorSpeedtestSettings:
				speedtestSettingsMask.AppendPath(tp.subPath.(common.SpeedTestSettings_FieldPath))
			case ProbingConfigProbingSession_FieldPathSelectorHttpProbingConfig:
				httpProbingConfigMask.AppendPath(tp.subPath.(common.HTTPProbingConfig_FieldPath))
			case ProbingConfigProbingSession_FieldPathSelectorProxyConfiguration:
				proxyConfigurationMask.AppendPath(tp.subPath.(common.ProxyConfiguration_FieldPath))
			}
		}
	}
	if wholeLocationAccepted == false && len(locationMask.Paths) > 0 {
		result.Location = locationMask.Project(source.GetLocation())
	}
	if wholePathProbingAccepted == false && len(pathProbingMask.Paths) > 0 {
		result.PathProbing = pathProbingMask.Project(source.GetPathProbing())
	}
	if wholeSpeedtestSettingsAccepted == false && len(speedtestSettingsMask.Paths) > 0 {
		result.SpeedtestSettings = speedtestSettingsMask.Project(source.GetSpeedtestSettings())
	}
	if wholeHttpProbingConfigAccepted == false && len(httpProbingConfigMask.Paths) > 0 {
		result.HttpProbingConfig = httpProbingConfigMask.Project(source.GetHttpProbingConfig())
	}
	if wholeProxyConfigurationAccepted == false && len(proxyConfigurationMask.Paths) > 0 {
		result.ProxyConfiguration = proxyConfigurationMask.Project(source.GetProxyConfiguration())
	}
	return result
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingConfig_ProbingSession))
}

func (fieldMask *ProbingConfig_ProbingSession_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProbingConfig_Spec_FieldMask struct {
	Paths []ProbingConfigSpec_FieldPath
}

func FullProbingConfig_Spec_FieldMask() *ProbingConfig_Spec_FieldMask {
	res := &ProbingConfig_Spec_FieldMask{}
	res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorProbe})
	res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorProbingSessions})
	res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorSpeedtest})
	res.Paths = append(res.Paths, &ProbingConfigSpec_FieldTerminalPath{selector: ProbingConfigSpec_FieldPathSelectorTargetSessions})
	return res
}

func (fieldMask *ProbingConfig_Spec_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingConfig_Spec_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingConfig_Spec_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingConfigSpec_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingConfigSpec_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingConfig_Spec_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingConfigSpec_FieldPath(raw)
	})
}

func (fieldMask *ProbingConfig_Spec_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingConfig_Spec_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingConfig_Spec_FieldMask) Subtract(other *ProbingConfig_Spec_FieldMask) *ProbingConfig_Spec_FieldMask {
	result := &ProbingConfig_Spec_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[ProbingConfigSpec_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfigSpec_FieldPathSelectorProbingSessions: &ProbingConfig_ProbingSession_FieldMask{},
		ProbingConfigSpec_FieldPathSelectorSpeedtest:       &ProbingConfig_Spec_SpeedTest_FieldMask{},
		ProbingConfigSpec_FieldPathSelectorTargetSessions:  &ProbingConfig_ProbingSession_FieldMask{},
	}
	mySubMasks := map[ProbingConfigSpec_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfigSpec_FieldPathSelectorProbingSessions: &ProbingConfig_ProbingSession_FieldMask{},
		ProbingConfigSpec_FieldPathSelectorSpeedtest:       &ProbingConfig_Spec_SpeedTest_FieldMask{},
		ProbingConfigSpec_FieldPathSelectorTargetSessions:  &ProbingConfig_ProbingSession_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingConfigSpec_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProbingConfigSpec_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProbingConfigSpec_FieldTerminalPath); ok {
					switch tp.selector {
					case ProbingConfigSpec_FieldPathSelectorProbingSessions:
						mySubMasks[ProbingConfigSpec_FieldPathSelectorProbingSessions] = FullProbingConfig_ProbingSession_FieldMask()
					case ProbingConfigSpec_FieldPathSelectorSpeedtest:
						mySubMasks[ProbingConfigSpec_FieldPathSelectorSpeedtest] = FullProbingConfig_Spec_SpeedTest_FieldMask()
					case ProbingConfigSpec_FieldPathSelectorTargetSessions:
						mySubMasks[ProbingConfigSpec_FieldPathSelectorTargetSessions] = FullProbingConfig_ProbingSession_FieldMask()
					}
				} else if tp, ok := path.(*ProbingConfigSpec_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProbingConfigSpec_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingConfig_Spec_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingConfig_Spec_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingConfig_Spec_FieldMask) FilterInputFields() *ProbingConfig_Spec_FieldMask {
	result := &ProbingConfig_Spec_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingConfig_Spec_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingConfig_Spec_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingConfigSpec_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingConfigSpec_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingConfig_Spec_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingConfig_Spec_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingConfig_Spec_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingConfig_Spec_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_FieldMask) AppendPath(path ProbingConfigSpec_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingConfig_Spec_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingConfigSpec_FieldPath))
}

func (fieldMask *ProbingConfig_Spec_FieldMask) GetPaths() []ProbingConfigSpec_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingConfig_Spec_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingConfig_Spec_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingConfigSpec_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingConfig_Spec_FieldMask) Set(target, source *ProbingConfig_Spec) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingConfig_Spec_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingConfig_Spec), source.(*ProbingConfig_Spec))
}

func (fieldMask *ProbingConfig_Spec_FieldMask) Project(source *ProbingConfig_Spec) *ProbingConfig_Spec {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingConfig_Spec{}
	probingSessionsMask := &ProbingConfig_ProbingSession_FieldMask{}
	wholeProbingSessionsAccepted := false
	speedtestMask := &ProbingConfig_Spec_SpeedTest_FieldMask{}
	wholeSpeedtestAccepted := false
	targetSessionsMask := &ProbingConfig_ProbingSession_FieldMask{}
	wholeTargetSessionsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingConfigSpec_FieldTerminalPath:
			switch tp.selector {
			case ProbingConfigSpec_FieldPathSelectorProbe:
				result.Probe = source.Probe
			case ProbingConfigSpec_FieldPathSelectorProbingSessions:
				result.ProbingSessions = source.ProbingSessions
				wholeProbingSessionsAccepted = true
			case ProbingConfigSpec_FieldPathSelectorSpeedtest:
				result.Speedtest = source.Speedtest
				wholeSpeedtestAccepted = true
			case ProbingConfigSpec_FieldPathSelectorTargetSessions:
				result.TargetSessions = source.TargetSessions
				wholeTargetSessionsAccepted = true
			}
		case *ProbingConfigSpec_FieldSubPath:
			switch tp.selector {
			case ProbingConfigSpec_FieldPathSelectorProbingSessions:
				probingSessionsMask.AppendPath(tp.subPath.(ProbingConfigProbingSession_FieldPath))
			case ProbingConfigSpec_FieldPathSelectorSpeedtest:
				speedtestMask.AppendPath(tp.subPath.(ProbingConfigSpecSpeedTest_FieldPath))
			case ProbingConfigSpec_FieldPathSelectorTargetSessions:
				targetSessionsMask.AppendPath(tp.subPath.(ProbingConfigProbingSession_FieldPath))
			}
		}
	}
	if wholeProbingSessionsAccepted == false && len(probingSessionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetProbingSessions() {
			result.ProbingSessions = append(result.ProbingSessions, probingSessionsMask.Project(sourceItem))
		}
	}
	if wholeSpeedtestAccepted == false && len(speedtestMask.Paths) > 0 {
		result.Speedtest = speedtestMask.Project(source.GetSpeedtest())
	}
	if wholeTargetSessionsAccepted == false && len(targetSessionsMask.Paths) > 0 {
		for _, sourceItem := range source.GetTargetSessions() {
			result.TargetSessions = append(result.TargetSessions, targetSessionsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ProbingConfig_Spec_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingConfig_Spec))
}

func (fieldMask *ProbingConfig_Spec_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProbingConfig_Status_FieldMask struct {
	Paths []ProbingConfigStatus_FieldPath
}

func FullProbingConfig_Status_FieldMask() *ProbingConfig_Status_FieldMask {
	res := &ProbingConfig_Status_FieldMask{}
	return res
}

func (fieldMask *ProbingConfig_Status_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingConfig_Status_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingConfig_Status_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingConfigStatus_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingConfig_Status_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 0)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingConfigStatus_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingConfig_Status_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingConfigStatus_FieldPath(raw)
	})
}

func (fieldMask *ProbingConfig_Status_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingConfig_Status_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingConfig_Status_FieldMask) Subtract(other *ProbingConfig_Status_FieldMask) *ProbingConfig_Status_FieldMask {
	result := &ProbingConfig_Status_FieldMask{}
	removedSelectors := make([]bool, 0)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingConfigStatus_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingConfig_Status_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingConfig_Status_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingConfig_Status_FieldMask) FilterInputFields() *ProbingConfig_Status_FieldMask {
	result := &ProbingConfig_Status_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingConfig_Status_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingConfig_Status_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingConfigStatus_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingConfigStatus_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingConfig_Status_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingConfig_Status_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_Status_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingConfig_Status_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingConfig_Status_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_Status_FieldMask) AppendPath(path ProbingConfigStatus_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingConfig_Status_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingConfigStatus_FieldPath))
}

func (fieldMask *ProbingConfig_Status_FieldMask) GetPaths() []ProbingConfigStatus_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingConfig_Status_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingConfig_Status_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingConfigStatus_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingConfig_Status_FieldMask) Set(target, source *ProbingConfig_Status) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingConfig_Status_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingConfig_Status), source.(*ProbingConfig_Status))
}

func (fieldMask *ProbingConfig_Status_FieldMask) Project(source *ProbingConfig_Status) *ProbingConfig_Status {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingConfig_Status{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingConfigStatus_FieldTerminalPath:
			switch tp.selector {
			}
		}
	}
	return result
}

func (fieldMask *ProbingConfig_Status_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingConfig_Status))
}

func (fieldMask *ProbingConfig_Status_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProbingConfig_Spec_SpeedTest_FieldMask struct {
	Paths []ProbingConfigSpecSpeedTest_FieldPath
}

func FullProbingConfig_Spec_SpeedTest_FieldMask() *ProbingConfig_Spec_SpeedTest_FieldMask {
	res := &ProbingConfig_Spec_SpeedTest_FieldMask{}
	res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled})
	res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes})
	res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorInterval})
	res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTest_FieldTerminalPath{selector: ProbingConfigSpecSpeedTest_FieldPathSelectorServers})
	return res
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingConfigSpecSpeedTest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingConfigSpecSpeedTest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingConfigSpecSpeedTest_FieldPath(raw)
	})
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) Subtract(other *ProbingConfig_Spec_SpeedTest_FieldMask) *ProbingConfig_Spec_SpeedTest_FieldMask {
	result := &ProbingConfig_Spec_SpeedTest_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[ProbingConfigSpecSpeedTest_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfigSpecSpeedTest_FieldPathSelectorServers: &ProbingConfig_Spec_SpeedTest_Server_FieldMask{},
	}
	mySubMasks := map[ProbingConfigSpecSpeedTest_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfigSpecSpeedTest_FieldPathSelectorServers: &ProbingConfig_Spec_SpeedTest_Server_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingConfigSpecSpeedTest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProbingConfigSpecSpeedTest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProbingConfigSpecSpeedTest_FieldTerminalPath); ok {
					switch tp.selector {
					case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
						mySubMasks[ProbingConfigSpecSpeedTest_FieldPathSelectorServers] = FullProbingConfig_Spec_SpeedTest_Server_FieldMask()
					}
				} else if tp, ok := path.(*ProbingConfigSpecSpeedTest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProbingConfigSpecSpeedTest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingConfig_Spec_SpeedTest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) FilterInputFields() *ProbingConfig_Spec_SpeedTest_FieldMask {
	result := &ProbingConfig_Spec_SpeedTest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingConfigSpecSpeedTest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingConfigSpecSpeedTest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingConfig_Spec_SpeedTest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingConfig_Spec_SpeedTest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) AppendPath(path ProbingConfigSpecSpeedTest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingConfigSpecSpeedTest_FieldPath))
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) GetPaths() []ProbingConfigSpecSpeedTest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingConfigSpecSpeedTest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) Set(target, source *ProbingConfig_Spec_SpeedTest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingConfig_Spec_SpeedTest), source.(*ProbingConfig_Spec_SpeedTest))
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) Project(source *ProbingConfig_Spec_SpeedTest) *ProbingConfig_Spec_SpeedTest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingConfig_Spec_SpeedTest{}
	serversMask := &ProbingConfig_Spec_SpeedTest_Server_FieldMask{}
	wholeServersAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingConfigSpecSpeedTest_FieldTerminalPath:
			switch tp.selector {
			case ProbingConfigSpecSpeedTest_FieldPathSelectorEnabled:
				result.Enabled = source.Enabled
			case ProbingConfigSpecSpeedTest_FieldPathSelectorIntervalMinutes:
				result.IntervalMinutes = source.IntervalMinutes
			case ProbingConfigSpecSpeedTest_FieldPathSelectorInterval:
				result.Interval = source.Interval
			case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
				result.Servers = source.Servers
				wholeServersAccepted = true
			}
		case *ProbingConfigSpecSpeedTest_FieldSubPath:
			switch tp.selector {
			case ProbingConfigSpecSpeedTest_FieldPathSelectorServers:
				serversMask.AppendPath(tp.subPath.(ProbingConfigSpecSpeedTestServer_FieldPath))
			}
		}
	}
	if wholeServersAccepted == false && len(serversMask.Paths) > 0 {
		for _, sourceItem := range source.GetServers() {
			result.Servers = append(result.Servers, serversMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingConfig_Spec_SpeedTest))
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ProbingConfig_Spec_SpeedTest_Server_FieldMask struct {
	Paths []ProbingConfigSpecSpeedTestServer_FieldPath
}

func FullProbingConfig_Spec_SpeedTest_Server_FieldMask() *ProbingConfig_Spec_SpeedTest_Server_FieldMask {
	res := &ProbingConfig_Spec_SpeedTest_Server_FieldMask{}
	res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorName})
	res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses})
	res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation})
	res.Paths = append(res.Paths, &ProbingConfigSpecSpeedTestServer_FieldTerminalPath{selector: ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget})
	return res
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProbingConfigSpecSpeedTestServer_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProbingConfigSpecSpeedTestServer_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProbingConfigSpecSpeedTestServer_FieldPath(raw)
	})
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) ProtoMessage() {}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) Subtract(other *ProbingConfig_Spec_SpeedTest_Server_FieldMask) *ProbingConfig_Spec_SpeedTest_Server_FieldMask {
	result := &ProbingConfig_Spec_SpeedTest_Server_FieldMask{}
	removedSelectors := make([]bool, 4)
	otherSubMasks := map[ProbingConfigSpecSpeedTestServer_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation: &common.Location_FieldMask{},
	}
	mySubMasks := map[ProbingConfigSpecSpeedTestServer_FieldPathSelector]gotenobject.FieldMask{
		ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation: &common.Location_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProbingConfigSpecSpeedTestServer_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProbingConfigSpecSpeedTestServer_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProbingConfigSpecSpeedTestServer_FieldTerminalPath); ok {
					switch tp.selector {
					case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
						mySubMasks[ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation] = common.FullLocation_FieldMask()
					}
				} else if tp, ok := path.(*ProbingConfigSpecSpeedTestServer_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProbingConfigSpecSpeedTestServer_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ProbingConfig_Spec_SpeedTest_Server_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) FilterInputFields() *ProbingConfig_Spec_SpeedTest_Server_FieldMask {
	result := &ProbingConfig_Spec_SpeedTest_Server_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProbingConfigSpecSpeedTestServer_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProbingConfigSpecSpeedTestServer_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ProbingConfig_Spec_SpeedTest_Server_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ProbingConfig_Spec_SpeedTest_Server_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) AppendPath(path ProbingConfigSpecSpeedTestServer_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProbingConfigSpecSpeedTestServer_FieldPath))
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) GetPaths() []ProbingConfigSpecSpeedTestServer_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProbingConfigSpecSpeedTestServer_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) Set(target, source *ProbingConfig_Spec_SpeedTest_Server) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ProbingConfig_Spec_SpeedTest_Server), source.(*ProbingConfig_Spec_SpeedTest_Server))
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) Project(source *ProbingConfig_Spec_SpeedTest_Server) *ProbingConfig_Spec_SpeedTest_Server {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ProbingConfig_Spec_SpeedTest_Server{}
	locationMask := &common.Location_FieldMask{}
	wholeLocationAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProbingConfigSpecSpeedTestServer_FieldTerminalPath:
			switch tp.selector {
			case ProbingConfigSpecSpeedTestServer_FieldPathSelectorName:
				result.Name = source.Name
			case ProbingConfigSpecSpeedTestServer_FieldPathSelectorIpAddresses:
				result.IpAddresses = source.IpAddresses
			case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
				result.Location = source.Location
				wholeLocationAccepted = true
			case ProbingConfigSpecSpeedTestServer_FieldPathSelectorTarget:
				result.Target = source.Target
			}
		case *ProbingConfigSpecSpeedTestServer_FieldSubPath:
			switch tp.selector {
			case ProbingConfigSpecSpeedTestServer_FieldPathSelectorLocation:
				locationMask.AppendPath(tp.subPath.(common.Location_FieldPath))
			}
		}
	}
	if wholeLocationAccepted == false && len(locationMask.Paths) > 0 {
		result.Location = locationMask.Project(source.GetLocation())
	}
	return result
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ProbingConfig_Spec_SpeedTest_Server))
}

func (fieldMask *ProbingConfig_Spec_SpeedTest_Server_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
