// Code generated by protoc-gen-goten-resource
// Resource: ProbingConfig
// DO NOT EDIT!!!

package probing_config

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	devices_project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &devices_project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.Actor{}
	_ = &iam_condition.Condition{}
	_ = &iam_organization.Organization{}
	_ = &iam_permission.Permission{}
	_ = &iam_project.Project{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &iam_user.User{}
	_ = &policy.Policy{}
	_ = &syncing_meta.SyncingMeta{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probe_group.ProbeGroup{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

type FilterBuilderOrCondition interface {
	_IsProbingConfigFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsProbingConfigFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp ProbingConfig_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      ProbingConfig_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Status() *filterCndBuilderStatus {
	return &filterCndBuilderStatus{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ApiVersion() *filterCndBuilderMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Uid() *filterCndBuilderMetadataOwnerReferencesUid {
	return &filterCndBuilderMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *ProbingConfig_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *ProbingConfig_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *ProbingConfig_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *ProbingConfig_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *ProbingConfig_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *ProbingConfig_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*ProbingConfig_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*ProbingConfig_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *ProbingConfig_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) Probe() *filterCndBuilderSpecProbe {
	return &filterCndBuilderSpecProbe{builder: b.builder}
}

func (b *filterCndBuilderSpec) ProbingSessions() *filterCndBuilderSpecProbingSessions {
	return &filterCndBuilderSpecProbingSessions{builder: b.builder}
}

func (b *filterCndBuilderSpec) Speedtest() *filterCndBuilderSpecSpeedtest {
	return &filterCndBuilderSpecSpeedtest{builder: b.builder}
}

func (b *filterCndBuilderSpec) TargetSessions() *filterCndBuilderSpecTargetSessions {
	return &filterCndBuilderSpecTargetSessions{builder: b.builder}
}

type filterCndBuilderSpecProbe struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbe) Eq(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbe) Neq(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbe) Gt(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbe) Gte(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbe) Lt(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbe) Lte(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbe) In(values []*probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Probe().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbe) NotIn(values []*probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Probe().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbe) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Probe().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbe) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Probe().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbe) compare(op gotenfilter.CompareOperator, value *probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Probe().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessions) Eq(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessions) Neq(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessions) Gt(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessions) Gte(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessions) Lt(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessions) Lte(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessions) In(values [][]*ProbingSession) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessions) NotIn(values [][]*ProbingSession) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessions) Contains(value *ProbingSession) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessions) ContainsAnyOf(values []*ProbingSession) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().ProbingSessions()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecProbingSessions) ContainsAll(values []*ProbingSession) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().ProbingSessions()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecProbingSessions) compare(op gotenfilter.CompareOperator, value []*ProbingSession) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessions) Target() *filterCndBuilderSpecProbingSessionsTarget {
	return &filterCndBuilderSpecProbingSessionsTarget{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) TargetDisplayName() *filterCndBuilderSpecProbingSessionsTargetDisplayName {
	return &filterCndBuilderSpecProbingSessionsTargetDisplayName{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) TargetGroup() *filterCndBuilderSpecProbingSessionsTargetGroup {
	return &filterCndBuilderSpecProbingSessionsTargetGroup{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) Mode() *filterCndBuilderSpecProbingSessionsMode {
	return &filterCndBuilderSpecProbingSessionsMode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) IpVersion() *filterCndBuilderSpecProbingSessionsIpVersion {
	return &filterCndBuilderSpecProbingSessionsIpVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) Address() *filterCndBuilderSpecProbingSessionsAddress {
	return &filterCndBuilderSpecProbingSessionsAddress{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) GroupName() *filterCndBuilderSpecProbingSessionsGroupName {
	return &filterCndBuilderSpecProbingSessionsGroupName{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) Category() *filterCndBuilderSpecProbingSessionsCategory {
	return &filterCndBuilderSpecProbingSessionsCategory{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) LocationType() *filterCndBuilderSpecProbingSessionsLocationType {
	return &filterCndBuilderSpecProbingSessionsLocationType{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) Location() *filterCndBuilderSpecProbingSessionsLocation {
	return &filterCndBuilderSpecProbingSessionsLocation{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) IntervalSec() *filterCndBuilderSpecProbingSessionsIntervalSec {
	return &filterCndBuilderSpecProbingSessionsIntervalSec{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) Interval() *filterCndBuilderSpecProbingSessionsInterval {
	return &filterCndBuilderSpecProbingSessionsInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) Tos() *filterCndBuilderSpecProbingSessionsTos {
	return &filterCndBuilderSpecProbingSessionsTos{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) WindowSize() *filterCndBuilderSpecProbingSessionsWindowSize {
	return &filterCndBuilderSpecProbingSessionsWindowSize{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) PathProbing() *filterCndBuilderSpecProbingSessionsPathProbing {
	return &filterCndBuilderSpecProbingSessionsPathProbing{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) SpeeedtestSettings() *filterCndBuilderSpecProbingSessionsSpeeedtestSettings {
	return &filterCndBuilderSpecProbingSessionsSpeeedtestSettings{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) HttpProbingConfig() *filterCndBuilderSpecProbingSessionsHttpProbingConfig {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) ProxyConfiguration() *filterCndBuilderSpecProbingSessionsProxyConfiguration {
	return &filterCndBuilderSpecProbingSessionsProxyConfiguration{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessions) Addresses() *filterCndBuilderSpecProbingSessionsAddresses {
	return &filterCndBuilderSpecProbingSessionsAddresses{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsTarget) Eq(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsTarget) Neq(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsTarget) Gt(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsTarget) Gte(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsTarget) Lt(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsTarget) Lte(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsTarget) In(values []*probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Target().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTarget) NotIn(values []*probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Target().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Target().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Target().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTarget) compare(op gotenfilter.CompareOperator, value *probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Target().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsTargetDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetDisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetDisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetDisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetDisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTargetDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetDisplayName().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsTargetGroup struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) Eq(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) Neq(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) Gt(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) Gte(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) Lt(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) Lte(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) In(values []*probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) NotIn(values []*probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetGroup().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetGroup().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTargetGroup) compare(op gotenfilter.CompareOperator, value *probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().TargetGroup().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsMode) Eq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsMode) Neq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsMode) Gt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsMode) Gte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsMode) Lt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsMode) Lte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsMode) In(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsMode) NotIn(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsMode) compare(op gotenfilter.CompareOperator, value common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsIpVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) Eq(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) Neq(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) Gt(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) Gte(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) Lt(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) Lte(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) In(values []common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IpVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) NotIn(values []common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IpVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IpVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IpVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsIpVersion) compare(op gotenfilter.CompareOperator, value common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IpVersion().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Address().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsGroupName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().GroupName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().GroupName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().GroupName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().GroupName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsGroupName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().GroupName().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsCategory struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsCategory) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsCategory) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsCategory) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsCategory) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsCategory) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsCategory) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsCategory) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Category().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsCategory) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Category().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsCategory) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Category().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsCategory) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Category().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsCategory) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Category().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) Eq(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) Neq(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) Gt(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) Gte(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) Lt(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) Lte(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) In(values []common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().LocationType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) NotIn(values []common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().LocationType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().LocationType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().LocationType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationType) compare(op gotenfilter.CompareOperator, value common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().LocationType().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Address() *filterCndBuilderSpecProbingSessionsLocationAddress {
	return &filterCndBuilderSpecProbingSessionsLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocation) AdminHierarchy() *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy {
	return &filterCndBuilderSpecProbingSessionsLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Coordinates() *filterCndBuilderSpecProbingSessionsLocationCoordinates {
	return &filterCndBuilderSpecProbingSessionsLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocation) Accuracy() *filterCndBuilderSpecProbingSessionsLocationAccuracy {
	return &filterCndBuilderSpecProbingSessionsLocationAccuracy{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) PostalCode() *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode {
	return &filterCndBuilderSpecProbingSessionsLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) CountryCode() *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode {
	return &filterCndBuilderSpecProbingSessionsLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) Continent() *filterCndBuilderSpecProbingSessionsLocationAddressContinent {
	return &filterCndBuilderSpecProbingSessionsLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) Country() *filterCndBuilderSpecProbingSessionsLocationAddressCountry {
	return &filterCndBuilderSpecProbingSessionsLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) AdminArea1() *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1 {
	return &filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) AdminArea2() *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2 {
	return &filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) AdminArea3() *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3 {
	return &filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) AdminArea4() *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4 {
	return &filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddress) StreetAddress() *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress {
	return &filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().Country().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Continent() *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent {
	return &filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Country() *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry {
	return &filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Admin1() *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Admin2() *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Admin3() *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Admin4() *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchy) Admin5() *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Coordinates().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Location().Accuracy().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsIntervalSec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsIntervalSec) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().IntervalSec().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsTos struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsTos) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsTos) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsTos) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsTos) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsTos) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsTos) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsTos) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Tos().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTos) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Tos().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTos) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Tos().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTos) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Tos().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsTos) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Tos().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsWindowSize struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WindowSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WindowSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WindowSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WindowSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsWindowSize) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().WindowSize().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsPathProbing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Eq(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Neq(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Gt(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Gte(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Lt(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Lte(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) In(values []*common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) NotIn(values []*common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) compare(op gotenfilter.CompareOperator, value *common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Enabled() *filterCndBuilderSpecProbingSessionsPathProbingEnabled {
	return &filterCndBuilderSpecProbingSessionsPathProbingEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Mode() *filterCndBuilderSpecProbingSessionsPathProbingMode {
	return &filterCndBuilderSpecProbingSessionsPathProbingMode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Interval() *filterCndBuilderSpecProbingSessionsPathProbingInterval {
	return &filterCndBuilderSpecProbingSessionsPathProbingInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) IntervalSec() *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec {
	return &filterCndBuilderSpecProbingSessionsPathProbingIntervalSec{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) Attempts() *filterCndBuilderSpecProbingSessionsPathProbingAttempts {
	return &filterCndBuilderSpecProbingSessionsPathProbingAttempts{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsPathProbing) MaxTtl() *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl {
	return &filterCndBuilderSpecProbingSessionsPathProbingMaxTtl{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsPathProbingEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsPathProbingMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) Eq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) Neq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) Gt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) Gte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) Lt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) Lte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) In(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) NotIn(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMode) compare(op gotenfilter.CompareOperator, value common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsPathProbingInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsPathProbingIntervalSec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingIntervalSec) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().IntervalSec().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsPathProbingAttempts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Attempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Attempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Attempts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Attempts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingAttempts) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().Attempts().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsPathProbingMaxTtl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().MaxTtl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().MaxTtl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().MaxTtl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().MaxTtl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsPathProbingMaxTtl) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().PathProbing().MaxTtl().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsSpeeedtestSettings struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) Eq(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) Neq(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) Gt(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) Gte(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) Lt(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) Lte(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) In(values []*common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) NotIn(values []*common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) compare(op gotenfilter.CompareOperator, value *common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) Duration() *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration {
	return &filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) UseTls() *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls {
	return &filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettings) ServerSelection() *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection {
	return &filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsDuration) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().Duration().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsUseTls) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().UseTls().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) Eq(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) Neq(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) Gt(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) Gte(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) Lt(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) Lte(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) In(values []common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().ServerSelection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) NotIn(values []common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().ServerSelection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().ServerSelection().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().ServerSelection().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsSpeeedtestSettingsServerSelection) compare(op gotenfilter.CompareOperator, value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().SpeeedtestSettings().ServerSelection().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) Eq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) Neq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) Gt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) Gte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) Lt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) Lte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) In(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) NotIn(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) HttpRequest() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfig) AuthConfig() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) Url() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) RequestHeaders() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) RequestMethod() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) ExpectedResponseCode() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) Timeout() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) RequestBody() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) AuthenticationMethod() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequest) UrlFormEncodedBody() *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Url().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders {
	return &mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Eq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Neq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) In(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) NotIn(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) WithKey(key string) *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody {
	return &mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Eq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Neq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) In(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) NotIn(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) Eq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) Neq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) Gt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) Gte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) Lt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) Lte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) In(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) NotIn(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) Username() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) Password() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) TokenRequest() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) TokenResponseHeader() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) TokenResponseBodyKey() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) RequestHeaderTokenKey() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfig) TokenResponseBodyExpiryKey() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigUsername) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Username().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().Password().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) Url() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) RequestHeaders() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) RequestMethod() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) ExpectedResponseCode() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) Timeout() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) RequestBody() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) AuthenticationMethod() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequest) UrlFormEncodedBody() *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody {
	return &filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Eq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Neq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) In(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) NotIn(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) WithKey(key string) *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody {
	return &mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Eq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Neq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) In(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) NotIn(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseHeader) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsProxyConfiguration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) Eq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) Neq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) Gt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) Gte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) Lt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) Lte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) In(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) NotIn(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) compare(op gotenfilter.CompareOperator, value *common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) ProxySetting() *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting {
	return &filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) HttpProxy() *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy {
	return &filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) HttpsProxy() *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy {
	return &filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfiguration) NoProxy() *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy {
	return &filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy{builder: b.builder}
}

type filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) Eq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) Neq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) Gt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) Gte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) Lt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) Lte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) In(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) NotIn(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationProxySetting) compare(op gotenfilter.CompareOperator, value common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().ProxySetting().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpProxy().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationHttpsProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().HttpsProxy().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsProxyConfigurationNoProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().ProxyConfiguration().NoProxy().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSessionsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecProbingSessionsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().ProbingSessions().Addresses().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtest) Eq(value *ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtest) Neq(value *ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtest) Gt(value *ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtest) Gte(value *ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtest) Lt(value *ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtest) Lte(value *ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtest) In(values []*ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtest) NotIn(values []*ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtest) compare(op gotenfilter.CompareOperator, value *ProbingConfig_Spec_SpeedTest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSpeedtest) Enabled() *filterCndBuilderSpecSpeedtestEnabled {
	return &filterCndBuilderSpecSpeedtestEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtest) IntervalMinutes() *filterCndBuilderSpecSpeedtestIntervalMinutes {
	return &filterCndBuilderSpecSpeedtestIntervalMinutes{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtest) Interval() *filterCndBuilderSpecSpeedtestInterval {
	return &filterCndBuilderSpecSpeedtestInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtest) Servers() *filterCndBuilderSpecSpeedtestServers {
	return &filterCndBuilderSpecSpeedtestServers{builder: b.builder}
}

type filterCndBuilderSpecSpeedtestEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestIntervalMinutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().IntervalMinutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().IntervalMinutes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().IntervalMinutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().IntervalMinutes().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestIntervalMinutes) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().IntervalMinutes().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServers) Eq(value []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServers) Neq(value []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServers) Gt(value []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServers) Gte(value []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServers) Lt(value []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServers) Lte(value []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServers) In(values [][]*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServers) NotIn(values [][]*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServers) Contains(value *ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecSpeedtestServers) ContainsAnyOf(values []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSpeedtestServers) ContainsAll(values []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSpeedtestServers) compare(op gotenfilter.CompareOperator, value []*ProbingConfig_Spec_SpeedTest_Server) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSpeedtestServers) Name() *filterCndBuilderSpecSpeedtestServersName {
	return &filterCndBuilderSpecSpeedtestServersName{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServers) IpAddresses() *filterCndBuilderSpecSpeedtestServersIpAddresses {
	return &filterCndBuilderSpecSpeedtestServersIpAddresses{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServers) Location() *filterCndBuilderSpecSpeedtestServersLocation {
	return &filterCndBuilderSpecSpeedtestServersLocation{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServers) Target() *filterCndBuilderSpecSpeedtestServersTarget {
	return &filterCndBuilderSpecSpeedtestServersTarget{builder: b.builder}
}

type filterCndBuilderSpecSpeedtestServersName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Name().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Name().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersIpAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecSpeedtestServersIpAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().IpAddresses().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Address() *filterCndBuilderSpecSpeedtestServersLocationAddress {
	return &filterCndBuilderSpecSpeedtestServersLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) AdminHierarchy() *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy {
	return &filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Coordinates() *filterCndBuilderSpecSpeedtestServersLocationCoordinates {
	return &filterCndBuilderSpecSpeedtestServersLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocation) Accuracy() *filterCndBuilderSpecSpeedtestServersLocationAccuracy {
	return &filterCndBuilderSpecSpeedtestServersLocationAccuracy{builder: b.builder}
}

type filterCndBuilderSpecSpeedtestServersLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) PostalCode() *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) CountryCode() *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) Continent() *filterCndBuilderSpecSpeedtestServersLocationAddressContinent {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) Country() *filterCndBuilderSpecSpeedtestServersLocationAddressCountry {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) AdminArea1() *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1 {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) AdminArea2() *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2 {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) AdminArea3() *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3 {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) AdminArea4() *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4 {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddress) StreetAddress() *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress {
	return &filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().Country().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Continent() *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent {
	return &filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Country() *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry {
	return &filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Admin1() *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Admin2() *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Admin3() *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Admin4() *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchy) Admin5() *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Coordinates().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Location().Accuracy().WithValue(value),
	})
}

type filterCndBuilderSpecSpeedtestServersTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) Eq(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) Neq(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) Gt(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) Gte(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) Lt(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) Lte(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) In(values []*probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Target().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) NotIn(values []*probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Target().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Target().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Target().FieldPath(),
	})
}

func (b *filterCndBuilderSpecSpeedtestServersTarget) compare(op gotenfilter.CompareOperator, value *probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().Speedtest().Servers().Target().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessions) Eq(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessions) Neq(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessions) Gt(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessions) Gte(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessions) Lt(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessions) Lte(value []*ProbingSession) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessions) In(values [][]*ProbingSession) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessions) NotIn(values [][]*ProbingSession) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessions) Contains(value *ProbingSession) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessions) ContainsAnyOf(values []*ProbingSession) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().TargetSessions()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTargetSessions) ContainsAll(values []*ProbingSession) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().TargetSessions()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTargetSessions) compare(op gotenfilter.CompareOperator, value []*ProbingSession) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessions) Target() *filterCndBuilderSpecTargetSessionsTarget {
	return &filterCndBuilderSpecTargetSessionsTarget{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) TargetDisplayName() *filterCndBuilderSpecTargetSessionsTargetDisplayName {
	return &filterCndBuilderSpecTargetSessionsTargetDisplayName{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) TargetGroup() *filterCndBuilderSpecTargetSessionsTargetGroup {
	return &filterCndBuilderSpecTargetSessionsTargetGroup{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) Mode() *filterCndBuilderSpecTargetSessionsMode {
	return &filterCndBuilderSpecTargetSessionsMode{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) IpVersion() *filterCndBuilderSpecTargetSessionsIpVersion {
	return &filterCndBuilderSpecTargetSessionsIpVersion{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) Address() *filterCndBuilderSpecTargetSessionsAddress {
	return &filterCndBuilderSpecTargetSessionsAddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) GroupName() *filterCndBuilderSpecTargetSessionsGroupName {
	return &filterCndBuilderSpecTargetSessionsGroupName{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) Category() *filterCndBuilderSpecTargetSessionsCategory {
	return &filterCndBuilderSpecTargetSessionsCategory{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) LocationType() *filterCndBuilderSpecTargetSessionsLocationType {
	return &filterCndBuilderSpecTargetSessionsLocationType{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) Location() *filterCndBuilderSpecTargetSessionsLocation {
	return &filterCndBuilderSpecTargetSessionsLocation{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) IntervalSec() *filterCndBuilderSpecTargetSessionsIntervalSec {
	return &filterCndBuilderSpecTargetSessionsIntervalSec{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) Interval() *filterCndBuilderSpecTargetSessionsInterval {
	return &filterCndBuilderSpecTargetSessionsInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) Tos() *filterCndBuilderSpecTargetSessionsTos {
	return &filterCndBuilderSpecTargetSessionsTos{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) WindowSize() *filterCndBuilderSpecTargetSessionsWindowSize {
	return &filterCndBuilderSpecTargetSessionsWindowSize{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) PathProbing() *filterCndBuilderSpecTargetSessionsPathProbing {
	return &filterCndBuilderSpecTargetSessionsPathProbing{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) SpeeedtestSettings() *filterCndBuilderSpecTargetSessionsSpeeedtestSettings {
	return &filterCndBuilderSpecTargetSessionsSpeeedtestSettings{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) HttpProbingConfig() *filterCndBuilderSpecTargetSessionsHttpProbingConfig {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) ProxyConfiguration() *filterCndBuilderSpecTargetSessionsProxyConfiguration {
	return &filterCndBuilderSpecTargetSessionsProxyConfiguration{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessions) Addresses() *filterCndBuilderSpecTargetSessionsAddresses {
	return &filterCndBuilderSpecTargetSessionsAddresses{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsTarget) Eq(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsTarget) Neq(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsTarget) Gt(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsTarget) Gte(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsTarget) Lt(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsTarget) Lte(value *probing_target.Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsTarget) In(values []*probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Target().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTarget) NotIn(values []*probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Target().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Target().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Target().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTarget) compare(op gotenfilter.CompareOperator, value *probing_target.Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Target().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsTargetDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetDisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetDisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetDisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetDisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTargetDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetDisplayName().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsTargetGroup struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) Eq(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) Neq(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) Gt(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) Gte(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) Lt(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) Lte(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) In(values []*probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) NotIn(values []*probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetGroup().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetGroup().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTargetGroup) compare(op gotenfilter.CompareOperator, value *probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().TargetGroup().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsMode) Eq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsMode) Neq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsMode) Gt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsMode) Gte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsMode) Lt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsMode) Lte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsMode) In(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsMode) NotIn(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsMode) compare(op gotenfilter.CompareOperator, value common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsIpVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) Eq(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) Neq(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) Gt(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) Gte(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) Lt(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) Lte(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) In(values []common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IpVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) NotIn(values []common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IpVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IpVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IpVersion().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsIpVersion) compare(op gotenfilter.CompareOperator, value common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IpVersion().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Address().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsGroupName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().GroupName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().GroupName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().GroupName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().GroupName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsGroupName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().GroupName().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsCategory struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsCategory) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsCategory) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsCategory) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsCategory) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsCategory) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsCategory) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsCategory) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Category().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsCategory) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Category().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsCategory) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Category().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsCategory) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Category().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsCategory) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Category().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) Eq(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) Neq(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) Gt(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) Gte(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) Lt(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) Lte(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) In(values []common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().LocationType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) NotIn(values []common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().LocationType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().LocationType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().LocationType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationType) compare(op gotenfilter.CompareOperator, value common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().LocationType().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Address() *filterCndBuilderSpecTargetSessionsLocationAddress {
	return &filterCndBuilderSpecTargetSessionsLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocation) AdminHierarchy() *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy {
	return &filterCndBuilderSpecTargetSessionsLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Coordinates() *filterCndBuilderSpecTargetSessionsLocationCoordinates {
	return &filterCndBuilderSpecTargetSessionsLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocation) Accuracy() *filterCndBuilderSpecTargetSessionsLocationAccuracy {
	return &filterCndBuilderSpecTargetSessionsLocationAccuracy{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) PostalCode() *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode {
	return &filterCndBuilderSpecTargetSessionsLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) CountryCode() *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode {
	return &filterCndBuilderSpecTargetSessionsLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) Continent() *filterCndBuilderSpecTargetSessionsLocationAddressContinent {
	return &filterCndBuilderSpecTargetSessionsLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) Country() *filterCndBuilderSpecTargetSessionsLocationAddressCountry {
	return &filterCndBuilderSpecTargetSessionsLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) AdminArea1() *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1 {
	return &filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) AdminArea2() *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2 {
	return &filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) AdminArea3() *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3 {
	return &filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) AdminArea4() *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4 {
	return &filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddress) StreetAddress() *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress {
	return &filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().Country().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Continent() *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent {
	return &filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Country() *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry {
	return &filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Admin1() *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Admin2() *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Admin3() *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Admin4() *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchy) Admin5() *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Coordinates().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Location().Accuracy().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsIntervalSec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsIntervalSec) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().IntervalSec().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsTos struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsTos) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsTos) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsTos) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsTos) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsTos) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsTos) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsTos) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Tos().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTos) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Tos().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTos) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Tos().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTos) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Tos().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsTos) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Tos().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsWindowSize struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WindowSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WindowSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WindowSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WindowSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsWindowSize) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().WindowSize().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsPathProbing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Eq(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Neq(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Gt(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Gte(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Lt(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Lte(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) In(values []*common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) NotIn(values []*common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) compare(op gotenfilter.CompareOperator, value *common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Enabled() *filterCndBuilderSpecTargetSessionsPathProbingEnabled {
	return &filterCndBuilderSpecTargetSessionsPathProbingEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Mode() *filterCndBuilderSpecTargetSessionsPathProbingMode {
	return &filterCndBuilderSpecTargetSessionsPathProbingMode{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Interval() *filterCndBuilderSpecTargetSessionsPathProbingInterval {
	return &filterCndBuilderSpecTargetSessionsPathProbingInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) IntervalSec() *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec {
	return &filterCndBuilderSpecTargetSessionsPathProbingIntervalSec{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) Attempts() *filterCndBuilderSpecTargetSessionsPathProbingAttempts {
	return &filterCndBuilderSpecTargetSessionsPathProbingAttempts{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsPathProbing) MaxTtl() *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl {
	return &filterCndBuilderSpecTargetSessionsPathProbingMaxTtl{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsPathProbingEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsPathProbingMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) Eq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) Neq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) Gt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) Gte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) Lt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) Lte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) In(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) NotIn(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMode) compare(op gotenfilter.CompareOperator, value common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsPathProbingInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsPathProbingIntervalSec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingIntervalSec) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().IntervalSec().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsPathProbingAttempts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Attempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Attempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Attempts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Attempts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingAttempts) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().Attempts().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsPathProbingMaxTtl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().MaxTtl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().MaxTtl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().MaxTtl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().MaxTtl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsPathProbingMaxTtl) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().PathProbing().MaxTtl().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsSpeeedtestSettings struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) Eq(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) Neq(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) Gt(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) Gte(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) Lt(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) Lte(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) In(values []*common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) NotIn(values []*common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) compare(op gotenfilter.CompareOperator, value *common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) Duration() *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration {
	return &filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) UseTls() *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls {
	return &filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettings) ServerSelection() *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection {
	return &filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsDuration) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().Duration().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsUseTls) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().UseTls().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) Eq(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) Neq(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) Gt(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) Gte(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) Lt(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) Lte(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) In(values []common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().ServerSelection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) NotIn(values []common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().ServerSelection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().ServerSelection().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().ServerSelection().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsSpeeedtestSettingsServerSelection) compare(op gotenfilter.CompareOperator, value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().SpeeedtestSettings().ServerSelection().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) Eq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) Neq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) Gt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) Gte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) Lt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) Lte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) In(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) NotIn(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) HttpRequest() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfig) AuthConfig() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) Url() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) RequestHeaders() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) RequestMethod() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) ExpectedResponseCode() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) Timeout() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) RequestBody() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) AuthenticationMethod() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequest) UrlFormEncodedBody() *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Url().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders {
	return &mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Eq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Neq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) In(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) NotIn(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) WithKey(key string) *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody {
	return &mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Eq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Neq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) In(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) NotIn(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigHttpRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) Eq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) Neq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) Gt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) Gte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) Lt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) Lte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) In(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) NotIn(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) Username() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) Password() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) TokenRequest() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) TokenResponseHeader() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) TokenResponseBodyKey() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) RequestHeaderTokenKey() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfig) TokenResponseBodyExpiryKey() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigUsername) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Username().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().Password().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) Url() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) RequestHeaders() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) RequestMethod() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) ExpectedResponseCode() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) Timeout() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) RequestBody() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) AuthenticationMethod() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequest) UrlFormEncodedBody() *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody {
	return &filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Eq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Neq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) In(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) NotIn(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) WithKey(key string) *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody {
	return &mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Eq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Neq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) In(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) NotIn(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseHeader) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigRequestHeaderTokenKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsProxyConfiguration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) Eq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) Neq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) Gt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) Gte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) Lt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) Lte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) In(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) NotIn(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) compare(op gotenfilter.CompareOperator, value *common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) ProxySetting() *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting {
	return &filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) HttpProxy() *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy {
	return &filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) HttpsProxy() *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy {
	return &filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfiguration) NoProxy() *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy {
	return &filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy{builder: b.builder}
}

type filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) Eq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) Neq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) Gt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) Gte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) Lt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) Lte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) In(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) NotIn(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationProxySetting) compare(op gotenfilter.CompareOperator, value common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().ProxySetting().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpProxy().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationHttpsProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().HttpsProxy().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsProxyConfigurationNoProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().ProxyConfiguration().NoProxy().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSessionsAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().FieldPath(),
		Value:     NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses()
	itemValues := make([]ProbingConfig_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecTargetSessionsAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Spec().TargetSessions().Addresses().WithValue(value),
	})
}

type filterCndBuilderStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatus) Eq(value *ProbingConfig_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatus) Neq(value *ProbingConfig_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatus) Gt(value *ProbingConfig_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatus) Gte(value *ProbingConfig_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatus) Lt(value *ProbingConfig_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatus) Lte(value *ProbingConfig_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatus) In(values []*ProbingConfig_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) NotIn(values []*ProbingConfig_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingConfig_FieldPathArrayOfValues: NewProbingConfigFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingConfigFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingConfigFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) compare(op gotenfilter.CompareOperator, value *ProbingConfig_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingConfig_FieldPathValue: NewProbingConfigFieldPathBuilder().Status().WithValue(value),
	})
}
