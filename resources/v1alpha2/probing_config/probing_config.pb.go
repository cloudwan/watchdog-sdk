// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/probing_config.proto
// DO NOT EDIT!!!

package probing_config

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProbingConfig Resource
type ProbingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ProbingConfig
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Display name of ProbingConfig
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// metadata describes additional information of the probing config.
	Metadata *ntt_meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// spec describes the to-be state of the probing config.
	Spec *ProbingConfig_Spec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	// status shows the current status of the probing config.
	Status *ProbingConfig_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *ProbingConfig) Reset() {
	*m = ProbingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingConfig) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingConfig) ProtoMessage() {}

func (m *ProbingConfig) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingConfig) GotenMessage() {}

// Deprecated, Use ProbingConfig.ProtoReflect.Descriptor instead.
func (*ProbingConfig) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_config_proto_rawDescGZIP(), []int{0}
}

func (m *ProbingConfig) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingConfig) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingConfig) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingConfig) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingConfig) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProbingConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ProbingConfig) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProbingConfig) GetSpec() *ProbingConfig_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProbingConfig) GetStatus() *ProbingConfig_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProbingConfig) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ProbingConfig"))
	}
	m.Name = fv
}

func (m *ProbingConfig) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "ProbingConfig"))
	}
	m.DisplayName = fv
}

func (m *ProbingConfig) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "ProbingConfig"))
	}
	m.Metadata = fv
}

func (m *ProbingConfig) SetSpec(fv *ProbingConfig_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "ProbingConfig"))
	}
	m.Spec = fv
}

func (m *ProbingConfig) SetStatus(fv *ProbingConfig_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "ProbingConfig"))
	}
	m.Status = fv
}

// ProbingSession is target
type ProbingSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ProbingTarget
	Target *probing_target.Name `protobuf:"bytes,1,opt,customtype=Name,name=target,proto3" json:"target,omitempty" firestore:"target"`
	// Display name is a human readable representation of the target
	TargetDisplayName string `protobuf:"bytes,6,opt,name=target_display_name,json=targetDisplayName,proto3" json:"target_display_name,omitempty" firestore:"targetDisplayName"`
	// group reference
	TargetGroup *probing_target_group.Reference `protobuf:"bytes,17,opt,customtype=Reference,name=target_group,json=targetGroup,proto3" json:"target_group,omitempty" firestore:"targetGroup"`
	// mode defines the mode for this probe target - icmp/udp/http/tcp
	Mode common.ProbingMode `protobuf:"varint,2,opt,name=mode,proto3,enum=ntt.watchdog.v1alpha2.ProbingMode" json:"mode,omitempty" firestore:"mode"`
	// ip_version defines which IP version should be used.
	IpVersion common.IpVersion `protobuf:"varint,4,opt,name=ip_version,json=ipVersion,proto3,enum=ntt.watchdog.v1alpha2.IpVersion" json:"ip_version,omitempty" firestore:"ipVersion"`
	// address is the actual target for the probe - IP addreses/http endpoint
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
	// Additional Group Name to enrich data.
	GroupName string `protobuf:"bytes,11,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty" firestore:"groupName"`
	// Additional Category Name to enrich data
	Category string `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty" firestore:"category"`
	// Target location type
	LocationType common.LocationType `protobuf:"varint,14,opt,name=location_type,json=locationType,proto3,enum=ntt.watchdog.v1alpha2.LocationType" json:"location_type,omitempty" firestore:"locationType"`
	// Specific location if applicable
	Location *common.Location `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty" firestore:"location"`
	// (deprecated) Interval defines the interval of probing in seconds.
	IntervalSec int64 `protobuf:"varint,5,opt,name=interval_sec,json=intervalSec,proto3" json:"interval_sec,omitempty" firestore:"intervalSec"`
	// Interval defines probing interval
	Interval *duration.Duration `protobuf:"bytes,16,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// TOS for ipv4 or Traffic class for ipv6. Don't set it (use defaults or
	// distribution overrides)
	Tos uint32 `protobuf:"varint,7,opt,name=tos,proto3" json:"tos,omitempty" firestore:"tos"`
	// Window size. Don't set it (use default_settings or distribution overrides)
	WindowSize uint32 `protobuf:"varint,9,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty" firestore:"windowSize"`
	// Path Probing settings. Don't set it (use default_settings or distribution
	// overrides)
	PathProbing *common.PathProbe `protobuf:"bytes,8,opt,name=path_probing,json=pathProbing,proto3" json:"path_probing,omitempty" firestore:"pathProbing"`
	// Speedtest specific settings
	SpeeedtestSettings *common.SpeedTestSettings `protobuf:"bytes,18,opt,name=speeedtest_settings,json=speeedtestSettings,proto3" json:"speeedtest_settings,omitempty" firestore:"speeedtestSettings"`
	// HTTP Probing Settings
	HttpProbingConfig *common.HTTPProbingConfig `protobuf:"bytes,19,opt,name=http_probing_config,json=httpProbingConfig,proto3" json:"http_probing_config,omitempty" firestore:"httpProbingConfig"`
	// Proxy configuration (for speedtest and http)
	ProxyConfiguration *common.ProxyConfiguration `protobuf:"bytes,20,opt,name=proxy_configuration,json=proxyConfiguration,proto3" json:"proxy_configuration,omitempty" firestore:"proxyConfiguration"`
}

func (m *ProbingSession) Reset() {
	*m = ProbingSession{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingSession) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingSession) ProtoMessage() {}

func (m *ProbingSession) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingSession) GotenMessage() {}

// Deprecated, Use ProbingSession.ProtoReflect.Descriptor instead.
func (*ProbingSession) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_config_proto_rawDescGZIP(), []int{1}
}

func (m *ProbingSession) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingSession) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingSession) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingSession) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingSession) GetTarget() *probing_target.Name {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ProbingSession) GetTargetDisplayName() string {
	if m != nil {
		return m.TargetDisplayName
	}
	return ""
}

func (m *ProbingSession) GetTargetGroup() *probing_target_group.Reference {
	if m != nil {
		return m.TargetGroup
	}
	return nil
}

func (m *ProbingSession) GetMode() common.ProbingMode {
	if m != nil {
		return m.Mode
	}
	return common.ProbingMode_PROBING_MODE_UNSPECIFIED
}

func (m *ProbingSession) GetIpVersion() common.IpVersion {
	if m != nil {
		return m.IpVersion
	}
	return common.IpVersion_IP_VERSION_UNSPECIFIED
}

func (m *ProbingSession) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ProbingSession) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *ProbingSession) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ProbingSession) GetLocationType() common.LocationType {
	if m != nil {
		return m.LocationType
	}
	return common.LocationType_LOCATION_TYPE_UNSPECIFIED
}

func (m *ProbingSession) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ProbingSession) GetIntervalSec() int64 {
	if m != nil {
		return m.IntervalSec
	}
	return int64(0)
}

func (m *ProbingSession) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ProbingSession) GetTos() uint32 {
	if m != nil {
		return m.Tos
	}
	return uint32(0)
}

func (m *ProbingSession) GetWindowSize() uint32 {
	if m != nil {
		return m.WindowSize
	}
	return uint32(0)
}

func (m *ProbingSession) GetPathProbing() *common.PathProbe {
	if m != nil {
		return m.PathProbing
	}
	return nil
}

func (m *ProbingSession) GetSpeeedtestSettings() *common.SpeedTestSettings {
	if m != nil {
		return m.SpeeedtestSettings
	}
	return nil
}

func (m *ProbingSession) GetHttpProbingConfig() *common.HTTPProbingConfig {
	if m != nil {
		return m.HttpProbingConfig
	}
	return nil
}

func (m *ProbingSession) GetProxyConfiguration() *common.ProxyConfiguration {
	if m != nil {
		return m.ProxyConfiguration
	}
	return nil
}

func (m *ProbingSession) SetTarget(fv *probing_target.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "ProbingSession"))
	}
	m.Target = fv
}

func (m *ProbingSession) SetTargetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetDisplayName", "ProbingSession"))
	}
	m.TargetDisplayName = fv
}

func (m *ProbingSession) SetTargetGroup(fv *probing_target_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetGroup", "ProbingSession"))
	}
	m.TargetGroup = fv
}

func (m *ProbingSession) SetMode(fv common.ProbingMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Mode", "ProbingSession"))
	}
	m.Mode = fv
}

func (m *ProbingSession) SetIpVersion(fv common.IpVersion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpVersion", "ProbingSession"))
	}
	m.IpVersion = fv
}

func (m *ProbingSession) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "ProbingSession"))
	}
	m.Address = fv
}

func (m *ProbingSession) SetGroupName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GroupName", "ProbingSession"))
	}
	m.GroupName = fv
}

func (m *ProbingSession) SetCategory(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Category", "ProbingSession"))
	}
	m.Category = fv
}

func (m *ProbingSession) SetLocationType(fv common.LocationType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocationType", "ProbingSession"))
	}
	m.LocationType = fv
}

func (m *ProbingSession) SetLocation(fv *common.Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "ProbingSession"))
	}
	m.Location = fv
}

func (m *ProbingSession) SetIntervalSec(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IntervalSec", "ProbingSession"))
	}
	m.IntervalSec = fv
}

func (m *ProbingSession) SetInterval(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "ProbingSession"))
	}
	m.Interval = fv
}

func (m *ProbingSession) SetTos(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tos", "ProbingSession"))
	}
	m.Tos = fv
}

func (m *ProbingSession) SetWindowSize(fv uint32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "WindowSize", "ProbingSession"))
	}
	m.WindowSize = fv
}

func (m *ProbingSession) SetPathProbing(fv *common.PathProbe) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PathProbing", "ProbingSession"))
	}
	m.PathProbing = fv
}

func (m *ProbingSession) SetSpeeedtestSettings(fv *common.SpeedTestSettings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SpeeedtestSettings", "ProbingSession"))
	}
	m.SpeeedtestSettings = fv
}

func (m *ProbingSession) SetHttpProbingConfig(fv *common.HTTPProbingConfig) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HttpProbingConfig", "ProbingSession"))
	}
	m.HttpProbingConfig = fv
}

func (m *ProbingSession) SetProxyConfiguration(fv *common.ProxyConfiguration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProxyConfiguration", "ProbingSession"))
	}
	m.ProxyConfiguration = fv
}

//  describes how to probe a target
type ProbingConfig_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// probe is the probe resource which is expexted to execute
	// the probe config.
	Probe *probe.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=probe,proto3" json:"probe,omitempty" firestore:"probe"`
	// probing target defines a single probe destination target.
	ProbingSessions []*ProbingSession             `protobuf:"bytes,2,rep,name=probing_sessions,json=probingSessions,proto3" json:"probing_sessions,omitempty" firestore:"probingSessions"`
	Speedtest       *ProbingConfig_Spec_SpeedTest `protobuf:"bytes,3,opt,name=speedtest,proto3" json:"speedtest,omitempty" firestore:"speedtest"`
	// target session defines a target server instance.
	TargetSessions []*ProbingSession `protobuf:"bytes,4,rep,name=target_sessions,json=targetSessions,proto3" json:"target_sessions,omitempty" firestore:"targetSessions"`
}

func (m *ProbingConfig_Spec) Reset() {
	*m = ProbingConfig_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingConfig_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingConfig_Spec) ProtoMessage() {}

func (m *ProbingConfig_Spec) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingConfig_Spec) GotenMessage() {}

// Deprecated, Use ProbingConfig_Spec.ProtoReflect.Descriptor instead.
func (*ProbingConfig_Spec) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_config_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ProbingConfig_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingConfig_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingConfig_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingConfig_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingConfig_Spec) GetProbe() *probe.Reference {
	if m != nil {
		return m.Probe
	}
	return nil
}

func (m *ProbingConfig_Spec) GetProbingSessions() []*ProbingSession {
	if m != nil {
		return m.ProbingSessions
	}
	return nil
}

func (m *ProbingConfig_Spec) GetSpeedtest() *ProbingConfig_Spec_SpeedTest {
	if m != nil {
		return m.Speedtest
	}
	return nil
}

func (m *ProbingConfig_Spec) GetTargetSessions() []*ProbingSession {
	if m != nil {
		return m.TargetSessions
	}
	return nil
}

func (m *ProbingConfig_Spec) SetProbe(fv *probe.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Probe", "ProbingConfig_Spec"))
	}
	m.Probe = fv
}

func (m *ProbingConfig_Spec) SetProbingSessions(fv []*ProbingSession) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingSessions", "ProbingConfig_Spec"))
	}
	m.ProbingSessions = fv
}

func (m *ProbingConfig_Spec) SetSpeedtest(fv *ProbingConfig_Spec_SpeedTest) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Speedtest", "ProbingConfig_Spec"))
	}
	m.Speedtest = fv
}

func (m *ProbingConfig_Spec) SetTargetSessions(fv []*ProbingSession) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetSessions", "ProbingConfig_Spec"))
	}
	m.TargetSessions = fv
}

type ProbingConfig_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *ProbingConfig_Status) Reset() {
	*m = ProbingConfig_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingConfig_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingConfig_Status) ProtoMessage() {}

func (m *ProbingConfig_Status) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingConfig_Status) GotenMessage() {}

// Deprecated, Use ProbingConfig_Status.ProtoReflect.Descriptor instead.
func (*ProbingConfig_Status) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_config_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ProbingConfig_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingConfig_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingConfig_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingConfig_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

type ProbingConfig_Spec_SpeedTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// enabled defines whether to enable or disable the speedtest
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	// (deprecated) interval_minutes defines the periodic interval for
	// repeating speedtest
	IntervalMinutes int64 `protobuf:"varint,2,opt,name=interval_minutes,json=intervalMinutes,proto3" json:"interval_minutes,omitempty" firestore:"intervalMinutes"`
	// interval defines the periodic interval for repeating speedtest
	Interval *duration.Duration `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty" firestore:"interval"`
	// servers list down all the available servers for speedtest. The agent
	// chooses the active server nearest to it for running the test
	// This might be a temporary api and we might have a discovery api later
	Servers []*ProbingConfig_Spec_SpeedTest_Server `protobuf:"bytes,3,rep,name=servers,proto3" json:"servers,omitempty" firestore:"servers"`
}

func (m *ProbingConfig_Spec_SpeedTest) Reset() {
	*m = ProbingConfig_Spec_SpeedTest{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingConfig_Spec_SpeedTest) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingConfig_Spec_SpeedTest) ProtoMessage() {}

func (m *ProbingConfig_Spec_SpeedTest) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingConfig_Spec_SpeedTest) GotenMessage() {}

// Deprecated, Use ProbingConfig_Spec_SpeedTest.ProtoReflect.Descriptor instead.
func (*ProbingConfig_Spec_SpeedTest) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_config_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *ProbingConfig_Spec_SpeedTest) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingConfig_Spec_SpeedTest) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingConfig_Spec_SpeedTest) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingConfig_Spec_SpeedTest) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingConfig_Spec_SpeedTest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ProbingConfig_Spec_SpeedTest) GetIntervalMinutes() int64 {
	if m != nil {
		return m.IntervalMinutes
	}
	return int64(0)
}

func (m *ProbingConfig_Spec_SpeedTest) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *ProbingConfig_Spec_SpeedTest) GetServers() []*ProbingConfig_Spec_SpeedTest_Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *ProbingConfig_Spec_SpeedTest) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "ProbingConfig_Spec_SpeedTest"))
	}
	m.Enabled = fv
}

func (m *ProbingConfig_Spec_SpeedTest) SetIntervalMinutes(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IntervalMinutes", "ProbingConfig_Spec_SpeedTest"))
	}
	m.IntervalMinutes = fv
}

func (m *ProbingConfig_Spec_SpeedTest) SetInterval(fv *duration.Duration) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Interval", "ProbingConfig_Spec_SpeedTest"))
	}
	m.Interval = fv
}

func (m *ProbingConfig_Spec_SpeedTest) SetServers(fv []*ProbingConfig_Spec_SpeedTest_Server) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Servers", "ProbingConfig_Spec_SpeedTest"))
	}
	m.Servers = fv
}

// Server defines the information about a speedtest server
type ProbingConfig_Spec_SpeedTest_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// label or name of the server to use for speedtest
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Could be a dns name or ip addresses. can provide both v4 and v6
	// addresses
	IpAddresses []string `protobuf:"bytes,2,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty" firestore:"ipAddresses"`
	// Location of the server. For now the agent would choose the nearest
	// server
	Location *common.Location     `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty" firestore:"location"`
	Target   *probing_target.Name `protobuf:"bytes,4,opt,customtype=Name,name=target,proto3" json:"target,omitempty" firestore:"target"`
}

func (m *ProbingConfig_Spec_SpeedTest_Server) Reset() {
	*m = ProbingConfig_Spec_SpeedTest_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingConfig_Spec_SpeedTest_Server) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingConfig_Spec_SpeedTest_Server) ProtoMessage() {}

func (m *ProbingConfig_Spec_SpeedTest_Server) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingConfig_Spec_SpeedTest_Server) GotenMessage() {}

// Deprecated, Use ProbingConfig_Spec_SpeedTest_Server.ProtoReflect.Descriptor instead.
func (*ProbingConfig_Spec_SpeedTest_Server) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_config_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (m *ProbingConfig_Spec_SpeedTest_Server) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingConfig_Spec_SpeedTest_Server) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingConfig_Spec_SpeedTest_Server) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingConfig_Spec_SpeedTest_Server) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingConfig_Spec_SpeedTest_Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProbingConfig_Spec_SpeedTest_Server) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *ProbingConfig_Spec_SpeedTest_Server) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *ProbingConfig_Spec_SpeedTest_Server) GetTarget() *probing_target.Name {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ProbingConfig_Spec_SpeedTest_Server) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ProbingConfig_Spec_SpeedTest_Server"))
	}
	m.Name = fv
}

func (m *ProbingConfig_Spec_SpeedTest_Server) SetIpAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddresses", "ProbingConfig_Spec_SpeedTest_Server"))
	}
	m.IpAddresses = fv
}

func (m *ProbingConfig_Spec_SpeedTest_Server) SetLocation(fv *common.Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "ProbingConfig_Spec_SpeedTest_Server"))
	}
	m.Location = fv
}

func (m *ProbingConfig_Spec_SpeedTest_Server) SetTarget(fv *probing_target.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Target", "ProbingConfig_Spec_SpeedTest_Server"))
	}
	m.Target = fv
}

var watchdog_proto_v1alpha2_probing_config_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_probing_config_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65,
	0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x90, 0x0b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0xb2, 0xda, 0x21, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xe2, 0xde, 0x21, 0x12, 0x2a, 0x10, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde, 0x21, 0x02, 0x08,
	0x04, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0xfa, 0x05, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x41, 0x07, 0x0a, 0x05, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0xb2, 0xda, 0x21, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x10, 0x02, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x04, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12,
	0x62, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x10, 0xea, 0xde, 0x21, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x09, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0xea, 0xde, 0x21, 0x0c, 0x0a, 0x0a, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa1, 0x03, 0x0a, 0x09, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x62, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42,
	0x0c, 0xea, 0xde, 0x21, 0x08, 0x0a, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xea, 0xde, 0x21,
	0x02, 0x0a, 0x00, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2,
	0xda, 0x21, 0x11, 0x0a, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x08, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0xda, 0x02, 0xea, 0x41, 0x68, 0x0a, 0x21, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x43, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x7d, 0x92, 0xd9, 0x21, 0x9a, 0x01, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x4b, 0x08, 0x02, 0x12, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x12, 0x17, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x08, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x6a, 0x1c, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0xb2, 0xdf, 0x21, 0x0a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65,
	0x77, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c,
	0x2c, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x2a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xe2, 0xde, 0x21,
	0x02, 0x08, 0x02, 0x22, 0xf5, 0x07, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xb2, 0xda, 0x21, 0x11, 0x0a, 0x0f, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xb2, 0xda, 0x21,
	0x18, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x03, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x12, 0x35,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0b, 0xca, 0xc6, 0x27, 0x07, 0x1a, 0x05, 0x1a, 0x03, 0x08, 0xff, 0x01, 0x52,
	0x03, 0x74, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x13, 0x73, 0x70,
	0x65, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x12, 0x73, 0x70, 0x65, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x68, 0x74,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5a, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xdf, 0x03, 0xe8, 0xde,
	0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x52, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x12, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x70, 0x72,
	0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xd2, 0x84, 0xd1, 0x02,
	0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0xf2, 0x85, 0xd1, 0x02, 0x5a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x62, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x65, 0x72, 0x12, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0xa2, 0x80, 0xd1, 0x02, 0x54, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_probing_config_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_probing_config_proto_rawDescData = watchdog_proto_v1alpha2_probing_config_proto_rawDesc
)

func watchdog_proto_v1alpha2_probing_config_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_probing_config_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_probing_config_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_probing_config_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_probing_config_proto_rawDescData
}

var watchdog_proto_v1alpha2_probing_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var watchdog_proto_v1alpha2_probing_config_proto_goTypes = []interface{}{
	(*ProbingConfig)(nil),                       // 0: ntt.watchdog.v1alpha2.ProbingConfig
	(*ProbingSession)(nil),                      // 1: ntt.watchdog.v1alpha2.ProbingSession
	(*ProbingConfig_Spec)(nil),                  // 2: ntt.watchdog.v1alpha2.ProbingConfig.Spec
	(*ProbingConfig_Status)(nil),                // 3: ntt.watchdog.v1alpha2.ProbingConfig.Status
	(*ProbingConfig_Spec_SpeedTest)(nil),        // 4: ntt.watchdog.v1alpha2.ProbingConfig.Spec.SpeedTest
	(*ProbingConfig_Spec_SpeedTest_Server)(nil), // 5: ntt.watchdog.v1alpha2.ProbingConfig.Spec.SpeedTest.Server
	(*ntt_meta.Meta)(nil),                       // 6: ntt.types.Meta
	(*duration.Duration)(nil),                   // 7: google.protobuf.Duration
	(*common.Location)(nil),                     // 8: ntt.watchdog.v1alpha2.Location
	(common.ProbingMode)(0),                     // 9: ntt.watchdog.v1alpha2.ProbingMode
	(common.IpVersion)(0),                       // 10: ntt.watchdog.v1alpha2.IpVersion
	(common.LocationType)(0),                    // 11: ntt.watchdog.v1alpha2.LocationType
	(*common.PathProbe)(nil),                    // 12: ntt.watchdog.v1alpha2.PathProbe
	(*common.SpeedTestSettings)(nil),            // 13: ntt.watchdog.v1alpha2.SpeedTestSettings
	(*common.HTTPProbingConfig)(nil),            // 14: ntt.watchdog.v1alpha2.HTTPProbingConfig
	(*common.ProxyConfiguration)(nil),           // 15: ntt.watchdog.v1alpha2.ProxyConfiguration
}
var watchdog_proto_v1alpha2_probing_config_proto_depIdxs = []int32{
	6,  // 0: ntt.watchdog.v1alpha2.ProbingConfig.metadata:type_name -> ntt.types.Meta
	2,  // 1: ntt.watchdog.v1alpha2.ProbingConfig.spec:type_name -> ntt.watchdog.v1alpha2.ProbingConfig.Spec
	3,  // 2: ntt.watchdog.v1alpha2.ProbingConfig.status:type_name -> ntt.watchdog.v1alpha2.ProbingConfig.Status
	9,  // 3: ntt.watchdog.v1alpha2.ProbingSession.mode:type_name -> ntt.watchdog.v1alpha2.ProbingMode
	10, // 4: ntt.watchdog.v1alpha2.ProbingSession.ip_version:type_name -> ntt.watchdog.v1alpha2.IpVersion
	11, // 5: ntt.watchdog.v1alpha2.ProbingSession.location_type:type_name -> ntt.watchdog.v1alpha2.LocationType
	8,  // 6: ntt.watchdog.v1alpha2.ProbingSession.location:type_name -> ntt.watchdog.v1alpha2.Location
	7,  // 7: ntt.watchdog.v1alpha2.ProbingSession.interval:type_name -> google.protobuf.Duration
	12, // 8: ntt.watchdog.v1alpha2.ProbingSession.path_probing:type_name -> ntt.watchdog.v1alpha2.PathProbe
	13, // 9: ntt.watchdog.v1alpha2.ProbingSession.speeedtest_settings:type_name -> ntt.watchdog.v1alpha2.SpeedTestSettings
	14, // 10: ntt.watchdog.v1alpha2.ProbingSession.http_probing_config:type_name -> ntt.watchdog.v1alpha2.HTTPProbingConfig
	15, // 11: ntt.watchdog.v1alpha2.ProbingSession.proxy_configuration:type_name -> ntt.watchdog.v1alpha2.ProxyConfiguration
	1,  // 12: ntt.watchdog.v1alpha2.ProbingConfig.Spec.probing_sessions:type_name -> ntt.watchdog.v1alpha2.ProbingSession
	4,  // 13: ntt.watchdog.v1alpha2.ProbingConfig.Spec.speedtest:type_name -> ntt.watchdog.v1alpha2.ProbingConfig.Spec.SpeedTest
	1,  // 14: ntt.watchdog.v1alpha2.ProbingConfig.Spec.target_sessions:type_name -> ntt.watchdog.v1alpha2.ProbingSession
	7,  // 15: ntt.watchdog.v1alpha2.ProbingConfig.Spec.SpeedTest.interval:type_name -> google.protobuf.Duration
	5,  // 16: ntt.watchdog.v1alpha2.ProbingConfig.Spec.SpeedTest.servers:type_name -> ntt.watchdog.v1alpha2.ProbingConfig.Spec.SpeedTest.Server
	8,  // 17: ntt.watchdog.v1alpha2.ProbingConfig.Spec.SpeedTest.Server.location:type_name -> ntt.watchdog.v1alpha2.Location
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_probing_config_proto_init() }
func watchdog_proto_v1alpha2_probing_config_proto_init() {
	if watchdog_proto_v1alpha2_probing_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_probing_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingConfig_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingConfig_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingConfig_Spec_SpeedTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingConfig_Spec_SpeedTest_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_probing_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_probing_config_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_probing_config_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_probing_config_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_probing_config_proto = out.File
	watchdog_proto_v1alpha2_probing_config_proto_rawDesc = nil
	watchdog_proto_v1alpha2_probing_config_proto_goTypes = nil
	watchdog_proto_v1alpha2_probing_config_proto_depIdxs = nil
}
