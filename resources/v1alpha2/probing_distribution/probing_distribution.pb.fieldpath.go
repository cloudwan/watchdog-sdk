// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_distribution.proto
// DO NOT EDIT!!!

package probing_distribution

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingDistribution_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingDistribution_FieldPathSelector
	Get(source *ProbingDistribution) []interface{}
	GetSingle(source *ProbingDistribution) (interface{}, bool)
	ClearValue(item *ProbingDistribution)

	// Those methods build corresponding ProbingDistribution_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingDistribution_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingDistribution_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingDistribution_FieldPathArrayItemValue
}

type ProbingDistribution_FieldPathSelector int32

const (
	ProbingDistribution_FieldPathSelectorName        ProbingDistribution_FieldPathSelector = 0
	ProbingDistribution_FieldPathSelectorDisplayName ProbingDistribution_FieldPathSelector = 1
	ProbingDistribution_FieldPathSelectorMetadata    ProbingDistribution_FieldPathSelector = 2
	ProbingDistribution_FieldPathSelectorSpec        ProbingDistribution_FieldPathSelector = 3
	ProbingDistribution_FieldPathSelectorStatus      ProbingDistribution_FieldPathSelector = 4
)

func (s ProbingDistribution_FieldPathSelector) String() string {
	switch s {
	case ProbingDistribution_FieldPathSelectorName:
		return "name"
	case ProbingDistribution_FieldPathSelectorDisplayName:
		return "display_name"
	case ProbingDistribution_FieldPathSelectorMetadata:
		return "metadata"
	case ProbingDistribution_FieldPathSelectorSpec:
		return "spec"
	case ProbingDistribution_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", s))
	}
}

func BuildProbingDistribution_FieldPath(fp gotenobject.RawFieldPath) (ProbingDistribution_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingDistribution")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorDisplayName}, nil
		case "metadata":
			return &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorMetadata}, nil
		case "spec":
			return &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorSpec}, nil
		case "status":
			return &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingDistribution_FieldSubPath{selector: ProbingDistribution_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildProbingDistributionSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingDistribution_FieldSubPath{selector: ProbingDistribution_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildProbingDistributionStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingDistribution_FieldSubPath{selector: ProbingDistribution_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingDistribution", fp)
}

func ParseProbingDistribution_FieldPath(rawField string) (ProbingDistribution_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingDistribution_FieldPath(fp)
}

func MustParseProbingDistribution_FieldPath(rawField string) ProbingDistribution_FieldPath {
	fp, err := ParseProbingDistribution_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingDistribution_FieldTerminalPath struct {
	selector ProbingDistribution_FieldPathSelector
}

var _ ProbingDistribution_FieldPath = (*ProbingDistribution_FieldTerminalPath)(nil)

func (fp *ProbingDistribution_FieldTerminalPath) Selector() ProbingDistribution_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingDistribution_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingDistribution_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingDistribution
func (fp *ProbingDistribution_FieldTerminalPath) Get(source *ProbingDistribution) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingDistribution_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProbingDistribution_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case ProbingDistribution_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case ProbingDistribution_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case ProbingDistribution_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingDistribution_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingDistribution))
}

// GetSingle returns value pointed by specific field of from source ProbingDistribution
func (fp *ProbingDistribution_FieldTerminalPath) GetSingle(source *ProbingDistribution) (interface{}, bool) {
	switch fp.selector {
	case ProbingDistribution_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProbingDistribution_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case ProbingDistribution_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ProbingDistribution_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case ProbingDistribution_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fp.selector))
	}
}

func (fp *ProbingDistribution_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingDistribution))
}

// GetDefault returns a default value of the field type
func (fp *ProbingDistribution_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingDistribution_FieldPathSelectorName:
		return (*Name)(nil)
	case ProbingDistribution_FieldPathSelectorDisplayName:
		return ""
	case ProbingDistribution_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case ProbingDistribution_FieldPathSelectorSpec:
		return (*ProbingDistribution_Spec)(nil)
	case ProbingDistribution_FieldPathSelectorStatus:
		return (*ProbingDistribution_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fp.selector))
	}
}

func (fp *ProbingDistribution_FieldTerminalPath) ClearValue(item *ProbingDistribution) {
	if item != nil {
		switch fp.selector {
		case ProbingDistribution_FieldPathSelectorName:
			item.Name = nil
		case ProbingDistribution_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case ProbingDistribution_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ProbingDistribution_FieldPathSelectorSpec:
			item.Spec = nil
		case ProbingDistribution_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fp.selector))
		}
	}
}

func (fp *ProbingDistribution_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingDistribution))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingDistribution_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingDistribution_FieldPathSelectorName ||
		fp.selector == ProbingDistribution_FieldPathSelectorDisplayName
}

func (fp *ProbingDistribution_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbingDistribution_FieldTerminalPath) WithIValue(value interface{}) ProbingDistribution_FieldPathValue {
	switch fp.selector {
	case ProbingDistribution_FieldPathSelectorName:
		return &ProbingDistribution_FieldTerminalPathValue{ProbingDistribution_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProbingDistribution_FieldPathSelectorDisplayName:
		return &ProbingDistribution_FieldTerminalPathValue{ProbingDistribution_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingDistribution_FieldPathSelectorMetadata:
		return &ProbingDistribution_FieldTerminalPathValue{ProbingDistribution_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case ProbingDistribution_FieldPathSelectorSpec:
		return &ProbingDistribution_FieldTerminalPathValue{ProbingDistribution_FieldTerminalPath: *fp, value: value.(*ProbingDistribution_Spec)}
	case ProbingDistribution_FieldPathSelectorStatus:
		return &ProbingDistribution_FieldTerminalPathValue{ProbingDistribution_FieldTerminalPath: *fp, value: value.(*ProbingDistribution_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fp.selector))
	}
}

func (fp *ProbingDistribution_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingDistribution_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingDistribution_FieldPathArrayOfValues {
	fpaov := &ProbingDistribution_FieldTerminalPathArrayOfValues{ProbingDistribution_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingDistribution_FieldPathSelectorName:
		return &ProbingDistribution_FieldTerminalPathArrayOfValues{ProbingDistribution_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProbingDistribution_FieldPathSelectorDisplayName:
		return &ProbingDistribution_FieldTerminalPathArrayOfValues{ProbingDistribution_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingDistribution_FieldPathSelectorMetadata:
		return &ProbingDistribution_FieldTerminalPathArrayOfValues{ProbingDistribution_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case ProbingDistribution_FieldPathSelectorSpec:
		return &ProbingDistribution_FieldTerminalPathArrayOfValues{ProbingDistribution_FieldTerminalPath: *fp, values: values.([]*ProbingDistribution_Spec)}
	case ProbingDistribution_FieldPathSelectorStatus:
		return &ProbingDistribution_FieldTerminalPathArrayOfValues{ProbingDistribution_FieldTerminalPath: *fp, values: values.([]*ProbingDistribution_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingDistribution_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingDistribution_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingDistribution_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fp.selector))
	}
}

func (fp *ProbingDistribution_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingDistribution_FieldSubPath struct {
	selector ProbingDistribution_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingDistribution_FieldPath = (*ProbingDistribution_FieldSubPath)(nil)

func (fps *ProbingDistribution_FieldSubPath) Selector() ProbingDistribution_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingDistribution_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *ProbingDistribution_FieldSubPath) AsSpecSubPath() (ProbingDistributionSpec_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingDistributionSpec_FieldPath)
	return res, ok
}
func (fps *ProbingDistribution_FieldSubPath) AsStatusSubPath() (ProbingDistributionStatus_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingDistributionStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingDistribution_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingDistribution_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingDistribution
func (fps *ProbingDistribution_FieldSubPath) Get(source *ProbingDistribution) (values []interface{}) {
	switch fps.selector {
	case ProbingDistribution_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case ProbingDistribution_FieldPathSelectorSpec:
		values = append(values, fps.subPath.GetRaw(source.GetSpec())...)
	case ProbingDistribution_FieldPathSelectorStatus:
		values = append(values, fps.subPath.GetRaw(source.GetStatus())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fps.selector))
	}
	return
}

func (fps *ProbingDistribution_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingDistribution))
}

// GetSingle returns value of selected field from source ProbingDistribution
func (fps *ProbingDistribution_FieldSubPath) GetSingle(source *ProbingDistribution) (interface{}, bool) {
	switch fps.selector {
	case ProbingDistribution_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case ProbingDistribution_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case ProbingDistribution_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fps.selector))
	}
}

func (fps *ProbingDistribution_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingDistribution))
}

// GetDefault returns a default value of the field type
func (fps *ProbingDistribution_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingDistribution_FieldSubPath) ClearValue(item *ProbingDistribution) {
	if item != nil {
		switch fps.selector {
		case ProbingDistribution_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case ProbingDistribution_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case ProbingDistribution_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fps.selector))
		}
	}
}

func (fps *ProbingDistribution_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingDistribution))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingDistribution_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingDistribution_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProbingDistribution_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProbingDistribution_FieldSubPath) WithIValue(value interface{}) ProbingDistribution_FieldPathValue {
	return &ProbingDistribution_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingDistribution_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingDistribution_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingDistribution_FieldPathArrayOfValues {
	return &ProbingDistribution_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingDistribution_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingDistribution_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingDistribution_FieldPathArrayItemValue {
	return &ProbingDistribution_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingDistribution_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingDistribution_FieldPathValue allows storing values for ProbingDistribution fields according to their type
type ProbingDistribution_FieldPathValue interface {
	ProbingDistribution_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingDistribution)
	CompareWith(*ProbingDistribution) (cmp int, comparable bool)
}

func ParseProbingDistribution_FieldPathValue(pathStr, valueStr string) (ProbingDistribution_FieldPathValue, error) {
	fp, err := ParseProbingDistribution_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingDistribution field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingDistribution_FieldPathValue), nil
}

func MustParseProbingDistribution_FieldPathValue(pathStr, valueStr string) ProbingDistribution_FieldPathValue {
	fpv, err := ParseProbingDistribution_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingDistribution_FieldTerminalPathValue struct {
	ProbingDistribution_FieldTerminalPath
	value interface{}
}

var _ ProbingDistribution_FieldPathValue = (*ProbingDistribution_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbingDistribution' as interface{}
func (fpv *ProbingDistribution_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingDistribution_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProbingDistribution_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingDistribution_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *ProbingDistribution_FieldTerminalPathValue) AsSpecValue() (*ProbingDistribution_Spec, bool) {
	res, ok := fpv.value.(*ProbingDistribution_Spec)
	return res, ok
}
func (fpv *ProbingDistribution_FieldTerminalPathValue) AsStatusValue() (*ProbingDistribution_Status, bool) {
	res, ok := fpv.value.(*ProbingDistribution_Status)
	return res, ok
}

// SetTo stores value for selected field for object ProbingDistribution
func (fpv *ProbingDistribution_FieldTerminalPathValue) SetTo(target **ProbingDistribution) {
	if *target == nil {
		*target = new(ProbingDistribution)
	}
	switch fpv.selector {
	case ProbingDistribution_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProbingDistribution_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case ProbingDistribution_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case ProbingDistribution_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*ProbingDistribution_Spec)
	case ProbingDistribution_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*ProbingDistribution_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fpv.selector))
	}
}

func (fpv *ProbingDistribution_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingDistribution)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingDistribution_FieldTerminalPathValue' with the value under path in 'ProbingDistribution'.
func (fpv *ProbingDistribution_FieldTerminalPathValue) CompareWith(source *ProbingDistribution) (int, bool) {
	switch fpv.selector {
	case ProbingDistribution_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistribution_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistribution_FieldPathSelectorMetadata:
		return 0, false
	case ProbingDistribution_FieldPathSelectorSpec:
		return 0, false
	case ProbingDistribution_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fpv.selector))
	}
}

func (fpv *ProbingDistribution_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingDistribution))
}

type ProbingDistribution_FieldSubPathValue struct {
	ProbingDistribution_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingDistribution_FieldPathValue = (*ProbingDistribution_FieldSubPathValue)(nil)

func (fpvs *ProbingDistribution_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingDistribution_FieldSubPathValue) AsSpecPathValue() (ProbingDistributionSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingDistributionSpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingDistribution_FieldSubPathValue) AsStatusPathValue() (ProbingDistributionStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingDistributionStatus_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingDistribution_FieldSubPathValue) SetTo(target **ProbingDistribution) {
	if *target == nil {
		*target = new(ProbingDistribution)
	}
	switch fpvs.Selector() {
	case ProbingDistribution_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case ProbingDistribution_FieldPathSelectorSpec:
		fpvs.subPathValue.(ProbingDistributionSpec_FieldPathValue).SetTo(&(*target).Spec)
	case ProbingDistribution_FieldPathSelectorStatus:
		fpvs.subPathValue.(ProbingDistributionStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingDistribution_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingDistribution)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingDistribution_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingDistribution_FieldSubPathValue) CompareWith(source *ProbingDistribution) (int, bool) {
	switch fpvs.Selector() {
	case ProbingDistribution_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case ProbingDistribution_FieldPathSelectorSpec:
		return fpvs.subPathValue.(ProbingDistributionSpec_FieldPathValue).CompareWith(source.GetSpec())
	case ProbingDistribution_FieldPathSelectorStatus:
		return fpvs.subPathValue.(ProbingDistributionStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingDistribution_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingDistribution))
}

// ProbingDistribution_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbingDistribution according to their type
// Present only for array (repeated) types.
type ProbingDistribution_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingDistribution_FieldPath
	ContainsValue(*ProbingDistribution) bool
}

// ParseProbingDistribution_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingDistribution_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingDistribution_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingDistribution_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingDistribution field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingDistribution_FieldPathArrayItemValue), nil
}

func MustParseProbingDistribution_FieldPathArrayItemValue(pathStr, valueStr string) ProbingDistribution_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingDistribution_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingDistribution_FieldTerminalPathArrayItemValue struct {
	ProbingDistribution_FieldTerminalPath
	value interface{}
}

var _ ProbingDistribution_FieldPathArrayItemValue = (*ProbingDistribution_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingDistribution as interface{}
func (fpaiv *ProbingDistribution_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingDistribution_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingDistribution) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingDistribution_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingDistribution))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingDistribution'
func (fpaiv *ProbingDistribution_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingDistribution) bool {
	slice := fpaiv.ProbingDistribution_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingDistribution_FieldSubPathArrayItemValue struct {
	ProbingDistribution_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingDistribution_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingDistribution_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingDistribution_FieldSubPathArrayItemValue) AsSpecPathItemValue() (ProbingDistributionSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingDistributionSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingDistribution_FieldSubPathArrayItemValue) AsStatusPathItemValue() (ProbingDistributionStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingDistributionStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingDistribution'
func (fpaivs *ProbingDistribution_FieldSubPathArrayItemValue) ContainsValue(source *ProbingDistribution) bool {
	switch fpaivs.Selector() {
	case ProbingDistribution_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case ProbingDistribution_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(ProbingDistributionSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case ProbingDistribution_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(ProbingDistributionStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution: %d", fpaivs.Selector()))
	}
}

// ProbingDistribution_FieldPathArrayOfValues allows storing slice of values for ProbingDistribution fields according to their type
type ProbingDistribution_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingDistribution_FieldPath
}

func ParseProbingDistribution_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingDistribution_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingDistribution_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingDistribution field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingDistribution_FieldPathArrayOfValues), nil
}

func MustParseProbingDistribution_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingDistribution_FieldPathArrayOfValues {
	fpaov, err := ParseProbingDistribution_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingDistribution_FieldTerminalPathArrayOfValues struct {
	ProbingDistribution_FieldTerminalPath
	values interface{}
}

var _ ProbingDistribution_FieldPathArrayOfValues = (*ProbingDistribution_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingDistribution_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingDistribution_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProbingDistribution_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingDistribution_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case ProbingDistribution_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*ProbingDistribution_Spec) {
			values = append(values, v)
		}
	case ProbingDistribution_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*ProbingDistribution_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingDistribution_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProbingDistribution_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingDistribution_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *ProbingDistribution_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*ProbingDistribution_Spec, bool) {
	res, ok := fpaov.values.([]*ProbingDistribution_Spec)
	return res, ok
}
func (fpaov *ProbingDistribution_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*ProbingDistribution_Status, bool) {
	res, ok := fpaov.values.([]*ProbingDistribution_Status)
	return res, ok
}

type ProbingDistribution_FieldSubPathArrayOfValues struct {
	ProbingDistribution_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingDistribution_FieldPathArrayOfValues = (*ProbingDistribution_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingDistribution_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingDistribution_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingDistribution_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (ProbingDistributionSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingDistributionSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingDistribution_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (ProbingDistributionStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingDistributionStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingDistributionSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingDistributionSpec_FieldPathSelector
	Get(source *ProbingDistribution_Spec) []interface{}
	GetSingle(source *ProbingDistribution_Spec) (interface{}, bool)
	ClearValue(item *ProbingDistribution_Spec)

	// Those methods build corresponding ProbingDistributionSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingDistributionSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingDistributionSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingDistributionSpec_FieldPathArrayItemValue
}

type ProbingDistributionSpec_FieldPathSelector int32

const (
	ProbingDistributionSpec_FieldPathSelectorEnabled         ProbingDistributionSpec_FieldPathSelector = 0
	ProbingDistributionSpec_FieldPathSelectorProbeSelector   ProbingDistributionSpec_FieldPathSelector = 1
	ProbingDistributionSpec_FieldPathSelectorTargetSelector  ProbingDistributionSpec_FieldPathSelector = 2
	ProbingDistributionSpec_FieldPathSelectorConstraint      ProbingDistributionSpec_FieldPathSelector = 3
	ProbingDistributionSpec_FieldPathSelectorProbingSettings ProbingDistributionSpec_FieldPathSelector = 4
	ProbingDistributionSpec_FieldPathSelectorEnablePcap      ProbingDistributionSpec_FieldPathSelector = 5
)

func (s ProbingDistributionSpec_FieldPathSelector) String() string {
	switch s {
	case ProbingDistributionSpec_FieldPathSelectorEnabled:
		return "enabled"
	case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
		return "probe_selector"
	case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
		return "target_selector"
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		return "constraint"
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		return "probing_settings"
	case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
		return "enable_pcap"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", s))
	}
}

func BuildProbingDistributionSpec_FieldPath(fp gotenobject.RawFieldPath) (ProbingDistributionSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingDistribution_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled":
			return &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorEnabled}, nil
		case "probe_selector", "probeSelector", "probe-selector":
			return &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorProbeSelector}, nil
		case "target_selector", "targetSelector", "target-selector":
			return &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorTargetSelector}, nil
		case "constraint":
			return &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorConstraint}, nil
		case "probing_settings", "probingSettings", "probing-settings":
			return &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorProbingSettings}, nil
		case "enable_pcap", "enablePcap", "enable-pcap":
			return &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorEnablePcap}, nil
		}
	} else {
		switch fp[0] {
		case "constraint":
			if subpath, err := common.BuildProbingConstraint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingDistributionSpec_FieldSubPath{selector: ProbingDistributionSpec_FieldPathSelectorConstraint, subPath: subpath}, nil
			}
		case "probing_settings", "probingSettings", "probing-settings":
			if subpath, err := common.BuildProbingSettings_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingDistributionSpec_FieldSubPath{selector: ProbingDistributionSpec_FieldPathSelectorProbingSettings, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingDistribution_Spec", fp)
}

func ParseProbingDistributionSpec_FieldPath(rawField string) (ProbingDistributionSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingDistributionSpec_FieldPath(fp)
}

func MustParseProbingDistributionSpec_FieldPath(rawField string) ProbingDistributionSpec_FieldPath {
	fp, err := ParseProbingDistributionSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingDistributionSpec_FieldTerminalPath struct {
	selector ProbingDistributionSpec_FieldPathSelector
}

var _ ProbingDistributionSpec_FieldPath = (*ProbingDistributionSpec_FieldTerminalPath)(nil)

func (fp *ProbingDistributionSpec_FieldTerminalPath) Selector() ProbingDistributionSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingDistributionSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingDistributionSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingDistribution_Spec
func (fp *ProbingDistributionSpec_FieldTerminalPath) Get(source *ProbingDistribution_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingDistributionSpec_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
			if source.ProbeSelector != nil {
				values = append(values, source.ProbeSelector)
			}
		case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
			if source.TargetSelector != nil {
				values = append(values, source.TargetSelector)
			}
		case ProbingDistributionSpec_FieldPathSelectorConstraint:
			if source.Constraint != nil {
				values = append(values, source.Constraint)
			}
		case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
			if source.ProbingSettings != nil {
				values = append(values, source.ProbingSettings)
			}
		case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
			values = append(values, source.EnablePcap)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingDistribution_Spec))
}

// GetSingle returns value pointed by specific field of from source ProbingDistribution_Spec
func (fp *ProbingDistributionSpec_FieldTerminalPath) GetSingle(source *ProbingDistribution_Spec) (interface{}, bool) {
	switch fp.selector {
	case ProbingDistributionSpec_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
		res := source.GetProbeSelector()
		return res, res != nil
	case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
		res := source.GetTargetSelector()
		return res, res != nil
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		res := source.GetConstraint()
		return res, res != nil
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		res := source.GetProbingSettings()
		return res, res != nil
	case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
		return source.GetEnablePcap(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fp.selector))
	}
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingDistribution_Spec))
}

// GetDefault returns a default value of the field type
func (fp *ProbingDistributionSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingDistributionSpec_FieldPathSelectorEnabled:
		return false
	case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
		return (*probe.Filter)(nil)
	case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
		return (*probing_target.Filter)(nil)
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		return (*common.ProbingConstraint)(nil)
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		return (*common.ProbingSettings)(nil)
	case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fp.selector))
	}
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) ClearValue(item *ProbingDistribution_Spec) {
	if item != nil {
		switch fp.selector {
		case ProbingDistributionSpec_FieldPathSelectorEnabled:
			item.Enabled = false
		case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
			item.ProbeSelector = nil
		case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
			item.TargetSelector = nil
		case ProbingDistributionSpec_FieldPathSelectorConstraint:
			item.Constraint = nil
		case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
			item.ProbingSettings = nil
		case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
			item.EnablePcap = false
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fp.selector))
		}
	}
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingDistribution_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingDistributionSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingDistributionSpec_FieldPathSelectorEnabled ||
		fp.selector == ProbingDistributionSpec_FieldPathSelectorProbeSelector ||
		fp.selector == ProbingDistributionSpec_FieldPathSelectorTargetSelector ||
		fp.selector == ProbingDistributionSpec_FieldPathSelectorEnablePcap
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) WithIValue(value interface{}) ProbingDistributionSpec_FieldPathValue {
	switch fp.selector {
	case ProbingDistributionSpec_FieldPathSelectorEnabled:
		return &ProbingDistributionSpec_FieldTerminalPathValue{ProbingDistributionSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
		return &ProbingDistributionSpec_FieldTerminalPathValue{ProbingDistributionSpec_FieldTerminalPath: *fp, value: value.(*probe.Filter)}
	case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
		return &ProbingDistributionSpec_FieldTerminalPathValue{ProbingDistributionSpec_FieldTerminalPath: *fp, value: value.(*probing_target.Filter)}
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		return &ProbingDistributionSpec_FieldTerminalPathValue{ProbingDistributionSpec_FieldTerminalPath: *fp, value: value.(*common.ProbingConstraint)}
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		return &ProbingDistributionSpec_FieldTerminalPathValue{ProbingDistributionSpec_FieldTerminalPath: *fp, value: value.(*common.ProbingSettings)}
	case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
		return &ProbingDistributionSpec_FieldTerminalPathValue{ProbingDistributionSpec_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fp.selector))
	}
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingDistributionSpec_FieldPathArrayOfValues {
	fpaov := &ProbingDistributionSpec_FieldTerminalPathArrayOfValues{ProbingDistributionSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingDistributionSpec_FieldPathSelectorEnabled:
		return &ProbingDistributionSpec_FieldTerminalPathArrayOfValues{ProbingDistributionSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
		return &ProbingDistributionSpec_FieldTerminalPathArrayOfValues{ProbingDistributionSpec_FieldTerminalPath: *fp, values: values.([]*probe.Filter)}
	case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
		return &ProbingDistributionSpec_FieldTerminalPathArrayOfValues{ProbingDistributionSpec_FieldTerminalPath: *fp, values: values.([]*probing_target.Filter)}
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		return &ProbingDistributionSpec_FieldTerminalPathArrayOfValues{ProbingDistributionSpec_FieldTerminalPath: *fp, values: values.([]*common.ProbingConstraint)}
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		return &ProbingDistributionSpec_FieldTerminalPathArrayOfValues{ProbingDistributionSpec_FieldTerminalPath: *fp, values: values.([]*common.ProbingSettings)}
	case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
		return &ProbingDistributionSpec_FieldTerminalPathArrayOfValues{ProbingDistributionSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingDistributionSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fp.selector))
	}
}

func (fp *ProbingDistributionSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingDistributionSpec_FieldSubPath struct {
	selector ProbingDistributionSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingDistributionSpec_FieldPath = (*ProbingDistributionSpec_FieldSubPath)(nil)

func (fps *ProbingDistributionSpec_FieldSubPath) Selector() ProbingDistributionSpec_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingDistributionSpec_FieldSubPath) AsConstraintSubPath() (common.ProbingConstraint_FieldPath, bool) {
	res, ok := fps.subPath.(common.ProbingConstraint_FieldPath)
	return res, ok
}
func (fps *ProbingDistributionSpec_FieldSubPath) AsProbingSettingsSubPath() (common.ProbingSettings_FieldPath, bool) {
	res, ok := fps.subPath.(common.ProbingSettings_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingDistributionSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingDistributionSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingDistribution_Spec
func (fps *ProbingDistributionSpec_FieldSubPath) Get(source *ProbingDistribution_Spec) (values []interface{}) {
	switch fps.selector {
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		values = append(values, fps.subPath.GetRaw(source.GetConstraint())...)
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		values = append(values, fps.subPath.GetRaw(source.GetProbingSettings())...)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fps.selector))
	}
	return
}

func (fps *ProbingDistributionSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingDistribution_Spec))
}

// GetSingle returns value of selected field from source ProbingDistribution_Spec
func (fps *ProbingDistributionSpec_FieldSubPath) GetSingle(source *ProbingDistribution_Spec) (interface{}, bool) {
	switch fps.selector {
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		if source.GetConstraint() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConstraint())
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		if source.GetProbingSettings() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProbingSettings())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fps.selector))
	}
}

func (fps *ProbingDistributionSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingDistribution_Spec))
}

// GetDefault returns a default value of the field type
func (fps *ProbingDistributionSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingDistributionSpec_FieldSubPath) ClearValue(item *ProbingDistribution_Spec) {
	if item != nil {
		switch fps.selector {
		case ProbingDistributionSpec_FieldPathSelectorConstraint:
			fps.subPath.ClearValueRaw(item.Constraint)
		case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
			fps.subPath.ClearValueRaw(item.ProbingSettings)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fps.selector))
		}
	}
}

func (fps *ProbingDistributionSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingDistribution_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingDistributionSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingDistributionSpec_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProbingDistributionSpec_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProbingDistributionSpec_FieldSubPath) WithIValue(value interface{}) ProbingDistributionSpec_FieldPathValue {
	return &ProbingDistributionSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingDistributionSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingDistributionSpec_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingDistributionSpec_FieldPathArrayOfValues {
	return &ProbingDistributionSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingDistributionSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingDistributionSpec_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingDistributionSpec_FieldPathArrayItemValue {
	return &ProbingDistributionSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingDistributionSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingDistributionSpec_FieldPathValue allows storing values for Spec fields according to their type
type ProbingDistributionSpec_FieldPathValue interface {
	ProbingDistributionSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingDistribution_Spec)
	CompareWith(*ProbingDistribution_Spec) (cmp int, comparable bool)
}

func ParseProbingDistributionSpec_FieldPathValue(pathStr, valueStr string) (ProbingDistributionSpec_FieldPathValue, error) {
	fp, err := ParseProbingDistributionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingDistributionSpec_FieldPathValue), nil
}

func MustParseProbingDistributionSpec_FieldPathValue(pathStr, valueStr string) ProbingDistributionSpec_FieldPathValue {
	fpv, err := ParseProbingDistributionSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingDistributionSpec_FieldTerminalPathValue struct {
	ProbingDistributionSpec_FieldTerminalPath
	value interface{}
}

var _ ProbingDistributionSpec_FieldPathValue = (*ProbingDistributionSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) AsProbeSelectorValue() (*probe.Filter, bool) {
	res, ok := fpv.value.(*probe.Filter)
	return res, ok
}
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) AsTargetSelectorValue() (*probing_target.Filter, bool) {
	res, ok := fpv.value.(*probing_target.Filter)
	return res, ok
}
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) AsConstraintValue() (*common.ProbingConstraint, bool) {
	res, ok := fpv.value.(*common.ProbingConstraint)
	return res, ok
}
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) AsProbingSettingsValue() (*common.ProbingSettings, bool) {
	res, ok := fpv.value.(*common.ProbingSettings)
	return res, ok
}
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) AsEnablePcapValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) SetTo(target **ProbingDistribution_Spec) {
	if *target == nil {
		*target = new(ProbingDistribution_Spec)
	}
	switch fpv.selector {
	case ProbingDistributionSpec_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
		(*target).ProbeSelector = fpv.value.(*probe.Filter)
	case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
		(*target).TargetSelector = fpv.value.(*probing_target.Filter)
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		(*target).Constraint = fpv.value.(*common.ProbingConstraint)
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		(*target).ProbingSettings = fpv.value.(*common.ProbingSettings)
	case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
		(*target).EnablePcap = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fpv.selector))
	}
}

func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingDistribution_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingDistributionSpec_FieldTerminalPathValue' with the value under path in 'ProbingDistribution_Spec'.
func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) CompareWith(source *ProbingDistribution_Spec) (int, bool) {
	switch fpv.selector {
	case ProbingDistributionSpec_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
		return 0, false
	case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
		return 0, false
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		return 0, false
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		return 0, false
	case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnablePcap()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fpv.selector))
	}
}

func (fpv *ProbingDistributionSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingDistribution_Spec))
}

type ProbingDistributionSpec_FieldSubPathValue struct {
	ProbingDistributionSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingDistributionSpec_FieldPathValue = (*ProbingDistributionSpec_FieldSubPathValue)(nil)

func (fpvs *ProbingDistributionSpec_FieldSubPathValue) AsConstraintPathValue() (common.ProbingConstraint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ProbingConstraint_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingDistributionSpec_FieldSubPathValue) AsProbingSettingsPathValue() (common.ProbingSettings_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ProbingSettings_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingDistributionSpec_FieldSubPathValue) SetTo(target **ProbingDistribution_Spec) {
	if *target == nil {
		*target = new(ProbingDistribution_Spec)
	}
	switch fpvs.Selector() {
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		fpvs.subPathValue.(common.ProbingConstraint_FieldPathValue).SetTo(&(*target).Constraint)
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		fpvs.subPathValue.(common.ProbingSettings_FieldPathValue).SetTo(&(*target).ProbingSettings)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingDistributionSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingDistribution_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingDistributionSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingDistributionSpec_FieldSubPathValue) CompareWith(source *ProbingDistribution_Spec) (int, bool) {
	switch fpvs.Selector() {
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		return fpvs.subPathValue.(common.ProbingConstraint_FieldPathValue).CompareWith(source.GetConstraint())
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		return fpvs.subPathValue.(common.ProbingSettings_FieldPathValue).CompareWith(source.GetProbingSettings())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingDistributionSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingDistribution_Spec))
}

// ProbingDistributionSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type ProbingDistributionSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingDistributionSpec_FieldPath
	ContainsValue(*ProbingDistribution_Spec) bool
}

// ParseProbingDistributionSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingDistributionSpec_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingDistributionSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingDistributionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingDistributionSpec_FieldPathArrayItemValue), nil
}

func MustParseProbingDistributionSpec_FieldPathArrayItemValue(pathStr, valueStr string) ProbingDistributionSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingDistributionSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingDistributionSpec_FieldTerminalPathArrayItemValue struct {
	ProbingDistributionSpec_FieldTerminalPath
	value interface{}
}

var _ ProbingDistributionSpec_FieldPathArrayItemValue = (*ProbingDistributionSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingDistribution_Spec as interface{}
func (fpaiv *ProbingDistributionSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingDistributionSpec_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingDistribution_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingDistributionSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingDistribution_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *ProbingDistributionSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingDistribution_Spec) bool {
	slice := fpaiv.ProbingDistributionSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingDistributionSpec_FieldSubPathArrayItemValue struct {
	ProbingDistributionSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingDistributionSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingDistributionSpec_FieldSubPathArrayItemValue) AsConstraintPathItemValue() (common.ProbingConstraint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ProbingConstraint_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingDistributionSpec_FieldSubPathArrayItemValue) AsProbingSettingsPathItemValue() (common.ProbingSettings_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ProbingSettings_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *ProbingDistributionSpec_FieldSubPathArrayItemValue) ContainsValue(source *ProbingDistribution_Spec) bool {
	switch fpaivs.Selector() {
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		return fpaivs.subPathItemValue.(common.ProbingConstraint_FieldPathArrayItemValue).ContainsValue(source.GetConstraint())
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		return fpaivs.subPathItemValue.(common.ProbingSettings_FieldPathArrayItemValue).ContainsValue(source.GetProbingSettings())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Spec: %d", fpaivs.Selector()))
	}
}

// ProbingDistributionSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type ProbingDistributionSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingDistributionSpec_FieldPath
}

func ParseProbingDistributionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingDistributionSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingDistributionSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingDistributionSpec_FieldPathArrayOfValues), nil
}

func MustParseProbingDistributionSpec_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingDistributionSpec_FieldPathArrayOfValues {
	fpaov, err := ParseProbingDistributionSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingDistributionSpec_FieldTerminalPathArrayOfValues struct {
	ProbingDistributionSpec_FieldTerminalPath
	values interface{}
}

var _ ProbingDistributionSpec_FieldPathArrayOfValues = (*ProbingDistributionSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingDistributionSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingDistributionSpec_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ProbingDistributionSpec_FieldPathSelectorProbeSelector:
		for _, v := range fpaov.values.([]*probe.Filter) {
			values = append(values, v)
		}
	case ProbingDistributionSpec_FieldPathSelectorTargetSelector:
		for _, v := range fpaov.values.([]*probing_target.Filter) {
			values = append(values, v)
		}
	case ProbingDistributionSpec_FieldPathSelectorConstraint:
		for _, v := range fpaov.values.([]*common.ProbingConstraint) {
			values = append(values, v)
		}
	case ProbingDistributionSpec_FieldPathSelectorProbingSettings:
		for _, v := range fpaov.values.([]*common.ProbingSettings) {
			values = append(values, v)
		}
	case ProbingDistributionSpec_FieldPathSelectorEnablePcap:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingDistributionSpec_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ProbingDistributionSpec_FieldTerminalPathArrayOfValues) AsProbeSelectorArrayOfValues() ([]*probe.Filter, bool) {
	res, ok := fpaov.values.([]*probe.Filter)
	return res, ok
}
func (fpaov *ProbingDistributionSpec_FieldTerminalPathArrayOfValues) AsTargetSelectorArrayOfValues() ([]*probing_target.Filter, bool) {
	res, ok := fpaov.values.([]*probing_target.Filter)
	return res, ok
}
func (fpaov *ProbingDistributionSpec_FieldTerminalPathArrayOfValues) AsConstraintArrayOfValues() ([]*common.ProbingConstraint, bool) {
	res, ok := fpaov.values.([]*common.ProbingConstraint)
	return res, ok
}
func (fpaov *ProbingDistributionSpec_FieldTerminalPathArrayOfValues) AsProbingSettingsArrayOfValues() ([]*common.ProbingSettings, bool) {
	res, ok := fpaov.values.([]*common.ProbingSettings)
	return res, ok
}
func (fpaov *ProbingDistributionSpec_FieldTerminalPathArrayOfValues) AsEnablePcapArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type ProbingDistributionSpec_FieldSubPathArrayOfValues struct {
	ProbingDistributionSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingDistributionSpec_FieldPathArrayOfValues = (*ProbingDistributionSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingDistributionSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingDistributionSpec_FieldSubPathArrayOfValues) AsConstraintPathArrayOfValues() (common.ProbingConstraint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ProbingConstraint_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingDistributionSpec_FieldSubPathArrayOfValues) AsProbingSettingsPathArrayOfValues() (common.ProbingSettings_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ProbingSettings_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingDistributionStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingDistributionStatus_FieldPathSelector
	Get(source *ProbingDistribution_Status) []interface{}
	GetSingle(source *ProbingDistribution_Status) (interface{}, bool)
	ClearValue(item *ProbingDistribution_Status)

	// Those methods build corresponding ProbingDistributionStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingDistributionStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingDistributionStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingDistributionStatus_FieldPathArrayItemValue
}

type ProbingDistributionStatus_FieldPathSelector int32

const (
	ProbingDistributionStatus_FieldPathSelectorTotalNumber              ProbingDistributionStatus_FieldPathSelector = 0
	ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount      ProbingDistributionStatus_FieldPathSelector = 1
	ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount ProbingDistributionStatus_FieldPathSelector = 2
	ProbingDistributionStatus_FieldPathSelectorByRegion                 ProbingDistributionStatus_FieldPathSelector = 3
)

func (s ProbingDistributionStatus_FieldPathSelector) String() string {
	switch s {
	case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
		return "total_number"
	case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
		return "selected_target_count"
	case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
		return "total_skipped_session_count"
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return "by_region"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", s))
	}
}

func BuildProbingDistributionStatus_FieldPath(fp gotenobject.RawFieldPath) (ProbingDistributionStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingDistribution_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "total_number", "totalNumber", "total-number":
			return &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorTotalNumber}, nil
		case "selected_target_count", "selectedTargetCount", "selected-target-count":
			return &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount}, nil
		case "total_skipped_session_count", "totalSkippedSessionCount", "total-skipped-session-count":
			return &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount}, nil
		case "by_region", "byRegion", "by-region":
			return &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorByRegion}, nil
		}
	} else {
		switch fp[0] {
		case "by_region", "byRegion", "by-region":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object ProbingDistribution_Status)", fp)
			}
			return &ProbingDistributionStatus_FieldPathMap{selector: ProbingDistributionStatus_FieldPathSelectorByRegion, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingDistribution_Status", fp)
}

func ParseProbingDistributionStatus_FieldPath(rawField string) (ProbingDistributionStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingDistributionStatus_FieldPath(fp)
}

func MustParseProbingDistributionStatus_FieldPath(rawField string) ProbingDistributionStatus_FieldPath {
	fp, err := ParseProbingDistributionStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingDistributionStatus_FieldTerminalPath struct {
	selector ProbingDistributionStatus_FieldPathSelector
}

var _ ProbingDistributionStatus_FieldPath = (*ProbingDistributionStatus_FieldTerminalPath)(nil)

func (fp *ProbingDistributionStatus_FieldTerminalPath) Selector() ProbingDistributionStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingDistributionStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingDistributionStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingDistribution_Status
func (fp *ProbingDistributionStatus_FieldTerminalPath) Get(source *ProbingDistribution_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
			values = append(values, source.TotalNumber)
		case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
			values = append(values, source.SelectedTargetCount)
		case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
			values = append(values, source.TotalSkippedSessionCount)
		case ProbingDistributionStatus_FieldPathSelectorByRegion:
			if source.ByRegion != nil {
				values = append(values, source.ByRegion)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingDistribution_Status))
}

// GetSingle returns value pointed by specific field of from source ProbingDistribution_Status
func (fp *ProbingDistributionStatus_FieldTerminalPath) GetSingle(source *ProbingDistribution_Status) (interface{}, bool) {
	switch fp.selector {
	case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
		return source.GetTotalNumber(), source != nil
	case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
		return source.GetSelectedTargetCount(), source != nil
	case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
		return source.GetTotalSkippedSessionCount(), source != nil
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		res := source.GetByRegion()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fp.selector))
	}
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingDistribution_Status))
}

// GetDefault returns a default value of the field type
func (fp *ProbingDistributionStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
		return int64(0)
	case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
		return int64(0)
	case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
		return int64(0)
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return (map[string]*ProbingDistribution_Status_Regional)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fp.selector))
	}
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) ClearValue(item *ProbingDistribution_Status) {
	if item != nil {
		switch fp.selector {
		case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
			item.TotalNumber = int64(0)
		case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
			item.SelectedTargetCount = int64(0)
		case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
			item.TotalSkippedSessionCount = int64(0)
		case ProbingDistributionStatus_FieldPathSelectorByRegion:
			item.ByRegion = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fp.selector))
		}
	}
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingDistribution_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingDistributionStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingDistributionStatus_FieldPathSelectorTotalNumber ||
		fp.selector == ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount ||
		fp.selector == ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) WithIValue(value interface{}) ProbingDistributionStatus_FieldPathValue {
	switch fp.selector {
	case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
		return &ProbingDistributionStatus_FieldTerminalPathValue{ProbingDistributionStatus_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
		return &ProbingDistributionStatus_FieldTerminalPathValue{ProbingDistributionStatus_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
		return &ProbingDistributionStatus_FieldTerminalPathValue{ProbingDistributionStatus_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return &ProbingDistributionStatus_FieldTerminalPathValue{ProbingDistributionStatus_FieldTerminalPath: *fp, value: value.(map[string]*ProbingDistribution_Status_Regional)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fp.selector))
	}
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingDistributionStatus_FieldPathArrayOfValues {
	fpaov := &ProbingDistributionStatus_FieldTerminalPathArrayOfValues{ProbingDistributionStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
		return &ProbingDistributionStatus_FieldTerminalPathArrayOfValues{ProbingDistributionStatus_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
		return &ProbingDistributionStatus_FieldTerminalPathArrayOfValues{ProbingDistributionStatus_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
		return &ProbingDistributionStatus_FieldTerminalPathArrayOfValues{ProbingDistributionStatus_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return &ProbingDistributionStatus_FieldTerminalPathArrayOfValues{ProbingDistributionStatus_FieldTerminalPath: *fp, values: values.([]map[string]*ProbingDistribution_Status_Regional)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingDistributionStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fp.selector))
	}
}

func (fp *ProbingDistributionStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ProbingDistributionStatus_FieldPathMap struct {
	key      string
	selector ProbingDistributionStatus_FieldPathSelector
}

var _ ProbingDistributionStatus_FieldPath = (*ProbingDistributionStatus_FieldPathMap)(nil)

func (fpm *ProbingDistributionStatus_FieldPathMap) Selector() ProbingDistributionStatus_FieldPathSelector {
	return fpm.selector
}

func (fpm *ProbingDistributionStatus_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ProbingDistributionStatus_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ProbingDistributionStatus_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source ProbingDistribution_Status
func (fpm *ProbingDistributionStatus_FieldPathMap) Get(source *ProbingDistribution_Status) (values []interface{}) {
	switch fpm.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		if value, ok := source.GetByRegion()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpm.selector))
	}
	return
}

func (fpm *ProbingDistributionStatus_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*ProbingDistribution_Status))
}

// GetSingle returns value by selected field map key from source ProbingDistribution_Status
func (fpm *ProbingDistributionStatus_FieldPathMap) GetSingle(source *ProbingDistribution_Status) (interface{}, bool) {
	switch fpm.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		res, ok := source.GetByRegion()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpm.selector))
	}
}

func (fpm *ProbingDistributionStatus_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*ProbingDistribution_Status))
}

// GetDefault returns a default value of the field type
func (fpm *ProbingDistributionStatus_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		var v *ProbingDistribution_Status_Regional
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpm.selector))
	}
}

func (fpm *ProbingDistributionStatus_FieldPathMap) ClearValue(item *ProbingDistribution_Status) {
	if item != nil {
		switch fpm.selector {
		case ProbingDistributionStatus_FieldPathSelectorByRegion:
			delete(item.ByRegion, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpm.selector))
		}
	}
}

func (fpm *ProbingDistributionStatus_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*ProbingDistribution_Status))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ProbingDistributionStatus_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpm.selector))
	}
}

func (fpm *ProbingDistributionStatus_FieldPathMap) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fpm}
}

func (fpm *ProbingDistributionStatus_FieldPathMap) WithIValue(value interface{}) ProbingDistributionStatus_FieldPathValue {
	switch fpm.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return &ProbingDistributionStatus_FieldPathMapValue{ProbingDistributionStatus_FieldPathMap: *fpm, value: value.(*ProbingDistribution_Status_Regional)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpm.selector))
	}
}

func (fpm *ProbingDistributionStatus_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ProbingDistributionStatus_FieldPathMap) WithIArrayOfValues(values interface{}) ProbingDistributionStatus_FieldPathArrayOfValues {
	switch fpm.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return &ProbingDistributionStatus_FieldPathMapArrayOfValues{ProbingDistributionStatus_FieldPathMap: *fpm, values: values.([]*ProbingDistribution_Status_Regional)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpm.selector))
	}
}

func (fpm *ProbingDistributionStatus_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ProbingDistributionStatus_FieldPathMap) WithIArrayItemValue(value interface{}) ProbingDistributionStatus_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ProbingDistributionStatus_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// ProbingDistributionStatus_FieldPathValue allows storing values for Status fields according to their type
type ProbingDistributionStatus_FieldPathValue interface {
	ProbingDistributionStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingDistribution_Status)
	CompareWith(*ProbingDistribution_Status) (cmp int, comparable bool)
}

func ParseProbingDistributionStatus_FieldPathValue(pathStr, valueStr string) (ProbingDistributionStatus_FieldPathValue, error) {
	fp, err := ParseProbingDistributionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingDistributionStatus_FieldPathValue), nil
}

func MustParseProbingDistributionStatus_FieldPathValue(pathStr, valueStr string) ProbingDistributionStatus_FieldPathValue {
	fpv, err := ParseProbingDistributionStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingDistributionStatus_FieldTerminalPathValue struct {
	ProbingDistributionStatus_FieldTerminalPath
	value interface{}
}

var _ ProbingDistributionStatus_FieldPathValue = (*ProbingDistributionStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) AsTotalNumberValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) AsSelectedTargetCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) AsTotalSkippedSessionCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) AsByRegionValue() (map[string]*ProbingDistribution_Status_Regional, bool) {
	res, ok := fpv.value.(map[string]*ProbingDistribution_Status_Regional)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) SetTo(target **ProbingDistribution_Status) {
	if *target == nil {
		*target = new(ProbingDistribution_Status)
	}
	switch fpv.selector {
	case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
		(*target).TotalNumber = fpv.value.(int64)
	case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
		(*target).SelectedTargetCount = fpv.value.(int64)
	case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
		(*target).TotalSkippedSessionCount = fpv.value.(int64)
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		(*target).ByRegion = fpv.value.(map[string]*ProbingDistribution_Status_Regional)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpv.selector))
	}
}

func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingDistribution_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingDistributionStatus_FieldTerminalPathValue' with the value under path in 'ProbingDistribution_Status'.
func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) CompareWith(source *ProbingDistribution_Status) (int, bool) {
	switch fpv.selector {
	case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
		leftValue := fpv.value.(int64)
		rightValue := source.GetTotalNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSelectedTargetCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetTotalSkippedSessionCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpv.selector))
	}
}

func (fpv *ProbingDistributionStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingDistribution_Status))
}

type ProbingDistributionStatus_FieldPathMapValue struct {
	ProbingDistributionStatus_FieldPathMap
	value interface{}
}

var _ ProbingDistributionStatus_FieldPathValue = (*ProbingDistributionStatus_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Status as interface{}
func (fpmv *ProbingDistributionStatus_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ProbingDistributionStatus_FieldPathMapValue) AsByRegionElementValue() (*ProbingDistribution_Status_Regional, bool) {
	res, ok := fpmv.value.(*ProbingDistribution_Status_Regional)
	return res, ok
}

// SetTo stores value for selected field in Status
func (fpmv *ProbingDistributionStatus_FieldPathMapValue) SetTo(target **ProbingDistribution_Status) {
	if *target == nil {
		*target = new(ProbingDistribution_Status)
	}
	switch fpmv.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		if (*target).ByRegion == nil {
			(*target).ByRegion = make(map[string]*ProbingDistribution_Status_Regional)
		}
		(*target).ByRegion[fpmv.key] = fpmv.value.(*ProbingDistribution_Status_Regional)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpmv.selector))
	}
}

func (fpmv *ProbingDistributionStatus_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingDistribution_Status)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingDistributionStatus_FieldPathMapValue' with the value under path in 'ProbingDistribution_Status'.
func (fpmv *ProbingDistributionStatus_FieldPathMapValue) CompareWith(source *ProbingDistribution_Status) (int, bool) {
	switch fpmv.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status: %d", fpmv.selector))
	}
}

func (fpmv *ProbingDistributionStatus_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*ProbingDistribution_Status))
}

// ProbingDistributionStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type ProbingDistributionStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingDistributionStatus_FieldPath
	ContainsValue(*ProbingDistribution_Status) bool
}

// ParseProbingDistributionStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingDistributionStatus_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingDistributionStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingDistributionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingDistributionStatus_FieldPathArrayItemValue), nil
}

func MustParseProbingDistributionStatus_FieldPathArrayItemValue(pathStr, valueStr string) ProbingDistributionStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingDistributionStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingDistributionStatus_FieldTerminalPathArrayItemValue struct {
	ProbingDistributionStatus_FieldTerminalPath
	value interface{}
}

var _ ProbingDistributionStatus_FieldPathArrayItemValue = (*ProbingDistributionStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingDistribution_Status as interface{}
func (fpaiv *ProbingDistributionStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingDistributionStatus_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingDistribution_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingDistributionStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingDistribution_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *ProbingDistributionStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingDistribution_Status) bool {
	slice := fpaiv.ProbingDistributionStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbingDistributionStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type ProbingDistributionStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingDistributionStatus_FieldPath
}

func ParseProbingDistributionStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingDistributionStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingDistributionStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingDistributionStatus_FieldPathArrayOfValues), nil
}

func MustParseProbingDistributionStatus_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingDistributionStatus_FieldPathArrayOfValues {
	fpaov, err := ParseProbingDistributionStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingDistributionStatus_FieldTerminalPathArrayOfValues struct {
	ProbingDistributionStatus_FieldTerminalPath
	values interface{}
}

var _ ProbingDistributionStatus_FieldPathArrayOfValues = (*ProbingDistributionStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingDistributionStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingDistributionStatus_FieldPathSelectorTotalNumber:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		for _, v := range fpaov.values.([]map[string]*ProbingDistribution_Status_Regional) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingDistributionStatus_FieldTerminalPathArrayOfValues) AsTotalNumberArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbingDistributionStatus_FieldTerminalPathArrayOfValues) AsSelectedTargetCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbingDistributionStatus_FieldTerminalPathArrayOfValues) AsTotalSkippedSessionCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbingDistributionStatus_FieldTerminalPathArrayOfValues) AsByRegionArrayOfValues() ([]map[string]*ProbingDistribution_Status_Regional, bool) {
	res, ok := fpaov.values.([]map[string]*ProbingDistribution_Status_Regional)
	return res, ok
}

type ProbingDistributionStatus_FieldPathMapArrayOfValues struct {
	ProbingDistributionStatus_FieldPathMap
	values interface{}
}

var _ ProbingDistributionStatus_FieldPathArrayOfValues = (*ProbingDistributionStatus_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ProbingDistributionStatus_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ProbingDistributionStatus_FieldPathSelectorByRegion:
		for _, v := range fpmaov.values.([]*ProbingDistribution_Status_Regional) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ProbingDistributionStatus_FieldPathMapArrayOfValues) AsByRegionArrayOfElementValues() ([]*ProbingDistribution_Status_Regional, bool) {
	res, ok := fpmaov.values.([]*ProbingDistribution_Status_Regional)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingDistributionStatusRegional_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingDistributionStatusRegional_FieldPathSelector
	Get(source *ProbingDistribution_Status_Regional) []interface{}
	GetSingle(source *ProbingDistribution_Status_Regional) (interface{}, bool)
	ClearValue(item *ProbingDistribution_Status_Regional)

	// Those methods build corresponding ProbingDistributionStatusRegional_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingDistributionStatusRegional_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingDistributionStatusRegional_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingDistributionStatusRegional_FieldPathArrayItemValue
}

type ProbingDistributionStatusRegional_FieldPathSelector int32

const (
	ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount         ProbingDistributionStatusRegional_FieldPathSelector = 0
	ProbingDistributionStatusRegional_FieldPathSelectorTargetCount           ProbingDistributionStatusRegional_FieldPathSelector = 1
	ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount   ProbingDistributionStatusRegional_FieldPathSelector = 2
	ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions ProbingDistributionStatusRegional_FieldPathSelector = 3
)

func (s ProbingDistributionStatusRegional_FieldPathSelector) String() string {
	switch s {
	case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
		return "assigned_count"
	case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
		return "target_count"
	case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
		return "skipped_session_count"
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		return "sample_skipped_sessions"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", s))
	}
}

func BuildProbingDistributionStatusRegional_FieldPath(fp gotenobject.RawFieldPath) (ProbingDistributionStatusRegional_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingDistribution_Status_Regional")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "assigned_count", "assignedCount", "assigned-count":
			return &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount}, nil
		case "target_count", "targetCount", "target-count":
			return &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorTargetCount}, nil
		case "skipped_session_count", "skippedSessionCount", "skipped-session-count":
			return &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount}, nil
		case "sample_skipped_sessions", "sampleSkippedSessions", "sample-skipped-sessions":
			return &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingDistribution_Status_Regional", fp)
}

func ParseProbingDistributionStatusRegional_FieldPath(rawField string) (ProbingDistributionStatusRegional_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingDistributionStatusRegional_FieldPath(fp)
}

func MustParseProbingDistributionStatusRegional_FieldPath(rawField string) ProbingDistributionStatusRegional_FieldPath {
	fp, err := ParseProbingDistributionStatusRegional_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingDistributionStatusRegional_FieldTerminalPath struct {
	selector ProbingDistributionStatusRegional_FieldPathSelector
}

var _ ProbingDistributionStatusRegional_FieldPath = (*ProbingDistributionStatusRegional_FieldTerminalPath)(nil)

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) Selector() ProbingDistributionStatusRegional_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingDistribution_Status_Regional
func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) Get(source *ProbingDistribution_Status_Regional) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
			values = append(values, source.AssignedCount)
		case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
			values = append(values, source.TargetCount)
		case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
			values = append(values, source.SkippedSessionCount)
		case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
			for _, value := range source.GetSampleSkippedSessions() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingDistribution_Status_Regional))
}

// GetSingle returns value pointed by specific field of from source ProbingDistribution_Status_Regional
func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) GetSingle(source *ProbingDistribution_Status_Regional) (interface{}, bool) {
	switch fp.selector {
	case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
		return source.GetAssignedCount(), source != nil
	case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
		return source.GetTargetCount(), source != nil
	case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
		return source.GetSkippedSessionCount(), source != nil
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		res := source.GetSampleSkippedSessions()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fp.selector))
	}
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingDistribution_Status_Regional))
}

// GetDefault returns a default value of the field type
func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
		return int64(0)
	case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
		return int64(0)
	case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
		return int64(0)
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fp.selector))
	}
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) ClearValue(item *ProbingDistribution_Status_Regional) {
	if item != nil {
		switch fp.selector {
		case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
			item.AssignedCount = int64(0)
		case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
			item.TargetCount = int64(0)
		case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
			item.SkippedSessionCount = int64(0)
		case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
			item.SampleSkippedSessions = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fp.selector))
		}
	}
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingDistribution_Status_Regional))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount ||
		fp.selector == ProbingDistributionStatusRegional_FieldPathSelectorTargetCount ||
		fp.selector == ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount ||
		fp.selector == ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) WithIValue(value interface{}) ProbingDistributionStatusRegional_FieldPathValue {
	switch fp.selector {
	case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
		return &ProbingDistributionStatusRegional_FieldTerminalPathValue{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
		return &ProbingDistributionStatusRegional_FieldTerminalPathValue{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
		return &ProbingDistributionStatusRegional_FieldTerminalPathValue{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, value: value.(int64)}
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		return &ProbingDistributionStatusRegional_FieldTerminalPathValue{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fp.selector))
	}
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingDistributionStatusRegional_FieldPathArrayOfValues {
	fpaov := &ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues{ProbingDistributionStatusRegional_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
		return &ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
		return &ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
		return &ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, values: values.([]int64)}
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		return &ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingDistributionStatusRegional_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		return &ProbingDistributionStatusRegional_FieldTerminalPathArrayItemValue{ProbingDistributionStatusRegional_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fp.selector))
	}
}

func (fp *ProbingDistributionStatusRegional_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbingDistributionStatusRegional_FieldPathValue allows storing values for Regional fields according to their type
type ProbingDistributionStatusRegional_FieldPathValue interface {
	ProbingDistributionStatusRegional_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingDistribution_Status_Regional)
	CompareWith(*ProbingDistribution_Status_Regional) (cmp int, comparable bool)
}

func ParseProbingDistributionStatusRegional_FieldPathValue(pathStr, valueStr string) (ProbingDistributionStatusRegional_FieldPathValue, error) {
	fp, err := ParseProbingDistributionStatusRegional_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Regional field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingDistributionStatusRegional_FieldPathValue), nil
}

func MustParseProbingDistributionStatusRegional_FieldPathValue(pathStr, valueStr string) ProbingDistributionStatusRegional_FieldPathValue {
	fpv, err := ParseProbingDistributionStatusRegional_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingDistributionStatusRegional_FieldTerminalPathValue struct {
	ProbingDistributionStatusRegional_FieldTerminalPath
	value interface{}
}

var _ ProbingDistributionStatusRegional_FieldPathValue = (*ProbingDistributionStatusRegional_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Regional' as interface{}
func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) AsAssignedCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) AsTargetCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) AsSkippedSessionCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) AsSampleSkippedSessionsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Regional
func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) SetTo(target **ProbingDistribution_Status_Regional) {
	if *target == nil {
		*target = new(ProbingDistribution_Status_Regional)
	}
	switch fpv.selector {
	case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
		(*target).AssignedCount = fpv.value.(int64)
	case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
		(*target).TargetCount = fpv.value.(int64)
	case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
		(*target).SkippedSessionCount = fpv.value.(int64)
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		(*target).SampleSkippedSessions = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fpv.selector))
	}
}

func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingDistribution_Status_Regional)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingDistributionStatusRegional_FieldTerminalPathValue' with the value under path in 'ProbingDistribution_Status_Regional'.
func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) CompareWith(source *ProbingDistribution_Status_Regional) (int, bool) {
	switch fpv.selector {
	case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetAssignedCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetTargetCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSkippedSessionCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingDistribution_Status_Regional: %d", fpv.selector))
	}
}

func (fpv *ProbingDistributionStatusRegional_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingDistribution_Status_Regional))
}

// ProbingDistributionStatusRegional_FieldPathArrayItemValue allows storing single item in Path-specific values for Regional according to their type
// Present only for array (repeated) types.
type ProbingDistributionStatusRegional_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingDistributionStatusRegional_FieldPath
	ContainsValue(*ProbingDistribution_Status_Regional) bool
}

// ParseProbingDistributionStatusRegional_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingDistributionStatusRegional_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingDistributionStatusRegional_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingDistributionStatusRegional_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Regional field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingDistributionStatusRegional_FieldPathArrayItemValue), nil
}

func MustParseProbingDistributionStatusRegional_FieldPathArrayItemValue(pathStr, valueStr string) ProbingDistributionStatusRegional_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingDistributionStatusRegional_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingDistributionStatusRegional_FieldTerminalPathArrayItemValue struct {
	ProbingDistributionStatusRegional_FieldTerminalPath
	value interface{}
}

var _ ProbingDistributionStatusRegional_FieldPathArrayItemValue = (*ProbingDistributionStatusRegional_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingDistribution_Status_Regional as interface{}
func (fpaiv *ProbingDistributionStatusRegional_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbingDistributionStatusRegional_FieldTerminalPathArrayItemValue) AsSampleSkippedSessionsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProbingDistributionStatusRegional_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingDistribution_Status_Regional) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingDistributionStatusRegional_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingDistribution_Status_Regional))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Regional'
func (fpaiv *ProbingDistributionStatusRegional_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingDistribution_Status_Regional) bool {
	slice := fpaiv.ProbingDistributionStatusRegional_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbingDistributionStatusRegional_FieldPathArrayOfValues allows storing slice of values for Regional fields according to their type
type ProbingDistributionStatusRegional_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingDistributionStatusRegional_FieldPath
}

func ParseProbingDistributionStatusRegional_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingDistributionStatusRegional_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingDistributionStatusRegional_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Regional field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingDistributionStatusRegional_FieldPathArrayOfValues), nil
}

func MustParseProbingDistributionStatusRegional_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingDistributionStatusRegional_FieldPathArrayOfValues {
	fpaov, err := ParseProbingDistributionStatusRegional_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues struct {
	ProbingDistributionStatusRegional_FieldTerminalPath
	values interface{}
}

var _ ProbingDistributionStatusRegional_FieldPathArrayOfValues = (*ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbingDistributionStatusRegional_FieldPathSelectorTargetCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues) AsAssignedCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues) AsTargetCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues) AsSkippedSessionCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *ProbingDistributionStatusRegional_FieldTerminalPathArrayOfValues) AsSampleSkippedSessionsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
