// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_distribution.proto
// DO NOT EDIT!!!

package probing_distribution

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &project.Project{}
)

func (o *ProbingDistribution) GotenObjectExt() {}

func (o *ProbingDistribution) MakeFullFieldMask() *ProbingDistribution_FieldMask {
	return FullProbingDistribution_FieldMask()
}

func (o *ProbingDistribution) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingDistribution_FieldMask()
}

func (o *ProbingDistribution) MakeDiffFieldMask(other *ProbingDistribution) *ProbingDistribution_FieldMask {
	if o == nil && other == nil {
		return &ProbingDistribution_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingDistribution_FieldMask()
	}

	res := &ProbingDistribution_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingDistribution_FieldSubPath{selector: ProbingDistribution_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingDistribution_FieldSubPath{selector: ProbingDistribution_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingDistribution_FieldTerminalPath{selector: ProbingDistribution_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingDistribution_FieldSubPath{selector: ProbingDistribution_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *ProbingDistribution) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingDistribution))
}

func (o *ProbingDistribution) Clone() *ProbingDistribution {
	if o == nil {
		return nil
	}
	result := &ProbingDistribution{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Metadata = o.Metadata.Clone()
	result.Spec = o.Spec.Clone()
	result.Status = o.Status.Clone()
	return result
}

func (o *ProbingDistribution) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingDistribution) Merge(source *ProbingDistribution) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(ProbingDistribution_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(ProbingDistribution_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *ProbingDistribution) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingDistribution))
}

func (o *ProbingDistribution_Spec) GotenObjectExt() {}

func (o *ProbingDistribution_Spec) MakeFullFieldMask() *ProbingDistribution_Spec_FieldMask {
	return FullProbingDistribution_Spec_FieldMask()
}

func (o *ProbingDistribution_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingDistribution_Spec_FieldMask()
}

func (o *ProbingDistribution_Spec) MakeDiffFieldMask(other *ProbingDistribution_Spec) *ProbingDistribution_Spec_FieldMask {
	if o == nil && other == nil {
		return &ProbingDistribution_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingDistribution_Spec_FieldMask()
	}

	res := &ProbingDistribution_Spec_FieldMask{}
	if o.GetEnabled() != other.GetEnabled() {
		res.Paths = append(res.Paths, &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorEnabled})
	}
	if o.GetProbeSelector().String() != other.GetProbeSelector().String() {
		res.Paths = append(res.Paths, &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorProbeSelector})
	}
	if o.GetTargetSelector().String() != other.GetTargetSelector().String() {
		res.Paths = append(res.Paths, &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorTargetSelector})
	}
	{
		subMask := o.GetConstraint().MakeDiffFieldMask(other.GetConstraint())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorConstraint})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingDistributionSpec_FieldSubPath{selector: ProbingDistributionSpec_FieldPathSelectorConstraint, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetProbingSettings().MakeDiffFieldMask(other.GetProbingSettings())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorProbingSettings})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &ProbingDistributionSpec_FieldSubPath{selector: ProbingDistributionSpec_FieldPathSelectorProbingSettings, subPath: subpath})
			}
		}
	}
	if o.GetEnablePcap() != other.GetEnablePcap() {
		res.Paths = append(res.Paths, &ProbingDistributionSpec_FieldTerminalPath{selector: ProbingDistributionSpec_FieldPathSelectorEnablePcap})
	}
	return res
}

func (o *ProbingDistribution_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingDistribution_Spec))
}

func (o *ProbingDistribution_Spec) Clone() *ProbingDistribution_Spec {
	if o == nil {
		return nil
	}
	result := &ProbingDistribution_Spec{}
	result.Enabled = o.Enabled
	if o.ProbeSelector == nil {
		result.ProbeSelector = nil
	} else if data, err := o.ProbeSelector.ProtoString(); err != nil {
		panic(err)
	} else {
		result.ProbeSelector = &probe.Filter{}
		if err := result.ProbeSelector.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.TargetSelector == nil {
		result.TargetSelector = nil
	} else if data, err := o.TargetSelector.ProtoString(); err != nil {
		panic(err)
	} else {
		result.TargetSelector = &probing_target.Filter{}
		if err := result.TargetSelector.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Constraint = o.Constraint.Clone()
	result.ProbingSettings = o.ProbingSettings.Clone()
	result.EnablePcap = o.EnablePcap
	return result
}

func (o *ProbingDistribution_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingDistribution_Spec) Merge(source *ProbingDistribution_Spec) {
	o.Enabled = source.GetEnabled()
	if source.GetProbeSelector() != nil {
		if data, err := source.GetProbeSelector().ProtoString(); err != nil {
			panic(err)
		} else {
			o.ProbeSelector = &probe.Filter{}
			if err := o.ProbeSelector.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.ProbeSelector = nil
	}
	if source.GetTargetSelector() != nil {
		if data, err := source.GetTargetSelector().ProtoString(); err != nil {
			panic(err)
		} else {
			o.TargetSelector = &probing_target.Filter{}
			if err := o.TargetSelector.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.TargetSelector = nil
	}
	if source.GetConstraint() != nil {
		if o.Constraint == nil {
			o.Constraint = new(common.ProbingConstraint)
		}
		o.Constraint.Merge(source.GetConstraint())
	}
	if source.GetProbingSettings() != nil {
		if o.ProbingSettings == nil {
			o.ProbingSettings = new(common.ProbingSettings)
		}
		o.ProbingSettings.Merge(source.GetProbingSettings())
	}
	o.EnablePcap = source.GetEnablePcap()
}

func (o *ProbingDistribution_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingDistribution_Spec))
}

func (o *ProbingDistribution_Status) GotenObjectExt() {}

func (o *ProbingDistribution_Status) MakeFullFieldMask() *ProbingDistribution_Status_FieldMask {
	return FullProbingDistribution_Status_FieldMask()
}

func (o *ProbingDistribution_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingDistribution_Status_FieldMask()
}

func (o *ProbingDistribution_Status) MakeDiffFieldMask(other *ProbingDistribution_Status) *ProbingDistribution_Status_FieldMask {
	if o == nil && other == nil {
		return &ProbingDistribution_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingDistribution_Status_FieldMask()
	}

	res := &ProbingDistribution_Status_FieldMask{}
	if o.GetTotalNumber() != other.GetTotalNumber() {
		res.Paths = append(res.Paths, &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorTotalNumber})
	}
	if o.GetSelectedTargetCount() != other.GetSelectedTargetCount() {
		res.Paths = append(res.Paths, &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorSelectedTargetCount})
	}
	if o.GetTotalSkippedSessionCount() != other.GetTotalSkippedSessionCount() {
		res.Paths = append(res.Paths, &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorTotalSkippedSessionCount})
	}

	if len(o.GetByRegion()) == len(other.GetByRegion()) {
		for i, lValue := range o.GetByRegion() {
			rValue := other.GetByRegion()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorByRegion})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProbingDistributionStatus_FieldTerminalPath{selector: ProbingDistributionStatus_FieldPathSelectorByRegion})
	}
	return res
}

func (o *ProbingDistribution_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingDistribution_Status))
}

func (o *ProbingDistribution_Status) Clone() *ProbingDistribution_Status {
	if o == nil {
		return nil
	}
	result := &ProbingDistribution_Status{}
	result.TotalNumber = o.TotalNumber
	result.SelectedTargetCount = o.SelectedTargetCount
	result.TotalSkippedSessionCount = o.TotalSkippedSessionCount
	result.ByRegion = map[string]*ProbingDistribution_Status_Regional{}
	for key, sourceValue := range o.ByRegion {
		result.ByRegion[key] = sourceValue.Clone()
	}
	return result
}

func (o *ProbingDistribution_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingDistribution_Status) Merge(source *ProbingDistribution_Status) {
	o.TotalNumber = source.GetTotalNumber()
	o.SelectedTargetCount = source.GetSelectedTargetCount()
	o.TotalSkippedSessionCount = source.GetTotalSkippedSessionCount()
	if source.GetByRegion() != nil {
		if o.ByRegion == nil {
			o.ByRegion = make(map[string]*ProbingDistribution_Status_Regional, len(source.GetByRegion()))
		}
		for key, sourceValue := range source.GetByRegion() {
			if sourceValue != nil {
				if o.ByRegion[key] == nil {
					o.ByRegion[key] = new(ProbingDistribution_Status_Regional)
				}
				o.ByRegion[key].Merge(sourceValue)
			}
		}
	}
}

func (o *ProbingDistribution_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingDistribution_Status))
}

func (o *ProbingDistribution_Status_Regional) GotenObjectExt() {}

func (o *ProbingDistribution_Status_Regional) MakeFullFieldMask() *ProbingDistribution_Status_Regional_FieldMask {
	return FullProbingDistribution_Status_Regional_FieldMask()
}

func (o *ProbingDistribution_Status_Regional) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullProbingDistribution_Status_Regional_FieldMask()
}

func (o *ProbingDistribution_Status_Regional) MakeDiffFieldMask(other *ProbingDistribution_Status_Regional) *ProbingDistribution_Status_Regional_FieldMask {
	if o == nil && other == nil {
		return &ProbingDistribution_Status_Regional_FieldMask{}
	}
	if o == nil || other == nil {
		return FullProbingDistribution_Status_Regional_FieldMask()
	}

	res := &ProbingDistribution_Status_Regional_FieldMask{}
	if o.GetAssignedCount() != other.GetAssignedCount() {
		res.Paths = append(res.Paths, &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorAssignedCount})
	}
	if o.GetTargetCount() != other.GetTargetCount() {
		res.Paths = append(res.Paths, &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorTargetCount})
	}
	if o.GetSkippedSessionCount() != other.GetSkippedSessionCount() {
		res.Paths = append(res.Paths, &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorSkippedSessionCount})
	}

	if len(o.GetSampleSkippedSessions()) == len(other.GetSampleSkippedSessions()) {
		for i, lValue := range o.GetSampleSkippedSessions() {
			rValue := other.GetSampleSkippedSessions()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ProbingDistributionStatusRegional_FieldTerminalPath{selector: ProbingDistributionStatusRegional_FieldPathSelectorSampleSkippedSessions})
	}
	return res
}

func (o *ProbingDistribution_Status_Regional) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ProbingDistribution_Status_Regional))
}

func (o *ProbingDistribution_Status_Regional) Clone() *ProbingDistribution_Status_Regional {
	if o == nil {
		return nil
	}
	result := &ProbingDistribution_Status_Regional{}
	result.AssignedCount = o.AssignedCount
	result.TargetCount = o.TargetCount
	result.SkippedSessionCount = o.SkippedSessionCount
	result.SampleSkippedSessions = make([]string, len(o.SampleSkippedSessions))
	for i, sourceValue := range o.SampleSkippedSessions {
		result.SampleSkippedSessions[i] = sourceValue
	}
	return result
}

func (o *ProbingDistribution_Status_Regional) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ProbingDistribution_Status_Regional) Merge(source *ProbingDistribution_Status_Regional) {
	o.AssignedCount = source.GetAssignedCount()
	o.TargetCount = source.GetTargetCount()
	o.SkippedSessionCount = source.GetSkippedSessionCount()
	for _, sourceValue := range source.GetSampleSkippedSessions() {
		exists := false
		for _, currentValue := range o.SampleSkippedSessions {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.SampleSkippedSessions = append(o.SampleSkippedSessions, newDstElement)
		}
	}

}

func (o *ProbingDistribution_Status_Regional) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ProbingDistribution_Status_Regional))
}
