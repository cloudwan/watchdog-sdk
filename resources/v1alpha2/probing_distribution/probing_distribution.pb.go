// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/probing_distribution.proto
// DO NOT EDIT!!!

package probing_distribution

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProbingDistribution Resource
type ProbingDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of ProbingDistribution
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Display Name
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Metadata
	Metadata *ntt_meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Spec
	Spec *ProbingDistribution_Spec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	// Status
	Status *ProbingDistribution_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *ProbingDistribution) Reset() {
	*m = ProbingDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingDistribution) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingDistribution) ProtoMessage() {}

func (m *ProbingDistribution) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingDistribution) GotenMessage() {}

// Deprecated, Use ProbingDistribution.ProtoReflect.Descriptor instead.
func (*ProbingDistribution) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_distribution_proto_rawDescGZIP(), []int{0}
}

func (m *ProbingDistribution) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingDistribution) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingDistribution) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingDistribution) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingDistribution) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ProbingDistribution) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ProbingDistribution) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *ProbingDistribution) GetSpec() *ProbingDistribution_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProbingDistribution) GetStatus() *ProbingDistribution_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ProbingDistribution) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "ProbingDistribution"))
	}
	m.Name = fv
}

func (m *ProbingDistribution) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "ProbingDistribution"))
	}
	m.DisplayName = fv
}

func (m *ProbingDistribution) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "ProbingDistribution"))
	}
	m.Metadata = fv
}

func (m *ProbingDistribution) SetSpec(fv *ProbingDistribution_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "ProbingDistribution"))
	}
	m.Spec = fv
}

func (m *ProbingDistribution) SetStatus(fv *ProbingDistribution_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "ProbingDistribution"))
	}
	m.Status = fv
}

// Spec
type ProbingDistribution_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// In order to effectively distribute targets to probes this flag must be
	// set
	Enabled bool `protobuf:"varint,9,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	// Probe selector is a filter used to select Agents to distribute targets to
	//
	// Examples:
	// * specific agent group: `spec.probe_group =
	// "projects/xyz/probeGroups/infra"`
	// * tags: `metadata.tags CONTAINS "vpn-65552"`
	// * only deploy to probes in USA:
	// `status.active_location.admin_hierarchy.country = "adminAreas/US"`
	//
	// See [Probe definition][ntt.watchdog.v1alpha2.Probe] for full reference.
	ProbeSelector *probe.Filter `protobuf:"bytes,5,opt,customtype=Filter,name=probe_selector,json=probeSelector,proto3" json:"probe_selector,omitempty" firestore:"probeSelector"`
	// Target filter is a filter used to select targets for distribution
	//
	// Examples:
	// * specific target group: `group =
	// "projects/xyz/probingTargetGroups/public-cdns"`
	// * speed tests: `mode = "SPEED_TEST"`
	//
	// See [ProbingTarget][ntt.watchdog.v1alpha2.ProbingTarget] for full
	// reference.
	TargetSelector *probing_target.Filter `protobuf:"bytes,6,opt,customtype=Filter,name=target_selector,json=targetSelector,proto3" json:"target_selector,omitempty" firestore:"targetSelector"`
	// Additional distribution constraints.
	// Allows limiting the number of agents probing within geographical location
	// or site (public ip) in order to:
	// * avoid unnecessary cost after securing reasonable sample size; or
	// * getting blocked from publicly available service.
	Constraint *common.ProbingConstraint `protobuf:"bytes,7,opt,name=constraint,proto3" json:"constraint,omitempty" firestore:"constraint"`
	// Settings include session overrides. All settings are optional. Only
	// present settings are overridden
	ProbingSettings *common.ProbingSettings `protobuf:"bytes,8,opt,name=probing_settings,json=probingSettings,proto3" json:"probing_settings,omitempty" firestore:"probingSettings"`
}

func (m *ProbingDistribution_Spec) Reset() {
	*m = ProbingDistribution_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingDistribution_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingDistribution_Spec) ProtoMessage() {}

func (m *ProbingDistribution_Spec) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingDistribution_Spec) GotenMessage() {}

// Deprecated, Use ProbingDistribution_Spec.ProtoReflect.Descriptor instead.
func (*ProbingDistribution_Spec) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_distribution_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ProbingDistribution_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingDistribution_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingDistribution_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingDistribution_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingDistribution_Spec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ProbingDistribution_Spec) GetProbeSelector() *probe.Filter {
	if m != nil {
		return m.ProbeSelector
	}
	return nil
}

func (m *ProbingDistribution_Spec) GetTargetSelector() *probing_target.Filter {
	if m != nil {
		return m.TargetSelector
	}
	return nil
}

func (m *ProbingDistribution_Spec) GetConstraint() *common.ProbingConstraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (m *ProbingDistribution_Spec) GetProbingSettings() *common.ProbingSettings {
	if m != nil {
		return m.ProbingSettings
	}
	return nil
}

func (m *ProbingDistribution_Spec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "ProbingDistribution_Spec"))
	}
	m.Enabled = fv
}

func (m *ProbingDistribution_Spec) SetProbeSelector(fv *probe.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbeSelector", "ProbingDistribution_Spec"))
	}
	m.ProbeSelector = fv
}

func (m *ProbingDistribution_Spec) SetTargetSelector(fv *probing_target.Filter) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetSelector", "ProbingDistribution_Spec"))
	}
	m.TargetSelector = fv
}

func (m *ProbingDistribution_Spec) SetConstraint(fv *common.ProbingConstraint) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Constraint", "ProbingDistribution_Spec"))
	}
	m.Constraint = fv
}

func (m *ProbingDistribution_Spec) SetProbingSettings(fv *common.ProbingSettings) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbingSettings", "ProbingDistribution_Spec"))
	}
	m.ProbingSettings = fv
}

// Status
type ProbingDistribution_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// total number of probes that have been assigned to this distribution.
	TotalNumber int64 `protobuf:"varint,1,opt,name=total_number,json=totalNumber,proto3" json:"total_number,omitempty" firestore:"totalNumber"`
	// number of assigned probes per each region.
	RegionalCounts map[string]int64 `protobuf:"bytes,2,rep,name=regional_counts,json=regionalCounts,proto3" json:"regional_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" firestore:"regionalCounts"`
	// selected target count
	SelectedTargetCount int64 `protobuf:"varint,3,opt,name=selected_target_count,json=selectedTargetCount,proto3" json:"selected_target_count,omitempty" firestore:"selectedTargetCount"`
}

func (m *ProbingDistribution_Status) Reset() {
	*m = ProbingDistribution_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ProbingDistribution_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ProbingDistribution_Status) ProtoMessage() {}

func (m *ProbingDistribution_Status) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ProbingDistribution_Status) GotenMessage() {}

// Deprecated, Use ProbingDistribution_Status.ProtoReflect.Descriptor instead.
func (*ProbingDistribution_Status) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probing_distribution_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ProbingDistribution_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ProbingDistribution_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ProbingDistribution_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ProbingDistribution_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ProbingDistribution_Status) GetTotalNumber() int64 {
	if m != nil {
		return m.TotalNumber
	}
	return int64(0)
}

func (m *ProbingDistribution_Status) GetRegionalCounts() map[string]int64 {
	if m != nil {
		return m.RegionalCounts
	}
	return nil
}

func (m *ProbingDistribution_Status) GetSelectedTargetCount() int64 {
	if m != nil {
		return m.SelectedTargetCount
	}
	return int64(0)
}

func (m *ProbingDistribution_Status) SetTotalNumber(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalNumber", "ProbingDistribution_Status"))
	}
	m.TotalNumber = fv
}

func (m *ProbingDistribution_Status) SetRegionalCounts(fv map[string]int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RegionalCounts", "ProbingDistribution_Status"))
	}
	m.RegionalCounts = fv
}

func (m *ProbingDistribution_Status) SetSelectedTargetCount(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SelectedTargetCount", "ProbingDistribution_Status"))
	}
	m.SelectedTargetCount = fv
}

var watchdog_proto_v1alpha2_probing_distribution_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_probing_distribution_proto_rawDesc = []byte{
	0x0a, 0x32, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x0b, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0xb2, 0xda, 0x21, 0x17, 0x0a, 0x15, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xdb, 0x02,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xb2, 0xda, 0x21, 0x09, 0x1a, 0x07,
	0x0a, 0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0xca, 0xc6, 0x27, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x47, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xb2, 0xda, 0x21, 0x11, 0x1a, 0x0f,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0xca,
	0xc6, 0x27, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02, 0x08, 0x01, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0x92, 0x02, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x0f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x41, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0xaa, 0x04, 0xea, 0x41, 0x69, 0x0a, 0x27, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x92,
	0xd9, 0x21, 0xd6, 0x01, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a,
	0x96, 0x01, 0x08, 0x02, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x13,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x05, 0xaa, 0xd9, 0x21, 0x8e, 0x01, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61,
	0x67, 0x73, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0xb2, 0xdf, 0x21,
	0x0a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0xda, 0x94, 0x23, 0x08, 0x12,
	0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xc2, 0x85, 0x2c, 0x2c, 0x22, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x01, 0x42, 0xaa, 0x03,
	0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x5e, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x18, 0x50, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0xd2, 0x84, 0xd1, 0x02,
	0x44, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0xa2, 0x80, 0xd1, 0x02, 0x60, 0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x62,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_probing_distribution_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_probing_distribution_proto_rawDescData = watchdog_proto_v1alpha2_probing_distribution_proto_rawDesc
)

func watchdog_proto_v1alpha2_probing_distribution_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_probing_distribution_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_probing_distribution_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_probing_distribution_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_probing_distribution_proto_rawDescData
}

var watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var watchdog_proto_v1alpha2_probing_distribution_proto_goTypes = []interface{}{
	(*ProbingDistribution)(nil),        // 0: ntt.watchdog.v1alpha2.ProbingDistribution
	(*ProbingDistribution_Spec)(nil),   // 1: ntt.watchdog.v1alpha2.ProbingDistribution.Spec
	(*ProbingDistribution_Status)(nil), // 2: ntt.watchdog.v1alpha2.ProbingDistribution.Status
	nil,                                // 3: ntt.watchdog.v1alpha2.ProbingDistribution.Status.RegionalCountsEntry
	(*ntt_meta.Meta)(nil),              // 4: ntt.types.Meta
	(*common.ProbingConstraint)(nil),   // 5: ntt.watchdog.v1alpha2.ProbingConstraint
	(*common.ProbingSettings)(nil),     // 6: ntt.watchdog.v1alpha2.ProbingSettings
}
var watchdog_proto_v1alpha2_probing_distribution_proto_depIdxs = []int32{
	4, // 0: ntt.watchdog.v1alpha2.ProbingDistribution.metadata:type_name -> ntt.types.Meta
	1, // 1: ntt.watchdog.v1alpha2.ProbingDistribution.spec:type_name -> ntt.watchdog.v1alpha2.ProbingDistribution.Spec
	2, // 2: ntt.watchdog.v1alpha2.ProbingDistribution.status:type_name -> ntt.watchdog.v1alpha2.ProbingDistribution.Status
	5, // 3: ntt.watchdog.v1alpha2.ProbingDistribution.Spec.constraint:type_name -> ntt.watchdog.v1alpha2.ProbingConstraint
	6, // 4: ntt.watchdog.v1alpha2.ProbingDistribution.Spec.probing_settings:type_name -> ntt.watchdog.v1alpha2.ProbingSettings
	3, // 5: ntt.watchdog.v1alpha2.ProbingDistribution.Status.regional_counts:type_name -> ntt.watchdog.v1alpha2.ProbingDistribution.Status.RegionalCountsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_probing_distribution_proto_init() }
func watchdog_proto_v1alpha2_probing_distribution_proto_init() {
	if watchdog_proto_v1alpha2_probing_distribution_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingDistribution_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbingDistribution_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_probing_distribution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_probing_distribution_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_probing_distribution_proto_depIdxs,
		MessageInfos:      watchdog_proto_v1alpha2_probing_distribution_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_probing_distribution_proto = out.File
	watchdog_proto_v1alpha2_probing_distribution_proto_rawDesc = nil
	watchdog_proto_v1alpha2_probing_distribution_proto_goTypes = nil
	watchdog_proto_v1alpha2_probing_distribution_proto_depIdxs = nil
}
