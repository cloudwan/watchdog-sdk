// Code generated by protoc-gen-goten-resource
// Resource: ProbingDistribution
// DO NOT EDIT!!!

package probing_distribution

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	devices_project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &devices_project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.Actor{}
	_ = &iam_condition.Condition{}
	_ = &iam_organization.Organization{}
	_ = &iam_permission.Permission{}
	_ = &iam_project.Project{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &iam_user.User{}
	_ = &policy.Policy{}
	_ = &syncing_meta.SyncingMeta{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probe_group.ProbeGroup{}
	_ = &probing_target.ProbingTarget{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

type FilterBuilderOrCondition interface {
	_IsProbingDistributionFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsProbingDistributionFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp ProbingDistribution_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      ProbingDistribution_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Status() *filterCndBuilderStatus {
	return &filterCndBuilderStatus{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewProbingDistributionFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingDistributionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProbingDistribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingDistributionFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProbingDistribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProbingDistribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProbingDistribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ApiVersion() *filterCndBuilderMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Uid() *filterCndBuilderMetadataOwnerReferencesUid {
	return &filterCndBuilderMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProbingDistribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProbingDistribution_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *ProbingDistribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *ProbingDistribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *ProbingDistribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *ProbingDistribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *ProbingDistribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *ProbingDistribution_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*ProbingDistribution_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*ProbingDistribution_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *ProbingDistribution_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) Enabled() *filterCndBuilderSpecEnabled {
	return &filterCndBuilderSpecEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpec) ProbeSelector() *filterCndBuilderSpecProbeSelector {
	return &filterCndBuilderSpecProbeSelector{builder: b.builder}
}

func (b *filterCndBuilderSpec) TargetSelector() *filterCndBuilderSpecTargetSelector {
	return &filterCndBuilderSpecTargetSelector{builder: b.builder}
}

func (b *filterCndBuilderSpec) Constraint() *filterCndBuilderSpecConstraint {
	return &filterCndBuilderSpecConstraint{builder: b.builder}
}

func (b *filterCndBuilderSpec) ProbingSettings() *filterCndBuilderSpecProbingSettings {
	return &filterCndBuilderSpecProbingSettings{builder: b.builder}
}

type filterCndBuilderSpecEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecProbeSelector struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbeSelector) Eq(value *probe.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbeSelector) Neq(value *probe.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbeSelector) Gt(value *probe.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbeSelector) Gte(value *probe.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbeSelector) Lt(value *probe.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbeSelector) Lte(value *probe.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbeSelector) In(values []*probe.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbeSelector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbeSelector) NotIn(values []*probe.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbeSelector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbeSelector) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbeSelector().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbeSelector) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbeSelector().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbeSelector) compare(op gotenfilter.CompareOperator, value *probe.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbeSelector().WithValue(value),
	})
}

type filterCndBuilderSpecTargetSelector struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetSelector) Eq(value *probing_target.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetSelector) Neq(value *probing_target.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetSelector) Gt(value *probing_target.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetSelector) Gte(value *probing_target.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetSelector) Lt(value *probing_target.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetSelector) Lte(value *probing_target.Filter) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetSelector) In(values []*probing_target.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().TargetSelector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSelector) NotIn(values []*probing_target.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().TargetSelector().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetSelector) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().TargetSelector().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSelector) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().TargetSelector().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetSelector) compare(op gotenfilter.CompareOperator, value *probing_target.Filter) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().TargetSelector().WithValue(value),
	})
}

type filterCndBuilderSpecConstraint struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConstraint) Eq(value *common.ProbingConstraint) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConstraint) Neq(value *common.ProbingConstraint) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConstraint) Gt(value *common.ProbingConstraint) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConstraint) Gte(value *common.ProbingConstraint) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConstraint) Lt(value *common.ProbingConstraint) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConstraint) Lte(value *common.ProbingConstraint) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConstraint) In(values []*common.ProbingConstraint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraint) NotIn(values []*common.ProbingConstraint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraint) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraint) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraint) compare(op gotenfilter.CompareOperator, value *common.ProbingConstraint) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Constraint().WithValue(value),
	})
}

func (b *filterCndBuilderSpecConstraint) MaxSessionsPerAgentLocation() *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation {
	return &filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation{builder: b.builder}
}

func (b *filterCndBuilderSpecConstraint) MaxSessionsPerAgentPublicIpAddress() *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress {
	return &filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress{builder: b.builder}
}

type filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Eq(value *common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Neq(value *common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Gt(value *common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Gte(value *common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Lt(value *common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Lte(value *common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) In(values []*common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) NotIn(values []*common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) compare(op gotenfilter.CompareOperator, value *common.ProbingConstraint_AdminHierachy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().WithValue(value),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Country() *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry {
	return &filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Admin1() *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1 {
	return &filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1{builder: b.builder}
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Admin2() *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2 {
	return &filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2{builder: b.builder}
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Admin3() *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3 {
	return &filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3{builder: b.builder}
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocation) Admin4() *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4 {
	return &filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4{builder: b.builder}
}

type filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationCountry) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Country().WithValue(value),
	})
}

type filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin1) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin1().WithValue(value),
	})
}

type filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin2) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin2().WithValue(value),
	})
}

type filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin3) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin3().WithValue(value),
	})
}

type filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentLocationAdmin4) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentLocation().Admin4().WithValue(value),
	})
}

type filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentPublicIpAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentPublicIpAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentPublicIpAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentPublicIpAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecConstraintMaxSessionsPerAgentPublicIpAddress) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().Constraint().MaxSessionsPerAgentPublicIpAddress().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettings struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettings) Eq(value *common.ProbingSettings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettings) Neq(value *common.ProbingSettings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettings) Gt(value *common.ProbingSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettings) Gte(value *common.ProbingSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettings) Lt(value *common.ProbingSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettings) Lte(value *common.ProbingSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettings) In(values []*common.ProbingSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettings) NotIn(values []*common.ProbingSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettings) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettings) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettings) compare(op gotenfilter.CompareOperator, value *common.ProbingSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettings) Interval() *filterCndBuilderSpecProbingSettingsInterval {
	return &filterCndBuilderSpecProbingSettingsInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettings) Tos() *filterCndBuilderSpecProbingSettingsTos {
	return &filterCndBuilderSpecProbingSettingsTos{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettings) WindowSize() *filterCndBuilderSpecProbingSettingsWindowSize {
	return &filterCndBuilderSpecProbingSettingsWindowSize{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettings) PathProbing() *filterCndBuilderSpecProbingSettingsPathProbing {
	return &filterCndBuilderSpecProbingSettingsPathProbing{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettings) SpeeedtestSettings() *filterCndBuilderSpecProbingSettingsSpeeedtestSettings {
	return &filterCndBuilderSpecProbingSettingsSpeeedtestSettings{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettings) HttpProbingConfig() *filterCndBuilderSpecProbingSettingsHttpProbingConfig {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfig{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettings) ProxyConfiguration() *filterCndBuilderSpecProbingSettingsProxyConfiguration {
	return &filterCndBuilderSpecProbingSettingsProxyConfiguration{builder: b.builder}
}

type filterCndBuilderSpecProbingSettingsInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsTos struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsTos) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsTos) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsTos) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsTos) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsTos) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsTos) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsTos) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Tos().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsTos) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Tos().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsTos) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Tos().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsTos) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Tos().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsTos) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().Tos().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsWindowSize struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().WindowSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().WindowSize().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().WindowSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().WindowSize().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsWindowSize) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().WindowSize().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsPathProbing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Eq(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Neq(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Gt(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Gte(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Lt(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Lte(value *common.PathProbe) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) In(values []*common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) NotIn(values []*common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) compare(op gotenfilter.CompareOperator, value *common.PathProbe) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Enabled() *filterCndBuilderSpecProbingSettingsPathProbingEnabled {
	return &filterCndBuilderSpecProbingSettingsPathProbingEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Mode() *filterCndBuilderSpecProbingSettingsPathProbingMode {
	return &filterCndBuilderSpecProbingSettingsPathProbingMode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Interval() *filterCndBuilderSpecProbingSettingsPathProbingInterval {
	return &filterCndBuilderSpecProbingSettingsPathProbingInterval{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) IntervalSec() *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec {
	return &filterCndBuilderSpecProbingSettingsPathProbingIntervalSec{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) Attempts() *filterCndBuilderSpecProbingSettingsPathProbingAttempts {
	return &filterCndBuilderSpecProbingSettingsPathProbingAttempts{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsPathProbing) MaxTtl() *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl {
	return &filterCndBuilderSpecProbingSettingsPathProbingMaxTtl{builder: b.builder}
}

type filterCndBuilderSpecProbingSettingsPathProbingEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsPathProbingMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) Eq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) Neq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) Gt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) Gte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) Lt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) Lte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) In(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) NotIn(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMode) compare(op gotenfilter.CompareOperator, value common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Mode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsPathProbingInterval struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Interval().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Interval().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingInterval) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Interval().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsPathProbingIntervalSec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().IntervalSec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().IntervalSec().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingIntervalSec) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().IntervalSec().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsPathProbingAttempts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Attempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Attempts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Attempts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Attempts().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingAttempts) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().Attempts().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsPathProbingMaxTtl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) Eq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) Neq(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) Gt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) Gte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) Lt(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) Lte(value *wrappers.UInt32Value) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) In(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().MaxTtl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) NotIn(values []*wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().MaxTtl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().MaxTtl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().MaxTtl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsPathProbingMaxTtl) compare(op gotenfilter.CompareOperator, value *wrappers.UInt32Value) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().PathProbing().MaxTtl().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsSpeeedtestSettings struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) Eq(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) Neq(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) Gt(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) Gte(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) Lt(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) Lte(value *common.SpeedTestSettings) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) In(values []*common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) NotIn(values []*common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) compare(op gotenfilter.CompareOperator, value *common.SpeedTestSettings) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) Duration() *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration {
	return &filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) UseTls() *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls {
	return &filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) ServerSelection() *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection {
	return &filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) TcpPort() *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort {
	return &filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettings) TlsPort() *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort {
	return &filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort{builder: b.builder}
}

type filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().Duration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().Duration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsDuration) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().Duration().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().UseTls().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().UseTls().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsUseTls) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().UseTls().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) Eq(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) Neq(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) Gt(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) Gte(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) Lt(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) Lte(value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) In(values []common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().ServerSelection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) NotIn(values []common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().ServerSelection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().ServerSelection().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().ServerSelection().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsServerSelection) compare(op gotenfilter.CompareOperator, value common.SpeedTestSettings_ServerSelection) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().ServerSelection().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTcpPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TcpPort().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TlsPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TlsPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TlsPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TlsPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsSpeeedtestSettingsTlsPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().SpeeedtestSettings().TlsPort().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) Eq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) Neq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) Gt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) Gte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) Lt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) Lte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) In(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) NotIn(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) HttpRequest() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfig) AuthConfig() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig{builder: b.builder}
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) Url() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) RequestHeaders() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) RequestMethod() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) ExpectedResponseCode() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) Timeout() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) RequestBody() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) AuthenticationMethod() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequest) UrlFormEncodedBody() *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody{builder: b.builder}
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Url().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders {
	return &mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Eq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Neq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) In(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) NotIn(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) WithKey(key string) *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody {
	return &mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Eq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Neq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Gte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) Lte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) In(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) NotIn(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigHttpRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().HttpRequest().UrlFormEncodedBody().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) Eq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) Neq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) Gt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) Gte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) Lt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) Lte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) In(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) NotIn(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) Username() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) Password() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) TokenRequest() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) TokenResponseHeader() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) TokenResponseBodyKey() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) RequestHeaderTokenKey() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfig) TokenResponseBodyExpiryKey() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey{builder: b.builder}
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigUsername) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Username().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().Password().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) Url() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) RequestHeaders() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) RequestMethod() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) ExpectedResponseCode() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) Timeout() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) RequestBody() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) AuthenticationMethod() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequest) UrlFormEncodedBody() *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody {
	return &filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody{builder: b.builder}
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Eq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Neq(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lt(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lte(value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) In(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) NotIn(values []map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value map[string]*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) WithKey(key string) *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody {
	return &mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Eq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Neq(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Gte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lt(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) Lte(value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) In(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) NotIn(values []*common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenRequestUrlFormEncodedBody) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest_StringArray) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenRequest().UrlFormEncodedBody().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseHeader) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigRequestHeaderTokenKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsProxyConfiguration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) Eq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) Neq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) Gt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) Gte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) Lt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) Lte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) In(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) NotIn(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) compare(op gotenfilter.CompareOperator, value *common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().WithValue(value),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) ProxySetting() *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting {
	return &filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) HttpProxy() *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy {
	return &filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) HttpsProxy() *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy {
	return &filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy{builder: b.builder}
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfiguration) NoProxy() *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy {
	return &filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy{builder: b.builder}
}

type filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) Eq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) Neq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) Gt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) Gte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) Lt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) Lte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) In(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) NotIn(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationProxySetting) compare(op gotenfilter.CompareOperator, value common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().ProxySetting().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpProxy().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationHttpsProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().HttpsProxy().WithValue(value),
	})
}

type filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbingSettingsProxyConfigurationNoProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Spec().ProbingSettings().ProxyConfiguration().NoProxy().WithValue(value),
	})
}

type filterCndBuilderStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatus) Eq(value *ProbingDistribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatus) Neq(value *ProbingDistribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatus) Gt(value *ProbingDistribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatus) Gte(value *ProbingDistribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatus) Lt(value *ProbingDistribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatus) Lte(value *ProbingDistribution_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatus) In(values []*ProbingDistribution_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) NotIn(values []*ProbingDistribution_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) compare(op gotenfilter.CompareOperator, value *ProbingDistribution_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Status().WithValue(value),
	})
}

func (b *filterCndBuilderStatus) TotalNumber() *filterCndBuilderStatusTotalNumber {
	return &filterCndBuilderStatusTotalNumber{builder: b.builder}
}

func (b *filterCndBuilderStatus) RegionalCounts() *filterCndBuilderStatusRegionalCounts {
	return &filterCndBuilderStatusRegionalCounts{builder: b.builder}
}

func (b *filterCndBuilderStatus) SelectedTargetCount() *filterCndBuilderStatusSelectedTargetCount {
	return &filterCndBuilderStatusSelectedTargetCount{builder: b.builder}
}

type filterCndBuilderStatusTotalNumber struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusTotalNumber) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusTotalNumber) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusTotalNumber) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusTotalNumber) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusTotalNumber) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusTotalNumber) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusTotalNumber) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().TotalNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusTotalNumber) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().TotalNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusTotalNumber) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().TotalNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusTotalNumber) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().TotalNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusTotalNumber) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Status().TotalNumber().WithValue(value),
	})
}

type filterCndBuilderStatusRegionalCounts struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusRegionalCounts) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusRegionalCounts) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusRegionalCounts) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusRegionalCounts) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusRegionalCounts) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusRegionalCounts) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusRegionalCounts) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusRegionalCounts) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusRegionalCounts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().FieldPath(),
	})
}

func (b *filterCndBuilderStatusRegionalCounts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().FieldPath(),
	})
}

func (b *filterCndBuilderStatusRegionalCounts) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().WithValue(value),
	})
}

func (b *filterCndBuilderStatusRegionalCounts) WithKey(key string) *mapFilterCndBuilderStatusRegionalCounts {
	return &mapFilterCndBuilderStatusRegionalCounts{builder: b.builder, key: key}
}

type mapFilterCndBuilderStatusRegionalCounts struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderStatusRegionalCounts) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderStatusRegionalCounts) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderStatusRegionalCounts) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderStatusRegionalCounts) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderStatusRegionalCounts) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderStatusRegionalCounts) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderStatusRegionalCounts) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderStatusRegionalCounts) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderStatusRegionalCounts) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderStatusRegionalCounts) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderStatusRegionalCounts) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Status().RegionalCounts().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderStatusSelectedTargetCount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSelectedTargetCount) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSelectedTargetCount) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSelectedTargetCount) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSelectedTargetCount) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSelectedTargetCount) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSelectedTargetCount) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSelectedTargetCount) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().SelectedTargetCount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSelectedTargetCount) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingDistribution_FieldPathArrayOfValues: NewProbingDistributionFieldPathBuilder().Status().SelectedTargetCount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSelectedTargetCount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().SelectedTargetCount().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSelectedTargetCount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingDistributionFieldPathBuilder().Status().SelectedTargetCount().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSelectedTargetCount) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                           op,
		ProbingDistribution_FieldPathValue: NewProbingDistributionFieldPathBuilder().Status().SelectedTargetCount().WithValue(value),
	})
}
