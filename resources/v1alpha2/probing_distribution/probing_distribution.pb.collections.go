// Code generated by protoc-gen-goten-resource
// Resource: ProbingDistribution
// DO NOT EDIT!!!

package probing_distribution

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &project.Project{}
)

type ProbingDistributionList []*ProbingDistribution

func (l ProbingDistributionList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ProbingDistribution))
}

func (l ProbingDistributionList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ProbingDistributionList)...)
}

func (l ProbingDistributionList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingDistributionList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ProbingDistributionList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ProbingDistribution)
}

func (l ProbingDistributionList) Length() int {
	return len(l)
}

type ProbingDistributionChangeList []*ProbingDistributionChange

func (l ProbingDistributionChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ProbingDistributionChange))
}

func (l ProbingDistributionChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ProbingDistributionChangeList)...)
}

func (l ProbingDistributionChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingDistributionChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ProbingDistributionChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ProbingDistributionChange)
}

func (l ProbingDistributionChangeList) Length() int {
	return len(l)
}

type ProbingDistributionNameList []*Name

func (l ProbingDistributionNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ProbingDistributionNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ProbingDistributionNameList)...)
}

func (l ProbingDistributionNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingDistributionNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingDistributionNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ProbingDistributionNameList) Length() int {
	return len(l)
}

type ProbingDistributionReferenceList []*Reference

func (l ProbingDistributionReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ProbingDistributionReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ProbingDistributionReferenceList)...)
}

func (l ProbingDistributionReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingDistributionReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingDistributionReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ProbingDistributionReferenceList) Length() int {
	return len(l)
}

type ProbingDistributionParentNameList []*ParentName

func (l ProbingDistributionParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ProbingDistributionParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ProbingDistributionParentNameList)...)
}

func (l ProbingDistributionParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingDistributionParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingDistributionParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ProbingDistributionParentNameList) Length() int {
	return len(l)
}

type ProbingDistributionParentReferenceList []*ParentReference

func (l ProbingDistributionParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ProbingDistributionParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ProbingDistributionParentReferenceList)...)
}

func (l ProbingDistributionParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingDistributionParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingDistributionParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ProbingDistributionParentReferenceList) Length() int {
	return len(l)
}

type ProbingDistributionMap map[Name]*ProbingDistribution

func (m ProbingDistributionMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ProbingDistributionMap) Set(res gotenresource.Resource) {
	tRes := res.(*ProbingDistribution)
	m[*tRes.Name] = tRes
}

func (m ProbingDistributionMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingDistributionMap) Length() int {
	return len(m)
}

func (m ProbingDistributionMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ProbingDistributionChangeMap map[Name]*ProbingDistributionChange

func (m ProbingDistributionChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ProbingDistributionChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ProbingDistributionChange)
	m[*tChange.GetProbingDistributionName()] = tChange
}

func (m ProbingDistributionChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingDistributionChangeMap) Length() int {
	return len(m)
}

func (m ProbingDistributionChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
