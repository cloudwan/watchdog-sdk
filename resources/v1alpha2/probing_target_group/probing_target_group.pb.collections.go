// Code generated by protoc-gen-goten-resource
// Resource: ProbingTargetGroup
// DO NOT EDIT!!!

package probing_target_group

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
)

type ProbingTargetGroupList []*ProbingTargetGroup

func (l ProbingTargetGroupList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ProbingTargetGroup))
}

func (l ProbingTargetGroupList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ProbingTargetGroupList)...)
}

func (l ProbingTargetGroupList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetGroupList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ProbingTargetGroupList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ProbingTargetGroup)
}

func (l ProbingTargetGroupList) Length() int {
	return len(l)
}

type ProbingTargetGroupChangeList []*ProbingTargetGroupChange

func (l ProbingTargetGroupChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ProbingTargetGroupChange))
}

func (l ProbingTargetGroupChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ProbingTargetGroupChangeList)...)
}

func (l ProbingTargetGroupChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetGroupChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ProbingTargetGroupChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ProbingTargetGroupChange)
}

func (l ProbingTargetGroupChangeList) Length() int {
	return len(l)
}

type ProbingTargetGroupNameList []*Name

func (l ProbingTargetGroupNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ProbingTargetGroupNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ProbingTargetGroupNameList)...)
}

func (l ProbingTargetGroupNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetGroupNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingTargetGroupNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ProbingTargetGroupNameList) Length() int {
	return len(l)
}

type ProbingTargetGroupReferenceList []*Reference

func (l ProbingTargetGroupReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ProbingTargetGroupReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ProbingTargetGroupReferenceList)...)
}

func (l ProbingTargetGroupReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetGroupReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingTargetGroupReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ProbingTargetGroupReferenceList) Length() int {
	return len(l)
}

type ProbingTargetGroupParentNameList []*ParentName

func (l ProbingTargetGroupParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ProbingTargetGroupParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ProbingTargetGroupParentNameList)...)
}

func (l ProbingTargetGroupParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetGroupParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingTargetGroupParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ProbingTargetGroupParentNameList) Length() int {
	return len(l)
}

type ProbingTargetGroupParentReferenceList []*ParentReference

func (l ProbingTargetGroupParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ProbingTargetGroupParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ProbingTargetGroupParentReferenceList)...)
}

func (l ProbingTargetGroupParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetGroupParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingTargetGroupParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ProbingTargetGroupParentReferenceList) Length() int {
	return len(l)
}

type ProbingTargetGroupMap map[Name]*ProbingTargetGroup

func (m ProbingTargetGroupMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ProbingTargetGroupMap) Set(res gotenresource.Resource) {
	tRes := res.(*ProbingTargetGroup)
	m[*tRes.Name] = tRes
}

func (m ProbingTargetGroupMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingTargetGroupMap) Length() int {
	return len(m)
}

func (m ProbingTargetGroupMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ProbingTargetGroupChangeMap map[Name]*ProbingTargetGroupChange

func (m ProbingTargetGroupChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ProbingTargetGroupChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ProbingTargetGroupChange)
	m[*tChange.GetProbingTargetGroupName()] = tChange
}

func (m ProbingTargetGroupChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingTargetGroupChangeMap) Length() int {
	return len(m)
}

func (m ProbingTargetGroupChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
