// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_target_group.proto
// DO NOT EDIT!!!

package probing_target_group

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingTargetGroup_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingTargetGroup_FieldPathSelector
	Get(source *ProbingTargetGroup) []interface{}
	GetSingle(source *ProbingTargetGroup) (interface{}, bool)
	ClearValue(item *ProbingTargetGroup)

	// Those methods build corresponding ProbingTargetGroup_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingTargetGroup_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingTargetGroup_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingTargetGroup_FieldPathArrayItemValue
}

type ProbingTargetGroup_FieldPathSelector int32

const (
	ProbingTargetGroup_FieldPathSelectorName        ProbingTargetGroup_FieldPathSelector = 0
	ProbingTargetGroup_FieldPathSelectorDisplayName ProbingTargetGroup_FieldPathSelector = 1
	ProbingTargetGroup_FieldPathSelectorState       ProbingTargetGroup_FieldPathSelector = 2
	ProbingTargetGroup_FieldPathSelectorMetadata    ProbingTargetGroup_FieldPathSelector = 3
)

func (s ProbingTargetGroup_FieldPathSelector) String() string {
	switch s {
	case ProbingTargetGroup_FieldPathSelectorName:
		return "name"
	case ProbingTargetGroup_FieldPathSelectorDisplayName:
		return "display_name"
	case ProbingTargetGroup_FieldPathSelectorState:
		return "state"
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", s))
	}
}

func BuildProbingTargetGroup_FieldPath(fp gotenobject.RawFieldPath) (ProbingTargetGroup_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingTargetGroup")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProbingTargetGroup_FieldTerminalPath{selector: ProbingTargetGroup_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &ProbingTargetGroup_FieldTerminalPath{selector: ProbingTargetGroup_FieldPathSelectorDisplayName}, nil
		case "state":
			return &ProbingTargetGroup_FieldTerminalPath{selector: ProbingTargetGroup_FieldPathSelectorState}, nil
		case "metadata":
			return &ProbingTargetGroup_FieldTerminalPath{selector: ProbingTargetGroup_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "state":
			if subpath, err := BuildProbingTargetGroupState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingTargetGroup_FieldSubPath{selector: ProbingTargetGroup_FieldPathSelectorState, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingTargetGroup_FieldSubPath{selector: ProbingTargetGroup_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingTargetGroup", fp)
}

func ParseProbingTargetGroup_FieldPath(rawField string) (ProbingTargetGroup_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingTargetGroup_FieldPath(fp)
}

func MustParseProbingTargetGroup_FieldPath(rawField string) ProbingTargetGroup_FieldPath {
	fp, err := ParseProbingTargetGroup_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingTargetGroup_FieldTerminalPath struct {
	selector ProbingTargetGroup_FieldPathSelector
}

var _ ProbingTargetGroup_FieldPath = (*ProbingTargetGroup_FieldTerminalPath)(nil)

func (fp *ProbingTargetGroup_FieldTerminalPath) Selector() ProbingTargetGroup_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingTargetGroup_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingTargetGroup_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingTargetGroup
func (fp *ProbingTargetGroup_FieldTerminalPath) Get(source *ProbingTargetGroup) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingTargetGroup_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProbingTargetGroup_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case ProbingTargetGroup_FieldPathSelectorState:
			if source.State != nil {
				values = append(values, source.State)
			}
		case ProbingTargetGroup_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingTargetGroup_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingTargetGroup))
}

// GetSingle returns value pointed by specific field of from source ProbingTargetGroup
func (fp *ProbingTargetGroup_FieldTerminalPath) GetSingle(source *ProbingTargetGroup) (interface{}, bool) {
	switch fp.selector {
	case ProbingTargetGroup_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProbingTargetGroup_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case ProbingTargetGroup_FieldPathSelectorState:
		res := source.GetState()
		return res, res != nil
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fp.selector))
	}
}

func (fp *ProbingTargetGroup_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingTargetGroup))
}

// GetDefault returns a default value of the field type
func (fp *ProbingTargetGroup_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingTargetGroup_FieldPathSelectorName:
		return (*Name)(nil)
	case ProbingTargetGroup_FieldPathSelectorDisplayName:
		return ""
	case ProbingTargetGroup_FieldPathSelectorState:
		return (*ProbingTargetGroup_State)(nil)
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fp.selector))
	}
}

func (fp *ProbingTargetGroup_FieldTerminalPath) ClearValue(item *ProbingTargetGroup) {
	if item != nil {
		switch fp.selector {
		case ProbingTargetGroup_FieldPathSelectorName:
			item.Name = nil
		case ProbingTargetGroup_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case ProbingTargetGroup_FieldPathSelectorState:
			item.State = nil
		case ProbingTargetGroup_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fp.selector))
		}
	}
}

func (fp *ProbingTargetGroup_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingTargetGroup))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingTargetGroup_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingTargetGroup_FieldPathSelectorName ||
		fp.selector == ProbingTargetGroup_FieldPathSelectorDisplayName
}

func (fp *ProbingTargetGroup_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbingTargetGroup_FieldTerminalPath) WithIValue(value interface{}) ProbingTargetGroup_FieldPathValue {
	switch fp.selector {
	case ProbingTargetGroup_FieldPathSelectorName:
		return &ProbingTargetGroup_FieldTerminalPathValue{ProbingTargetGroup_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProbingTargetGroup_FieldPathSelectorDisplayName:
		return &ProbingTargetGroup_FieldTerminalPathValue{ProbingTargetGroup_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingTargetGroup_FieldPathSelectorState:
		return &ProbingTargetGroup_FieldTerminalPathValue{ProbingTargetGroup_FieldTerminalPath: *fp, value: value.(*ProbingTargetGroup_State)}
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		return &ProbingTargetGroup_FieldTerminalPathValue{ProbingTargetGroup_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fp.selector))
	}
}

func (fp *ProbingTargetGroup_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingTargetGroup_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingTargetGroup_FieldPathArrayOfValues {
	fpaov := &ProbingTargetGroup_FieldTerminalPathArrayOfValues{ProbingTargetGroup_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingTargetGroup_FieldPathSelectorName:
		return &ProbingTargetGroup_FieldTerminalPathArrayOfValues{ProbingTargetGroup_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProbingTargetGroup_FieldPathSelectorDisplayName:
		return &ProbingTargetGroup_FieldTerminalPathArrayOfValues{ProbingTargetGroup_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingTargetGroup_FieldPathSelectorState:
		return &ProbingTargetGroup_FieldTerminalPathArrayOfValues{ProbingTargetGroup_FieldTerminalPath: *fp, values: values.([]*ProbingTargetGroup_State)}
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		return &ProbingTargetGroup_FieldTerminalPathArrayOfValues{ProbingTargetGroup_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingTargetGroup_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingTargetGroup_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingTargetGroup_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fp.selector))
	}
}

func (fp *ProbingTargetGroup_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingTargetGroup_FieldSubPath struct {
	selector ProbingTargetGroup_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingTargetGroup_FieldPath = (*ProbingTargetGroup_FieldSubPath)(nil)

func (fps *ProbingTargetGroup_FieldSubPath) Selector() ProbingTargetGroup_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingTargetGroup_FieldSubPath) AsStateSubPath() (ProbingTargetGroupState_FieldPath, bool) {
	res, ok := fps.subPath.(ProbingTargetGroupState_FieldPath)
	return res, ok
}
func (fps *ProbingTargetGroup_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingTargetGroup_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingTargetGroup_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingTargetGroup
func (fps *ProbingTargetGroup_FieldSubPath) Get(source *ProbingTargetGroup) (values []interface{}) {
	if asStateFieldPath, ok := fps.AsStateSubPath(); ok {
		values = append(values, asStateFieldPath.Get(source.GetState())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fps.selector))
	}
	return
}

func (fps *ProbingTargetGroup_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingTargetGroup))
}

// GetSingle returns value of selected field from source ProbingTargetGroup
func (fps *ProbingTargetGroup_FieldSubPath) GetSingle(source *ProbingTargetGroup) (interface{}, bool) {
	switch fps.selector {
	case ProbingTargetGroup_FieldPathSelectorState:
		if source.GetState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetState())
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fps.selector))
	}
}

func (fps *ProbingTargetGroup_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingTargetGroup))
}

// GetDefault returns a default value of the field type
func (fps *ProbingTargetGroup_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingTargetGroup_FieldSubPath) ClearValue(item *ProbingTargetGroup) {
	if item != nil {
		switch fps.selector {
		case ProbingTargetGroup_FieldPathSelectorState:
			fps.subPath.ClearValueRaw(item.State)
		case ProbingTargetGroup_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fps.selector))
		}
	}
}

func (fps *ProbingTargetGroup_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingTargetGroup))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingTargetGroup_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingTargetGroup_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProbingTargetGroup_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProbingTargetGroup_FieldSubPath) WithIValue(value interface{}) ProbingTargetGroup_FieldPathValue {
	return &ProbingTargetGroup_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingTargetGroup_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingTargetGroup_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingTargetGroup_FieldPathArrayOfValues {
	return &ProbingTargetGroup_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingTargetGroup_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingTargetGroup_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingTargetGroup_FieldPathArrayItemValue {
	return &ProbingTargetGroup_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingTargetGroup_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingTargetGroup_FieldPathValue allows storing values for ProbingTargetGroup fields according to their type
type ProbingTargetGroup_FieldPathValue interface {
	ProbingTargetGroup_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingTargetGroup)
	CompareWith(*ProbingTargetGroup) (cmp int, comparable bool)
}

func ParseProbingTargetGroup_FieldPathValue(pathStr, valueStr string) (ProbingTargetGroup_FieldPathValue, error) {
	fp, err := ParseProbingTargetGroup_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingTargetGroup field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingTargetGroup_FieldPathValue), nil
}

func MustParseProbingTargetGroup_FieldPathValue(pathStr, valueStr string) ProbingTargetGroup_FieldPathValue {
	fpv, err := ParseProbingTargetGroup_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingTargetGroup_FieldTerminalPathValue struct {
	ProbingTargetGroup_FieldTerminalPath
	value interface{}
}

var _ ProbingTargetGroup_FieldPathValue = (*ProbingTargetGroup_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbingTargetGroup' as interface{}
func (fpv *ProbingTargetGroup_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingTargetGroup_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProbingTargetGroup_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingTargetGroup_FieldTerminalPathValue) AsStateValue() (*ProbingTargetGroup_State, bool) {
	res, ok := fpv.value.(*ProbingTargetGroup_State)
	return res, ok
}
func (fpv *ProbingTargetGroup_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object ProbingTargetGroup
func (fpv *ProbingTargetGroup_FieldTerminalPathValue) SetTo(target **ProbingTargetGroup) {
	if *target == nil {
		*target = new(ProbingTargetGroup)
	}
	switch fpv.selector {
	case ProbingTargetGroup_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProbingTargetGroup_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case ProbingTargetGroup_FieldPathSelectorState:
		(*target).State = fpv.value.(*ProbingTargetGroup_State)
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fpv.selector))
	}
}

func (fpv *ProbingTargetGroup_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingTargetGroup)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingTargetGroup_FieldTerminalPathValue' with the value under path in 'ProbingTargetGroup'.
func (fpv *ProbingTargetGroup_FieldTerminalPathValue) CompareWith(source *ProbingTargetGroup) (int, bool) {
	switch fpv.selector {
	case ProbingTargetGroup_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTargetGroup_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTargetGroup_FieldPathSelectorState:
		return 0, false
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fpv.selector))
	}
}

func (fpv *ProbingTargetGroup_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingTargetGroup))
}

type ProbingTargetGroup_FieldSubPathValue struct {
	ProbingTargetGroup_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingTargetGroup_FieldPathValue = (*ProbingTargetGroup_FieldSubPathValue)(nil)

func (fpvs *ProbingTargetGroup_FieldSubPathValue) AsStatePathValue() (ProbingTargetGroupState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbingTargetGroupState_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingTargetGroup_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingTargetGroup_FieldSubPathValue) SetTo(target **ProbingTargetGroup) {
	if *target == nil {
		*target = new(ProbingTargetGroup)
	}
	switch fpvs.Selector() {
	case ProbingTargetGroup_FieldPathSelectorState:
		fpvs.subPathValue.(ProbingTargetGroupState_FieldPathValue).SetTo(&(*target).State)
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingTargetGroup_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingTargetGroup)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingTargetGroup_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingTargetGroup_FieldSubPathValue) CompareWith(source *ProbingTargetGroup) (int, bool) {
	switch fpvs.Selector() {
	case ProbingTargetGroup_FieldPathSelectorState:
		return fpvs.subPathValue.(ProbingTargetGroupState_FieldPathValue).CompareWith(source.GetState())
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingTargetGroup_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingTargetGroup))
}

// ProbingTargetGroup_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbingTargetGroup according to their type
// Present only for array (repeated) types.
type ProbingTargetGroup_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingTargetGroup_FieldPath
	ContainsValue(*ProbingTargetGroup) bool
}

// ParseProbingTargetGroup_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingTargetGroup_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingTargetGroup_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingTargetGroup_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingTargetGroup field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingTargetGroup_FieldPathArrayItemValue), nil
}

func MustParseProbingTargetGroup_FieldPathArrayItemValue(pathStr, valueStr string) ProbingTargetGroup_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingTargetGroup_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingTargetGroup_FieldTerminalPathArrayItemValue struct {
	ProbingTargetGroup_FieldTerminalPath
	value interface{}
}

var _ ProbingTargetGroup_FieldPathArrayItemValue = (*ProbingTargetGroup_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingTargetGroup as interface{}
func (fpaiv *ProbingTargetGroup_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingTargetGroup_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingTargetGroup) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingTargetGroup_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingTargetGroup))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingTargetGroup'
func (fpaiv *ProbingTargetGroup_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingTargetGroup) bool {
	slice := fpaiv.ProbingTargetGroup_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingTargetGroup_FieldSubPathArrayItemValue struct {
	ProbingTargetGroup_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingTargetGroup_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingTargetGroup_FieldSubPathArrayItemValue) AsStatePathItemValue() (ProbingTargetGroupState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbingTargetGroupState_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingTargetGroup_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingTargetGroup'
func (fpaivs *ProbingTargetGroup_FieldSubPathArrayItemValue) ContainsValue(source *ProbingTargetGroup) bool {
	switch fpaivs.Selector() {
	case ProbingTargetGroup_FieldPathSelectorState:
		return fpaivs.subPathItemValue.(ProbingTargetGroupState_FieldPathArrayItemValue).ContainsValue(source.GetState())
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup: %d", fpaivs.Selector()))
	}
}

// ProbingTargetGroup_FieldPathArrayOfValues allows storing slice of values for ProbingTargetGroup fields according to their type
type ProbingTargetGroup_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingTargetGroup_FieldPath
}

func ParseProbingTargetGroup_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingTargetGroup_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingTargetGroup_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingTargetGroup field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingTargetGroup_FieldPathArrayOfValues), nil
}

func MustParseProbingTargetGroup_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingTargetGroup_FieldPathArrayOfValues {
	fpaov, err := ParseProbingTargetGroup_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingTargetGroup_FieldTerminalPathArrayOfValues struct {
	ProbingTargetGroup_FieldTerminalPath
	values interface{}
}

var _ ProbingTargetGroup_FieldPathArrayOfValues = (*ProbingTargetGroup_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingTargetGroup_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingTargetGroup_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProbingTargetGroup_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingTargetGroup_FieldPathSelectorState:
		for _, v := range fpaov.values.([]*ProbingTargetGroup_State) {
			values = append(values, v)
		}
	case ProbingTargetGroup_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingTargetGroup_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProbingTargetGroup_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingTargetGroup_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]*ProbingTargetGroup_State, bool) {
	res, ok := fpaov.values.([]*ProbingTargetGroup_State)
	return res, ok
}
func (fpaov *ProbingTargetGroup_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type ProbingTargetGroup_FieldSubPathArrayOfValues struct {
	ProbingTargetGroup_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingTargetGroup_FieldPathArrayOfValues = (*ProbingTargetGroup_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingTargetGroup_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingTargetGroup_FieldSubPathArrayOfValues) AsStatePathArrayOfValues() (ProbingTargetGroupState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbingTargetGroupState_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingTargetGroup_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingTargetGroupState_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingTargetGroupState_FieldPathSelector
	Get(source *ProbingTargetGroup_State) []interface{}
	GetSingle(source *ProbingTargetGroup_State) (interface{}, bool)
	ClearValue(item *ProbingTargetGroup_State)

	// Those methods build corresponding ProbingTargetGroupState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingTargetGroupState_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingTargetGroupState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingTargetGroupState_FieldPathArrayItemValue
}

type ProbingTargetGroupState_FieldPathSelector int32

const (
	ProbingTargetGroupState_FieldPathSelectorTargetCount ProbingTargetGroupState_FieldPathSelector = 0
)

func (s ProbingTargetGroupState_FieldPathSelector) String() string {
	switch s {
	case ProbingTargetGroupState_FieldPathSelectorTargetCount:
		return "target_count"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", s))
	}
}

func BuildProbingTargetGroupState_FieldPath(fp gotenobject.RawFieldPath) (ProbingTargetGroupState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingTargetGroup_State")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "target_count", "targetCount", "target-count":
			return &ProbingTargetGroupState_FieldTerminalPath{selector: ProbingTargetGroupState_FieldPathSelectorTargetCount}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingTargetGroup_State", fp)
}

func ParseProbingTargetGroupState_FieldPath(rawField string) (ProbingTargetGroupState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingTargetGroupState_FieldPath(fp)
}

func MustParseProbingTargetGroupState_FieldPath(rawField string) ProbingTargetGroupState_FieldPath {
	fp, err := ParseProbingTargetGroupState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingTargetGroupState_FieldTerminalPath struct {
	selector ProbingTargetGroupState_FieldPathSelector
}

var _ ProbingTargetGroupState_FieldPath = (*ProbingTargetGroupState_FieldTerminalPath)(nil)

func (fp *ProbingTargetGroupState_FieldTerminalPath) Selector() ProbingTargetGroupState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingTargetGroupState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingTargetGroupState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingTargetGroup_State
func (fp *ProbingTargetGroupState_FieldTerminalPath) Get(source *ProbingTargetGroup_State) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingTargetGroupState_FieldPathSelectorTargetCount:
			values = append(values, source.TargetCount)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingTargetGroup_State))
}

// GetSingle returns value pointed by specific field of from source ProbingTargetGroup_State
func (fp *ProbingTargetGroupState_FieldTerminalPath) GetSingle(source *ProbingTargetGroup_State) (interface{}, bool) {
	switch fp.selector {
	case ProbingTargetGroupState_FieldPathSelectorTargetCount:
		return source.GetTargetCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fp.selector))
	}
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingTargetGroup_State))
}

// GetDefault returns a default value of the field type
func (fp *ProbingTargetGroupState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingTargetGroupState_FieldPathSelectorTargetCount:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fp.selector))
	}
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) ClearValue(item *ProbingTargetGroup_State) {
	if item != nil {
		switch fp.selector {
		case ProbingTargetGroupState_FieldPathSelectorTargetCount:
			item.TargetCount = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fp.selector))
		}
	}
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingTargetGroup_State))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingTargetGroupState_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingTargetGroupState_FieldPathSelectorTargetCount
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) WithIValue(value interface{}) ProbingTargetGroupState_FieldPathValue {
	switch fp.selector {
	case ProbingTargetGroupState_FieldPathSelectorTargetCount:
		return &ProbingTargetGroupState_FieldTerminalPathValue{ProbingTargetGroupState_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fp.selector))
	}
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingTargetGroupState_FieldPathArrayOfValues {
	fpaov := &ProbingTargetGroupState_FieldTerminalPathArrayOfValues{ProbingTargetGroupState_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingTargetGroupState_FieldPathSelectorTargetCount:
		return &ProbingTargetGroupState_FieldTerminalPathArrayOfValues{ProbingTargetGroupState_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingTargetGroupState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fp.selector))
	}
}

func (fp *ProbingTargetGroupState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbingTargetGroupState_FieldPathValue allows storing values for State fields according to their type
type ProbingTargetGroupState_FieldPathValue interface {
	ProbingTargetGroupState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingTargetGroup_State)
	CompareWith(*ProbingTargetGroup_State) (cmp int, comparable bool)
}

func ParseProbingTargetGroupState_FieldPathValue(pathStr, valueStr string) (ProbingTargetGroupState_FieldPathValue, error) {
	fp, err := ParseProbingTargetGroupState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingTargetGroupState_FieldPathValue), nil
}

func MustParseProbingTargetGroupState_FieldPathValue(pathStr, valueStr string) ProbingTargetGroupState_FieldPathValue {
	fpv, err := ParseProbingTargetGroupState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingTargetGroupState_FieldTerminalPathValue struct {
	ProbingTargetGroupState_FieldTerminalPath
	value interface{}
}

var _ ProbingTargetGroupState_FieldPathValue = (*ProbingTargetGroupState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'State' as interface{}
func (fpv *ProbingTargetGroupState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingTargetGroupState_FieldTerminalPathValue) AsTargetCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object State
func (fpv *ProbingTargetGroupState_FieldTerminalPathValue) SetTo(target **ProbingTargetGroup_State) {
	if *target == nil {
		*target = new(ProbingTargetGroup_State)
	}
	switch fpv.selector {
	case ProbingTargetGroupState_FieldPathSelectorTargetCount:
		(*target).TargetCount = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fpv.selector))
	}
}

func (fpv *ProbingTargetGroupState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingTargetGroup_State)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingTargetGroupState_FieldTerminalPathValue' with the value under path in 'ProbingTargetGroup_State'.
func (fpv *ProbingTargetGroupState_FieldTerminalPathValue) CompareWith(source *ProbingTargetGroup_State) (int, bool) {
	switch fpv.selector {
	case ProbingTargetGroupState_FieldPathSelectorTargetCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetTargetCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTargetGroup_State: %d", fpv.selector))
	}
}

func (fpv *ProbingTargetGroupState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingTargetGroup_State))
}

// ProbingTargetGroupState_FieldPathArrayItemValue allows storing single item in Path-specific values for State according to their type
// Present only for array (repeated) types.
type ProbingTargetGroupState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingTargetGroupState_FieldPath
	ContainsValue(*ProbingTargetGroup_State) bool
}

// ParseProbingTargetGroupState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingTargetGroupState_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingTargetGroupState_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingTargetGroupState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingTargetGroupState_FieldPathArrayItemValue), nil
}

func MustParseProbingTargetGroupState_FieldPathArrayItemValue(pathStr, valueStr string) ProbingTargetGroupState_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingTargetGroupState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingTargetGroupState_FieldTerminalPathArrayItemValue struct {
	ProbingTargetGroupState_FieldTerminalPath
	value interface{}
}

var _ ProbingTargetGroupState_FieldPathArrayItemValue = (*ProbingTargetGroupState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingTargetGroup_State as interface{}
func (fpaiv *ProbingTargetGroupState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbingTargetGroupState_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingTargetGroup_State) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingTargetGroupState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingTargetGroup_State))
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaiv *ProbingTargetGroupState_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingTargetGroup_State) bool {
	slice := fpaiv.ProbingTargetGroupState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbingTargetGroupState_FieldPathArrayOfValues allows storing slice of values for State fields according to their type
type ProbingTargetGroupState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingTargetGroupState_FieldPath
}

func ParseProbingTargetGroupState_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingTargetGroupState_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingTargetGroupState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingTargetGroupState_FieldPathArrayOfValues), nil
}

func MustParseProbingTargetGroupState_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingTargetGroupState_FieldPathArrayOfValues {
	fpaov, err := ParseProbingTargetGroupState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingTargetGroupState_FieldTerminalPathArrayOfValues struct {
	ProbingTargetGroupState_FieldTerminalPath
	values interface{}
}

var _ ProbingTargetGroupState_FieldPathArrayOfValues = (*ProbingTargetGroupState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingTargetGroupState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingTargetGroupState_FieldPathSelectorTargetCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingTargetGroupState_FieldTerminalPathArrayOfValues) AsTargetCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
