// Code generated by protoc-gen-goten-go
// File: watchdog/proto/v1alpha2/probe.proto
// DO NOT EDIT!!!

package probe

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Probe_AgentType int32

const (
	Probe_UNKNOWN        Probe_AgentType = 0
	Probe_MOBILE_AGENT   Probe_AgentType = 1
	Probe_HARDWARE_AGENT Probe_AgentType = 2
	Probe_CLOUD_AGENT    Probe_AgentType = 3
)

var (
	Probe_AgentType_name = map[int32]string{
		0: "UNKNOWN",
		1: "MOBILE_AGENT",
		2: "HARDWARE_AGENT",
		3: "CLOUD_AGENT",
	}

	Probe_AgentType_value = map[string]int32{
		"UNKNOWN":        0,
		"MOBILE_AGENT":   1,
		"HARDWARE_AGENT": 2,
		"CLOUD_AGENT":    3,
	}
)

func (x Probe_AgentType) Enum() *Probe_AgentType {
	p := new(Probe_AgentType)
	*p = x
	return p
}

func (x Probe_AgentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Probe_AgentType) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_probe_proto_enumTypes[0].Descriptor()
}

func (Probe_AgentType) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_probe_proto_enumTypes[0]
}

func (x Probe_AgentType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Probe_AgentType.ProtoReflect.Descriptor instead.
func (Probe_AgentType) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 0}
}

type Probe_Spec_ActivationSpec_ActivationType int32

const (
	Probe_Spec_ActivationSpec_ACTIVATION_TYPE_UNSPECIFIED Probe_Spec_ActivationSpec_ActivationType = 0
	Probe_Spec_ActivationSpec_INDIVIDUAL_TOKEN            Probe_Spec_ActivationSpec_ActivationType = 1
	Probe_Spec_ActivationSpec_SHARED_TOKEN                Probe_Spec_ActivationSpec_ActivationType = 2
	Probe_Spec_ActivationSpec_SELF_ACTIVATION             Probe_Spec_ActivationSpec_ActivationType = 3
)

var (
	Probe_Spec_ActivationSpec_ActivationType_name = map[int32]string{
		0: "ACTIVATION_TYPE_UNSPECIFIED",
		1: "INDIVIDUAL_TOKEN",
		2: "SHARED_TOKEN",
		3: "SELF_ACTIVATION",
	}

	Probe_Spec_ActivationSpec_ActivationType_value = map[string]int32{
		"ACTIVATION_TYPE_UNSPECIFIED": 0,
		"INDIVIDUAL_TOKEN":            1,
		"SHARED_TOKEN":                2,
		"SELF_ACTIVATION":             3,
	}
)

func (x Probe_Spec_ActivationSpec_ActivationType) Enum() *Probe_Spec_ActivationSpec_ActivationType {
	p := new(Probe_Spec_ActivationSpec_ActivationType)
	*p = x
	return p
}

func (x Probe_Spec_ActivationSpec_ActivationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Probe_Spec_ActivationSpec_ActivationType) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_probe_proto_enumTypes[1].Descriptor()
}

func (Probe_Spec_ActivationSpec_ActivationType) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_probe_proto_enumTypes[1]
}

func (x Probe_Spec_ActivationSpec_ActivationType) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Probe_Spec_ActivationSpec_ActivationType.ProtoReflect.Descriptor instead.
func (Probe_Spec_ActivationSpec_ActivationType) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Probe_Status_ConnectionStatus int32

const (
	Probe_Status_CONNECTION_STATUS_UNSPECIFIED Probe_Status_ConnectionStatus = 0
	Probe_Status_ONLINE                        Probe_Status_ConnectionStatus = 1
	Probe_Status_OFFLINE                       Probe_Status_ConnectionStatus = 2
)

var (
	Probe_Status_ConnectionStatus_name = map[int32]string{
		0: "CONNECTION_STATUS_UNSPECIFIED",
		1: "ONLINE",
		2: "OFFLINE",
	}

	Probe_Status_ConnectionStatus_value = map[string]int32{
		"CONNECTION_STATUS_UNSPECIFIED": 0,
		"ONLINE":                        1,
		"OFFLINE":                       2,
	}
)

func (x Probe_Status_ConnectionStatus) Enum() *Probe_Status_ConnectionStatus {
	p := new(Probe_Status_ConnectionStatus)
	*p = x
	return p
}

func (x Probe_Status_ConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Probe_Status_ConnectionStatus) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_probe_proto_enumTypes[2].Descriptor()
}

func (Probe_Status_ConnectionStatus) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_probe_proto_enumTypes[2]
}

func (x Probe_Status_ConnectionStatus) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Probe_Status_ConnectionStatus.ProtoReflect.Descriptor instead.
func (Probe_Status_ConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Probe_Status_ActivationState_Status int32

const (
	Probe_Status_ActivationState_ACTIVATION_STATUS_UNSPECIFIED Probe_Status_ActivationState_Status = 0
	Probe_Status_ActivationState_INACTIVE                      Probe_Status_ActivationState_Status = 1
	Probe_Status_ActivationState_PENDING_INVITATION            Probe_Status_ActivationState_Status = 5
	Probe_Status_ActivationState_PENDING_APPROVAL              Probe_Status_ActivationState_Status = 2
	Probe_Status_ActivationState_IN_PROGRESS                   Probe_Status_ActivationState_Status = 3
	Probe_Status_ActivationState_ACTIVE                        Probe_Status_ActivationState_Status = 4
)

var (
	Probe_Status_ActivationState_Status_name = map[int32]string{
		0: "ACTIVATION_STATUS_UNSPECIFIED",
		1: "INACTIVE",
		5: "PENDING_INVITATION",
		2: "PENDING_APPROVAL",
		3: "IN_PROGRESS",
		4: "ACTIVE",
	}

	Probe_Status_ActivationState_Status_value = map[string]int32{
		"ACTIVATION_STATUS_UNSPECIFIED": 0,
		"INACTIVE":                      1,
		"PENDING_INVITATION":            5,
		"PENDING_APPROVAL":              2,
		"IN_PROGRESS":                   3,
		"ACTIVE":                        4,
	}
)

func (x Probe_Status_ActivationState_Status) Enum() *Probe_Status_ActivationState_Status {
	p := new(Probe_Status_ActivationState_Status)
	*p = x
	return p
}

func (x Probe_Status_ActivationState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Probe_Status_ActivationState_Status) Descriptor() preflect.EnumDescriptor {
	return watchdog_proto_v1alpha2_probe_proto_enumTypes[3].Descriptor()
}

func (Probe_Status_ActivationState_Status) Type() preflect.EnumType {
	return &watchdog_proto_v1alpha2_probe_proto_enumTypes[3]
}

func (x Probe_Status_ActivationState_Status) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Probe_Status_ActivationState_Status.ProtoReflect.Descriptor instead.
func (Probe_Status_ActivationState_Status) EnumDescriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

// Probe is a resource that represents a probing device.
type Probe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Probe
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Display name for the probe
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// Lower Display Name - only used for dashboard filtering
	LowerDisplayName string `protobuf:"bytes,7,opt,name=lower_display_name,json=lowerDisplayName,proto3" json:"lower_display_name,omitempty" firestore:"lowerDisplayName"`
	// metadata is additional information of the probe.
	Metadata *ntt_meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// spec describes the to-be state of the probe.
	Spec *Probe_Spec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	// status shows the current status of the probe.
	Status *Probe_Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
	// Memos
	Memo []*ntt_memo.Memo `protobuf:"bytes,6,rep,name=memo,proto3" json:"memo,omitempty" firestore:"memo"`
}

func (m *Probe) Reset() {
	*m = Probe{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe) ProtoMessage() {}

func (m *Probe) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe) GotenMessage() {}

// Deprecated, Use Probe.ProtoReflect.Descriptor instead.
func (*Probe) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0}
}

func (m *Probe) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Probe) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Probe) GetLowerDisplayName() string {
	if m != nil {
		return m.LowerDisplayName
	}
	return ""
}

func (m *Probe) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Probe) GetSpec() *Probe_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Probe) GetStatus() *Probe_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Probe) GetMemo() []*ntt_memo.Memo {
	if m != nil {
		return m.Memo
	}
	return nil
}

func (m *Probe) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Probe"))
	}
	m.Name = fv
}

func (m *Probe) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Probe"))
	}
	m.DisplayName = fv
}

func (m *Probe) SetLowerDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LowerDisplayName", "Probe"))
	}
	m.LowerDisplayName = fv
}

func (m *Probe) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Probe"))
	}
	m.Metadata = fv
}

func (m *Probe) SetSpec(fv *Probe_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "Probe"))
	}
	m.Spec = fv
}

func (m *Probe) SetStatus(fv *Probe_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Probe"))
	}
	m.Status = fv
}

func (m *Probe) SetMemo(fv []*ntt_memo.Memo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Memo", "Probe"))
	}
	m.Memo = fv
}

// Spec describes the to-be state of the probe.
// Fields in this message are useful to keep manual input values of the
// metadata of the probe. Note that some fields could be moved to
// metadata.annotations later.
type Probe_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Probe Group allows optional grouping of probes.
	ProbeGroup *probe_group.Reference `protobuf:"bytes,11,opt,customtype=Reference,name=probe_group,json=probeGroup,proto3" json:"probe_group,omitempty" firestore:"probeGroup"`
	// device referes the device that assigned to the probe.
	// When this field is empty, that means there is no
	// asigned device yet.
	// Devices resource is provided by the Devices service.
	Device *devices_device.Reference `protobuf:"bytes,1,opt,customtype=Reference,name=device,proto3" json:"device,omitempty" firestore:"device"`
	// Controls whether this Probe is available for scheduling Probings.
	// Manually set it to false to switch-off Probings undergoing maintenance.
	Enabled bool `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty" firestore:"enabled"`
	// Address defines the expected address of the probe.
	PrimaryLocation   *common.Location              `protobuf:"bytes,6,opt,name=primary_location,json=primaryLocation,proto3" json:"primary_location,omitempty" firestore:"primaryLocation"`
	LocationDiscovery *common.LocationDiscoverySpec `protobuf:"bytes,8,opt,name=location_discovery,json=locationDiscovery,proto3" json:"location_discovery,omitempty" firestore:"locationDiscovery"`
	// Contact Information
	ContactInfo        *common.ContactInformation  `protobuf:"bytes,9,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty" firestore:"contactInfo"`
	Activation         *Probe_Spec_ActivationSpec  `protobuf:"bytes,12,opt,name=activation,proto3" json:"activation,omitempty" firestore:"activation"`
	DisableSpeedtest   bool                        `protobuf:"varint,13,opt,name=disable_speedtest,json=disableSpeedtest,proto3" json:"disable_speedtest,omitempty" firestore:"disableSpeedtest"`
	AccessToken        *Probe_Spec_AccessTokenSpec `protobuf:"bytes,14,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty" firestore:"accessToken"`
	AgentType          Probe_AgentType             `protobuf:"varint,15,opt,name=agent_type,json=agentType,proto3,enum=ntt.watchdog.v1alpha2.Probe_AgentType" json:"agent_type,omitempty" firestore:"agentType"`
	ExternalIpCheckUrl []string                    `protobuf:"bytes,16,rep,name=external_ip_check_url,json=externalIpCheckUrl,proto3" json:"external_ip_check_url,omitempty" firestore:"externalIpCheckUrl"`
}

func (m *Probe_Spec) Reset() {
	*m = Probe_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Spec) ProtoMessage() {}

func (m *Probe_Spec) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Spec) GotenMessage() {}

// Deprecated, Use Probe_Spec.ProtoReflect.Descriptor instead.
func (*Probe_Spec) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Probe_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Spec) GetProbeGroup() *probe_group.Reference {
	if m != nil {
		return m.ProbeGroup
	}
	return nil
}

func (m *Probe_Spec) GetDevice() *devices_device.Reference {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Probe_Spec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Probe_Spec) GetPrimaryLocation() *common.Location {
	if m != nil {
		return m.PrimaryLocation
	}
	return nil
}

func (m *Probe_Spec) GetLocationDiscovery() *common.LocationDiscoverySpec {
	if m != nil {
		return m.LocationDiscovery
	}
	return nil
}

func (m *Probe_Spec) GetContactInfo() *common.ContactInformation {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Probe_Spec) GetActivation() *Probe_Spec_ActivationSpec {
	if m != nil {
		return m.Activation
	}
	return nil
}

func (m *Probe_Spec) GetDisableSpeedtest() bool {
	if m != nil {
		return m.DisableSpeedtest
	}
	return false
}

func (m *Probe_Spec) GetAccessToken() *Probe_Spec_AccessTokenSpec {
	if m != nil {
		return m.AccessToken
	}
	return nil
}

func (m *Probe_Spec) GetAgentType() Probe_AgentType {
	if m != nil {
		return m.AgentType
	}
	return Probe_UNKNOWN
}

func (m *Probe_Spec) GetExternalIpCheckUrl() []string {
	if m != nil {
		return m.ExternalIpCheckUrl
	}
	return nil
}

func (m *Probe_Spec) SetProbeGroup(fv *probe_group.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProbeGroup", "Probe_Spec"))
	}
	m.ProbeGroup = fv
}

func (m *Probe_Spec) SetDevice(fv *devices_device.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Device", "Probe_Spec"))
	}
	m.Device = fv
}

func (m *Probe_Spec) SetEnabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enabled", "Probe_Spec"))
	}
	m.Enabled = fv
}

func (m *Probe_Spec) SetPrimaryLocation(fv *common.Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrimaryLocation", "Probe_Spec"))
	}
	m.PrimaryLocation = fv
}

func (m *Probe_Spec) SetLocationDiscovery(fv *common.LocationDiscoverySpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocationDiscovery", "Probe_Spec"))
	}
	m.LocationDiscovery = fv
}

func (m *Probe_Spec) SetContactInfo(fv *common.ContactInformation) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ContactInfo", "Probe_Spec"))
	}
	m.ContactInfo = fv
}

func (m *Probe_Spec) SetActivation(fv *Probe_Spec_ActivationSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Activation", "Probe_Spec"))
	}
	m.Activation = fv
}

func (m *Probe_Spec) SetDisableSpeedtest(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisableSpeedtest", "Probe_Spec"))
	}
	m.DisableSpeedtest = fv
}

func (m *Probe_Spec) SetAccessToken(fv *Probe_Spec_AccessTokenSpec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessToken", "Probe_Spec"))
	}
	m.AccessToken = fv
}

func (m *Probe_Spec) SetAgentType(fv Probe_AgentType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AgentType", "Probe_Spec"))
	}
	m.AgentType = fv
}

func (m *Probe_Spec) SetExternalIpCheckUrl(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpCheckUrl", "Probe_Spec"))
	}
	m.ExternalIpCheckUrl = fv
}

// tatus describes the actual state of the Probe.
// Most fields are automatically resolved from the external_ip_address_v4,
// and clients don't need to fill up.
type Probe_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// external_ip_address_v4 describes the actual external IPv4 address.
	// The addresss is usually obtained from a STUN server by the probe agent
	ExternalIpAddressV4 string `protobuf:"bytes,1,opt,name=external_ip_address_v4,json=externalIpAddressV4,proto3" json:"external_ip_address_v4,omitempty" firestore:"externalIpAddressV4"`
	// external_ip_address_v6 describes the actual external IPv6 address.
	// The addresss is usually obtained from a STUN server by the probe agent
	ExternalIpAddressV6 string `protobuf:"bytes,2,opt,name=external_ip_address_v6,json=externalIpAddressV6,proto3" json:"external_ip_address_v6,omitempty" firestore:"externalIpAddressV6"`
	// The hostname describes the hostname of the probe.
	// The hostanme usually resolved from the external_ip_address_v4 by the
	// service.
	ExternalHostname string `protobuf:"bytes,3,opt,name=external_hostname,json=externalHostname,proto3" json:"external_hostname,omitempty" firestore:"externalHostname"`
	// Asinfo describes the (ASN) details for the host
	// This values usually resolved automatically by the service from the
	// external_ip_address_v4.
	AsInfo *common.ASInfo `protobuf:"bytes,4,opt,name=as_info,json=asInfo,proto3" json:"as_info,omitempty" firestore:"asInfo"`
	// carrier describes mobile network carrier information
	Carrier *common.Carrier `protobuf:"bytes,5,opt,name=carrier,proto3" json:"carrier,omitempty" firestore:"carrier"`
	// The address describes the place where the probe is placed at.
	// Note that the address is not always accurate.
	ActiveLocation *common.Location `protobuf:"bytes,7,opt,name=active_location,json=activeLocation,proto3" json:"active_location,omitempty" firestore:"activeLocation"`
	// software version
	SoftwareVersion *common.SoftwareVersion       `protobuf:"bytes,9,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty" firestore:"softwareVersion"`
	SystemInfo      *Probe_Status_System          `protobuf:"bytes,10,opt,name=system_info,json=systemInfo,proto3" json:"system_info,omitempty" firestore:"systemInfo"`
	Activation      *Probe_Status_ActivationState `protobuf:"bytes,12,opt,name=activation,proto3" json:"activation,omitempty" firestore:"activation"`
	Connection      Probe_Status_ConnectionStatus `protobuf:"varint,13,opt,name=connection,proto3,enum=ntt.watchdog.v1alpha2.Probe_Status_ConnectionStatus" json:"connection,omitempty" firestore:"connection"`
	// Last change of connection_status (edge activation)
	ConnectionStatusChangeTime *timestamp.Timestamp                      `protobuf:"bytes,14,opt,name=connection_status_change_time,json=connectionStatusChangeTime,proto3" json:"connection_status_change_time,omitempty" firestore:"connectionStatusChangeTime"`
	Bandwidth                  *Probe_Status_Bandwidth                   `protobuf:"bytes,15,opt,name=bandwidth,proto3" json:"bandwidth,omitempty" firestore:"bandwidth"`
	NetworkInterfaces          map[string]*Probe_Status_NetworkInterface `protobuf:"bytes,16,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"networkInterfaces"`
	AgentType                  Probe_AgentType                           `protobuf:"varint,17,opt,name=agent_type,json=agentType,proto3,enum=ntt.watchdog.v1alpha2.Probe_AgentType" json:"agent_type,omitempty" firestore:"agentType"`
}

func (m *Probe_Status) Reset() {
	*m = Probe_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Status) ProtoMessage() {}

func (m *Probe_Status) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Status) GotenMessage() {}

// Deprecated, Use Probe_Status.ProtoReflect.Descriptor instead.
func (*Probe_Status) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Probe_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Status) GetExternalIpAddressV4() string {
	if m != nil {
		return m.ExternalIpAddressV4
	}
	return ""
}

func (m *Probe_Status) GetExternalIpAddressV6() string {
	if m != nil {
		return m.ExternalIpAddressV6
	}
	return ""
}

func (m *Probe_Status) GetExternalHostname() string {
	if m != nil {
		return m.ExternalHostname
	}
	return ""
}

func (m *Probe_Status) GetAsInfo() *common.ASInfo {
	if m != nil {
		return m.AsInfo
	}
	return nil
}

func (m *Probe_Status) GetCarrier() *common.Carrier {
	if m != nil {
		return m.Carrier
	}
	return nil
}

func (m *Probe_Status) GetActiveLocation() *common.Location {
	if m != nil {
		return m.ActiveLocation
	}
	return nil
}

func (m *Probe_Status) GetSoftwareVersion() *common.SoftwareVersion {
	if m != nil {
		return m.SoftwareVersion
	}
	return nil
}

func (m *Probe_Status) GetSystemInfo() *Probe_Status_System {
	if m != nil {
		return m.SystemInfo
	}
	return nil
}

func (m *Probe_Status) GetActivation() *Probe_Status_ActivationState {
	if m != nil {
		return m.Activation
	}
	return nil
}

func (m *Probe_Status) GetConnection() Probe_Status_ConnectionStatus {
	if m != nil {
		return m.Connection
	}
	return Probe_Status_CONNECTION_STATUS_UNSPECIFIED
}

func (m *Probe_Status) GetConnectionStatusChangeTime() *timestamp.Timestamp {
	if m != nil {
		return m.ConnectionStatusChangeTime
	}
	return nil
}

func (m *Probe_Status) GetBandwidth() *Probe_Status_Bandwidth {
	if m != nil {
		return m.Bandwidth
	}
	return nil
}

func (m *Probe_Status) GetNetworkInterfaces() map[string]*Probe_Status_NetworkInterface {
	if m != nil {
		return m.NetworkInterfaces
	}
	return nil
}

func (m *Probe_Status) GetAgentType() Probe_AgentType {
	if m != nil {
		return m.AgentType
	}
	return Probe_UNKNOWN
}

func (m *Probe_Status) SetExternalIpAddressV4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpAddressV4", "Probe_Status"))
	}
	m.ExternalIpAddressV4 = fv
}

func (m *Probe_Status) SetExternalIpAddressV6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpAddressV6", "Probe_Status"))
	}
	m.ExternalIpAddressV6 = fv
}

func (m *Probe_Status) SetExternalHostname(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalHostname", "Probe_Status"))
	}
	m.ExternalHostname = fv
}

func (m *Probe_Status) SetAsInfo(fv *common.ASInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AsInfo", "Probe_Status"))
	}
	m.AsInfo = fv
}

func (m *Probe_Status) SetCarrier(fv *common.Carrier) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Carrier", "Probe_Status"))
	}
	m.Carrier = fv
}

func (m *Probe_Status) SetActiveLocation(fv *common.Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ActiveLocation", "Probe_Status"))
	}
	m.ActiveLocation = fv
}

func (m *Probe_Status) SetSoftwareVersion(fv *common.SoftwareVersion) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SoftwareVersion", "Probe_Status"))
	}
	m.SoftwareVersion = fv
}

func (m *Probe_Status) SetSystemInfo(fv *Probe_Status_System) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SystemInfo", "Probe_Status"))
	}
	m.SystemInfo = fv
}

func (m *Probe_Status) SetActivation(fv *Probe_Status_ActivationState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Activation", "Probe_Status"))
	}
	m.Activation = fv
}

func (m *Probe_Status) SetConnection(fv Probe_Status_ConnectionStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Connection", "Probe_Status"))
	}
	m.Connection = fv
}

func (m *Probe_Status) SetConnectionStatusChangeTime(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ConnectionStatusChangeTime", "Probe_Status"))
	}
	m.ConnectionStatusChangeTime = fv
}

func (m *Probe_Status) SetBandwidth(fv *Probe_Status_Bandwidth) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Bandwidth", "Probe_Status"))
	}
	m.Bandwidth = fv
}

func (m *Probe_Status) SetNetworkInterfaces(fv map[string]*Probe_Status_NetworkInterface) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "NetworkInterfaces", "Probe_Status"))
	}
	m.NetworkInterfaces = fv
}

func (m *Probe_Status) SetAgentType(fv Probe_AgentType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AgentType", "Probe_Status"))
	}
	m.AgentType = fv
}

type Probe_Spec_ActivationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Type          Probe_Spec_ActivationSpec_ActivationType `protobuf:"varint,1,opt,name=type,proto3,enum=ntt.watchdog.v1alpha2.Probe_Spec_ActivationSpec_ActivationType" json:"type,omitempty" firestore:"type"`
	// auto-generated
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty" firestore:"token"`
	// send activation email upon creation
	SendInvitationOnCreate bool `protobuf:"varint,3,opt,name=send_invitation_on_create,json=sendInvitationOnCreate,proto3" json:"send_invitation_on_create,omitempty" firestore:"sendInvitationOnCreate"`
	// reusable token - determines if same token may be reused to reactivate
	// probe even after activation was successful without admin or asset
	// manager intervention. Convenient, but less secure configuration option.
	ReusableToken bool `protobuf:"varint,4,opt,name=reusable_token,json=reusableToken,proto3" json:"reusable_token,omitempty" firestore:"reusableToken"`
}

func (m *Probe_Spec_ActivationSpec) Reset() {
	*m = Probe_Spec_ActivationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Spec_ActivationSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Spec_ActivationSpec) ProtoMessage() {}

func (m *Probe_Spec_ActivationSpec) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Spec_ActivationSpec) GotenMessage() {}

// Deprecated, Use Probe_Spec_ActivationSpec.ProtoReflect.Descriptor instead.
func (*Probe_Spec_ActivationSpec) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Probe_Spec_ActivationSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Spec_ActivationSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Spec_ActivationSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Spec_ActivationSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Spec_ActivationSpec) GetType() Probe_Spec_ActivationSpec_ActivationType {
	if m != nil {
		return m.Type
	}
	return Probe_Spec_ActivationSpec_ACTIVATION_TYPE_UNSPECIFIED
}

func (m *Probe_Spec_ActivationSpec) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Probe_Spec_ActivationSpec) GetSendInvitationOnCreate() bool {
	if m != nil {
		return m.SendInvitationOnCreate
	}
	return false
}

func (m *Probe_Spec_ActivationSpec) GetReusableToken() bool {
	if m != nil {
		return m.ReusableToken
	}
	return false
}

func (m *Probe_Spec_ActivationSpec) SetType(fv Probe_Spec_ActivationSpec_ActivationType) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Type", "Probe_Spec_ActivationSpec"))
	}
	m.Type = fv
}

func (m *Probe_Spec_ActivationSpec) SetToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Token", "Probe_Spec_ActivationSpec"))
	}
	m.Token = fv
}

func (m *Probe_Spec_ActivationSpec) SetSendInvitationOnCreate(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SendInvitationOnCreate", "Probe_Spec_ActivationSpec"))
	}
	m.SendInvitationOnCreate = fv
}

func (m *Probe_Spec_ActivationSpec) SetReusableToken(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReusableToken", "Probe_Spec_ActivationSpec"))
	}
	m.ReusableToken = fv
}

type Probe_Spec_AccessTokenSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Enable        bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty" firestore:"enable"`
	AccessToken   string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty" firestore:"accessToken"`
}

func (m *Probe_Spec_AccessTokenSpec) Reset() {
	*m = Probe_Spec_AccessTokenSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Spec_AccessTokenSpec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Spec_AccessTokenSpec) ProtoMessage() {}

func (m *Probe_Spec_AccessTokenSpec) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Spec_AccessTokenSpec) GotenMessage() {}

// Deprecated, Use Probe_Spec_AccessTokenSpec.ProtoReflect.Descriptor instead.
func (*Probe_Spec_AccessTokenSpec) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (m *Probe_Spec_AccessTokenSpec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Spec_AccessTokenSpec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Spec_AccessTokenSpec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Spec_AccessTokenSpec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Spec_AccessTokenSpec) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *Probe_Spec_AccessTokenSpec) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *Probe_Spec_AccessTokenSpec) SetEnable(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Enable", "Probe_Spec_AccessTokenSpec"))
	}
	m.Enable = fv
}

func (m *Probe_Spec_AccessTokenSpec) SetAccessToken(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessToken", "Probe_Spec_AccessTokenSpec"))
	}
	m.AccessToken = fv
}

type Probe_Status_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Manufacturer  string                  `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty" firestore:"manufacturer"`
	Model         string                  `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty" firestore:"model"`
	Sku           string                  `protobuf:"bytes,3,opt,name=sku,proto3" json:"sku,omitempty" firestore:"sku"`
	Family        string                  `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty" firestore:"family"`
	SerialNumber  string                  `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" firestore:"serialNumber"`
	Platform      string                  `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty" firestore:"platform"`
	Architecture  string                  `protobuf:"bytes,7,opt,name=architecture,proto3" json:"architecture,omitempty" firestore:"architecture"`
	Os            *Probe_Status_System_OS `protobuf:"bytes,8,opt,name=os,proto3" json:"os,omitempty" firestore:"os"`
	HostName      string                  `protobuf:"bytes,9,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty" firestore:"hostName"`
}

func (m *Probe_Status_System) Reset() {
	*m = Probe_Status_System{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Status_System) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Status_System) ProtoMessage() {}

func (m *Probe_Status_System) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Status_System) GotenMessage() {}

// Deprecated, Use Probe_Status_System.ProtoReflect.Descriptor instead.
func (*Probe_Status_System) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *Probe_Status_System) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Status_System) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Status_System) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Status_System) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Status_System) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Probe_Status_System) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Probe_Status_System) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *Probe_Status_System) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Probe_Status_System) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Probe_Status_System) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Probe_Status_System) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *Probe_Status_System) GetOs() *Probe_Status_System_OS {
	if m != nil {
		return m.Os
	}
	return nil
}

func (m *Probe_Status_System) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *Probe_Status_System) SetManufacturer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Manufacturer", "Probe_Status_System"))
	}
	m.Manufacturer = fv
}

func (m *Probe_Status_System) SetModel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Model", "Probe_Status_System"))
	}
	m.Model = fv
}

func (m *Probe_Status_System) SetSku(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sku", "Probe_Status_System"))
	}
	m.Sku = fv
}

func (m *Probe_Status_System) SetFamily(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Family", "Probe_Status_System"))
	}
	m.Family = fv
}

func (m *Probe_Status_System) SetSerialNumber(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SerialNumber", "Probe_Status_System"))
	}
	m.SerialNumber = fv
}

func (m *Probe_Status_System) SetPlatform(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Platform", "Probe_Status_System"))
	}
	m.Platform = fv
}

func (m *Probe_Status_System) SetArchitecture(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Architecture", "Probe_Status_System"))
	}
	m.Architecture = fv
}

func (m *Probe_Status_System) SetOs(fv *Probe_Status_System_OS) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Os", "Probe_Status_System"))
	}
	m.Os = fv
}

func (m *Probe_Status_System) SetHostName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "HostName", "Probe_Status_System"))
	}
	m.HostName = fv
}

type Probe_Status_ActivationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Status        Probe_Status_ActivationState_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ntt.watchdog.v1alpha2.Probe_Status_ActivationState_Status" json:"status,omitempty" firestore:"status"`
	// Session object stores required information about current activation
	// session
	CurrentSession *Probe_Status_ActivationState_Session `protobuf:"bytes,2,opt,name=current_session,json=currentSession,proto3" json:"current_session,omitempty" firestore:"currentSession"`
	// Managed Service account reference
	ServiceAccount *iam_service_account.Reference                `protobuf:"bytes,3,opt,customtype=Reference,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" firestore:"serviceAccount"`
	LastInvitation *Probe_Status_ActivationState_InvitationState `protobuf:"bytes,4,opt,name=last_invitation,json=lastInvitation,proto3" json:"last_invitation,omitempty" firestore:"lastInvitation"`
}

func (m *Probe_Status_ActivationState) Reset() {
	*m = Probe_Status_ActivationState{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Status_ActivationState) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Status_ActivationState) ProtoMessage() {}

func (m *Probe_Status_ActivationState) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Status_ActivationState) GotenMessage() {}

// Deprecated, Use Probe_Status_ActivationState.ProtoReflect.Descriptor instead.
func (*Probe_Status_ActivationState) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *Probe_Status_ActivationState) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Status_ActivationState) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Status_ActivationState) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Status_ActivationState) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Status_ActivationState) GetStatus() Probe_Status_ActivationState_Status {
	if m != nil {
		return m.Status
	}
	return Probe_Status_ActivationState_ACTIVATION_STATUS_UNSPECIFIED
}

func (m *Probe_Status_ActivationState) GetCurrentSession() *Probe_Status_ActivationState_Session {
	if m != nil {
		return m.CurrentSession
	}
	return nil
}

func (m *Probe_Status_ActivationState) GetServiceAccount() *iam_service_account.Reference {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *Probe_Status_ActivationState) GetLastInvitation() *Probe_Status_ActivationState_InvitationState {
	if m != nil {
		return m.LastInvitation
	}
	return nil
}

func (m *Probe_Status_ActivationState) SetStatus(fv Probe_Status_ActivationState_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "Probe_Status_ActivationState"))
	}
	m.Status = fv
}

func (m *Probe_Status_ActivationState) SetCurrentSession(fv *Probe_Status_ActivationState_Session) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentSession", "Probe_Status_ActivationState"))
	}
	m.CurrentSession = fv
}

func (m *Probe_Status_ActivationState) SetServiceAccount(fv *iam_service_account.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceAccount", "Probe_Status_ActivationState"))
	}
	m.ServiceAccount = fv
}

func (m *Probe_Status_ActivationState) SetLastInvitation(fv *Probe_Status_ActivationState_InvitationState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastInvitation", "Probe_Status_ActivationState"))
	}
	m.LastInvitation = fv
}

// Internet speed
type Probe_Status_Bandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	UploadMbps    float64              `protobuf:"fixed64,1,opt,name=upload_mbps,json=uploadMbps,proto3" json:"upload_mbps,omitempty" firestore:"uploadMbps"`
	DownloadMbps  float64              `protobuf:"fixed64,2,opt,name=download_mbps,json=downloadMbps,proto3" json:"download_mbps,omitempty" firestore:"downloadMbps"`
	TestServer    string               `protobuf:"bytes,3,opt,name=test_server,json=testServer,proto3" json:"test_server,omitempty" firestore:"testServer"`
	LastReported  *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_reported,json=lastReported,proto3" json:"last_reported,omitempty" firestore:"lastReported"`
}

func (m *Probe_Status_Bandwidth) Reset() {
	*m = Probe_Status_Bandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Status_Bandwidth) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Status_Bandwidth) ProtoMessage() {}

func (m *Probe_Status_Bandwidth) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Status_Bandwidth) GotenMessage() {}

// Deprecated, Use Probe_Status_Bandwidth.ProtoReflect.Descriptor instead.
func (*Probe_Status_Bandwidth) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (m *Probe_Status_Bandwidth) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Status_Bandwidth) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Status_Bandwidth) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Status_Bandwidth) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Status_Bandwidth) GetUploadMbps() float64 {
	if m != nil {
		return m.UploadMbps
	}
	return float64(0)
}

func (m *Probe_Status_Bandwidth) GetDownloadMbps() float64 {
	if m != nil {
		return m.DownloadMbps
	}
	return float64(0)
}

func (m *Probe_Status_Bandwidth) GetTestServer() string {
	if m != nil {
		return m.TestServer
	}
	return ""
}

func (m *Probe_Status_Bandwidth) GetLastReported() *timestamp.Timestamp {
	if m != nil {
		return m.LastReported
	}
	return nil
}

func (m *Probe_Status_Bandwidth) SetUploadMbps(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UploadMbps", "Probe_Status_Bandwidth"))
	}
	m.UploadMbps = fv
}

func (m *Probe_Status_Bandwidth) SetDownloadMbps(fv float64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DownloadMbps", "Probe_Status_Bandwidth"))
	}
	m.DownloadMbps = fv
}

func (m *Probe_Status_Bandwidth) SetTestServer(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TestServer", "Probe_Status_Bandwidth"))
	}
	m.TestServer = fv
}

func (m *Probe_Status_Bandwidth) SetLastReported(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LastReported", "Probe_Status_Bandwidth"))
	}
	m.LastReported = fv
}

type Probe_Status_NetworkInterface struct {
	state               protoimpl.MessageState
	sizeCache           protoimpl.SizeCache
	unknownFields       protoimpl.UnknownFields
	InterfaceName       string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty" firestore:"interfaceName"`
	IpAddressV4         []string `protobuf:"bytes,2,rep,name=ip_address_v4,json=ipAddressV4,proto3" json:"ip_address_v4,omitempty" firestore:"ipAddressV4"`
	ExternalIpAddressV4 []string `protobuf:"bytes,3,rep,name=external_ip_address_v4,json=externalIpAddressV4,proto3" json:"external_ip_address_v4,omitempty" firestore:"externalIpAddressV4"`
	IpAddressV6         []string `protobuf:"bytes,4,rep,name=ip_address_v6,json=ipAddressV6,proto3" json:"ip_address_v6,omitempty" firestore:"ipAddressV6"`
	ExternalIpAddressV6 []string `protobuf:"bytes,5,rep,name=external_ip_address_v6,json=externalIpAddressV6,proto3" json:"external_ip_address_v6,omitempty" firestore:"externalIpAddressV6"`
}

func (m *Probe_Status_NetworkInterface) Reset() {
	*m = Probe_Status_NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Status_NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Status_NetworkInterface) ProtoMessage() {}

func (m *Probe_Status_NetworkInterface) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Status_NetworkInterface) GotenMessage() {}

// Deprecated, Use Probe_Status_NetworkInterface.ProtoReflect.Descriptor instead.
func (*Probe_Status_NetworkInterface) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (m *Probe_Status_NetworkInterface) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Status_NetworkInterface) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Status_NetworkInterface) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Status_NetworkInterface) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Status_NetworkInterface) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Probe_Status_NetworkInterface) GetIpAddressV4() []string {
	if m != nil {
		return m.IpAddressV4
	}
	return nil
}

func (m *Probe_Status_NetworkInterface) GetExternalIpAddressV4() []string {
	if m != nil {
		return m.ExternalIpAddressV4
	}
	return nil
}

func (m *Probe_Status_NetworkInterface) GetIpAddressV6() []string {
	if m != nil {
		return m.IpAddressV6
	}
	return nil
}

func (m *Probe_Status_NetworkInterface) GetExternalIpAddressV6() []string {
	if m != nil {
		return m.ExternalIpAddressV6
	}
	return nil
}

func (m *Probe_Status_NetworkInterface) SetInterfaceName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "InterfaceName", "Probe_Status_NetworkInterface"))
	}
	m.InterfaceName = fv
}

func (m *Probe_Status_NetworkInterface) SetIpAddressV4(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddressV4", "Probe_Status_NetworkInterface"))
	}
	m.IpAddressV4 = fv
}

func (m *Probe_Status_NetworkInterface) SetExternalIpAddressV4(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpAddressV4", "Probe_Status_NetworkInterface"))
	}
	m.ExternalIpAddressV4 = fv
}

func (m *Probe_Status_NetworkInterface) SetIpAddressV6(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddressV6", "Probe_Status_NetworkInterface"))
	}
	m.IpAddressV6 = fv
}

func (m *Probe_Status_NetworkInterface) SetExternalIpAddressV6(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ExternalIpAddressV6", "Probe_Status_NetworkInterface"))
	}
	m.ExternalIpAddressV6 = fv
}

type Probe_Status_System_OS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
	BuildVersion  string `protobuf:"bytes,3,opt,name=build_version,json=buildVersion,proto3" json:"build_version,omitempty" firestore:"buildVersion"`
	Kernel        string `protobuf:"bytes,4,opt,name=kernel,proto3" json:"kernel,omitempty" firestore:"kernel"`
}

func (m *Probe_Status_System_OS) Reset() {
	*m = Probe_Status_System_OS{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Status_System_OS) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Status_System_OS) ProtoMessage() {}

func (m *Probe_Status_System_OS) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Status_System_OS) GotenMessage() {}

// Deprecated, Use Probe_Status_System_OS.ProtoReflect.Descriptor instead.
func (*Probe_Status_System_OS) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (m *Probe_Status_System_OS) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Status_System_OS) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Status_System_OS) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Status_System_OS) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Status_System_OS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Probe_Status_System_OS) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Probe_Status_System_OS) GetBuildVersion() string {
	if m != nil {
		return m.BuildVersion
	}
	return ""
}

func (m *Probe_Status_System_OS) GetKernel() string {
	if m != nil {
		return m.Kernel
	}
	return ""
}

func (m *Probe_Status_System_OS) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Probe_Status_System_OS"))
	}
	m.Name = fv
}

func (m *Probe_Status_System_OS) SetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "Probe_Status_System_OS"))
	}
	m.Version = fv
}

func (m *Probe_Status_System_OS) SetBuildVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BuildVersion", "Probe_Status_System_OS"))
	}
	m.BuildVersion = fv
}

func (m *Probe_Status_System_OS) SetKernel(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Kernel", "Probe_Status_System_OS"))
	}
	m.Kernel = fv
}

type Probe_Status_ActivationState_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// current activation session cookie - allows avoiding collisions and
	// ensure that only single client gets activated
	ClientCookie string `protobuf:"bytes,1,opt,name=client_cookie,json=clientCookie,proto3" json:"client_cookie,omitempty" firestore:"clientCookie"`
	// current session lock deadline for client identified with its cookie.
	// after lock timestamp is exceeded, new clients may override cookie.
	LockDeadline *timestamp.Timestamp `protobuf:"bytes,2,opt,name=lock_deadline,json=lockDeadline,proto3" json:"lock_deadline,omitempty" firestore:"lockDeadline"`
}

func (m *Probe_Status_ActivationState_Session) Reset() {
	*m = Probe_Status_ActivationState_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Status_ActivationState_Session) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Status_ActivationState_Session) ProtoMessage() {}

func (m *Probe_Status_ActivationState_Session) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Status_ActivationState_Session) GotenMessage() {}

// Deprecated, Use Probe_Status_ActivationState_Session.ProtoReflect.Descriptor instead.
func (*Probe_Status_ActivationState_Session) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (m *Probe_Status_ActivationState_Session) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Status_ActivationState_Session) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Status_ActivationState_Session) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Status_ActivationState_Session) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Status_ActivationState_Session) GetClientCookie() string {
	if m != nil {
		return m.ClientCookie
	}
	return ""
}

func (m *Probe_Status_ActivationState_Session) GetLockDeadline() *timestamp.Timestamp {
	if m != nil {
		return m.LockDeadline
	}
	return nil
}

func (m *Probe_Status_ActivationState_Session) SetClientCookie(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ClientCookie", "Probe_Status_ActivationState_Session"))
	}
	m.ClientCookie = fv
}

func (m *Probe_Status_ActivationState_Session) SetLockDeadline(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LockDeadline", "Probe_Status_ActivationState_Session"))
	}
	m.LockDeadline = fv
}

// activation invitation state
type Probe_Status_ActivationState_InvitationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// sent date
	SentDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=sent_date,json=sentDate,proto3" json:"sent_date,omitempty" firestore:"sentDate"`
	// sender TODO: make it a formal reference
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty" firestore:"sender"`
}

func (m *Probe_Status_ActivationState_InvitationState) Reset() {
	*m = Probe_Status_ActivationState_InvitationState{}
	if protoimpl.UnsafeEnabled {
		mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Probe_Status_ActivationState_InvitationState) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Probe_Status_ActivationState_InvitationState) ProtoMessage() {}

func (m *Probe_Status_ActivationState_InvitationState) ProtoReflect() preflect.Message {
	mi := &watchdog_proto_v1alpha2_probe_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Probe_Status_ActivationState_InvitationState) GotenMessage() {}

// Deprecated, Use Probe_Status_ActivationState_InvitationState.ProtoReflect.Descriptor instead.
func (*Probe_Status_ActivationState_InvitationState) Descriptor() ([]byte, []int) {
	return watchdog_proto_v1alpha2_probe_proto_rawDescGZIP(), []int{0, 1, 1, 1}
}

func (m *Probe_Status_ActivationState_InvitationState) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Probe_Status_ActivationState_InvitationState) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Probe_Status_ActivationState_InvitationState) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Probe_Status_ActivationState_InvitationState) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Probe_Status_ActivationState_InvitationState) GetSentDate() *timestamp.Timestamp {
	if m != nil {
		return m.SentDate
	}
	return nil
}

func (m *Probe_Status_ActivationState_InvitationState) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Probe_Status_ActivationState_InvitationState) SetSentDate(fv *timestamp.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SentDate", "Probe_Status_ActivationState_InvitationState"))
	}
	m.SentDate = fv
}

func (m *Probe_Status_ActivationState_InvitationState) SetSender(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Sender", "Probe_Status_ActivationState_InvitationState"))
	}
	m.Sender = fv
}

var watchdog_proto_v1alpha2_probe_proto preflect.FileDescriptor

var watchdog_proto_v1alpha2_probe_proto_rawDesc = []byte{
	0x0a, 0x23, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x64, 0x67,
	0x65, 0x6c, 0x71, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65,
	0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x34, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0xb2, 0xda, 0x21, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0xe2, 0xde, 0x21, 0x0a, 0x2a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde,
	0x21, 0x02, 0x08, 0x04, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x12, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xde, 0x21, 0x02, 0x08, 0x04, 0x52, 0x10, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x1a, 0x92, 0x09,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xb2, 0xda, 0x21,
	0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10,
	0x01, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xb2, 0xda, 0x21, 0x1f, 0x12, 0x1d, 0x0a, 0x1b, 0x6e, 0x74, 0x74,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x06, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b,
	0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45,
	0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x6c, 0x1a, 0xd3, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x19,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x75, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x65, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6e,
	0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x4c,
	0x46, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x52,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x1a, 0x9c, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a,
	0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x56, 0x34, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x41, 0x53,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x07,
	0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x58, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x02, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x69, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xa6, 0x03, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x4f, 0x53, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x77, 0x0a, 0x02, 0x4f, 0x53, 0x12, 0x1a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xde, 0x21, 0x02,
	0x08, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x1a,
	0xef, 0x05, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x06, 0xe2, 0xde, 0x21, 0x02, 0x08, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x64, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27,
	0xb2, 0xda, 0x21, 0x23, 0x12, 0x21, 0x0a, 0x1f, 0x6e, 0x74, 0x74, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6f, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x62, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x04, 0x1a, 0xb3, 0x01, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x62, 0x70, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x62, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0xeb, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x76, 0x34, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76,
	0x34, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x34, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36,
	0x12, 0x33, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x56, 0x36, 0x1a, 0x7a, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x02, 0x22, 0x4f, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x10, 0x03, 0x3a, 0xcd, 0x11, 0xea, 0x41, 0x4f, 0x0a, 0x19, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64,
	0x6f, 0x67, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x12, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0xd4, 0x05, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x73, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x1a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x94, 0x05, 0x08, 0x02,
	0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x05, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x2c, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x1d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x12, 0x0d, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x50, 0x76, 0x34, 0x12, 0x2e, 0x0a, 0x1d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x36, 0x12, 0x0d, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x49, 0x50, 0x76, 0x36, 0x12, 0x1e, 0x0a, 0x13, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x07, 0x41, 0x53, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x1f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x1a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x6f, 0x73, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x20,
	0x4f, 0x53, 0x12, 0x31, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0d, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x24, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x06, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x6a, 0x1c, 0x6e, 0x74, 0x74, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0xaa, 0xd9, 0x21, 0xe8, 0x05, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x17, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x0a,
	0x10, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x0a, 0x2c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x0a,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x73, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x61, 0x73, 0x6e, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x76, 0x34, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x76, 0x36, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6f, 0x73, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x0a, 0x1b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x0d, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x0c, 0x73, 0x70, 0x65,
	0x63, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x1a, 0x0c, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x10, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x1f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xb2, 0xdf, 0x21,
	0x0a, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0xda, 0x94, 0x23, 0x94, 0x01,
	0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x26, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0a, 0x26, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0xca, 0xa3, 0x22, 0x8f, 0x03, 0x0a, 0x23, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x15, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x21, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0xc2, 0x85, 0x2c, 0x76, 0x0a, 0x1f, 0x0a, 0x10,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0d, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x04, 0x73, 0x70, 0x65, 0x63, 0x2a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x12, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x42, 0x8f, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x40, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x0a, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x3b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0xd2, 0x84, 0xd1, 0x02, 0x44, 0x0a, 0x0d, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0xf2, 0x85, 0xd1, 0x02, 0x48, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x64, 0x62, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2f, 0x64, 0x62, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0xa2, 0x80, 0xd1,
	0x02, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	watchdog_proto_v1alpha2_probe_proto_rawDescOnce sync.Once
	watchdog_proto_v1alpha2_probe_proto_rawDescData = watchdog_proto_v1alpha2_probe_proto_rawDesc
)

func watchdog_proto_v1alpha2_probe_proto_rawDescGZIP() []byte {
	watchdog_proto_v1alpha2_probe_proto_rawDescOnce.Do(func() {
		watchdog_proto_v1alpha2_probe_proto_rawDescData = protoimpl.X.CompressGZIP(watchdog_proto_v1alpha2_probe_proto_rawDescData)
	})
	return watchdog_proto_v1alpha2_probe_proto_rawDescData
}

var watchdog_proto_v1alpha2_probe_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var watchdog_proto_v1alpha2_probe_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var watchdog_proto_v1alpha2_probe_proto_goTypes = []interface{}{
	(Probe_AgentType)(0),                                 // 0: ntt.watchdog.v1alpha2.Probe_AgentType
	(Probe_Spec_ActivationSpec_ActivationType)(0),        // 1: ntt.watchdog.v1alpha2.Probe_Spec_ActivationSpec_ActivationType
	(Probe_Status_ConnectionStatus)(0),                   // 2: ntt.watchdog.v1alpha2.Probe_Status_ConnectionStatus
	(Probe_Status_ActivationState_Status)(0),             // 3: ntt.watchdog.v1alpha2.Probe_Status_ActivationState_Status
	(*Probe)(nil),                                        // 4: ntt.watchdog.v1alpha2.Probe
	(*Probe_Spec)(nil),                                   // 5: ntt.watchdog.v1alpha2.Probe.Spec
	(*Probe_Status)(nil),                                 // 6: ntt.watchdog.v1alpha2.Probe.Status
	(*Probe_Spec_ActivationSpec)(nil),                    // 7: ntt.watchdog.v1alpha2.Probe.Spec.ActivationSpec
	(*Probe_Spec_AccessTokenSpec)(nil),                   // 8: ntt.watchdog.v1alpha2.Probe.Spec.AccessTokenSpec
	(*Probe_Status_System)(nil),                          // 9: ntt.watchdog.v1alpha2.Probe.Status.System
	(*Probe_Status_ActivationState)(nil),                 // 10: ntt.watchdog.v1alpha2.Probe.Status.ActivationState
	(*Probe_Status_Bandwidth)(nil),                       // 11: ntt.watchdog.v1alpha2.Probe.Status.Bandwidth
	(*Probe_Status_NetworkInterface)(nil),                // 12: ntt.watchdog.v1alpha2.Probe.Status.NetworkInterface
	nil,                                                  // 13: ntt.watchdog.v1alpha2.Probe.Status.NetworkInterfacesEntry
	(*Probe_Status_System_OS)(nil),                       // 14: ntt.watchdog.v1alpha2.Probe.Status.System.OS
	(*Probe_Status_ActivationState_Session)(nil),         // 15: ntt.watchdog.v1alpha2.Probe.Status.ActivationState.Session
	(*Probe_Status_ActivationState_InvitationState)(nil), // 16: ntt.watchdog.v1alpha2.Probe.Status.ActivationState.InvitationState
	(*ntt_meta.Meta)(nil),                                // 17: ntt.types.Meta
	(*ntt_memo.Memo)(nil),                                // 18: ntt.types.Memo
	(*common.Location)(nil),                              // 19: ntt.watchdog.v1alpha2.Location
	(*common.LocationDiscoverySpec)(nil),                 // 20: ntt.watchdog.v1alpha2.LocationDiscoverySpec
	(*common.ContactInformation)(nil),                    // 21: ntt.watchdog.v1alpha2.ContactInformation
	(*common.ASInfo)(nil),                                // 22: ntt.watchdog.v1alpha2.ASInfo
	(*common.Carrier)(nil),                               // 23: ntt.watchdog.v1alpha2.Carrier
	(*common.SoftwareVersion)(nil),                       // 24: ntt.watchdog.v1alpha2.SoftwareVersion
	(*timestamp.Timestamp)(nil),                          // 25: google.protobuf.Timestamp
}
var watchdog_proto_v1alpha2_probe_proto_depIdxs = []int32{
	17, // 0: ntt.watchdog.v1alpha2.Probe.metadata:type_name -> ntt.types.Meta
	5,  // 1: ntt.watchdog.v1alpha2.Probe.spec:type_name -> ntt.watchdog.v1alpha2.Probe.Spec
	6,  // 2: ntt.watchdog.v1alpha2.Probe.status:type_name -> ntt.watchdog.v1alpha2.Probe.Status
	18, // 3: ntt.watchdog.v1alpha2.Probe.memo:type_name -> ntt.types.Memo
	19, // 4: ntt.watchdog.v1alpha2.Probe.Spec.primary_location:type_name -> ntt.watchdog.v1alpha2.Location
	20, // 5: ntt.watchdog.v1alpha2.Probe.Spec.location_discovery:type_name -> ntt.watchdog.v1alpha2.LocationDiscoverySpec
	21, // 6: ntt.watchdog.v1alpha2.Probe.Spec.contact_info:type_name -> ntt.watchdog.v1alpha2.ContactInformation
	7,  // 7: ntt.watchdog.v1alpha2.Probe.Spec.activation:type_name -> ntt.watchdog.v1alpha2.Probe.Spec.ActivationSpec
	8,  // 8: ntt.watchdog.v1alpha2.Probe.Spec.access_token:type_name -> ntt.watchdog.v1alpha2.Probe.Spec.AccessTokenSpec
	0,  // 9: ntt.watchdog.v1alpha2.Probe.Spec.agent_type:type_name -> ntt.watchdog.v1alpha2.Probe_AgentType
	22, // 10: ntt.watchdog.v1alpha2.Probe.Status.as_info:type_name -> ntt.watchdog.v1alpha2.ASInfo
	23, // 11: ntt.watchdog.v1alpha2.Probe.Status.carrier:type_name -> ntt.watchdog.v1alpha2.Carrier
	19, // 12: ntt.watchdog.v1alpha2.Probe.Status.active_location:type_name -> ntt.watchdog.v1alpha2.Location
	24, // 13: ntt.watchdog.v1alpha2.Probe.Status.software_version:type_name -> ntt.watchdog.v1alpha2.SoftwareVersion
	9,  // 14: ntt.watchdog.v1alpha2.Probe.Status.system_info:type_name -> ntt.watchdog.v1alpha2.Probe.Status.System
	10, // 15: ntt.watchdog.v1alpha2.Probe.Status.activation:type_name -> ntt.watchdog.v1alpha2.Probe.Status.ActivationState
	2,  // 16: ntt.watchdog.v1alpha2.Probe.Status.connection:type_name -> ntt.watchdog.v1alpha2.Probe_Status_ConnectionStatus
	25, // 17: ntt.watchdog.v1alpha2.Probe.Status.connection_status_change_time:type_name -> google.protobuf.Timestamp
	11, // 18: ntt.watchdog.v1alpha2.Probe.Status.bandwidth:type_name -> ntt.watchdog.v1alpha2.Probe.Status.Bandwidth
	13, // 19: ntt.watchdog.v1alpha2.Probe.Status.network_interfaces:type_name -> ntt.watchdog.v1alpha2.Probe.Status.NetworkInterfacesEntry
	0,  // 20: ntt.watchdog.v1alpha2.Probe.Status.agent_type:type_name -> ntt.watchdog.v1alpha2.Probe_AgentType
	1,  // 21: ntt.watchdog.v1alpha2.Probe.Spec.ActivationSpec.type:type_name -> ntt.watchdog.v1alpha2.Probe_Spec_ActivationSpec_ActivationType
	14, // 22: ntt.watchdog.v1alpha2.Probe.Status.System.os:type_name -> ntt.watchdog.v1alpha2.Probe.Status.System.OS
	3,  // 23: ntt.watchdog.v1alpha2.Probe.Status.ActivationState.status:type_name -> ntt.watchdog.v1alpha2.Probe_Status_ActivationState_Status
	15, // 24: ntt.watchdog.v1alpha2.Probe.Status.ActivationState.current_session:type_name -> ntt.watchdog.v1alpha2.Probe.Status.ActivationState.Session
	16, // 25: ntt.watchdog.v1alpha2.Probe.Status.ActivationState.last_invitation:type_name -> ntt.watchdog.v1alpha2.Probe.Status.ActivationState.InvitationState
	25, // 26: ntt.watchdog.v1alpha2.Probe.Status.Bandwidth.last_reported:type_name -> google.protobuf.Timestamp
	25, // 27: ntt.watchdog.v1alpha2.Probe.Status.ActivationState.Session.lock_deadline:type_name -> google.protobuf.Timestamp
	25, // 28: ntt.watchdog.v1alpha2.Probe.Status.ActivationState.InvitationState.sent_date:type_name -> google.protobuf.Timestamp
	12, // 29: ntt.watchdog.v1alpha2.Probe.Status.NetworkInterfacesEntry.value:type_name -> ntt.watchdog.v1alpha2.Probe.Status.NetworkInterface
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { watchdog_proto_v1alpha2_probe_proto_init() }
func watchdog_proto_v1alpha2_probe_proto_init() {
	if watchdog_proto_v1alpha2_probe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		watchdog_proto_v1alpha2_probe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Spec_ActivationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Spec_AccessTokenSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Status_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Status_ActivationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Status_Bandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Status_NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Status_System_OS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Status_ActivationState_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		watchdog_proto_v1alpha2_probe_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe_Status_ActivationState_InvitationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: watchdog_proto_v1alpha2_probe_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           watchdog_proto_v1alpha2_probe_proto_goTypes,
		DependencyIndexes: watchdog_proto_v1alpha2_probe_proto_depIdxs,
		EnumInfos:         watchdog_proto_v1alpha2_probe_proto_enumTypes,
		MessageInfos:      watchdog_proto_v1alpha2_probe_proto_msgTypes,
	}.Build()
	watchdog_proto_v1alpha2_probe_proto = out.File
	watchdog_proto_v1alpha2_probe_proto_rawDesc = nil
	watchdog_proto_v1alpha2_probe_proto_goTypes = nil
	watchdog_proto_v1alpha2_probe_proto_depIdxs = nil
}
