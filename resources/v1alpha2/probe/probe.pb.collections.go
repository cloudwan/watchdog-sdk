// Code generated by protoc-gen-goten-resource
// Resource: Probe
// DO NOT EDIT!!!

package probe

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

type ProbeList []*Probe

func (l ProbeList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*Probe))
}

func (l ProbeList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ProbeList)...)
}

func (l ProbeList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ProbeList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*Probe)
}

func (l ProbeList) Length() int {
	return len(l)
}

type ProbeChangeList []*ProbeChange

func (l ProbeChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ProbeChange))
}

func (l ProbeChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ProbeChangeList)...)
}

func (l ProbeChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ProbeChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ProbeChange)
}

func (l ProbeChangeList) Length() int {
	return len(l)
}

type ProbeNameList []*Name

func (l ProbeNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ProbeNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ProbeNameList)...)
}

func (l ProbeNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbeNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ProbeNameList) Length() int {
	return len(l)
}

type ProbeReferenceList []*Reference

func (l ProbeReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ProbeReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ProbeReferenceList)...)
}

func (l ProbeReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbeReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ProbeReferenceList) Length() int {
	return len(l)
}

type ProbeParentNameList []*ParentName

func (l ProbeParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ProbeParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ProbeParentNameList)...)
}

func (l ProbeParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbeParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ProbeParentNameList) Length() int {
	return len(l)
}

type ProbeParentReferenceList []*ParentReference

func (l ProbeParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ProbeParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ProbeParentReferenceList)...)
}

func (l ProbeParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbeParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbeParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ProbeParentReferenceList) Length() int {
	return len(l)
}

type ProbeMap map[Name]*Probe

func (m ProbeMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ProbeMap) Set(res gotenresource.Resource) {
	tRes := res.(*Probe)
	m[*tRes.Name] = tRes
}

func (m ProbeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbeMap) Length() int {
	return len(m)
}

func (m ProbeMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ProbeChangeMap map[Name]*ProbeChange

func (m ProbeChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ProbeChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ProbeChange)
	m[*tChange.GetProbeName()] = tChange
}

func (m ProbeChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbeChangeMap) Length() int {
	return len(m)
}

func (m ProbeChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
