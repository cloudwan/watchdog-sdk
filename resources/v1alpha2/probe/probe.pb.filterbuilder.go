// Code generated by protoc-gen-goten-resource
// Resource: Probe
// DO NOT EDIT!!!

package probe

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	devices_project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_condition "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/condition"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_permission "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/permission"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_role "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/role"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	iam_user "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/user"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
	structpb "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &devices_project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.Actor{}
	_ = &iam_condition.Condition{}
	_ = &iam_organization.Organization{}
	_ = &iam_permission.Permission{}
	_ = &iam_project.Project{}
	_ = &iam_role.Role{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &iam_user.User{}
	_ = &policy.Policy{}
	_ = &syncing_meta.SyncingMeta{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &structpb.Struct{}
	_ = &timestamp.Timestamp{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
	_ = &common.SoftwareVersion{}
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

type FilterBuilderOrCondition interface {
	_IsProbeFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsProbeFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp Probe_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      Probe_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) LowerDisplayName() *filterCndBuilderLowerDisplayName {
	return &filterCndBuilderLowerDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Status() *filterCndBuilderStatus {
	return &filterCndBuilderStatus{builder: b.builder}
}

func (b *filterCndBuilder) Memo() *filterCndBuilderMemo {
	return &filterCndBuilderMemo{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderLowerDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLowerDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLowerDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLowerDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLowerDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLowerDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLowerDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLowerDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().LowerDisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLowerDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().LowerDisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLowerDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().LowerDisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderLowerDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().LowerDisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderLowerDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().LowerDisplayName().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbeFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewProbeFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbeFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Metadata().Tags()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbeFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProbeFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ApiVersion() *filterCndBuilderMetadataOwnerReferencesApiVersion {
	return &filterCndBuilderMetadataOwnerReferencesApiVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Uid() *filterCndBuilderMetadataOwnerReferencesUid {
	return &filterCndBuilderMetadataOwnerReferencesUid{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesApiVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesApiVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().OwnerReferences().ApiVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesUid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Uid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Uid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesUid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Uid().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *syncing_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProbeFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbeFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *Probe_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *Probe_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *Probe_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *Probe_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *Probe_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *Probe_Spec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*Probe_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*Probe_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *Probe_Spec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) ProbeGroup() *filterCndBuilderSpecProbeGroup {
	return &filterCndBuilderSpecProbeGroup{builder: b.builder}
}

func (b *filterCndBuilderSpec) Device() *filterCndBuilderSpecDevice {
	return &filterCndBuilderSpecDevice{builder: b.builder}
}

func (b *filterCndBuilderSpec) Enabled() *filterCndBuilderSpecEnabled {
	return &filterCndBuilderSpecEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpec) PrimaryLocation() *filterCndBuilderSpecPrimaryLocation {
	return &filterCndBuilderSpecPrimaryLocation{builder: b.builder}
}

func (b *filterCndBuilderSpec) LocationDiscovery() *filterCndBuilderSpecLocationDiscovery {
	return &filterCndBuilderSpecLocationDiscovery{builder: b.builder}
}

func (b *filterCndBuilderSpec) ContactInfo() *filterCndBuilderSpecContactInfo {
	return &filterCndBuilderSpecContactInfo{builder: b.builder}
}

func (b *filterCndBuilderSpec) Activation() *filterCndBuilderSpecActivation {
	return &filterCndBuilderSpecActivation{builder: b.builder}
}

func (b *filterCndBuilderSpec) DisableSpeedtest() *filterCndBuilderSpecDisableSpeedtest {
	return &filterCndBuilderSpecDisableSpeedtest{builder: b.builder}
}

func (b *filterCndBuilderSpec) AccessToken() *filterCndBuilderSpecAccessToken {
	return &filterCndBuilderSpecAccessToken{builder: b.builder}
}

func (b *filterCndBuilderSpec) AgentType() *filterCndBuilderSpecAgentType {
	return &filterCndBuilderSpecAgentType{builder: b.builder}
}

func (b *filterCndBuilderSpec) ExternalIpCheckUrl() *filterCndBuilderSpecExternalIpCheckUrl {
	return &filterCndBuilderSpecExternalIpCheckUrl{builder: b.builder}
}

func (b *filterCndBuilderSpec) TargetServers() *filterCndBuilderSpecTargetServers {
	return &filterCndBuilderSpecTargetServers{builder: b.builder}
}

type filterCndBuilderSpecProbeGroup struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecProbeGroup) Eq(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecProbeGroup) Neq(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecProbeGroup) Gt(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecProbeGroup) Gte(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecProbeGroup) Lt(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecProbeGroup) Lte(value *probe_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecProbeGroup) In(values []*probe_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ProbeGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbeGroup) NotIn(values []*probe_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ProbeGroup().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecProbeGroup) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().ProbeGroup().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbeGroup) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().ProbeGroup().FieldPath(),
	})
}

func (b *filterCndBuilderSpecProbeGroup) compare(op gotenfilter.CompareOperator, value *probe_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().ProbeGroup().WithValue(value),
	})
}

type filterCndBuilderSpecDevice struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecDevice) Eq(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecDevice) Neq(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecDevice) Gt(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecDevice) Gte(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecDevice) Lt(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecDevice) Lte(value *devices_device.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecDevice) In(values []*devices_device.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Device().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDevice) NotIn(values []*devices_device.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Device().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDevice) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Device().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDevice) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Device().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDevice) compare(op gotenfilter.CompareOperator, value *devices_device.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Device().WithValue(value),
	})
}

type filterCndBuilderSpecEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().WithValue(value),
	})
}

func (b *filterCndBuilderSpecPrimaryLocation) Address() *filterCndBuilderSpecPrimaryLocationAddress {
	return &filterCndBuilderSpecPrimaryLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocation) AdminHierarchy() *filterCndBuilderSpecPrimaryLocationAdminHierarchy {
	return &filterCndBuilderSpecPrimaryLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocation) Coordinates() *filterCndBuilderSpecPrimaryLocationCoordinates {
	return &filterCndBuilderSpecPrimaryLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocation) Accuracy() *filterCndBuilderSpecPrimaryLocationAccuracy {
	return &filterCndBuilderSpecPrimaryLocationAccuracy{builder: b.builder}
}

type filterCndBuilderSpecPrimaryLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().WithValue(value),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) PostalCode() *filterCndBuilderSpecPrimaryLocationAddressPostalCode {
	return &filterCndBuilderSpecPrimaryLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) CountryCode() *filterCndBuilderSpecPrimaryLocationAddressCountryCode {
	return &filterCndBuilderSpecPrimaryLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) Continent() *filterCndBuilderSpecPrimaryLocationAddressContinent {
	return &filterCndBuilderSpecPrimaryLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) Country() *filterCndBuilderSpecPrimaryLocationAddressCountry {
	return &filterCndBuilderSpecPrimaryLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) AdminArea1() *filterCndBuilderSpecPrimaryLocationAddressAdminArea1 {
	return &filterCndBuilderSpecPrimaryLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) AdminArea2() *filterCndBuilderSpecPrimaryLocationAddressAdminArea2 {
	return &filterCndBuilderSpecPrimaryLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) AdminArea3() *filterCndBuilderSpecPrimaryLocationAddressAdminArea3 {
	return &filterCndBuilderSpecPrimaryLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) AdminArea4() *filterCndBuilderSpecPrimaryLocationAddressAdminArea4 {
	return &filterCndBuilderSpecPrimaryLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAddress) StreetAddress() *filterCndBuilderSpecPrimaryLocationAddressStreetAddress {
	return &filterCndBuilderSpecPrimaryLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderSpecPrimaryLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().Country().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Continent() *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent {
	return &filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Country() *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry {
	return &filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Admin1() *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Admin2() *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Admin3() *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Admin4() *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchy) Admin5() *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Coordinates().WithValue(value),
	})
}

type filterCndBuilderSpecPrimaryLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecPrimaryLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().PrimaryLocation().Accuracy().WithValue(value),
	})
}

type filterCndBuilderSpecLocationDiscovery struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationDiscovery) Eq(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationDiscovery) Neq(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationDiscovery) Gt(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationDiscovery) Gte(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationDiscovery) Lt(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationDiscovery) Lte(value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationDiscovery) In(values []*common.LocationDiscoverySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().LocationDiscovery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationDiscovery) NotIn(values []*common.LocationDiscoverySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().LocationDiscovery().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationDiscovery) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().LocationDiscovery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationDiscovery) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().LocationDiscovery().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationDiscovery) compare(op gotenfilter.CompareOperator, value *common.LocationDiscoverySpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().LocationDiscovery().WithValue(value),
	})
}

func (b *filterCndBuilderSpecLocationDiscovery) Type() *filterCndBuilderSpecLocationDiscoveryType {
	return &filterCndBuilderSpecLocationDiscoveryType{builder: b.builder}
}

func (b *filterCndBuilderSpecLocationDiscovery) RequiredAccuracy() *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy {
	return &filterCndBuilderSpecLocationDiscoveryRequiredAccuracy{builder: b.builder}
}

type filterCndBuilderSpecLocationDiscoveryType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationDiscoveryType) Eq(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryType) Neq(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryType) Gt(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryType) Gte(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryType) Lt(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryType) Lte(value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryType) In(values []common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().LocationDiscovery().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationDiscoveryType) NotIn(values []common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().LocationDiscovery().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationDiscoveryType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().LocationDiscovery().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationDiscoveryType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().LocationDiscovery().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationDiscoveryType) compare(op gotenfilter.CompareOperator, value common.LocationDiscoverySpec_Type) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().LocationDiscovery().Type().WithValue(value),
	})
}

type filterCndBuilderSpecLocationDiscoveryRequiredAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().LocationDiscovery().RequiredAccuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().LocationDiscovery().RequiredAccuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().LocationDiscovery().RequiredAccuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().LocationDiscovery().RequiredAccuracy().FieldPath(),
	})
}

func (b *filterCndBuilderSpecLocationDiscoveryRequiredAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().LocationDiscovery().RequiredAccuracy().WithValue(value),
	})
}

type filterCndBuilderSpecContactInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecContactInfo) Eq(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecContactInfo) Neq(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecContactInfo) Gt(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecContactInfo) Gte(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecContactInfo) Lt(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecContactInfo) Lte(value *common.ContactInformation) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecContactInfo) In(values []*common.ContactInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfo) NotIn(values []*common.ContactInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfo) compare(op gotenfilter.CompareOperator, value *common.ContactInformation) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().ContactInfo().WithValue(value),
	})
}

func (b *filterCndBuilderSpecContactInfo) FullName() *filterCndBuilderSpecContactInfoFullName {
	return &filterCndBuilderSpecContactInfoFullName{builder: b.builder}
}

func (b *filterCndBuilderSpecContactInfo) Email() *filterCndBuilderSpecContactInfoEmail {
	return &filterCndBuilderSpecContactInfoEmail{builder: b.builder}
}

func (b *filterCndBuilderSpecContactInfo) Phones() *filterCndBuilderSpecContactInfoPhones {
	return &filterCndBuilderSpecContactInfoPhones{builder: b.builder}
}

type filterCndBuilderSpecContactInfoFullName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecContactInfoFullName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecContactInfoFullName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecContactInfoFullName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecContactInfoFullName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecContactInfoFullName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecContactInfoFullName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecContactInfoFullName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().FullName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoFullName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().FullName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoFullName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().FullName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoFullName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().FullName().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoFullName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().ContactInfo().FullName().WithValue(value),
	})
}

type filterCndBuilderSpecContactInfoEmail struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecContactInfoEmail) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecContactInfoEmail) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecContactInfoEmail) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecContactInfoEmail) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecContactInfoEmail) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecContactInfoEmail) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecContactInfoEmail) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().Email().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoEmail) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().Email().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoEmail) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Email().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoEmail) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Email().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoEmail) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().ContactInfo().Email().WithValue(value),
	})
}

type filterCndBuilderSpecContactInfoPhones struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecContactInfoPhones) Eq(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecContactInfoPhones) Neq(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecContactInfoPhones) Gt(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecContactInfoPhones) Gte(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecContactInfoPhones) Lt(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecContactInfoPhones) Lte(value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecContactInfoPhones) In(values [][]*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoPhones) NotIn(values [][]*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoPhones) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoPhones) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoPhones) Contains(value *common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().FieldPath(),
		Value:     NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecContactInfoPhones) ContainsAnyOf(values []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Spec().ContactInfo().Phones()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecContactInfoPhones) ContainsAll(values []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Spec().ContactInfo().Phones()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecContactInfoPhones) compare(op gotenfilter.CompareOperator, value []*common.ContactInformation_PhoneNumber) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().WithValue(value),
	})
}

func (b *filterCndBuilderSpecContactInfoPhones) Number() *filterCndBuilderSpecContactInfoPhonesNumber {
	return &filterCndBuilderSpecContactInfoPhonesNumber{builder: b.builder}
}

func (b *filterCndBuilderSpecContactInfoPhones) Type() *filterCndBuilderSpecContactInfoPhonesType {
	return &filterCndBuilderSpecContactInfoPhonesType{builder: b.builder}
}

type filterCndBuilderSpecContactInfoPhonesNumber struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Number().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Number().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Number().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Number().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoPhonesNumber) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Number().WithValue(value),
	})
}

type filterCndBuilderSpecContactInfoPhonesType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecContactInfoPhonesType) Eq(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesType) Neq(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesType) Gt(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesType) Gte(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesType) Lt(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesType) Lte(value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecContactInfoPhonesType) In(values []common.ContactInformation_PhoneType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoPhonesType) NotIn(values []common.ContactInformation_PhoneType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecContactInfoPhonesType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoPhonesType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecContactInfoPhonesType) compare(op gotenfilter.CompareOperator, value common.ContactInformation_PhoneType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().ContactInfo().Phones().Type().WithValue(value),
	})
}

type filterCndBuilderSpecActivation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecActivation) Eq(value *Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecActivation) Neq(value *Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecActivation) Gt(value *Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecActivation) Gte(value *Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecActivation) Lt(value *Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecActivation) Lte(value *Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecActivation) In(values []*Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivation) NotIn(values []*Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivation) compare(op gotenfilter.CompareOperator, value *Probe_Spec_ActivationSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Activation().WithValue(value),
	})
}

func (b *filterCndBuilderSpecActivation) Type() *filterCndBuilderSpecActivationType {
	return &filterCndBuilderSpecActivationType{builder: b.builder}
}

func (b *filterCndBuilderSpecActivation) Token() *filterCndBuilderSpecActivationToken {
	return &filterCndBuilderSpecActivationToken{builder: b.builder}
}

func (b *filterCndBuilderSpecActivation) SendInvitationOnCreate() *filterCndBuilderSpecActivationSendInvitationOnCreate {
	return &filterCndBuilderSpecActivationSendInvitationOnCreate{builder: b.builder}
}

func (b *filterCndBuilderSpecActivation) InvitationExtras() *filterCndBuilderSpecActivationInvitationExtras {
	return &filterCndBuilderSpecActivationInvitationExtras{builder: b.builder}
}

func (b *filterCndBuilderSpecActivation) ReusableToken() *filterCndBuilderSpecActivationReusableToken {
	return &filterCndBuilderSpecActivationReusableToken{builder: b.builder}
}

type filterCndBuilderSpecActivationType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecActivationType) Eq(value Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecActivationType) Neq(value Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecActivationType) Gt(value Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecActivationType) Gte(value Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecActivationType) Lt(value Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecActivationType) Lte(value Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecActivationType) In(values []Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationType) NotIn(values []Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().Type().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().Type().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationType) compare(op gotenfilter.CompareOperator, value Probe_Spec_ActivationSpec_ActivationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Activation().Type().WithValue(value),
	})
}

type filterCndBuilderSpecActivationToken struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecActivationToken) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecActivationToken) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecActivationToken) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecActivationToken) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecActivationToken) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecActivationToken) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecActivationToken) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().Token().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationToken) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().Token().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationToken) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().Token().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationToken) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().Token().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationToken) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Activation().Token().WithValue(value),
	})
}

type filterCndBuilderSpecActivationSendInvitationOnCreate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().SendInvitationOnCreate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().SendInvitationOnCreate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().SendInvitationOnCreate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().SendInvitationOnCreate().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationSendInvitationOnCreate) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Activation().SendInvitationOnCreate().WithValue(value),
	})
}

type filterCndBuilderSpecActivationInvitationExtras struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecActivationInvitationExtras) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecActivationInvitationExtras) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecActivationInvitationExtras) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecActivationInvitationExtras) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecActivationInvitationExtras) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecActivationInvitationExtras) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecActivationInvitationExtras) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationInvitationExtras) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationInvitationExtras) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationInvitationExtras) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationInvitationExtras) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().WithValue(value),
	})
}

func (b *filterCndBuilderSpecActivationInvitationExtras) WithKey(key string) *mapFilterCndBuilderSpecActivationInvitationExtras {
	return &mapFilterCndBuilderSpecActivationInvitationExtras{builder: b.builder, key: key}
}

type mapFilterCndBuilderSpecActivationInvitationExtras struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderSpecActivationInvitationExtras) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Activation().InvitationExtras().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderSpecActivationReusableToken struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecActivationReusableToken) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecActivationReusableToken) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecActivationReusableToken) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecActivationReusableToken) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecActivationReusableToken) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecActivationReusableToken) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecActivationReusableToken) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().ReusableToken().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationReusableToken) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().Activation().ReusableToken().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecActivationReusableToken) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().ReusableToken().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationReusableToken) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().Activation().ReusableToken().FieldPath(),
	})
}

func (b *filterCndBuilderSpecActivationReusableToken) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().Activation().ReusableToken().WithValue(value),
	})
}

type filterCndBuilderSpecDisableSpeedtest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecDisableSpeedtest) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecDisableSpeedtest) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecDisableSpeedtest) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecDisableSpeedtest) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecDisableSpeedtest) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecDisableSpeedtest) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecDisableSpeedtest) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().DisableSpeedtest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDisableSpeedtest) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().DisableSpeedtest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecDisableSpeedtest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().DisableSpeedtest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDisableSpeedtest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().DisableSpeedtest().FieldPath(),
	})
}

func (b *filterCndBuilderSpecDisableSpeedtest) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().DisableSpeedtest().WithValue(value),
	})
}

type filterCndBuilderSpecAccessToken struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAccessToken) Eq(value *Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAccessToken) Neq(value *Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAccessToken) Gt(value *Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAccessToken) Gte(value *Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAccessToken) Lt(value *Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAccessToken) Lte(value *Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAccessToken) In(values []*Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().AccessToken().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAccessToken) NotIn(values []*Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().AccessToken().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAccessToken) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().AccessToken().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAccessToken) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().AccessToken().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAccessToken) compare(op gotenfilter.CompareOperator, value *Probe_Spec_AccessTokenSpec) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().AccessToken().WithValue(value),
	})
}

func (b *filterCndBuilderSpecAccessToken) Enable() *filterCndBuilderSpecAccessTokenEnable {
	return &filterCndBuilderSpecAccessTokenEnable{builder: b.builder}
}

func (b *filterCndBuilderSpecAccessToken) AccessToken() *filterCndBuilderSpecAccessTokenAccessToken {
	return &filterCndBuilderSpecAccessTokenAccessToken{builder: b.builder}
}

type filterCndBuilderSpecAccessTokenEnable struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAccessTokenEnable) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAccessTokenEnable) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAccessTokenEnable) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAccessTokenEnable) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAccessTokenEnable) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAccessTokenEnable) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAccessTokenEnable) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().AccessToken().Enable().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAccessTokenEnable) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().AccessToken().Enable().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAccessTokenEnable) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().AccessToken().Enable().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAccessTokenEnable) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().AccessToken().Enable().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAccessTokenEnable) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().AccessToken().Enable().WithValue(value),
	})
}

type filterCndBuilderSpecAccessTokenAccessToken struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().AccessToken().AccessToken().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().AccessToken().AccessToken().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().AccessToken().AccessToken().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().AccessToken().AccessToken().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAccessTokenAccessToken) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().AccessToken().AccessToken().WithValue(value),
	})
}

type filterCndBuilderSpecAgentType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecAgentType) Eq(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecAgentType) Neq(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecAgentType) Gt(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecAgentType) Gte(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecAgentType) Lt(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecAgentType) Lte(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecAgentType) In(values []Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().AgentType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAgentType) NotIn(values []Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().AgentType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecAgentType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().AgentType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAgentType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().AgentType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecAgentType) compare(op gotenfilter.CompareOperator, value Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().AgentType().WithValue(value),
	})
}

type filterCndBuilderSpecExternalIpCheckUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().FieldPath(),
	})
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().FieldPath(),
		Value:     NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().WithItemValue(value),
	})
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderSpecExternalIpCheckUrl) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().ExternalIpCheckUrl().WithValue(value),
	})
}

type filterCndBuilderSpecTargetServers struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServers) Eq(value *Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServers) Neq(value *Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServers) Gt(value *Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServers) Gte(value *Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServers) Lt(value *Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServers) Lte(value *Probe_Spec_TargetServers) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServers) In(values []*Probe_Spec_TargetServers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServers) NotIn(values []*Probe_Spec_TargetServers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServers) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServers) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServers) compare(op gotenfilter.CompareOperator, value *Probe_Spec_TargetServers) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetServers) IcmpTarget() *filterCndBuilderSpecTargetServersIcmpTarget {
	return &filterCndBuilderSpecTargetServersIcmpTarget{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetServers) UdpTarget() *filterCndBuilderSpecTargetServersUdpTarget {
	return &filterCndBuilderSpecTargetServersUdpTarget{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetServers) SpeedTestTarget() *filterCndBuilderSpecTargetServersSpeedTestTarget {
	return &filterCndBuilderSpecTargetServersSpeedTestTarget{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetServers) TargetAddressType() *filterCndBuilderSpecTargetServersTargetAddressType {
	return &filterCndBuilderSpecTargetServersTargetAddressType{builder: b.builder}
}

type filterCndBuilderSpecTargetServersIcmpTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) Eq(value *Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) Neq(value *Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) Gt(value *Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) Gte(value *Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) Lt(value *Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) Lte(value *Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) In(values []*Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) NotIn(values []*Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) compare(op gotenfilter.CompareOperator, value *Probe_Spec_TargetServers_IcmpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTarget) Enabled() *filterCndBuilderSpecTargetServersIcmpTargetEnabled {
	return &filterCndBuilderSpecTargetServersIcmpTargetEnabled{builder: b.builder}
}

type filterCndBuilderSpecTargetServersIcmpTargetEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersIcmpTargetEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().IcmpTarget().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecTargetServersUdpTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) Eq(value *Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) Neq(value *Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) Gt(value *Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) Gte(value *Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) Lt(value *Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) Lte(value *Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) In(values []*Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) NotIn(values []*Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) compare(op gotenfilter.CompareOperator, value *Probe_Spec_TargetServers_UdpTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) Enabled() *filterCndBuilderSpecTargetServersUdpTargetEnabled {
	return &filterCndBuilderSpecTargetServersUdpTargetEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetServersUdpTarget) Port() *filterCndBuilderSpecTargetServersUdpTargetPort {
	return &filterCndBuilderSpecTargetServersUdpTargetPort{builder: b.builder}
}

type filterCndBuilderSpecTargetServersUdpTargetEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTargetEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecTargetServersUdpTargetPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Port().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Port().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Port().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Port().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersUdpTargetPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().UdpTarget().Port().WithValue(value),
	})
}

type filterCndBuilderSpecTargetServersSpeedTestTarget struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) Eq(value *Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) Neq(value *Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) Gt(value *Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) Gte(value *Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) Lt(value *Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) Lte(value *Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) In(values []*Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) NotIn(values []*Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) compare(op gotenfilter.CompareOperator, value *Probe_Spec_TargetServers_SpeedTestTarget) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().WithValue(value),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) Enabled() *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled {
	return &filterCndBuilderSpecTargetServersSpeedTestTargetEnabled{builder: b.builder}
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTarget) TcpPort() *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort {
	return &filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort{builder: b.builder}
}

type filterCndBuilderSpecTargetServersSpeedTestTargetEnabled struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().Enabled().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().Enabled().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetEnabled) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().Enabled().WithValue(value),
	})
}

type filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().TcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().TcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().TcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().TcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersSpeedTestTargetTcpPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().SpeedTestTarget().TcpPort().WithValue(value),
	})
}

type filterCndBuilderSpecTargetServersTargetAddressType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) Eq(value Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) Neq(value Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) Gt(value Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) Gte(value Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) Lt(value Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) Lte(value Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) In(values []Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().TargetAddressType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) NotIn(values []Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Spec().TargetServers().TargetAddressType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().TargetAddressType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Spec().TargetServers().TargetAddressType().FieldPath(),
	})
}

func (b *filterCndBuilderSpecTargetServersTargetAddressType) compare(op gotenfilter.CompareOperator, value Probe_Spec_TargetServers_TargetIPAddressType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Spec().TargetServers().TargetAddressType().WithValue(value),
	})
}

type filterCndBuilderStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatus) Eq(value *Probe_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatus) Neq(value *Probe_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatus) Gt(value *Probe_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatus) Gte(value *Probe_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatus) Lt(value *Probe_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatus) Lte(value *Probe_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatus) In(values []*Probe_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) NotIn(values []*Probe_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatus) compare(op gotenfilter.CompareOperator, value *Probe_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().WithValue(value),
	})
}

func (b *filterCndBuilderStatus) ExternalIpAddressV4() *filterCndBuilderStatusExternalIpAddressV4 {
	return &filterCndBuilderStatusExternalIpAddressV4{builder: b.builder}
}

func (b *filterCndBuilderStatus) ExternalIpAddressV6() *filterCndBuilderStatusExternalIpAddressV6 {
	return &filterCndBuilderStatusExternalIpAddressV6{builder: b.builder}
}

func (b *filterCndBuilderStatus) ExternalHostname() *filterCndBuilderStatusExternalHostname {
	return &filterCndBuilderStatusExternalHostname{builder: b.builder}
}

func (b *filterCndBuilderStatus) AsInfo() *filterCndBuilderStatusAsInfo {
	return &filterCndBuilderStatusAsInfo{builder: b.builder}
}

func (b *filterCndBuilderStatus) Carrier() *filterCndBuilderStatusCarrier {
	return &filterCndBuilderStatusCarrier{builder: b.builder}
}

func (b *filterCndBuilderStatus) ActiveLocation() *filterCndBuilderStatusActiveLocation {
	return &filterCndBuilderStatusActiveLocation{builder: b.builder}
}

func (b *filterCndBuilderStatus) DiscoveredLocation() *filterCndBuilderStatusDiscoveredLocation {
	return &filterCndBuilderStatusDiscoveredLocation{builder: b.builder}
}

func (b *filterCndBuilderStatus) SoftwareVersion() *filterCndBuilderStatusSoftwareVersion {
	return &filterCndBuilderStatusSoftwareVersion{builder: b.builder}
}

func (b *filterCndBuilderStatus) SystemInfo() *filterCndBuilderStatusSystemInfo {
	return &filterCndBuilderStatusSystemInfo{builder: b.builder}
}

func (b *filterCndBuilderStatus) Activation() *filterCndBuilderStatusActivation {
	return &filterCndBuilderStatusActivation{builder: b.builder}
}

func (b *filterCndBuilderStatus) Connection() *filterCndBuilderStatusConnection {
	return &filterCndBuilderStatusConnection{builder: b.builder}
}

func (b *filterCndBuilderStatus) ConnectionStatusChangeTime() *filterCndBuilderStatusConnectionStatusChangeTime {
	return &filterCndBuilderStatusConnectionStatusChangeTime{builder: b.builder}
}

func (b *filterCndBuilderStatus) Bandwidth() *filterCndBuilderStatusBandwidth {
	return &filterCndBuilderStatusBandwidth{builder: b.builder}
}

func (b *filterCndBuilderStatus) NetworkInterfaces() *filterCndBuilderStatusNetworkInterfaces {
	return &filterCndBuilderStatusNetworkInterfaces{builder: b.builder}
}

func (b *filterCndBuilderStatus) AgentType() *filterCndBuilderStatusAgentType {
	return &filterCndBuilderStatusAgentType{builder: b.builder}
}

type filterCndBuilderStatusExternalIpAddressV4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusExternalIpAddressV4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ExternalIpAddressV4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusExternalIpAddressV4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ExternalIpAddressV4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusExternalIpAddressV4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ExternalIpAddressV4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusExternalIpAddressV4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ExternalIpAddressV4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusExternalIpAddressV4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ExternalIpAddressV4().WithValue(value),
	})
}

type filterCndBuilderStatusExternalIpAddressV6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusExternalIpAddressV6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusExternalIpAddressV6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ExternalIpAddressV6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusExternalIpAddressV6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ExternalIpAddressV6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusExternalIpAddressV6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ExternalIpAddressV6().FieldPath(),
	})
}

func (b *filterCndBuilderStatusExternalIpAddressV6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ExternalIpAddressV6().FieldPath(),
	})
}

func (b *filterCndBuilderStatusExternalIpAddressV6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ExternalIpAddressV6().WithValue(value),
	})
}

type filterCndBuilderStatusExternalHostname struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusExternalHostname) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusExternalHostname) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusExternalHostname) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusExternalHostname) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusExternalHostname) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusExternalHostname) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusExternalHostname) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ExternalHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusExternalHostname) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ExternalHostname().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusExternalHostname) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ExternalHostname().FieldPath(),
	})
}

func (b *filterCndBuilderStatusExternalHostname) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ExternalHostname().FieldPath(),
	})
}

func (b *filterCndBuilderStatusExternalHostname) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ExternalHostname().WithValue(value),
	})
}

type filterCndBuilderStatusAsInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAsInfo) Eq(value *common.ASInfo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAsInfo) Neq(value *common.ASInfo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAsInfo) Gt(value *common.ASInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAsInfo) Gte(value *common.ASInfo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAsInfo) Lt(value *common.ASInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAsInfo) Lte(value *common.ASInfo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAsInfo) In(values []*common.ASInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfo) NotIn(values []*common.ASInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfo) compare(op gotenfilter.CompareOperator, value *common.ASInfo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().AsInfo().WithValue(value),
	})
}

func (b *filterCndBuilderStatusAsInfo) Asn() *filterCndBuilderStatusAsInfoAsn {
	return &filterCndBuilderStatusAsInfoAsn{builder: b.builder}
}

func (b *filterCndBuilderStatusAsInfo) Name() *filterCndBuilderStatusAsInfoName {
	return &filterCndBuilderStatusAsInfoName{builder: b.builder}
}

func (b *filterCndBuilderStatusAsInfo) Domain() *filterCndBuilderStatusAsInfoDomain {
	return &filterCndBuilderStatusAsInfoDomain{builder: b.builder}
}

func (b *filterCndBuilderStatusAsInfo) Routes() *filterCndBuilderStatusAsInfoRoutes {
	return &filterCndBuilderStatusAsInfoRoutes{builder: b.builder}
}

func (b *filterCndBuilderStatusAsInfo) AsnType() *filterCndBuilderStatusAsInfoAsnType {
	return &filterCndBuilderStatusAsInfoAsnType{builder: b.builder}
}

type filterCndBuilderStatusAsInfoAsn struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAsInfoAsn) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAsInfoAsn) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAsInfoAsn) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAsInfoAsn) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAsInfoAsn) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAsInfoAsn) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAsInfoAsn) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().Asn().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoAsn) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().Asn().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoAsn) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Asn().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoAsn) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Asn().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoAsn) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().AsInfo().Asn().WithValue(value),
	})
}

type filterCndBuilderStatusAsInfoName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAsInfoName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAsInfoName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAsInfoName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAsInfoName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAsInfoName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAsInfoName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAsInfoName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().AsInfo().Name().WithValue(value),
	})
}

type filterCndBuilderStatusAsInfoDomain struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAsInfoDomain) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAsInfoDomain) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAsInfoDomain) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAsInfoDomain) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAsInfoDomain) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAsInfoDomain) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAsInfoDomain) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().Domain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoDomain) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().Domain().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoDomain) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Domain().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoDomain) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Domain().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoDomain) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().AsInfo().Domain().WithValue(value),
	})
}

type filterCndBuilderStatusAsInfoRoutes struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAsInfoRoutes) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAsInfoRoutes) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAsInfoRoutes) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAsInfoRoutes) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAsInfoRoutes) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAsInfoRoutes) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAsInfoRoutes) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoRoutes) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().Routes().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoRoutes) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoRoutes) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Routes().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoRoutes) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Routes().FieldPath(),
		Value:     NewProbeFieldPathBuilder().Status().AsInfo().Routes().WithItemValue(value),
	})
}

func (b *filterCndBuilderStatusAsInfoRoutes) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Status().AsInfo().Routes()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusAsInfoRoutes) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Status().AsInfo().Routes()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().Routes().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderStatusAsInfoRoutes) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().AsInfo().Routes().WithValue(value),
	})
}

type filterCndBuilderStatusAsInfoAsnType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAsInfoAsnType) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAsInfoAsnType) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAsInfoAsnType) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAsInfoAsnType) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAsInfoAsnType) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAsInfoAsnType) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAsInfoAsnType) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().AsnType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoAsnType) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AsInfo().AsnType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAsInfoAsnType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().AsnType().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoAsnType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().AsInfo().AsnType().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAsInfoAsnType) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().AsInfo().AsnType().WithValue(value),
	})
}

type filterCndBuilderStatusCarrier struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusCarrier) Eq(value *common.Carrier) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusCarrier) Neq(value *common.Carrier) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusCarrier) Gt(value *common.Carrier) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusCarrier) Gte(value *common.Carrier) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusCarrier) Lt(value *common.Carrier) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusCarrier) Lte(value *common.Carrier) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusCarrier) In(values []*common.Carrier) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrier) NotIn(values []*common.Carrier) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrier) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrier) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrier) compare(op gotenfilter.CompareOperator, value *common.Carrier) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Carrier().WithValue(value),
	})
}

func (b *filterCndBuilderStatusCarrier) Name() *filterCndBuilderStatusCarrierName {
	return &filterCndBuilderStatusCarrierName{builder: b.builder}
}

func (b *filterCndBuilderStatusCarrier) MobileCountryCode() *filterCndBuilderStatusCarrierMobileCountryCode {
	return &filterCndBuilderStatusCarrierMobileCountryCode{builder: b.builder}
}

func (b *filterCndBuilderStatusCarrier) MobileNetworkCode() *filterCndBuilderStatusCarrierMobileNetworkCode {
	return &filterCndBuilderStatusCarrierMobileNetworkCode{builder: b.builder}
}

func (b *filterCndBuilderStatusCarrier) LocationAreaCode() *filterCndBuilderStatusCarrierLocationAreaCode {
	return &filterCndBuilderStatusCarrierLocationAreaCode{builder: b.builder}
}

type filterCndBuilderStatusCarrierName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusCarrierName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusCarrierName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusCarrierName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusCarrierName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusCarrierName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusCarrierName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusCarrierName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrierName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrierName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrierName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrierName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Carrier().Name().WithValue(value),
	})
}

type filterCndBuilderStatusCarrierMobileCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().MobileCountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().MobileCountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().MobileCountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().MobileCountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrierMobileCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Carrier().MobileCountryCode().WithValue(value),
	})
}

type filterCndBuilderStatusCarrierMobileNetworkCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().MobileNetworkCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().MobileNetworkCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().MobileNetworkCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().MobileNetworkCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrierMobileNetworkCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Carrier().MobileNetworkCode().WithValue(value),
	})
}

type filterCndBuilderStatusCarrierLocationAreaCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().LocationAreaCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Carrier().LocationAreaCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().LocationAreaCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Carrier().LocationAreaCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusCarrierLocationAreaCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Carrier().LocationAreaCode().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().WithValue(value),
	})
}

func (b *filterCndBuilderStatusActiveLocation) Address() *filterCndBuilderStatusActiveLocationAddress {
	return &filterCndBuilderStatusActiveLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocation) AdminHierarchy() *filterCndBuilderStatusActiveLocationAdminHierarchy {
	return &filterCndBuilderStatusActiveLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocation) Coordinates() *filterCndBuilderStatusActiveLocationCoordinates {
	return &filterCndBuilderStatusActiveLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocation) Accuracy() *filterCndBuilderStatusActiveLocationAccuracy {
	return &filterCndBuilderStatusActiveLocationAccuracy{builder: b.builder}
}

type filterCndBuilderStatusActiveLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().WithValue(value),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddress) PostalCode() *filterCndBuilderStatusActiveLocationAddressPostalCode {
	return &filterCndBuilderStatusActiveLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAddress) CountryCode() *filterCndBuilderStatusActiveLocationAddressCountryCode {
	return &filterCndBuilderStatusActiveLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAddress) Continent() *filterCndBuilderStatusActiveLocationAddressContinent {
	return &filterCndBuilderStatusActiveLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAddress) Country() *filterCndBuilderStatusActiveLocationAddressCountry {
	return &filterCndBuilderStatusActiveLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAddress) AdminArea1() *filterCndBuilderStatusActiveLocationAddressAdminArea1 {
	return &filterCndBuilderStatusActiveLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAddress) AdminArea2() *filterCndBuilderStatusActiveLocationAddressAdminArea2 {
	return &filterCndBuilderStatusActiveLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAddress) AdminArea3() *filterCndBuilderStatusActiveLocationAddressAdminArea3 {
	return &filterCndBuilderStatusActiveLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAddress) AdminArea4() *filterCndBuilderStatusActiveLocationAddressAdminArea4 {
	return &filterCndBuilderStatusActiveLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAddress) StreetAddress() *filterCndBuilderStatusActiveLocationAddressStreetAddress {
	return &filterCndBuilderStatusActiveLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderStatusActiveLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().Country().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Continent() *filterCndBuilderStatusActiveLocationAdminHierarchyContinent {
	return &filterCndBuilderStatusActiveLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Country() *filterCndBuilderStatusActiveLocationAdminHierarchyCountry {
	return &filterCndBuilderStatusActiveLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Admin1() *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Admin2() *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Admin3() *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Admin4() *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchy) Admin5() *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderStatusActiveLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Coordinates().WithValue(value),
	})
}

type filterCndBuilderStatusActiveLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ActiveLocation().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ActiveLocation().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActiveLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ActiveLocation().Accuracy().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocation) Address() *filterCndBuilderStatusDiscoveredLocationAddress {
	return &filterCndBuilderStatusDiscoveredLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocation) AdminHierarchy() *filterCndBuilderStatusDiscoveredLocationAdminHierarchy {
	return &filterCndBuilderStatusDiscoveredLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocation) Coordinates() *filterCndBuilderStatusDiscoveredLocationCoordinates {
	return &filterCndBuilderStatusDiscoveredLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocation) Accuracy() *filterCndBuilderStatusDiscoveredLocationAccuracy {
	return &filterCndBuilderStatusDiscoveredLocationAccuracy{builder: b.builder}
}

type filterCndBuilderStatusDiscoveredLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) PostalCode() *filterCndBuilderStatusDiscoveredLocationAddressPostalCode {
	return &filterCndBuilderStatusDiscoveredLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) CountryCode() *filterCndBuilderStatusDiscoveredLocationAddressCountryCode {
	return &filterCndBuilderStatusDiscoveredLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) Continent() *filterCndBuilderStatusDiscoveredLocationAddressContinent {
	return &filterCndBuilderStatusDiscoveredLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) Country() *filterCndBuilderStatusDiscoveredLocationAddressCountry {
	return &filterCndBuilderStatusDiscoveredLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) AdminArea1() *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1 {
	return &filterCndBuilderStatusDiscoveredLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) AdminArea2() *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2 {
	return &filterCndBuilderStatusDiscoveredLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) AdminArea3() *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3 {
	return &filterCndBuilderStatusDiscoveredLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) AdminArea4() *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4 {
	return &filterCndBuilderStatusDiscoveredLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAddress) StreetAddress() *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress {
	return &filterCndBuilderStatusDiscoveredLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderStatusDiscoveredLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().Country().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Continent() *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent {
	return &filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Country() *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry {
	return &filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Admin1() *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Admin2() *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Admin3() *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Admin4() *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchy) Admin5() *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Coordinates().WithValue(value),
	})
}

type filterCndBuilderStatusDiscoveredLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderStatusDiscoveredLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().DiscoveredLocation().Accuracy().WithValue(value),
	})
}

type filterCndBuilderStatusSoftwareVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSoftwareVersion) Eq(value *common.SoftwareVersion) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSoftwareVersion) Neq(value *common.SoftwareVersion) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSoftwareVersion) Gt(value *common.SoftwareVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSoftwareVersion) Gte(value *common.SoftwareVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSoftwareVersion) Lt(value *common.SoftwareVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSoftwareVersion) Lte(value *common.SoftwareVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSoftwareVersion) In(values []*common.SoftwareVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SoftwareVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSoftwareVersion) NotIn(values []*common.SoftwareVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SoftwareVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSoftwareVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SoftwareVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSoftwareVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SoftwareVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSoftwareVersion) compare(op gotenfilter.CompareOperator, value *common.SoftwareVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SoftwareVersion().WithValue(value),
	})
}

func (b *filterCndBuilderStatusSoftwareVersion) Version() *filterCndBuilderStatusSoftwareVersionVersion {
	return &filterCndBuilderStatusSoftwareVersionVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusSoftwareVersion) CommitId() *filterCndBuilderStatusSoftwareVersionCommitId {
	return &filterCndBuilderStatusSoftwareVersionCommitId{builder: b.builder}
}

func (b *filterCndBuilderStatusSoftwareVersion) BuildDate() *filterCndBuilderStatusSoftwareVersionBuildDate {
	return &filterCndBuilderStatusSoftwareVersionBuildDate{builder: b.builder}
}

type filterCndBuilderStatusSoftwareVersionVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SoftwareVersion().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SoftwareVersion().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SoftwareVersion().Version().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SoftwareVersion().Version().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SoftwareVersion().Version().WithValue(value),
	})
}

type filterCndBuilderStatusSoftwareVersionCommitId struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SoftwareVersion().CommitId().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SoftwareVersion().CommitId().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SoftwareVersion().CommitId().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SoftwareVersion().CommitId().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionCommitId) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SoftwareVersion().CommitId().WithValue(value),
	})
}

type filterCndBuilderStatusSoftwareVersionBuildDate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SoftwareVersion().BuildDate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SoftwareVersion().BuildDate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SoftwareVersion().BuildDate().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SoftwareVersion().BuildDate().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSoftwareVersionBuildDate) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SoftwareVersion().BuildDate().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfo) Eq(value *Probe_Status_System) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfo) Neq(value *Probe_Status_System) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfo) Gt(value *Probe_Status_System) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfo) Gte(value *Probe_Status_System) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfo) Lt(value *Probe_Status_System) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfo) Lte(value *Probe_Status_System) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfo) In(values []*Probe_Status_System) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfo) NotIn(values []*Probe_Status_System) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfo) compare(op gotenfilter.CompareOperator, value *Probe_Status_System) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().WithValue(value),
	})
}

func (b *filterCndBuilderStatusSystemInfo) Manufacturer() *filterCndBuilderStatusSystemInfoManufacturer {
	return &filterCndBuilderStatusSystemInfoManufacturer{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfo) Model() *filterCndBuilderStatusSystemInfoModel {
	return &filterCndBuilderStatusSystemInfoModel{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfo) Sku() *filterCndBuilderStatusSystemInfoSku {
	return &filterCndBuilderStatusSystemInfoSku{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfo) Family() *filterCndBuilderStatusSystemInfoFamily {
	return &filterCndBuilderStatusSystemInfoFamily{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfo) SerialNumber() *filterCndBuilderStatusSystemInfoSerialNumber {
	return &filterCndBuilderStatusSystemInfoSerialNumber{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfo) Platform() *filterCndBuilderStatusSystemInfoPlatform {
	return &filterCndBuilderStatusSystemInfoPlatform{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfo) Architecture() *filterCndBuilderStatusSystemInfoArchitecture {
	return &filterCndBuilderStatusSystemInfoArchitecture{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfo) Os() *filterCndBuilderStatusSystemInfoOs {
	return &filterCndBuilderStatusSystemInfoOs{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfo) HostName() *filterCndBuilderStatusSystemInfoHostName {
	return &filterCndBuilderStatusSystemInfoHostName{builder: b.builder}
}

type filterCndBuilderStatusSystemInfoManufacturer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Manufacturer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Manufacturer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Manufacturer().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Manufacturer().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoManufacturer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Manufacturer().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoModel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoModel) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoModel) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoModel) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoModel) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoModel) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoModel) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoModel) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Model().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoModel) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Model().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoModel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Model().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoModel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Model().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoModel) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Model().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoSku struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoSku) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoSku) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoSku) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoSku) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoSku) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoSku) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoSku) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Sku().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoSku) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Sku().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoSku) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Sku().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoSku) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Sku().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoSku) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Sku().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoFamily struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoFamily) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoFamily) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoFamily) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoFamily) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoFamily) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoFamily) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoFamily) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Family().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoFamily) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Family().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoFamily) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Family().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoFamily) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Family().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoFamily) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Family().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoSerialNumber struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().SerialNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().SerialNumber().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().SerialNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().SerialNumber().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoSerialNumber) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().SerialNumber().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoPlatform struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoPlatform) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoPlatform) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoPlatform) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoPlatform) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoPlatform) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoPlatform) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoPlatform) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Platform().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoPlatform) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Platform().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoPlatform) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Platform().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoPlatform) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Platform().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoPlatform) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Platform().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoArchitecture struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Architecture().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Architecture().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Architecture().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Architecture().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoArchitecture) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Architecture().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoOs struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoOs) Eq(value *Probe_Status_System_OS) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoOs) Neq(value *Probe_Status_System_OS) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoOs) Gt(value *Probe_Status_System_OS) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoOs) Gte(value *Probe_Status_System_OS) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoOs) Lt(value *Probe_Status_System_OS) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoOs) Lte(value *Probe_Status_System_OS) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoOs) In(values []*Probe_Status_System_OS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOs) NotIn(values []*Probe_Status_System_OS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOs) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOs) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOs) compare(op gotenfilter.CompareOperator, value *Probe_Status_System_OS) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Os().WithValue(value),
	})
}

func (b *filterCndBuilderStatusSystemInfoOs) Name() *filterCndBuilderStatusSystemInfoOsName {
	return &filterCndBuilderStatusSystemInfoOsName{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfoOs) Version() *filterCndBuilderStatusSystemInfoOsVersion {
	return &filterCndBuilderStatusSystemInfoOsVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfoOs) BuildVersion() *filterCndBuilderStatusSystemInfoOsBuildVersion {
	return &filterCndBuilderStatusSystemInfoOsBuildVersion{builder: b.builder}
}

func (b *filterCndBuilderStatusSystemInfoOs) Kernel() *filterCndBuilderStatusSystemInfoOsKernel {
	return &filterCndBuilderStatusSystemInfoOsKernel{builder: b.builder}
}

type filterCndBuilderStatusSystemInfoOsName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoOsName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoOsName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoOsName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoOsName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoOsName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoOsName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoOsName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Name().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Name().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoOsVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Version().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Version().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Version().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoOsBuildVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().BuildVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().BuildVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().BuildVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().BuildVersion().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsBuildVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Os().BuildVersion().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoOsKernel struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Kernel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Kernel().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Kernel().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Kernel().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoOsKernel) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().Os().Kernel().WithValue(value),
	})
}

type filterCndBuilderStatusSystemInfoHostName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusSystemInfoHostName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusSystemInfoHostName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusSystemInfoHostName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusSystemInfoHostName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusSystemInfoHostName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusSystemInfoHostName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusSystemInfoHostName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().HostName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoHostName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().SystemInfo().HostName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusSystemInfoHostName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().HostName().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoHostName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().SystemInfo().HostName().FieldPath(),
	})
}

func (b *filterCndBuilderStatusSystemInfoHostName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().SystemInfo().HostName().WithValue(value),
	})
}

type filterCndBuilderStatusActivation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivation) Eq(value *Probe_Status_ActivationState) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivation) Neq(value *Probe_Status_ActivationState) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivation) Gt(value *Probe_Status_ActivationState) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivation) Gte(value *Probe_Status_ActivationState) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivation) Lt(value *Probe_Status_ActivationState) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivation) Lte(value *Probe_Status_ActivationState) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivation) In(values []*Probe_Status_ActivationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivation) NotIn(values []*Probe_Status_ActivationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivation) compare(op gotenfilter.CompareOperator, value *Probe_Status_ActivationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().WithValue(value),
	})
}

func (b *filterCndBuilderStatusActivation) Status() *filterCndBuilderStatusActivationStatus {
	return &filterCndBuilderStatusActivationStatus{builder: b.builder}
}

func (b *filterCndBuilderStatusActivation) CurrentSession() *filterCndBuilderStatusActivationCurrentSession {
	return &filterCndBuilderStatusActivationCurrentSession{builder: b.builder}
}

func (b *filterCndBuilderStatusActivation) ServiceAccount() *filterCndBuilderStatusActivationServiceAccount {
	return &filterCndBuilderStatusActivationServiceAccount{builder: b.builder}
}

func (b *filterCndBuilderStatusActivation) LastInvitation() *filterCndBuilderStatusActivationLastInvitation {
	return &filterCndBuilderStatusActivationLastInvitation{builder: b.builder}
}

type filterCndBuilderStatusActivationStatus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivationStatus) Eq(value Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivationStatus) Neq(value Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivationStatus) Gt(value Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivationStatus) Gte(value Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivationStatus) Lt(value Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivationStatus) Lte(value Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivationStatus) In(values []Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationStatus) NotIn(values []Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().Status().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationStatus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationStatus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().Status().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationStatus) compare(op gotenfilter.CompareOperator, value Probe_Status_ActivationState_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().Status().WithValue(value),
	})
}

type filterCndBuilderStatusActivationCurrentSession struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivationCurrentSession) Eq(value *Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivationCurrentSession) Neq(value *Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivationCurrentSession) Gt(value *Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivationCurrentSession) Gte(value *Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivationCurrentSession) Lt(value *Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivationCurrentSession) Lte(value *Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivationCurrentSession) In(values []*Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSession) NotIn(values []*Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSession) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSession) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSession) compare(op gotenfilter.CompareOperator, value *Probe_Status_ActivationState_Session) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().WithValue(value),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSession) ClientCookie() *filterCndBuilderStatusActivationCurrentSessionClientCookie {
	return &filterCndBuilderStatusActivationCurrentSessionClientCookie{builder: b.builder}
}

func (b *filterCndBuilderStatusActivationCurrentSession) LockDeadline() *filterCndBuilderStatusActivationCurrentSessionLockDeadline {
	return &filterCndBuilderStatusActivationCurrentSessionLockDeadline{builder: b.builder}
}

type filterCndBuilderStatusActivationCurrentSessionClientCookie struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().ClientCookie().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().ClientCookie().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().ClientCookie().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().ClientCookie().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSessionClientCookie) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().ClientCookie().WithValue(value),
	})
}

type filterCndBuilderStatusActivationCurrentSessionLockDeadline struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().LockDeadline().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().LockDeadline().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().LockDeadline().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().LockDeadline().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationCurrentSessionLockDeadline) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().CurrentSession().LockDeadline().WithValue(value),
	})
}

type filterCndBuilderStatusActivationServiceAccount struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivationServiceAccount) Eq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivationServiceAccount) Neq(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivationServiceAccount) Gt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivationServiceAccount) Gte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivationServiceAccount) Lt(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivationServiceAccount) Lte(value *iam_service_account.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivationServiceAccount) In(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationServiceAccount) NotIn(values []*iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().ServiceAccount().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationServiceAccount) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationServiceAccount) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().ServiceAccount().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationServiceAccount) compare(op gotenfilter.CompareOperator, value *iam_service_account.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().ServiceAccount().WithValue(value),
	})
}

type filterCndBuilderStatusActivationLastInvitation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivationLastInvitation) Eq(value *Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivationLastInvitation) Neq(value *Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivationLastInvitation) Gt(value *Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivationLastInvitation) Gte(value *Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivationLastInvitation) Lt(value *Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivationLastInvitation) Lte(value *Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivationLastInvitation) In(values []*Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitation) NotIn(values []*Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitation) compare(op gotenfilter.CompareOperator, value *Probe_Status_ActivationState_InvitationState) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().WithValue(value),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitation) SentDate() *filterCndBuilderStatusActivationLastInvitationSentDate {
	return &filterCndBuilderStatusActivationLastInvitationSentDate{builder: b.builder}
}

func (b *filterCndBuilderStatusActivationLastInvitation) Sender() *filterCndBuilderStatusActivationLastInvitationSender {
	return &filterCndBuilderStatusActivationLastInvitationSender{builder: b.builder}
}

type filterCndBuilderStatusActivationLastInvitationSentDate struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().SentDate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().SentDate().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().SentDate().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().SentDate().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitationSentDate) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().SentDate().WithValue(value),
	})
}

type filterCndBuilderStatusActivationLastInvitationSender struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().Sender().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().Sender().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().Sender().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().Sender().FieldPath(),
	})
}

func (b *filterCndBuilderStatusActivationLastInvitationSender) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Activation().LastInvitation().Sender().WithValue(value),
	})
}

type filterCndBuilderStatusConnection struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConnection) Eq(value Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConnection) Neq(value Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConnection) Gt(value Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConnection) Gte(value Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConnection) Lt(value Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConnection) Lte(value Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConnection) In(values []Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Connection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConnection) NotIn(values []Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Connection().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConnection) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Connection().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConnection) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Connection().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConnection) compare(op gotenfilter.CompareOperator, value Probe_Status_ConnectionStatus) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Connection().WithValue(value),
	})
}

type filterCndBuilderStatusConnectionStatusChangeTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ConnectionStatusChangeTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().ConnectionStatusChangeTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().ConnectionStatusChangeTime().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().ConnectionStatusChangeTime().FieldPath(),
	})
}

func (b *filterCndBuilderStatusConnectionStatusChangeTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().ConnectionStatusChangeTime().WithValue(value),
	})
}

type filterCndBuilderStatusBandwidth struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusBandwidth) Eq(value *Probe_Status_Bandwidth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusBandwidth) Neq(value *Probe_Status_Bandwidth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusBandwidth) Gt(value *Probe_Status_Bandwidth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusBandwidth) Gte(value *Probe_Status_Bandwidth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusBandwidth) Lt(value *Probe_Status_Bandwidth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusBandwidth) Lte(value *Probe_Status_Bandwidth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusBandwidth) In(values []*Probe_Status_Bandwidth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidth) NotIn(values []*Probe_Status_Bandwidth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidth) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidth) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidth) compare(op gotenfilter.CompareOperator, value *Probe_Status_Bandwidth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Bandwidth().WithValue(value),
	})
}

func (b *filterCndBuilderStatusBandwidth) UploadMbps() *filterCndBuilderStatusBandwidthUploadMbps {
	return &filterCndBuilderStatusBandwidthUploadMbps{builder: b.builder}
}

func (b *filterCndBuilderStatusBandwidth) DownloadMbps() *filterCndBuilderStatusBandwidthDownloadMbps {
	return &filterCndBuilderStatusBandwidthDownloadMbps{builder: b.builder}
}

func (b *filterCndBuilderStatusBandwidth) TestServer() *filterCndBuilderStatusBandwidthTestServer {
	return &filterCndBuilderStatusBandwidthTestServer{builder: b.builder}
}

func (b *filterCndBuilderStatusBandwidth) ServerIpAddress() *filterCndBuilderStatusBandwidthServerIpAddress {
	return &filterCndBuilderStatusBandwidthServerIpAddress{builder: b.builder}
}

func (b *filterCndBuilderStatusBandwidth) LastReported() *filterCndBuilderStatusBandwidthLastReported {
	return &filterCndBuilderStatusBandwidthLastReported{builder: b.builder}
}

type filterCndBuilderStatusBandwidthUploadMbps struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().UploadMbps().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().UploadMbps().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().UploadMbps().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().UploadMbps().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthUploadMbps) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Bandwidth().UploadMbps().WithValue(value),
	})
}

type filterCndBuilderStatusBandwidthDownloadMbps struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().DownloadMbps().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().DownloadMbps().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().DownloadMbps().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().DownloadMbps().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthDownloadMbps) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Bandwidth().DownloadMbps().WithValue(value),
	})
}

type filterCndBuilderStatusBandwidthTestServer struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusBandwidthTestServer) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusBandwidthTestServer) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusBandwidthTestServer) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusBandwidthTestServer) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusBandwidthTestServer) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusBandwidthTestServer) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusBandwidthTestServer) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().TestServer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthTestServer) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().TestServer().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthTestServer) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().TestServer().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthTestServer) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().TestServer().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthTestServer) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Bandwidth().TestServer().WithValue(value),
	})
}

type filterCndBuilderStatusBandwidthServerIpAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().ServerIpAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().ServerIpAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().ServerIpAddress().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().ServerIpAddress().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthServerIpAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Bandwidth().ServerIpAddress().WithValue(value),
	})
}

type filterCndBuilderStatusBandwidthLastReported struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusBandwidthLastReported) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusBandwidthLastReported) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusBandwidthLastReported) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusBandwidthLastReported) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusBandwidthLastReported) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusBandwidthLastReported) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusBandwidthLastReported) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().LastReported().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthLastReported) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().Bandwidth().LastReported().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusBandwidthLastReported) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().LastReported().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthLastReported) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().Bandwidth().LastReported().FieldPath(),
	})
}

func (b *filterCndBuilderStatusBandwidthLastReported) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().Bandwidth().LastReported().WithValue(value),
	})
}

type filterCndBuilderStatusNetworkInterfaces struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusNetworkInterfaces) Eq(value map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusNetworkInterfaces) Neq(value map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusNetworkInterfaces) Gt(value map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusNetworkInterfaces) Gte(value map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusNetworkInterfaces) Lt(value map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusNetworkInterfaces) Lte(value map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusNetworkInterfaces) In(values []map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().NetworkInterfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusNetworkInterfaces) NotIn(values []map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().NetworkInterfaces().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusNetworkInterfaces) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().NetworkInterfaces().FieldPath(),
	})
}

func (b *filterCndBuilderStatusNetworkInterfaces) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().NetworkInterfaces().FieldPath(),
	})
}

func (b *filterCndBuilderStatusNetworkInterfaces) compare(op gotenfilter.CompareOperator, value map[string]*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().NetworkInterfaces().WithValue(value),
	})
}

func (b *filterCndBuilderStatusNetworkInterfaces) WithKey(key string) *mapFilterCndBuilderStatusNetworkInterfaces {
	return &mapFilterCndBuilderStatusNetworkInterfaces{builder: b.builder, key: key}
}

type mapFilterCndBuilderStatusNetworkInterfaces struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) Eq(value *Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) Neq(value *Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) Gt(value *Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) Gte(value *Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) Lt(value *Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) Lte(value *Probe_Status_NetworkInterface) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) In(values []*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().NetworkInterfaces().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) NotIn(values []*Probe_Status_NetworkInterface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().NetworkInterfaces().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().NetworkInterfaces().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().NetworkInterfaces().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderStatusNetworkInterfaces) compare(op gotenfilter.CompareOperator, value *Probe_Status_NetworkInterface) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().NetworkInterfaces().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderStatusAgentType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStatusAgentType) Eq(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStatusAgentType) Neq(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStatusAgentType) Gt(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStatusAgentType) Gte(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStatusAgentType) Lt(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStatusAgentType) Lte(value Probe_AgentType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStatusAgentType) In(values []Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AgentType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAgentType) NotIn(values []Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Status().AgentType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStatusAgentType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Status().AgentType().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAgentType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Status().AgentType().FieldPath(),
	})
}

func (b *filterCndBuilderStatusAgentType) compare(op gotenfilter.CompareOperator, value Probe_AgentType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Status().AgentType().WithValue(value),
	})
}

type filterCndBuilderMemo struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMemo) Eq(value []*ntt_memo.Memo) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMemo) Neq(value []*ntt_memo.Memo) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMemo) Gt(value []*ntt_memo.Memo) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMemo) Gte(value []*ntt_memo.Memo) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMemo) Lt(value []*ntt_memo.Memo) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMemo) Lte(value []*ntt_memo.Memo) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMemo) In(values [][]*ntt_memo.Memo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemo) NotIn(values [][]*ntt_memo.Memo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemo) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Memo().FieldPath(),
	})
}

func (b *filterCndBuilderMemo) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Memo().FieldPath(),
	})
}

func (b *filterCndBuilderMemo) Contains(value *ntt_memo.Memo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbeFieldPathBuilder().Memo().FieldPath(),
		Value:     NewProbeFieldPathBuilder().Memo().WithItemValue(value),
	})
}

func (b *filterCndBuilderMemo) ContainsAnyOf(values []*ntt_memo.Memo) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Memo()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbeFieldPathBuilder().Memo().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMemo) ContainsAll(values []*ntt_memo.Memo) *FilterBuilder {
	pathSelector := NewProbeFieldPathBuilder().Memo()
	itemValues := make([]Probe_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbeFieldPathBuilder().Memo().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMemo) compare(op gotenfilter.CompareOperator, value []*ntt_memo.Memo) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Memo().WithValue(value),
	})
}

func (b *filterCndBuilderMemo) CreateTime() *filterCndBuilderMemoCreateTime {
	return &filterCndBuilderMemoCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMemo) UpdateTime() *filterCndBuilderMemoUpdateTime {
	return &filterCndBuilderMemoUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMemo) Message() *filterCndBuilderMemoMessage {
	return &filterCndBuilderMemoMessage{builder: b.builder}
}

func (b *filterCndBuilderMemo) CreatedBy() *filterCndBuilderMemoCreatedBy {
	return &filterCndBuilderMemoCreatedBy{builder: b.builder}
}

type filterCndBuilderMemoCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMemoCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMemoCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMemoCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMemoCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMemoCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMemoCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMemoCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemoCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemoCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Memo().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMemoCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Memo().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMemoCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Memo().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMemoUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMemoUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMemoUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMemoUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMemoUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMemoUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMemoUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMemoUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemoUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemoUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Memo().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMemoUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Memo().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMemoUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Memo().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMemoMessage struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMemoMessage) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMemoMessage) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMemoMessage) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMemoMessage) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMemoMessage) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMemoMessage) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMemoMessage) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().Message().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemoMessage) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().Message().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemoMessage) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Memo().Message().FieldPath(),
	})
}

func (b *filterCndBuilderMemoMessage) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Memo().Message().FieldPath(),
	})
}

func (b *filterCndBuilderMemoMessage) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Memo().Message().WithValue(value),
	})
}

type filterCndBuilderMemoCreatedBy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMemoCreatedBy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMemoCreatedBy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMemoCreatedBy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMemoCreatedBy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMemoCreatedBy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMemoCreatedBy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMemoCreatedBy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().CreatedBy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemoCreatedBy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		Probe_FieldPathArrayOfValues: NewProbeFieldPathBuilder().Memo().CreatedBy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMemoCreatedBy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbeFieldPathBuilder().Memo().CreatedBy().FieldPath(),
	})
}

func (b *filterCndBuilderMemoCreatedBy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbeFieldPathBuilder().Memo().CreatedBy().FieldPath(),
	})
}

func (b *filterCndBuilderMemoCreatedBy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:             op,
		Probe_FieldPathValue: NewProbeFieldPathBuilder().Memo().CreatedBy().WithValue(value),
	})
}
