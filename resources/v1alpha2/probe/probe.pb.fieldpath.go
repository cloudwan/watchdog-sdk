// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probe.proto
// DO NOT EDIT!!!

package probe

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &devices_device.Device{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &timestamp.Timestamp{}
	_ = &common.SoftwareVersion{}
	_ = &probe_group.ProbeGroup{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Probe_FieldPath interface {
	gotenobject.FieldPath
	Selector() Probe_FieldPathSelector
	Get(source *Probe) []interface{}
	GetSingle(source *Probe) (interface{}, bool)
	ClearValue(item *Probe)

	// Those methods build corresponding Probe_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Probe_FieldPathValue
	WithIArrayOfValues(values interface{}) Probe_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Probe_FieldPathArrayItemValue
}

type Probe_FieldPathSelector int32

const (
	Probe_FieldPathSelectorName             Probe_FieldPathSelector = 0
	Probe_FieldPathSelectorDisplayName      Probe_FieldPathSelector = 1
	Probe_FieldPathSelectorLowerDisplayName Probe_FieldPathSelector = 2
	Probe_FieldPathSelectorMetadata         Probe_FieldPathSelector = 3
	Probe_FieldPathSelectorSpec             Probe_FieldPathSelector = 4
	Probe_FieldPathSelectorStatus           Probe_FieldPathSelector = 5
	Probe_FieldPathSelectorMemo             Probe_FieldPathSelector = 6
)

func (s Probe_FieldPathSelector) String() string {
	switch s {
	case Probe_FieldPathSelectorName:
		return "name"
	case Probe_FieldPathSelectorDisplayName:
		return "display_name"
	case Probe_FieldPathSelectorLowerDisplayName:
		return "lower_display_name"
	case Probe_FieldPathSelectorMetadata:
		return "metadata"
	case Probe_FieldPathSelectorSpec:
		return "spec"
	case Probe_FieldPathSelectorStatus:
		return "status"
	case Probe_FieldPathSelectorMemo:
		return "memo"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", s))
	}
}

func BuildProbe_FieldPath(fp gotenobject.RawFieldPath) (Probe_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Probe_FieldTerminalPath{selector: Probe_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Probe_FieldTerminalPath{selector: Probe_FieldPathSelectorDisplayName}, nil
		case "lower_display_name", "lowerDisplayName", "lower-display-name":
			return &Probe_FieldTerminalPath{selector: Probe_FieldPathSelectorLowerDisplayName}, nil
		case "metadata":
			return &Probe_FieldTerminalPath{selector: Probe_FieldPathSelectorMetadata}, nil
		case "spec":
			return &Probe_FieldTerminalPath{selector: Probe_FieldPathSelectorSpec}, nil
		case "status":
			return &Probe_FieldTerminalPath{selector: Probe_FieldPathSelectorStatus}, nil
		case "memo":
			return &Probe_FieldTerminalPath{selector: Probe_FieldPathSelectorMemo}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Probe_FieldSubPath{selector: Probe_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildProbeSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Probe_FieldSubPath{selector: Probe_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildProbeStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Probe_FieldSubPath{selector: Probe_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		case "memo":
			if subpath, err := ntt_memo.BuildMemo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Probe_FieldSubPath{selector: Probe_FieldPathSelectorMemo, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe", fp)
}

func ParseProbe_FieldPath(rawField string) (Probe_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbe_FieldPath(fp)
}

func MustParseProbe_FieldPath(rawField string) Probe_FieldPath {
	fp, err := ParseProbe_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Probe_FieldTerminalPath struct {
	selector Probe_FieldPathSelector
}

var _ Probe_FieldPath = (*Probe_FieldTerminalPath)(nil)

func (fp *Probe_FieldTerminalPath) Selector() Probe_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Probe_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Probe_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe
func (fp *Probe_FieldTerminalPath) Get(source *Probe) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Probe_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Probe_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Probe_FieldPathSelectorLowerDisplayName:
			values = append(values, source.LowerDisplayName)
		case Probe_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Probe_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case Probe_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		case Probe_FieldPathSelectorMemo:
			for _, value := range source.GetMemo() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Probe: %d", fp.selector))
		}
	}
	return
}

func (fp *Probe_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe))
}

// GetSingle returns value pointed by specific field of from source Probe
func (fp *Probe_FieldTerminalPath) GetSingle(source *Probe) (interface{}, bool) {
	switch fp.selector {
	case Probe_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Probe_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Probe_FieldPathSelectorLowerDisplayName:
		return source.GetLowerDisplayName(), source != nil
	case Probe_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Probe_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case Probe_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	case Probe_FieldPathSelectorMemo:
		res := source.GetMemo()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fp.selector))
	}
}

func (fp *Probe_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe))
}

// GetDefault returns a default value of the field type
func (fp *Probe_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Probe_FieldPathSelectorName:
		return (*Name)(nil)
	case Probe_FieldPathSelectorDisplayName:
		return ""
	case Probe_FieldPathSelectorLowerDisplayName:
		return ""
	case Probe_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case Probe_FieldPathSelectorSpec:
		return (*Probe_Spec)(nil)
	case Probe_FieldPathSelectorStatus:
		return (*Probe_Status)(nil)
	case Probe_FieldPathSelectorMemo:
		return ([]*ntt_memo.Memo)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fp.selector))
	}
}

func (fp *Probe_FieldTerminalPath) ClearValue(item *Probe) {
	if item != nil {
		switch fp.selector {
		case Probe_FieldPathSelectorName:
			item.Name = nil
		case Probe_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Probe_FieldPathSelectorLowerDisplayName:
			item.LowerDisplayName = ""
		case Probe_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Probe_FieldPathSelectorSpec:
			item.Spec = nil
		case Probe_FieldPathSelectorStatus:
			item.Status = nil
		case Probe_FieldPathSelectorMemo:
			item.Memo = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Probe: %d", fp.selector))
		}
	}
}

func (fp *Probe_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe))
}

// IsLeaf - whether field path is holds simple value
func (fp *Probe_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Probe_FieldPathSelectorName ||
		fp.selector == Probe_FieldPathSelectorDisplayName ||
		fp.selector == Probe_FieldPathSelectorLowerDisplayName
}

func (fp *Probe_FieldTerminalPath) WithIValue(value interface{}) Probe_FieldPathValue {
	switch fp.selector {
	case Probe_FieldPathSelectorName:
		return &Probe_FieldTerminalPathValue{Probe_FieldTerminalPath: *fp, value: value.(*Name)}
	case Probe_FieldPathSelectorDisplayName:
		return &Probe_FieldTerminalPathValue{Probe_FieldTerminalPath: *fp, value: value.(string)}
	case Probe_FieldPathSelectorLowerDisplayName:
		return &Probe_FieldTerminalPathValue{Probe_FieldTerminalPath: *fp, value: value.(string)}
	case Probe_FieldPathSelectorMetadata:
		return &Probe_FieldTerminalPathValue{Probe_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case Probe_FieldPathSelectorSpec:
		return &Probe_FieldTerminalPathValue{Probe_FieldTerminalPath: *fp, value: value.(*Probe_Spec)}
	case Probe_FieldPathSelectorStatus:
		return &Probe_FieldTerminalPathValue{Probe_FieldTerminalPath: *fp, value: value.(*Probe_Status)}
	case Probe_FieldPathSelectorMemo:
		return &Probe_FieldTerminalPathValue{Probe_FieldTerminalPath: *fp, value: value.([]*ntt_memo.Memo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fp.selector))
	}
}

func (fp *Probe_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Probe_FieldTerminalPath) WithIArrayOfValues(values interface{}) Probe_FieldPathArrayOfValues {
	fpaov := &Probe_FieldTerminalPathArrayOfValues{Probe_FieldTerminalPath: *fp}
	switch fp.selector {
	case Probe_FieldPathSelectorName:
		return &Probe_FieldTerminalPathArrayOfValues{Probe_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Probe_FieldPathSelectorDisplayName:
		return &Probe_FieldTerminalPathArrayOfValues{Probe_FieldTerminalPath: *fp, values: values.([]string)}
	case Probe_FieldPathSelectorLowerDisplayName:
		return &Probe_FieldTerminalPathArrayOfValues{Probe_FieldTerminalPath: *fp, values: values.([]string)}
	case Probe_FieldPathSelectorMetadata:
		return &Probe_FieldTerminalPathArrayOfValues{Probe_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case Probe_FieldPathSelectorSpec:
		return &Probe_FieldTerminalPathArrayOfValues{Probe_FieldTerminalPath: *fp, values: values.([]*Probe_Spec)}
	case Probe_FieldPathSelectorStatus:
		return &Probe_FieldTerminalPathArrayOfValues{Probe_FieldTerminalPath: *fp, values: values.([]*Probe_Status)}
	case Probe_FieldPathSelectorMemo:
		return &Probe_FieldTerminalPathArrayOfValues{Probe_FieldTerminalPath: *fp, values: values.([][]*ntt_memo.Memo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fp.selector))
	}
	return fpaov
}

func (fp *Probe_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Probe_FieldTerminalPath) WithIArrayItemValue(value interface{}) Probe_FieldPathArrayItemValue {
	switch fp.selector {
	case Probe_FieldPathSelectorMemo:
		return &Probe_FieldTerminalPathArrayItemValue{Probe_FieldTerminalPath: *fp, value: value.(*ntt_memo.Memo)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fp.selector))
	}
}

func (fp *Probe_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Probe_FieldSubPath struct {
	selector Probe_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Probe_FieldPath = (*Probe_FieldSubPath)(nil)

func (fps *Probe_FieldSubPath) Selector() Probe_FieldPathSelector {
	return fps.selector
}
func (fps *Probe_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *Probe_FieldSubPath) AsSpecSubPath() (ProbeSpec_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeSpec_FieldPath)
	return res, ok
}
func (fps *Probe_FieldSubPath) AsStatusSubPath() (ProbeStatus_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeStatus_FieldPath)
	return res, ok
}
func (fps *Probe_FieldSubPath) AsMemoSubPath() (ntt_memo.Memo_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_memo.Memo_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Probe_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Probe_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Probe
func (fps *Probe_FieldSubPath) Get(source *Probe) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else if asStatusFieldPath, ok := fps.AsStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStatus())...)
	} else if asMemoFieldPath, ok := fps.AsMemoSubPath(); ok {
		for _, item := range source.GetMemo() {
			values = append(values, asMemoFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fps.selector))
	}
	return
}

func (fps *Probe_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Probe))
}

// GetSingle returns value of selected field from source Probe
func (fps *Probe_FieldSubPath) GetSingle(source *Probe) (interface{}, bool) {
	switch fps.selector {
	case Probe_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Probe_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case Probe_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	case Probe_FieldPathSelectorMemo:
		if len(source.GetMemo()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMemo()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fps.selector))
	}
}

func (fps *Probe_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Probe))
}

// GetDefault returns a default value of the field type
func (fps *Probe_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Probe_FieldSubPath) ClearValue(item *Probe) {
	if item != nil {
		switch fps.selector {
		case Probe_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Probe_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case Probe_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		case Probe_FieldPathSelectorMemo:
			for _, subItem := range item.Memo {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Probe: %d", fps.selector))
		}
	}
}

func (fps *Probe_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Probe))
}

// IsLeaf - whether field path is holds simple value
func (fps *Probe_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Probe_FieldSubPath) WithIValue(value interface{}) Probe_FieldPathValue {
	return &Probe_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Probe_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Probe_FieldSubPath) WithIArrayOfValues(values interface{}) Probe_FieldPathArrayOfValues {
	return &Probe_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Probe_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Probe_FieldSubPath) WithIArrayItemValue(value interface{}) Probe_FieldPathArrayItemValue {
	return &Probe_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Probe_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Probe_FieldPathValue allows storing values for Probe fields according to their type
type Probe_FieldPathValue interface {
	Probe_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe)
	CompareWith(*Probe) (cmp int, comparable bool)
}

func ParseProbe_FieldPathValue(pathStr, valueStr string) (Probe_FieldPathValue, error) {
	fp, err := ParseProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Probe field path value from %s: %v", valueStr, err)
	}
	return fpv.(Probe_FieldPathValue), nil
}

func MustParseProbe_FieldPathValue(pathStr, valueStr string) Probe_FieldPathValue {
	fpv, err := ParseProbe_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Probe_FieldTerminalPathValue struct {
	Probe_FieldTerminalPath
	value interface{}
}

var _ Probe_FieldPathValue = (*Probe_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Probe' as interface{}
func (fpv *Probe_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Probe_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Probe_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Probe_FieldTerminalPathValue) AsLowerDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Probe_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *Probe_FieldTerminalPathValue) AsSpecValue() (*Probe_Spec, bool) {
	res, ok := fpv.value.(*Probe_Spec)
	return res, ok
}
func (fpv *Probe_FieldTerminalPathValue) AsStatusValue() (*Probe_Status, bool) {
	res, ok := fpv.value.(*Probe_Status)
	return res, ok
}
func (fpv *Probe_FieldTerminalPathValue) AsMemoValue() ([]*ntt_memo.Memo, bool) {
	res, ok := fpv.value.([]*ntt_memo.Memo)
	return res, ok
}

// SetTo stores value for selected field for object Probe
func (fpv *Probe_FieldTerminalPathValue) SetTo(target **Probe) {
	if *target == nil {
		*target = new(Probe)
	}
	switch fpv.selector {
	case Probe_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Probe_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Probe_FieldPathSelectorLowerDisplayName:
		(*target).LowerDisplayName = fpv.value.(string)
	case Probe_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case Probe_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*Probe_Spec)
	case Probe_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*Probe_Status)
	case Probe_FieldPathSelectorMemo:
		(*target).Memo = fpv.value.([]*ntt_memo.Memo)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fpv.selector))
	}
}

func (fpv *Probe_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Probe_FieldTerminalPathValue' with the value under path in 'Probe'.
func (fpv *Probe_FieldTerminalPathValue) CompareWith(source *Probe) (int, bool) {
	switch fpv.selector {
	case Probe_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Probe_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Probe_FieldPathSelectorLowerDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetLowerDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Probe_FieldPathSelectorMetadata:
		return 0, false
	case Probe_FieldPathSelectorSpec:
		return 0, false
	case Probe_FieldPathSelectorStatus:
		return 0, false
	case Probe_FieldPathSelectorMemo:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fpv.selector))
	}
}

func (fpv *Probe_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe))
}

type Probe_FieldSubPathValue struct {
	Probe_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Probe_FieldPathValue = (*Probe_FieldSubPathValue)(nil)

func (fpvs *Probe_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Probe_FieldSubPathValue) AsSpecPathValue() (ProbeSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeSpec_FieldPathValue)
	return res, ok
}
func (fpvs *Probe_FieldSubPathValue) AsStatusPathValue() (ProbeStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeStatus_FieldPathValue)
	return res, ok
}
func (fpvs *Probe_FieldSubPathValue) AsMemoPathValue() (ntt_memo.Memo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_memo.Memo_FieldPathValue)
	return res, ok
}

func (fpvs *Probe_FieldSubPathValue) SetTo(target **Probe) {
	if *target == nil {
		*target = new(Probe)
	}
	switch fpvs.Selector() {
	case Probe_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Probe_FieldPathSelectorSpec:
		fpvs.subPathValue.(ProbeSpec_FieldPathValue).SetTo(&(*target).Spec)
	case Probe_FieldPathSelectorStatus:
		fpvs.subPathValue.(ProbeStatus_FieldPathValue).SetTo(&(*target).Status)
	case Probe_FieldPathSelectorMemo:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fpvs.Selector()))
	}
}

func (fpvs *Probe_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Probe_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Probe_FieldSubPathValue) CompareWith(source *Probe) (int, bool) {
	switch fpvs.Selector() {
	case Probe_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Probe_FieldPathSelectorSpec:
		return fpvs.subPathValue.(ProbeSpec_FieldPathValue).CompareWith(source.GetSpec())
	case Probe_FieldPathSelectorStatus:
		return fpvs.subPathValue.(ProbeStatus_FieldPathValue).CompareWith(source.GetStatus())
	case Probe_FieldPathSelectorMemo:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fpvs.Selector()))
	}
}

func (fpvs *Probe_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Probe))
}

// Probe_FieldPathArrayItemValue allows storing single item in Path-specific values for Probe according to their type
// Present only for array (repeated) types.
type Probe_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Probe_FieldPath
	ContainsValue(*Probe) bool
}

// ParseProbe_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbe_FieldPathArrayItemValue(pathStr, valueStr string) (Probe_FieldPathArrayItemValue, error) {
	fp, err := ParseProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Probe field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Probe_FieldPathArrayItemValue), nil
}

func MustParseProbe_FieldPathArrayItemValue(pathStr, valueStr string) Probe_FieldPathArrayItemValue {
	fpaiv, err := ParseProbe_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Probe_FieldTerminalPathArrayItemValue struct {
	Probe_FieldTerminalPath
	value interface{}
}

var _ Probe_FieldPathArrayItemValue = (*Probe_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe as interface{}
func (fpaiv *Probe_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Probe_FieldTerminalPathArrayItemValue) AsMemoItemValue() (*ntt_memo.Memo, bool) {
	res, ok := fpaiv.value.(*ntt_memo.Memo)
	return res, ok
}

func (fpaiv *Probe_FieldTerminalPathArrayItemValue) GetSingle(source *Probe) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Probe_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Probe'
func (fpaiv *Probe_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe) bool {
	slice := fpaiv.Probe_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Probe_FieldSubPathArrayItemValue struct {
	Probe_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Probe_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Probe_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Probe_FieldSubPathArrayItemValue) AsSpecPathItemValue() (ProbeSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Probe_FieldSubPathArrayItemValue) AsStatusPathItemValue() (ProbeStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeStatus_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Probe_FieldSubPathArrayItemValue) AsMemoPathItemValue() (ntt_memo.Memo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_memo.Memo_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Probe'
func (fpaivs *Probe_FieldSubPathArrayItemValue) ContainsValue(source *Probe) bool {
	switch fpaivs.Selector() {
	case Probe_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Probe_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(ProbeSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case Probe_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(ProbeStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	case Probe_FieldPathSelectorMemo:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Probe: %d", fpaivs.Selector()))
	}
}

// Probe_FieldPathArrayOfValues allows storing slice of values for Probe fields according to their type
type Probe_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Probe_FieldPath
}

func ParseProbe_FieldPathArrayOfValues(pathStr, valuesStr string) (Probe_FieldPathArrayOfValues, error) {
	fp, err := ParseProbe_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Probe field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Probe_FieldPathArrayOfValues), nil
}

func MustParseProbe_FieldPathArrayOfValues(pathStr, valuesStr string) Probe_FieldPathArrayOfValues {
	fpaov, err := ParseProbe_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Probe_FieldTerminalPathArrayOfValues struct {
	Probe_FieldTerminalPath
	values interface{}
}

var _ Probe_FieldPathArrayOfValues = (*Probe_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Probe_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Probe_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Probe_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Probe_FieldPathSelectorLowerDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Probe_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case Probe_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*Probe_Spec) {
			values = append(values, v)
		}
	case Probe_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*Probe_Status) {
			values = append(values, v)
		}
	case Probe_FieldPathSelectorMemo:
		for _, v := range fpaov.values.([][]*ntt_memo.Memo) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Probe_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Probe_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Probe_FieldTerminalPathArrayOfValues) AsLowerDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Probe_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *Probe_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*Probe_Spec, bool) {
	res, ok := fpaov.values.([]*Probe_Spec)
	return res, ok
}
func (fpaov *Probe_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*Probe_Status, bool) {
	res, ok := fpaov.values.([]*Probe_Status)
	return res, ok
}
func (fpaov *Probe_FieldTerminalPathArrayOfValues) AsMemoArrayOfValues() ([][]*ntt_memo.Memo, bool) {
	res, ok := fpaov.values.([][]*ntt_memo.Memo)
	return res, ok
}

type Probe_FieldSubPathArrayOfValues struct {
	Probe_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Probe_FieldPathArrayOfValues = (*Probe_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Probe_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Probe_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Probe_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (ProbeSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Probe_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (ProbeStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeStatus_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Probe_FieldSubPathArrayOfValues) AsMemoPathArrayOfValues() (ntt_memo.Memo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_memo.Memo_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeSpec_FieldPathSelector
	Get(source *Probe_Spec) []interface{}
	GetSingle(source *Probe_Spec) (interface{}, bool)
	ClearValue(item *Probe_Spec)

	// Those methods build corresponding ProbeSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeSpec_FieldPathArrayItemValue
}

type ProbeSpec_FieldPathSelector int32

const (
	ProbeSpec_FieldPathSelectorProbeGroup         ProbeSpec_FieldPathSelector = 0
	ProbeSpec_FieldPathSelectorDevice             ProbeSpec_FieldPathSelector = 1
	ProbeSpec_FieldPathSelectorEnabled            ProbeSpec_FieldPathSelector = 2
	ProbeSpec_FieldPathSelectorPrimaryLocation    ProbeSpec_FieldPathSelector = 3
	ProbeSpec_FieldPathSelectorLocationDiscovery  ProbeSpec_FieldPathSelector = 4
	ProbeSpec_FieldPathSelectorContactInfo        ProbeSpec_FieldPathSelector = 5
	ProbeSpec_FieldPathSelectorActivation         ProbeSpec_FieldPathSelector = 6
	ProbeSpec_FieldPathSelectorDisableSpeedtest   ProbeSpec_FieldPathSelector = 7
	ProbeSpec_FieldPathSelectorAccessToken        ProbeSpec_FieldPathSelector = 8
	ProbeSpec_FieldPathSelectorAgentType          ProbeSpec_FieldPathSelector = 9
	ProbeSpec_FieldPathSelectorExternalIpCheckUrl ProbeSpec_FieldPathSelector = 10
	ProbeSpec_FieldPathSelectorTargetServers      ProbeSpec_FieldPathSelector = 11
)

func (s ProbeSpec_FieldPathSelector) String() string {
	switch s {
	case ProbeSpec_FieldPathSelectorProbeGroup:
		return "probe_group"
	case ProbeSpec_FieldPathSelectorDevice:
		return "device"
	case ProbeSpec_FieldPathSelectorEnabled:
		return "enabled"
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		return "primary_location"
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		return "location_discovery"
	case ProbeSpec_FieldPathSelectorContactInfo:
		return "contact_info"
	case ProbeSpec_FieldPathSelectorActivation:
		return "activation"
	case ProbeSpec_FieldPathSelectorDisableSpeedtest:
		return "disable_speedtest"
	case ProbeSpec_FieldPathSelectorAccessToken:
		return "access_token"
	case ProbeSpec_FieldPathSelectorAgentType:
		return "agent_type"
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		return "external_ip_check_url"
	case ProbeSpec_FieldPathSelectorTargetServers:
		return "target_servers"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", s))
	}
}

func BuildProbeSpec_FieldPath(fp gotenobject.RawFieldPath) (ProbeSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "probe_group", "probeGroup", "probe-group":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorProbeGroup}, nil
		case "device":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorDevice}, nil
		case "enabled":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorEnabled}, nil
		case "primary_location", "primaryLocation", "primary-location":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorPrimaryLocation}, nil
		case "location_discovery", "locationDiscovery", "location-discovery":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorLocationDiscovery}, nil
		case "contact_info", "contactInfo", "contact-info":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorContactInfo}, nil
		case "activation":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorActivation}, nil
		case "disable_speedtest", "disableSpeedtest", "disable-speedtest":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorDisableSpeedtest}, nil
		case "access_token", "accessToken", "access-token":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorAccessToken}, nil
		case "agent_type", "agentType", "agent-type":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorAgentType}, nil
		case "external_ip_check_url", "externalIpCheckUrl", "external-ip-check-url":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorExternalIpCheckUrl}, nil
		case "target_servers", "targetServers", "target-servers":
			return &ProbeSpec_FieldTerminalPath{selector: ProbeSpec_FieldPathSelectorTargetServers}, nil
		}
	} else {
		switch fp[0] {
		case "primary_location", "primaryLocation", "primary-location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpec_FieldSubPath{selector: ProbeSpec_FieldPathSelectorPrimaryLocation, subPath: subpath}, nil
			}
		case "location_discovery", "locationDiscovery", "location-discovery":
			if subpath, err := common.BuildLocationDiscoverySpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpec_FieldSubPath{selector: ProbeSpec_FieldPathSelectorLocationDiscovery, subPath: subpath}, nil
			}
		case "contact_info", "contactInfo", "contact-info":
			if subpath, err := common.BuildContactInformation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpec_FieldSubPath{selector: ProbeSpec_FieldPathSelectorContactInfo, subPath: subpath}, nil
			}
		case "activation":
			if subpath, err := BuildProbeSpecActivationSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpec_FieldSubPath{selector: ProbeSpec_FieldPathSelectorActivation, subPath: subpath}, nil
			}
		case "access_token", "accessToken", "access-token":
			if subpath, err := BuildProbeSpecAccessTokenSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpec_FieldSubPath{selector: ProbeSpec_FieldPathSelectorAccessToken, subPath: subpath}, nil
			}
		case "target_servers", "targetServers", "target-servers":
			if subpath, err := BuildProbeSpecTargetServers_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpec_FieldSubPath{selector: ProbeSpec_FieldPathSelectorTargetServers, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Spec", fp)
}

func ParseProbeSpec_FieldPath(rawField string) (ProbeSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeSpec_FieldPath(fp)
}

func MustParseProbeSpec_FieldPath(rawField string) ProbeSpec_FieldPath {
	fp, err := ParseProbeSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeSpec_FieldTerminalPath struct {
	selector ProbeSpec_FieldPathSelector
}

var _ ProbeSpec_FieldPath = (*ProbeSpec_FieldTerminalPath)(nil)

func (fp *ProbeSpec_FieldTerminalPath) Selector() ProbeSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Spec
func (fp *ProbeSpec_FieldTerminalPath) Get(source *Probe_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeSpec_FieldPathSelectorProbeGroup:
			if source.ProbeGroup != nil {
				values = append(values, source.ProbeGroup)
			}
		case ProbeSpec_FieldPathSelectorDevice:
			if source.Device != nil {
				values = append(values, source.Device)
			}
		case ProbeSpec_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		case ProbeSpec_FieldPathSelectorPrimaryLocation:
			if source.PrimaryLocation != nil {
				values = append(values, source.PrimaryLocation)
			}
		case ProbeSpec_FieldPathSelectorLocationDiscovery:
			if source.LocationDiscovery != nil {
				values = append(values, source.LocationDiscovery)
			}
		case ProbeSpec_FieldPathSelectorContactInfo:
			if source.ContactInfo != nil {
				values = append(values, source.ContactInfo)
			}
		case ProbeSpec_FieldPathSelectorActivation:
			if source.Activation != nil {
				values = append(values, source.Activation)
			}
		case ProbeSpec_FieldPathSelectorDisableSpeedtest:
			values = append(values, source.DisableSpeedtest)
		case ProbeSpec_FieldPathSelectorAccessToken:
			if source.AccessToken != nil {
				values = append(values, source.AccessToken)
			}
		case ProbeSpec_FieldPathSelectorAgentType:
			values = append(values, source.AgentType)
		case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
			for _, value := range source.GetExternalIpCheckUrl() {
				values = append(values, value)
			}
		case ProbeSpec_FieldPathSelectorTargetServers:
			if source.TargetServers != nil {
				values = append(values, source.TargetServers)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Spec))
}

// GetSingle returns value pointed by specific field of from source Probe_Spec
func (fp *ProbeSpec_FieldTerminalPath) GetSingle(source *Probe_Spec) (interface{}, bool) {
	switch fp.selector {
	case ProbeSpec_FieldPathSelectorProbeGroup:
		res := source.GetProbeGroup()
		return res, res != nil
	case ProbeSpec_FieldPathSelectorDevice:
		res := source.GetDevice()
		return res, res != nil
	case ProbeSpec_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		res := source.GetPrimaryLocation()
		return res, res != nil
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		res := source.GetLocationDiscovery()
		return res, res != nil
	case ProbeSpec_FieldPathSelectorContactInfo:
		res := source.GetContactInfo()
		return res, res != nil
	case ProbeSpec_FieldPathSelectorActivation:
		res := source.GetActivation()
		return res, res != nil
	case ProbeSpec_FieldPathSelectorDisableSpeedtest:
		return source.GetDisableSpeedtest(), source != nil
	case ProbeSpec_FieldPathSelectorAccessToken:
		res := source.GetAccessToken()
		return res, res != nil
	case ProbeSpec_FieldPathSelectorAgentType:
		return source.GetAgentType(), source != nil
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		res := source.GetExternalIpCheckUrl()
		return res, res != nil
	case ProbeSpec_FieldPathSelectorTargetServers:
		res := source.GetTargetServers()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fp.selector))
	}
}

func (fp *ProbeSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Spec))
}

// GetDefault returns a default value of the field type
func (fp *ProbeSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeSpec_FieldPathSelectorProbeGroup:
		return (*probe_group.Reference)(nil)
	case ProbeSpec_FieldPathSelectorDevice:
		return (*devices_device.Reference)(nil)
	case ProbeSpec_FieldPathSelectorEnabled:
		return false
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		return (*common.Location)(nil)
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		return (*common.LocationDiscoverySpec)(nil)
	case ProbeSpec_FieldPathSelectorContactInfo:
		return (*common.ContactInformation)(nil)
	case ProbeSpec_FieldPathSelectorActivation:
		return (*Probe_Spec_ActivationSpec)(nil)
	case ProbeSpec_FieldPathSelectorDisableSpeedtest:
		return false
	case ProbeSpec_FieldPathSelectorAccessToken:
		return (*Probe_Spec_AccessTokenSpec)(nil)
	case ProbeSpec_FieldPathSelectorAgentType:
		return Probe_UNKNOWN
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		return ([]string)(nil)
	case ProbeSpec_FieldPathSelectorTargetServers:
		return (*Probe_Spec_TargetServers)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fp.selector))
	}
}

func (fp *ProbeSpec_FieldTerminalPath) ClearValue(item *Probe_Spec) {
	if item != nil {
		switch fp.selector {
		case ProbeSpec_FieldPathSelectorProbeGroup:
			item.ProbeGroup = nil
		case ProbeSpec_FieldPathSelectorDevice:
			item.Device = nil
		case ProbeSpec_FieldPathSelectorEnabled:
			item.Enabled = false
		case ProbeSpec_FieldPathSelectorPrimaryLocation:
			item.PrimaryLocation = nil
		case ProbeSpec_FieldPathSelectorLocationDiscovery:
			item.LocationDiscovery = nil
		case ProbeSpec_FieldPathSelectorContactInfo:
			item.ContactInfo = nil
		case ProbeSpec_FieldPathSelectorActivation:
			item.Activation = nil
		case ProbeSpec_FieldPathSelectorDisableSpeedtest:
			item.DisableSpeedtest = false
		case ProbeSpec_FieldPathSelectorAccessToken:
			item.AccessToken = nil
		case ProbeSpec_FieldPathSelectorAgentType:
			item.AgentType = Probe_UNKNOWN
		case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
			item.ExternalIpCheckUrl = nil
		case ProbeSpec_FieldPathSelectorTargetServers:
			item.TargetServers = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fp.selector))
		}
	}
}

func (fp *ProbeSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeSpec_FieldPathSelectorProbeGroup ||
		fp.selector == ProbeSpec_FieldPathSelectorDevice ||
		fp.selector == ProbeSpec_FieldPathSelectorEnabled ||
		fp.selector == ProbeSpec_FieldPathSelectorDisableSpeedtest ||
		fp.selector == ProbeSpec_FieldPathSelectorAgentType ||
		fp.selector == ProbeSpec_FieldPathSelectorExternalIpCheckUrl
}

func (fp *ProbeSpec_FieldTerminalPath) WithIValue(value interface{}) ProbeSpec_FieldPathValue {
	switch fp.selector {
	case ProbeSpec_FieldPathSelectorProbeGroup:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(*probe_group.Reference)}
	case ProbeSpec_FieldPathSelectorDevice:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(*devices_device.Reference)}
	case ProbeSpec_FieldPathSelectorEnabled:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(*common.LocationDiscoverySpec)}
	case ProbeSpec_FieldPathSelectorContactInfo:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(*common.ContactInformation)}
	case ProbeSpec_FieldPathSelectorActivation:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(*Probe_Spec_ActivationSpec)}
	case ProbeSpec_FieldPathSelectorDisableSpeedtest:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case ProbeSpec_FieldPathSelectorAccessToken:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(*Probe_Spec_AccessTokenSpec)}
	case ProbeSpec_FieldPathSelectorAgentType:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(Probe_AgentType)}
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.([]string)}
	case ProbeSpec_FieldPathSelectorTargetServers:
		return &ProbeSpec_FieldTerminalPathValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(*Probe_Spec_TargetServers)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fp.selector))
	}
}

func (fp *ProbeSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeSpec_FieldPathArrayOfValues {
	fpaov := &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeSpec_FieldPathSelectorProbeGroup:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]*probe_group.Reference)}
	case ProbeSpec_FieldPathSelectorDevice:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]*devices_device.Reference)}
	case ProbeSpec_FieldPathSelectorEnabled:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]*common.LocationDiscoverySpec)}
	case ProbeSpec_FieldPathSelectorContactInfo:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]*common.ContactInformation)}
	case ProbeSpec_FieldPathSelectorActivation:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]*Probe_Spec_ActivationSpec)}
	case ProbeSpec_FieldPathSelectorDisableSpeedtest:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case ProbeSpec_FieldPathSelectorAccessToken:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]*Probe_Spec_AccessTokenSpec)}
	case ProbeSpec_FieldPathSelectorAgentType:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]Probe_AgentType)}
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([][]string)}
	case ProbeSpec_FieldPathSelectorTargetServers:
		return &ProbeSpec_FieldTerminalPathArrayOfValues{ProbeSpec_FieldTerminalPath: *fp, values: values.([]*Probe_Spec_TargetServers)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeSpec_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		return &ProbeSpec_FieldTerminalPathArrayItemValue{ProbeSpec_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fp.selector))
	}
}

func (fp *ProbeSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbeSpec_FieldSubPath struct {
	selector ProbeSpec_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbeSpec_FieldPath = (*ProbeSpec_FieldSubPath)(nil)

func (fps *ProbeSpec_FieldSubPath) Selector() ProbeSpec_FieldPathSelector {
	return fps.selector
}
func (fps *ProbeSpec_FieldSubPath) AsPrimaryLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *ProbeSpec_FieldSubPath) AsLocationDiscoverySubPath() (common.LocationDiscoverySpec_FieldPath, bool) {
	res, ok := fps.subPath.(common.LocationDiscoverySpec_FieldPath)
	return res, ok
}
func (fps *ProbeSpec_FieldSubPath) AsContactInfoSubPath() (common.ContactInformation_FieldPath, bool) {
	res, ok := fps.subPath.(common.ContactInformation_FieldPath)
	return res, ok
}
func (fps *ProbeSpec_FieldSubPath) AsActivationSubPath() (ProbeSpecActivationSpec_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeSpecActivationSpec_FieldPath)
	return res, ok
}
func (fps *ProbeSpec_FieldSubPath) AsAccessTokenSubPath() (ProbeSpecAccessTokenSpec_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeSpecAccessTokenSpec_FieldPath)
	return res, ok
}
func (fps *ProbeSpec_FieldSubPath) AsTargetServersSubPath() (ProbeSpecTargetServers_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeSpecTargetServers_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbeSpec_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbeSpec_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Probe_Spec
func (fps *ProbeSpec_FieldSubPath) Get(source *Probe_Spec) (values []interface{}) {
	if asLocationFieldPath, ok := fps.AsPrimaryLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetPrimaryLocation())...)
	} else if asLocationDiscoverySpecFieldPath, ok := fps.AsLocationDiscoverySubPath(); ok {
		values = append(values, asLocationDiscoverySpecFieldPath.Get(source.GetLocationDiscovery())...)
	} else if asContactInformationFieldPath, ok := fps.AsContactInfoSubPath(); ok {
		values = append(values, asContactInformationFieldPath.Get(source.GetContactInfo())...)
	} else if asActivationSpecFieldPath, ok := fps.AsActivationSubPath(); ok {
		values = append(values, asActivationSpecFieldPath.Get(source.GetActivation())...)
	} else if asAccessTokenSpecFieldPath, ok := fps.AsAccessTokenSubPath(); ok {
		values = append(values, asAccessTokenSpecFieldPath.Get(source.GetAccessToken())...)
	} else if asTargetServersFieldPath, ok := fps.AsTargetServersSubPath(); ok {
		values = append(values, asTargetServersFieldPath.Get(source.GetTargetServers())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fps.selector))
	}
	return
}

func (fps *ProbeSpec_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Probe_Spec))
}

// GetSingle returns value of selected field from source Probe_Spec
func (fps *ProbeSpec_FieldSubPath) GetSingle(source *Probe_Spec) (interface{}, bool) {
	switch fps.selector {
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		if source.GetPrimaryLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPrimaryLocation())
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		if source.GetLocationDiscovery() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocationDiscovery())
	case ProbeSpec_FieldPathSelectorContactInfo:
		if source.GetContactInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetContactInfo())
	case ProbeSpec_FieldPathSelectorActivation:
		if source.GetActivation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetActivation())
	case ProbeSpec_FieldPathSelectorAccessToken:
		if source.GetAccessToken() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAccessToken())
	case ProbeSpec_FieldPathSelectorTargetServers:
		if source.GetTargetServers() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetTargetServers())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fps.selector))
	}
}

func (fps *ProbeSpec_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Probe_Spec))
}

// GetDefault returns a default value of the field type
func (fps *ProbeSpec_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbeSpec_FieldSubPath) ClearValue(item *Probe_Spec) {
	if item != nil {
		switch fps.selector {
		case ProbeSpec_FieldPathSelectorPrimaryLocation:
			fps.subPath.ClearValueRaw(item.PrimaryLocation)
		case ProbeSpec_FieldPathSelectorLocationDiscovery:
			fps.subPath.ClearValueRaw(item.LocationDiscovery)
		case ProbeSpec_FieldPathSelectorContactInfo:
			fps.subPath.ClearValueRaw(item.ContactInfo)
		case ProbeSpec_FieldPathSelectorActivation:
			fps.subPath.ClearValueRaw(item.Activation)
		case ProbeSpec_FieldPathSelectorAccessToken:
			fps.subPath.ClearValueRaw(item.AccessToken)
		case ProbeSpec_FieldPathSelectorTargetServers:
			fps.subPath.ClearValueRaw(item.TargetServers)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fps.selector))
		}
	}
}

func (fps *ProbeSpec_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Probe_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbeSpec_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbeSpec_FieldSubPath) WithIValue(value interface{}) ProbeSpec_FieldPathValue {
	return &ProbeSpec_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbeSpec_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbeSpec_FieldSubPath) WithIArrayOfValues(values interface{}) ProbeSpec_FieldPathArrayOfValues {
	return &ProbeSpec_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbeSpec_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbeSpec_FieldSubPath) WithIArrayItemValue(value interface{}) ProbeSpec_FieldPathArrayItemValue {
	return &ProbeSpec_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbeSpec_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbeSpec_FieldPathValue allows storing values for Spec fields according to their type
type ProbeSpec_FieldPathValue interface {
	ProbeSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Spec)
	CompareWith(*Probe_Spec) (cmp int, comparable bool)
}

func ParseProbeSpec_FieldPathValue(pathStr, valueStr string) (ProbeSpec_FieldPathValue, error) {
	fp, err := ParseProbeSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeSpec_FieldPathValue), nil
}

func MustParseProbeSpec_FieldPathValue(pathStr, valueStr string) ProbeSpec_FieldPathValue {
	fpv, err := ParseProbeSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeSpec_FieldTerminalPathValue struct {
	ProbeSpec_FieldTerminalPath
	value interface{}
}

var _ ProbeSpec_FieldPathValue = (*ProbeSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *ProbeSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsProbeGroupValue() (*probe_group.Reference, bool) {
	res, ok := fpv.value.(*probe_group.Reference)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsDeviceValue() (*devices_device.Reference, bool) {
	res, ok := fpv.value.(*devices_device.Reference)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsPrimaryLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsLocationDiscoveryValue() (*common.LocationDiscoverySpec, bool) {
	res, ok := fpv.value.(*common.LocationDiscoverySpec)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsContactInfoValue() (*common.ContactInformation, bool) {
	res, ok := fpv.value.(*common.ContactInformation)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsActivationValue() (*Probe_Spec_ActivationSpec, bool) {
	res, ok := fpv.value.(*Probe_Spec_ActivationSpec)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsDisableSpeedtestValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsAccessTokenValue() (*Probe_Spec_AccessTokenSpec, bool) {
	res, ok := fpv.value.(*Probe_Spec_AccessTokenSpec)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsAgentTypeValue() (Probe_AgentType, bool) {
	res, ok := fpv.value.(Probe_AgentType)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsExternalIpCheckUrlValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ProbeSpec_FieldTerminalPathValue) AsTargetServersValue() (*Probe_Spec_TargetServers, bool) {
	res, ok := fpv.value.(*Probe_Spec_TargetServers)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *ProbeSpec_FieldTerminalPathValue) SetTo(target **Probe_Spec) {
	if *target == nil {
		*target = new(Probe_Spec)
	}
	switch fpv.selector {
	case ProbeSpec_FieldPathSelectorProbeGroup:
		(*target).ProbeGroup = fpv.value.(*probe_group.Reference)
	case ProbeSpec_FieldPathSelectorDevice:
		(*target).Device = fpv.value.(*devices_device.Reference)
	case ProbeSpec_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		(*target).PrimaryLocation = fpv.value.(*common.Location)
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		(*target).LocationDiscovery = fpv.value.(*common.LocationDiscoverySpec)
	case ProbeSpec_FieldPathSelectorContactInfo:
		(*target).ContactInfo = fpv.value.(*common.ContactInformation)
	case ProbeSpec_FieldPathSelectorActivation:
		(*target).Activation = fpv.value.(*Probe_Spec_ActivationSpec)
	case ProbeSpec_FieldPathSelectorDisableSpeedtest:
		(*target).DisableSpeedtest = fpv.value.(bool)
	case ProbeSpec_FieldPathSelectorAccessToken:
		(*target).AccessToken = fpv.value.(*Probe_Spec_AccessTokenSpec)
	case ProbeSpec_FieldPathSelectorAgentType:
		(*target).AgentType = fpv.value.(Probe_AgentType)
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		(*target).ExternalIpCheckUrl = fpv.value.([]string)
	case ProbeSpec_FieldPathSelectorTargetServers:
		(*target).TargetServers = fpv.value.(*Probe_Spec_TargetServers)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fpv.selector))
	}
}

func (fpv *ProbeSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeSpec_FieldTerminalPathValue' with the value under path in 'Probe_Spec'.
func (fpv *ProbeSpec_FieldTerminalPathValue) CompareWith(source *Probe_Spec) (int, bool) {
	switch fpv.selector {
	case ProbeSpec_FieldPathSelectorProbeGroup:
		leftValue := fpv.value.(*probe_group.Reference)
		rightValue := source.GetProbeGroup()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpec_FieldPathSelectorDevice:
		leftValue := fpv.value.(*devices_device.Reference)
		rightValue := source.GetDevice()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpec_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		return 0, false
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		return 0, false
	case ProbeSpec_FieldPathSelectorContactInfo:
		return 0, false
	case ProbeSpec_FieldPathSelectorActivation:
		return 0, false
	case ProbeSpec_FieldPathSelectorDisableSpeedtest:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDisableSpeedtest()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpec_FieldPathSelectorAccessToken:
		return 0, false
	case ProbeSpec_FieldPathSelectorAgentType:
		leftValue := fpv.value.(Probe_AgentType)
		rightValue := source.GetAgentType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		return 0, false
	case ProbeSpec_FieldPathSelectorTargetServers:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fpv.selector))
	}
}

func (fpv *ProbeSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Spec))
}

type ProbeSpec_FieldSubPathValue struct {
	ProbeSpec_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbeSpec_FieldPathValue = (*ProbeSpec_FieldSubPathValue)(nil)

func (fpvs *ProbeSpec_FieldSubPathValue) AsPrimaryLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeSpec_FieldSubPathValue) AsLocationDiscoveryPathValue() (common.LocationDiscoverySpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.LocationDiscoverySpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeSpec_FieldSubPathValue) AsContactInfoPathValue() (common.ContactInformation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ContactInformation_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeSpec_FieldSubPathValue) AsActivationPathValue() (ProbeSpecActivationSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeSpecActivationSpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeSpec_FieldSubPathValue) AsAccessTokenPathValue() (ProbeSpecAccessTokenSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeSpecAccessTokenSpec_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeSpec_FieldSubPathValue) AsTargetServersPathValue() (ProbeSpecTargetServers_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeSpecTargetServers_FieldPathValue)
	return res, ok
}

func (fpvs *ProbeSpec_FieldSubPathValue) SetTo(target **Probe_Spec) {
	if *target == nil {
		*target = new(Probe_Spec)
	}
	switch fpvs.Selector() {
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).PrimaryLocation)
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		fpvs.subPathValue.(common.LocationDiscoverySpec_FieldPathValue).SetTo(&(*target).LocationDiscovery)
	case ProbeSpec_FieldPathSelectorContactInfo:
		fpvs.subPathValue.(common.ContactInformation_FieldPathValue).SetTo(&(*target).ContactInfo)
	case ProbeSpec_FieldPathSelectorActivation:
		fpvs.subPathValue.(ProbeSpecActivationSpec_FieldPathValue).SetTo(&(*target).Activation)
	case ProbeSpec_FieldPathSelectorAccessToken:
		fpvs.subPathValue.(ProbeSpecAccessTokenSpec_FieldPathValue).SetTo(&(*target).AccessToken)
	case ProbeSpec_FieldPathSelectorTargetServers:
		fpvs.subPathValue.(ProbeSpecTargetServers_FieldPathValue).SetTo(&(*target).TargetServers)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeSpec_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbeSpec_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbeSpec_FieldSubPathValue) CompareWith(source *Probe_Spec) (int, bool) {
	switch fpvs.Selector() {
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetPrimaryLocation())
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		return fpvs.subPathValue.(common.LocationDiscoverySpec_FieldPathValue).CompareWith(source.GetLocationDiscovery())
	case ProbeSpec_FieldPathSelectorContactInfo:
		return fpvs.subPathValue.(common.ContactInformation_FieldPathValue).CompareWith(source.GetContactInfo())
	case ProbeSpec_FieldPathSelectorActivation:
		return fpvs.subPathValue.(ProbeSpecActivationSpec_FieldPathValue).CompareWith(source.GetActivation())
	case ProbeSpec_FieldPathSelectorAccessToken:
		return fpvs.subPathValue.(ProbeSpecAccessTokenSpec_FieldPathValue).CompareWith(source.GetAccessToken())
	case ProbeSpec_FieldPathSelectorTargetServers:
		return fpvs.subPathValue.(ProbeSpecTargetServers_FieldPathValue).CompareWith(source.GetTargetServers())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeSpec_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Probe_Spec))
}

// ProbeSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type ProbeSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeSpec_FieldPath
	ContainsValue(*Probe_Spec) bool
}

// ParseProbeSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeSpec_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeSpec_FieldPathArrayItemValue), nil
}

func MustParseProbeSpec_FieldPathArrayItemValue(pathStr, valueStr string) ProbeSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeSpec_FieldTerminalPathArrayItemValue struct {
	ProbeSpec_FieldTerminalPath
	value interface{}
}

var _ ProbeSpec_FieldPathArrayItemValue = (*ProbeSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Spec as interface{}
func (fpaiv *ProbeSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbeSpec_FieldTerminalPathArrayItemValue) AsExternalIpCheckUrlItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProbeSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *ProbeSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Spec) bool {
	slice := fpaiv.ProbeSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbeSpec_FieldSubPathArrayItemValue struct {
	ProbeSpec_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbeSpec_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbeSpec_FieldSubPathArrayItemValue) AsPrimaryLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeSpec_FieldSubPathArrayItemValue) AsLocationDiscoveryPathItemValue() (common.LocationDiscoverySpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.LocationDiscoverySpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeSpec_FieldSubPathArrayItemValue) AsContactInfoPathItemValue() (common.ContactInformation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ContactInformation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeSpec_FieldSubPathArrayItemValue) AsActivationPathItemValue() (ProbeSpecActivationSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeSpecActivationSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeSpec_FieldSubPathArrayItemValue) AsAccessTokenPathItemValue() (ProbeSpecAccessTokenSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeSpecAccessTokenSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeSpec_FieldSubPathArrayItemValue) AsTargetServersPathItemValue() (ProbeSpecTargetServers_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeSpecTargetServers_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaivs *ProbeSpec_FieldSubPathArrayItemValue) ContainsValue(source *Probe_Spec) bool {
	switch fpaivs.Selector() {
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetPrimaryLocation())
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		return fpaivs.subPathItemValue.(common.LocationDiscoverySpec_FieldPathArrayItemValue).ContainsValue(source.GetLocationDiscovery())
	case ProbeSpec_FieldPathSelectorContactInfo:
		return fpaivs.subPathItemValue.(common.ContactInformation_FieldPathArrayItemValue).ContainsValue(source.GetContactInfo())
	case ProbeSpec_FieldPathSelectorActivation:
		return fpaivs.subPathItemValue.(ProbeSpecActivationSpec_FieldPathArrayItemValue).ContainsValue(source.GetActivation())
	case ProbeSpec_FieldPathSelectorAccessToken:
		return fpaivs.subPathItemValue.(ProbeSpecAccessTokenSpec_FieldPathArrayItemValue).ContainsValue(source.GetAccessToken())
	case ProbeSpec_FieldPathSelectorTargetServers:
		return fpaivs.subPathItemValue.(ProbeSpecTargetServers_FieldPathArrayItemValue).ContainsValue(source.GetTargetServers())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec: %d", fpaivs.Selector()))
	}
}

// ProbeSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type ProbeSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeSpec_FieldPath
}

func ParseProbeSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeSpec_FieldPathArrayOfValues), nil
}

func MustParseProbeSpec_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeSpec_FieldPathArrayOfValues {
	fpaov, err := ParseProbeSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeSpec_FieldTerminalPathArrayOfValues struct {
	ProbeSpec_FieldTerminalPath
	values interface{}
}

var _ ProbeSpec_FieldPathArrayOfValues = (*ProbeSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeSpec_FieldPathSelectorProbeGroup:
		for _, v := range fpaov.values.([]*probe_group.Reference) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorDevice:
		for _, v := range fpaov.values.([]*devices_device.Reference) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorPrimaryLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorLocationDiscovery:
		for _, v := range fpaov.values.([]*common.LocationDiscoverySpec) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorContactInfo:
		for _, v := range fpaov.values.([]*common.ContactInformation) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorActivation:
		for _, v := range fpaov.values.([]*Probe_Spec_ActivationSpec) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorDisableSpeedtest:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorAccessToken:
		for _, v := range fpaov.values.([]*Probe_Spec_AccessTokenSpec) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorAgentType:
		for _, v := range fpaov.values.([]Probe_AgentType) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorExternalIpCheckUrl:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ProbeSpec_FieldPathSelectorTargetServers:
		for _, v := range fpaov.values.([]*Probe_Spec_TargetServers) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsProbeGroupArrayOfValues() ([]*probe_group.Reference, bool) {
	res, ok := fpaov.values.([]*probe_group.Reference)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsDeviceArrayOfValues() ([]*devices_device.Reference, bool) {
	res, ok := fpaov.values.([]*devices_device.Reference)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsPrimaryLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsLocationDiscoveryArrayOfValues() ([]*common.LocationDiscoverySpec, bool) {
	res, ok := fpaov.values.([]*common.LocationDiscoverySpec)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsContactInfoArrayOfValues() ([]*common.ContactInformation, bool) {
	res, ok := fpaov.values.([]*common.ContactInformation)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsActivationArrayOfValues() ([]*Probe_Spec_ActivationSpec, bool) {
	res, ok := fpaov.values.([]*Probe_Spec_ActivationSpec)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsDisableSpeedtestArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsAccessTokenArrayOfValues() ([]*Probe_Spec_AccessTokenSpec, bool) {
	res, ok := fpaov.values.([]*Probe_Spec_AccessTokenSpec)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsAgentTypeArrayOfValues() ([]Probe_AgentType, bool) {
	res, ok := fpaov.values.([]Probe_AgentType)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsExternalIpCheckUrlArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ProbeSpec_FieldTerminalPathArrayOfValues) AsTargetServersArrayOfValues() ([]*Probe_Spec_TargetServers, bool) {
	res, ok := fpaov.values.([]*Probe_Spec_TargetServers)
	return res, ok
}

type ProbeSpec_FieldSubPathArrayOfValues struct {
	ProbeSpec_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbeSpec_FieldPathArrayOfValues = (*ProbeSpec_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbeSpec_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbeSpec_FieldSubPathArrayOfValues) AsPrimaryLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeSpec_FieldSubPathArrayOfValues) AsLocationDiscoveryPathArrayOfValues() (common.LocationDiscoverySpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.LocationDiscoverySpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeSpec_FieldSubPathArrayOfValues) AsContactInfoPathArrayOfValues() (common.ContactInformation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ContactInformation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeSpec_FieldSubPathArrayOfValues) AsActivationPathArrayOfValues() (ProbeSpecActivationSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeSpecActivationSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeSpec_FieldSubPathArrayOfValues) AsAccessTokenPathArrayOfValues() (ProbeSpecAccessTokenSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeSpecAccessTokenSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeSpec_FieldSubPathArrayOfValues) AsTargetServersPathArrayOfValues() (ProbeSpecTargetServers_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeSpecTargetServers_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatus_FieldPathSelector
	Get(source *Probe_Status) []interface{}
	GetSingle(source *Probe_Status) (interface{}, bool)
	ClearValue(item *Probe_Status)

	// Those methods build corresponding ProbeStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatus_FieldPathArrayItemValue
}

type ProbeStatus_FieldPathSelector int32

const (
	ProbeStatus_FieldPathSelectorExternalIpAddressV4        ProbeStatus_FieldPathSelector = 0
	ProbeStatus_FieldPathSelectorExternalIpAddressV6        ProbeStatus_FieldPathSelector = 1
	ProbeStatus_FieldPathSelectorExternalHostname           ProbeStatus_FieldPathSelector = 2
	ProbeStatus_FieldPathSelectorAsInfo                     ProbeStatus_FieldPathSelector = 3
	ProbeStatus_FieldPathSelectorCarrier                    ProbeStatus_FieldPathSelector = 4
	ProbeStatus_FieldPathSelectorActiveLocation             ProbeStatus_FieldPathSelector = 5
	ProbeStatus_FieldPathSelectorDiscoveredLocation         ProbeStatus_FieldPathSelector = 6
	ProbeStatus_FieldPathSelectorSoftwareVersion            ProbeStatus_FieldPathSelector = 7
	ProbeStatus_FieldPathSelectorSystemInfo                 ProbeStatus_FieldPathSelector = 8
	ProbeStatus_FieldPathSelectorActivation                 ProbeStatus_FieldPathSelector = 9
	ProbeStatus_FieldPathSelectorConnection                 ProbeStatus_FieldPathSelector = 10
	ProbeStatus_FieldPathSelectorConnectionStatusChangeTime ProbeStatus_FieldPathSelector = 11
	ProbeStatus_FieldPathSelectorBandwidth                  ProbeStatus_FieldPathSelector = 12
	ProbeStatus_FieldPathSelectorNetworkInterfaces          ProbeStatus_FieldPathSelector = 13
	ProbeStatus_FieldPathSelectorAgentType                  ProbeStatus_FieldPathSelector = 14
)

func (s ProbeStatus_FieldPathSelector) String() string {
	switch s {
	case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
		return "external_ip_address_v4"
	case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
		return "external_ip_address_v6"
	case ProbeStatus_FieldPathSelectorExternalHostname:
		return "external_hostname"
	case ProbeStatus_FieldPathSelectorAsInfo:
		return "as_info"
	case ProbeStatus_FieldPathSelectorCarrier:
		return "carrier"
	case ProbeStatus_FieldPathSelectorActiveLocation:
		return "active_location"
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		return "discovered_location"
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		return "software_version"
	case ProbeStatus_FieldPathSelectorSystemInfo:
		return "system_info"
	case ProbeStatus_FieldPathSelectorActivation:
		return "activation"
	case ProbeStatus_FieldPathSelectorConnection:
		return "connection"
	case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
		return "connection_status_change_time"
	case ProbeStatus_FieldPathSelectorBandwidth:
		return "bandwidth"
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return "network_interfaces"
	case ProbeStatus_FieldPathSelectorAgentType:
		return "agent_type"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", s))
	}
}

func BuildProbeStatus_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "external_ip_address_v4", "externalIpAddressV4", "external-ip-address-v4":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorExternalIpAddressV4}, nil
		case "external_ip_address_v6", "externalIpAddressV6", "external-ip-address-v6":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorExternalIpAddressV6}, nil
		case "external_hostname", "externalHostname", "external-hostname":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorExternalHostname}, nil
		case "as_info", "asInfo", "as-info":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorAsInfo}, nil
		case "carrier":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorCarrier}, nil
		case "active_location", "activeLocation", "active-location":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorActiveLocation}, nil
		case "discovered_location", "discoveredLocation", "discovered-location":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorDiscoveredLocation}, nil
		case "software_version", "softwareVersion", "software-version":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorSoftwareVersion}, nil
		case "system_info", "systemInfo", "system-info":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorSystemInfo}, nil
		case "activation":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorActivation}, nil
		case "connection":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorConnection}, nil
		case "connection_status_change_time", "connectionStatusChangeTime", "connection-status-change-time":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorConnectionStatusChangeTime}, nil
		case "bandwidth":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorBandwidth}, nil
		case "network_interfaces", "networkInterfaces", "network-interfaces":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorNetworkInterfaces}, nil
		case "agent_type", "agentType", "agent-type":
			return &ProbeStatus_FieldTerminalPath{selector: ProbeStatus_FieldPathSelectorAgentType}, nil
		}
	} else {
		switch fp[0] {
		case "as_info", "asInfo", "as-info":
			if subpath, err := common.BuildASInfo_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatus_FieldSubPath{selector: ProbeStatus_FieldPathSelectorAsInfo, subPath: subpath}, nil
			}
		case "carrier":
			if subpath, err := common.BuildCarrier_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatus_FieldSubPath{selector: ProbeStatus_FieldPathSelectorCarrier, subPath: subpath}, nil
			}
		case "active_location", "activeLocation", "active-location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatus_FieldSubPath{selector: ProbeStatus_FieldPathSelectorActiveLocation, subPath: subpath}, nil
			}
		case "discovered_location", "discoveredLocation", "discovered-location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatus_FieldSubPath{selector: ProbeStatus_FieldPathSelectorDiscoveredLocation, subPath: subpath}, nil
			}
		case "software_version", "softwareVersion", "software-version":
			if subpath, err := common.BuildSoftwareVersion_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatus_FieldSubPath{selector: ProbeStatus_FieldPathSelectorSoftwareVersion, subPath: subpath}, nil
			}
		case "system_info", "systemInfo", "system-info":
			if subpath, err := BuildProbeStatusSystem_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatus_FieldSubPath{selector: ProbeStatus_FieldPathSelectorSystemInfo, subPath: subpath}, nil
			}
		case "activation":
			if subpath, err := BuildProbeStatusActivationState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatus_FieldSubPath{selector: ProbeStatus_FieldPathSelectorActivation, subPath: subpath}, nil
			}
		case "bandwidth":
			if subpath, err := BuildProbeStatusBandwidth_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatus_FieldSubPath{selector: ProbeStatus_FieldPathSelectorBandwidth, subPath: subpath}, nil
			}
		case "network_interfaces", "networkInterfaces", "network-interfaces":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object Probe_Status)", fp)
			}
			return &ProbeStatus_FieldPathMap{selector: ProbeStatus_FieldPathSelectorNetworkInterfaces, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Status", fp)
}

func ParseProbeStatus_FieldPath(rawField string) (ProbeStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatus_FieldPath(fp)
}

func MustParseProbeStatus_FieldPath(rawField string) ProbeStatus_FieldPath {
	fp, err := ParseProbeStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatus_FieldTerminalPath struct {
	selector ProbeStatus_FieldPathSelector
}

var _ ProbeStatus_FieldPath = (*ProbeStatus_FieldTerminalPath)(nil)

func (fp *ProbeStatus_FieldTerminalPath) Selector() ProbeStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Status
func (fp *ProbeStatus_FieldTerminalPath) Get(source *Probe_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
			values = append(values, source.ExternalIpAddressV4)
		case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
			values = append(values, source.ExternalIpAddressV6)
		case ProbeStatus_FieldPathSelectorExternalHostname:
			values = append(values, source.ExternalHostname)
		case ProbeStatus_FieldPathSelectorAsInfo:
			if source.AsInfo != nil {
				values = append(values, source.AsInfo)
			}
		case ProbeStatus_FieldPathSelectorCarrier:
			if source.Carrier != nil {
				values = append(values, source.Carrier)
			}
		case ProbeStatus_FieldPathSelectorActiveLocation:
			if source.ActiveLocation != nil {
				values = append(values, source.ActiveLocation)
			}
		case ProbeStatus_FieldPathSelectorDiscoveredLocation:
			if source.DiscoveredLocation != nil {
				values = append(values, source.DiscoveredLocation)
			}
		case ProbeStatus_FieldPathSelectorSoftwareVersion:
			if source.SoftwareVersion != nil {
				values = append(values, source.SoftwareVersion)
			}
		case ProbeStatus_FieldPathSelectorSystemInfo:
			if source.SystemInfo != nil {
				values = append(values, source.SystemInfo)
			}
		case ProbeStatus_FieldPathSelectorActivation:
			if source.Activation != nil {
				values = append(values, source.Activation)
			}
		case ProbeStatus_FieldPathSelectorConnection:
			values = append(values, source.Connection)
		case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
			if source.ConnectionStatusChangeTime != nil {
				values = append(values, source.ConnectionStatusChangeTime)
			}
		case ProbeStatus_FieldPathSelectorBandwidth:
			if source.Bandwidth != nil {
				values = append(values, source.Bandwidth)
			}
		case ProbeStatus_FieldPathSelectorNetworkInterfaces:
			if source.NetworkInterfaces != nil {
				values = append(values, source.NetworkInterfaces)
			}
		case ProbeStatus_FieldPathSelectorAgentType:
			values = append(values, source.AgentType)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Status))
}

// GetSingle returns value pointed by specific field of from source Probe_Status
func (fp *ProbeStatus_FieldTerminalPath) GetSingle(source *Probe_Status) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
		return source.GetExternalIpAddressV4(), source != nil
	case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
		return source.GetExternalIpAddressV6(), source != nil
	case ProbeStatus_FieldPathSelectorExternalHostname:
		return source.GetExternalHostname(), source != nil
	case ProbeStatus_FieldPathSelectorAsInfo:
		res := source.GetAsInfo()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorCarrier:
		res := source.GetCarrier()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorActiveLocation:
		res := source.GetActiveLocation()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		res := source.GetDiscoveredLocation()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		res := source.GetSoftwareVersion()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorSystemInfo:
		res := source.GetSystemInfo()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorActivation:
		res := source.GetActivation()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorConnection:
		return source.GetConnection(), source != nil
	case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
		res := source.GetConnectionStatusChangeTime()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorBandwidth:
		res := source.GetBandwidth()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		res := source.GetNetworkInterfaces()
		return res, res != nil
	case ProbeStatus_FieldPathSelectorAgentType:
		return source.GetAgentType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fp.selector))
	}
}

func (fp *ProbeStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Status))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
		return ""
	case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
		return ""
	case ProbeStatus_FieldPathSelectorExternalHostname:
		return ""
	case ProbeStatus_FieldPathSelectorAsInfo:
		return (*common.ASInfo)(nil)
	case ProbeStatus_FieldPathSelectorCarrier:
		return (*common.Carrier)(nil)
	case ProbeStatus_FieldPathSelectorActiveLocation:
		return (*common.Location)(nil)
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		return (*common.Location)(nil)
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		return (*common.SoftwareVersion)(nil)
	case ProbeStatus_FieldPathSelectorSystemInfo:
		return (*Probe_Status_System)(nil)
	case ProbeStatus_FieldPathSelectorActivation:
		return (*Probe_Status_ActivationState)(nil)
	case ProbeStatus_FieldPathSelectorConnection:
		return Probe_Status_CONNECTION_STATUS_UNSPECIFIED
	case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
		return (*timestamp.Timestamp)(nil)
	case ProbeStatus_FieldPathSelectorBandwidth:
		return (*Probe_Status_Bandwidth)(nil)
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return (map[string]*Probe_Status_NetworkInterface)(nil)
	case ProbeStatus_FieldPathSelectorAgentType:
		return Probe_UNKNOWN
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fp.selector))
	}
}

func (fp *ProbeStatus_FieldTerminalPath) ClearValue(item *Probe_Status) {
	if item != nil {
		switch fp.selector {
		case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
			item.ExternalIpAddressV4 = ""
		case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
			item.ExternalIpAddressV6 = ""
		case ProbeStatus_FieldPathSelectorExternalHostname:
			item.ExternalHostname = ""
		case ProbeStatus_FieldPathSelectorAsInfo:
			item.AsInfo = nil
		case ProbeStatus_FieldPathSelectorCarrier:
			item.Carrier = nil
		case ProbeStatus_FieldPathSelectorActiveLocation:
			item.ActiveLocation = nil
		case ProbeStatus_FieldPathSelectorDiscoveredLocation:
			item.DiscoveredLocation = nil
		case ProbeStatus_FieldPathSelectorSoftwareVersion:
			item.SoftwareVersion = nil
		case ProbeStatus_FieldPathSelectorSystemInfo:
			item.SystemInfo = nil
		case ProbeStatus_FieldPathSelectorActivation:
			item.Activation = nil
		case ProbeStatus_FieldPathSelectorConnection:
			item.Connection = Probe_Status_CONNECTION_STATUS_UNSPECIFIED
		case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
			item.ConnectionStatusChangeTime = nil
		case ProbeStatus_FieldPathSelectorBandwidth:
			item.Bandwidth = nil
		case ProbeStatus_FieldPathSelectorNetworkInterfaces:
			item.NetworkInterfaces = nil
		case ProbeStatus_FieldPathSelectorAgentType:
			item.AgentType = Probe_UNKNOWN
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatus_FieldPathSelectorExternalIpAddressV4 ||
		fp.selector == ProbeStatus_FieldPathSelectorExternalIpAddressV6 ||
		fp.selector == ProbeStatus_FieldPathSelectorExternalHostname ||
		fp.selector == ProbeStatus_FieldPathSelectorConnection ||
		fp.selector == ProbeStatus_FieldPathSelectorConnectionStatusChangeTime ||
		fp.selector == ProbeStatus_FieldPathSelectorAgentType
}

func (fp *ProbeStatus_FieldTerminalPath) WithIValue(value interface{}) ProbeStatus_FieldPathValue {
	switch fp.selector {
	case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatus_FieldPathSelectorExternalHostname:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatus_FieldPathSelectorAsInfo:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*common.ASInfo)}
	case ProbeStatus_FieldPathSelectorCarrier:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*common.Carrier)}
	case ProbeStatus_FieldPathSelectorActiveLocation:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*common.SoftwareVersion)}
	case ProbeStatus_FieldPathSelectorSystemInfo:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*Probe_Status_System)}
	case ProbeStatus_FieldPathSelectorActivation:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*Probe_Status_ActivationState)}
	case ProbeStatus_FieldPathSelectorConnection:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(Probe_Status_ConnectionStatus)}
	case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case ProbeStatus_FieldPathSelectorBandwidth:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(*Probe_Status_Bandwidth)}
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(map[string]*Probe_Status_NetworkInterface)}
	case ProbeStatus_FieldPathSelectorAgentType:
		return &ProbeStatus_FieldTerminalPathValue{ProbeStatus_FieldTerminalPath: *fp, value: value.(Probe_AgentType)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fp.selector))
	}
}

func (fp *ProbeStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatus_FieldPathArrayOfValues {
	fpaov := &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatus_FieldPathSelectorExternalHostname:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatus_FieldPathSelectorAsInfo:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*common.ASInfo)}
	case ProbeStatus_FieldPathSelectorCarrier:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*common.Carrier)}
	case ProbeStatus_FieldPathSelectorActiveLocation:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*common.SoftwareVersion)}
	case ProbeStatus_FieldPathSelectorSystemInfo:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*Probe_Status_System)}
	case ProbeStatus_FieldPathSelectorActivation:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*Probe_Status_ActivationState)}
	case ProbeStatus_FieldPathSelectorConnection:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]Probe_Status_ConnectionStatus)}
	case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case ProbeStatus_FieldPathSelectorBandwidth:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]*Probe_Status_Bandwidth)}
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]map[string]*Probe_Status_NetworkInterface)}
	case ProbeStatus_FieldPathSelectorAgentType:
		return &ProbeStatus_FieldTerminalPathArrayOfValues{ProbeStatus_FieldTerminalPath: *fp, values: values.([]Probe_AgentType)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fp.selector))
	}
}

func (fp *ProbeStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ProbeStatus_FieldPathMap struct {
	key      string
	selector ProbeStatus_FieldPathSelector
}

var _ ProbeStatus_FieldPath = (*ProbeStatus_FieldPathMap)(nil)

func (fpm *ProbeStatus_FieldPathMap) Selector() ProbeStatus_FieldPathSelector {
	return fpm.selector
}

func (fpm *ProbeStatus_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ProbeStatus_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ProbeStatus_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source Probe_Status
func (fpm *ProbeStatus_FieldPathMap) Get(source *Probe_Status) (values []interface{}) {
	switch fpm.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		if value, ok := source.GetNetworkInterfaces()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpm.selector))
	}
	return
}

func (fpm *ProbeStatus_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*Probe_Status))
}

// GetSingle returns value by selected field map key from source Probe_Status
func (fpm *ProbeStatus_FieldPathMap) GetSingle(source *Probe_Status) (interface{}, bool) {
	switch fpm.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		res, ok := source.GetNetworkInterfaces()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpm.selector))
	}
}

func (fpm *ProbeStatus_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*Probe_Status))
}

// GetDefault returns a default value of the field type
func (fpm *ProbeStatus_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		var v *Probe_Status_NetworkInterface
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpm.selector))
	}
}

func (fpm *ProbeStatus_FieldPathMap) ClearValue(item *Probe_Status) {
	if item != nil {
		switch fpm.selector {
		case ProbeStatus_FieldPathSelectorNetworkInterfaces:
			delete(item.NetworkInterfaces, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpm.selector))
		}
	}
}

func (fpm *ProbeStatus_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*Probe_Status))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ProbeStatus_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpm.selector))
	}
}

func (fpm *ProbeStatus_FieldPathMap) WithIValue(value interface{}) ProbeStatus_FieldPathValue {
	switch fpm.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return &ProbeStatus_FieldPathMapValue{ProbeStatus_FieldPathMap: *fpm, value: value.(*Probe_Status_NetworkInterface)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpm.selector))
	}
}

func (fpm *ProbeStatus_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ProbeStatus_FieldPathMap) WithIArrayOfValues(values interface{}) ProbeStatus_FieldPathArrayOfValues {
	switch fpm.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return &ProbeStatus_FieldPathMapArrayOfValues{ProbeStatus_FieldPathMap: *fpm, values: values.([]*Probe_Status_NetworkInterface)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpm.selector))
	}
}

func (fpm *ProbeStatus_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ProbeStatus_FieldPathMap) WithIArrayItemValue(value interface{}) ProbeStatus_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ProbeStatus_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type ProbeStatus_FieldSubPath struct {
	selector ProbeStatus_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbeStatus_FieldPath = (*ProbeStatus_FieldSubPath)(nil)

func (fps *ProbeStatus_FieldSubPath) Selector() ProbeStatus_FieldPathSelector {
	return fps.selector
}
func (fps *ProbeStatus_FieldSubPath) AsAsInfoSubPath() (common.ASInfo_FieldPath, bool) {
	res, ok := fps.subPath.(common.ASInfo_FieldPath)
	return res, ok
}
func (fps *ProbeStatus_FieldSubPath) AsCarrierSubPath() (common.Carrier_FieldPath, bool) {
	res, ok := fps.subPath.(common.Carrier_FieldPath)
	return res, ok
}
func (fps *ProbeStatus_FieldSubPath) AsActiveLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *ProbeStatus_FieldSubPath) AsDiscoveredLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *ProbeStatus_FieldSubPath) AsSoftwareVersionSubPath() (common.SoftwareVersion_FieldPath, bool) {
	res, ok := fps.subPath.(common.SoftwareVersion_FieldPath)
	return res, ok
}
func (fps *ProbeStatus_FieldSubPath) AsSystemInfoSubPath() (ProbeStatusSystem_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeStatusSystem_FieldPath)
	return res, ok
}
func (fps *ProbeStatus_FieldSubPath) AsActivationSubPath() (ProbeStatusActivationState_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeStatusActivationState_FieldPath)
	return res, ok
}
func (fps *ProbeStatus_FieldSubPath) AsBandwidthSubPath() (ProbeStatusBandwidth_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeStatusBandwidth_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbeStatus_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbeStatus_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Probe_Status
func (fps *ProbeStatus_FieldSubPath) Get(source *Probe_Status) (values []interface{}) {
	if asASInfoFieldPath, ok := fps.AsAsInfoSubPath(); ok {
		values = append(values, asASInfoFieldPath.Get(source.GetAsInfo())...)
	} else if asCarrierFieldPath, ok := fps.AsCarrierSubPath(); ok {
		values = append(values, asCarrierFieldPath.Get(source.GetCarrier())...)
	} else if asLocationFieldPath, ok := fps.AsActiveLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetActiveLocation())...)
	} else if asLocationFieldPath, ok := fps.AsDiscoveredLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetDiscoveredLocation())...)
	} else if asSoftwareVersionFieldPath, ok := fps.AsSoftwareVersionSubPath(); ok {
		values = append(values, asSoftwareVersionFieldPath.Get(source.GetSoftwareVersion())...)
	} else if asSystemFieldPath, ok := fps.AsSystemInfoSubPath(); ok {
		values = append(values, asSystemFieldPath.Get(source.GetSystemInfo())...)
	} else if asActivationStateFieldPath, ok := fps.AsActivationSubPath(); ok {
		values = append(values, asActivationStateFieldPath.Get(source.GetActivation())...)
	} else if asBandwidthFieldPath, ok := fps.AsBandwidthSubPath(); ok {
		values = append(values, asBandwidthFieldPath.Get(source.GetBandwidth())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fps.selector))
	}
	return
}

func (fps *ProbeStatus_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Probe_Status))
}

// GetSingle returns value of selected field from source Probe_Status
func (fps *ProbeStatus_FieldSubPath) GetSingle(source *Probe_Status) (interface{}, bool) {
	switch fps.selector {
	case ProbeStatus_FieldPathSelectorAsInfo:
		if source.GetAsInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAsInfo())
	case ProbeStatus_FieldPathSelectorCarrier:
		if source.GetCarrier() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCarrier())
	case ProbeStatus_FieldPathSelectorActiveLocation:
		if source.GetActiveLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetActiveLocation())
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		if source.GetDiscoveredLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDiscoveredLocation())
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		if source.GetSoftwareVersion() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSoftwareVersion())
	case ProbeStatus_FieldPathSelectorSystemInfo:
		if source.GetSystemInfo() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSystemInfo())
	case ProbeStatus_FieldPathSelectorActivation:
		if source.GetActivation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetActivation())
	case ProbeStatus_FieldPathSelectorBandwidth:
		if source.GetBandwidth() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBandwidth())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fps.selector))
	}
}

func (fps *ProbeStatus_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Probe_Status))
}

// GetDefault returns a default value of the field type
func (fps *ProbeStatus_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbeStatus_FieldSubPath) ClearValue(item *Probe_Status) {
	if item != nil {
		switch fps.selector {
		case ProbeStatus_FieldPathSelectorAsInfo:
			fps.subPath.ClearValueRaw(item.AsInfo)
		case ProbeStatus_FieldPathSelectorCarrier:
			fps.subPath.ClearValueRaw(item.Carrier)
		case ProbeStatus_FieldPathSelectorActiveLocation:
			fps.subPath.ClearValueRaw(item.ActiveLocation)
		case ProbeStatus_FieldPathSelectorDiscoveredLocation:
			fps.subPath.ClearValueRaw(item.DiscoveredLocation)
		case ProbeStatus_FieldPathSelectorSoftwareVersion:
			fps.subPath.ClearValueRaw(item.SoftwareVersion)
		case ProbeStatus_FieldPathSelectorSystemInfo:
			fps.subPath.ClearValueRaw(item.SystemInfo)
		case ProbeStatus_FieldPathSelectorActivation:
			fps.subPath.ClearValueRaw(item.Activation)
		case ProbeStatus_FieldPathSelectorBandwidth:
			fps.subPath.ClearValueRaw(item.Bandwidth)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fps.selector))
		}
	}
}

func (fps *ProbeStatus_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Probe_Status))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbeStatus_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbeStatus_FieldSubPath) WithIValue(value interface{}) ProbeStatus_FieldPathValue {
	return &ProbeStatus_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbeStatus_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbeStatus_FieldSubPath) WithIArrayOfValues(values interface{}) ProbeStatus_FieldPathArrayOfValues {
	return &ProbeStatus_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbeStatus_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbeStatus_FieldSubPath) WithIArrayItemValue(value interface{}) ProbeStatus_FieldPathArrayItemValue {
	return &ProbeStatus_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbeStatus_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbeStatus_FieldPathValue allows storing values for Status fields according to their type
type ProbeStatus_FieldPathValue interface {
	ProbeStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Status)
	CompareWith(*Probe_Status) (cmp int, comparable bool)
}

func ParseProbeStatus_FieldPathValue(pathStr, valueStr string) (ProbeStatus_FieldPathValue, error) {
	fp, err := ParseProbeStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatus_FieldPathValue), nil
}

func MustParseProbeStatus_FieldPathValue(pathStr, valueStr string) ProbeStatus_FieldPathValue {
	fpv, err := ParseProbeStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatus_FieldTerminalPathValue struct {
	ProbeStatus_FieldTerminalPath
	value interface{}
}

var _ ProbeStatus_FieldPathValue = (*ProbeStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *ProbeStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsExternalIpAddressV4Value() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsExternalIpAddressV6Value() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsExternalHostnameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsAsInfoValue() (*common.ASInfo, bool) {
	res, ok := fpv.value.(*common.ASInfo)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsCarrierValue() (*common.Carrier, bool) {
	res, ok := fpv.value.(*common.Carrier)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsActiveLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsDiscoveredLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsSoftwareVersionValue() (*common.SoftwareVersion, bool) {
	res, ok := fpv.value.(*common.SoftwareVersion)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsSystemInfoValue() (*Probe_Status_System, bool) {
	res, ok := fpv.value.(*Probe_Status_System)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsActivationValue() (*Probe_Status_ActivationState, bool) {
	res, ok := fpv.value.(*Probe_Status_ActivationState)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsConnectionValue() (Probe_Status_ConnectionStatus, bool) {
	res, ok := fpv.value.(Probe_Status_ConnectionStatus)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsConnectionStatusChangeTimeValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsBandwidthValue() (*Probe_Status_Bandwidth, bool) {
	res, ok := fpv.value.(*Probe_Status_Bandwidth)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsNetworkInterfacesValue() (map[string]*Probe_Status_NetworkInterface, bool) {
	res, ok := fpv.value.(map[string]*Probe_Status_NetworkInterface)
	return res, ok
}
func (fpv *ProbeStatus_FieldTerminalPathValue) AsAgentTypeValue() (Probe_AgentType, bool) {
	res, ok := fpv.value.(Probe_AgentType)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *ProbeStatus_FieldTerminalPathValue) SetTo(target **Probe_Status) {
	if *target == nil {
		*target = new(Probe_Status)
	}
	switch fpv.selector {
	case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
		(*target).ExternalIpAddressV4 = fpv.value.(string)
	case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
		(*target).ExternalIpAddressV6 = fpv.value.(string)
	case ProbeStatus_FieldPathSelectorExternalHostname:
		(*target).ExternalHostname = fpv.value.(string)
	case ProbeStatus_FieldPathSelectorAsInfo:
		(*target).AsInfo = fpv.value.(*common.ASInfo)
	case ProbeStatus_FieldPathSelectorCarrier:
		(*target).Carrier = fpv.value.(*common.Carrier)
	case ProbeStatus_FieldPathSelectorActiveLocation:
		(*target).ActiveLocation = fpv.value.(*common.Location)
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		(*target).DiscoveredLocation = fpv.value.(*common.Location)
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		(*target).SoftwareVersion = fpv.value.(*common.SoftwareVersion)
	case ProbeStatus_FieldPathSelectorSystemInfo:
		(*target).SystemInfo = fpv.value.(*Probe_Status_System)
	case ProbeStatus_FieldPathSelectorActivation:
		(*target).Activation = fpv.value.(*Probe_Status_ActivationState)
	case ProbeStatus_FieldPathSelectorConnection:
		(*target).Connection = fpv.value.(Probe_Status_ConnectionStatus)
	case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
		(*target).ConnectionStatusChangeTime = fpv.value.(*timestamp.Timestamp)
	case ProbeStatus_FieldPathSelectorBandwidth:
		(*target).Bandwidth = fpv.value.(*Probe_Status_Bandwidth)
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		(*target).NetworkInterfaces = fpv.value.(map[string]*Probe_Status_NetworkInterface)
	case ProbeStatus_FieldPathSelectorAgentType:
		(*target).AgentType = fpv.value.(Probe_AgentType)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpv.selector))
	}
}

func (fpv *ProbeStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatus_FieldTerminalPathValue' with the value under path in 'Probe_Status'.
func (fpv *ProbeStatus_FieldTerminalPathValue) CompareWith(source *Probe_Status) (int, bool) {
	switch fpv.selector {
	case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
		leftValue := fpv.value.(string)
		rightValue := source.GetExternalIpAddressV4()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
		leftValue := fpv.value.(string)
		rightValue := source.GetExternalIpAddressV6()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatus_FieldPathSelectorExternalHostname:
		leftValue := fpv.value.(string)
		rightValue := source.GetExternalHostname()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatus_FieldPathSelectorAsInfo:
		return 0, false
	case ProbeStatus_FieldPathSelectorCarrier:
		return 0, false
	case ProbeStatus_FieldPathSelectorActiveLocation:
		return 0, false
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		return 0, false
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		return 0, false
	case ProbeStatus_FieldPathSelectorSystemInfo:
		return 0, false
	case ProbeStatus_FieldPathSelectorActivation:
		return 0, false
	case ProbeStatus_FieldPathSelectorConnection:
		leftValue := fpv.value.(Probe_Status_ConnectionStatus)
		rightValue := source.GetConnection()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetConnectionStatusChangeTime()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatus_FieldPathSelectorBandwidth:
		return 0, false
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return 0, false
	case ProbeStatus_FieldPathSelectorAgentType:
		leftValue := fpv.value.(Probe_AgentType)
		rightValue := source.GetAgentType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpv.selector))
	}
}

func (fpv *ProbeStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Status))
}

type ProbeStatus_FieldPathMapValue struct {
	ProbeStatus_FieldPathMap
	value interface{}
}

var _ ProbeStatus_FieldPathValue = (*ProbeStatus_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in Status as interface{}
func (fpmv *ProbeStatus_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ProbeStatus_FieldPathMapValue) AsNetworkInterfacesElementValue() (*Probe_Status_NetworkInterface, bool) {
	res, ok := fpmv.value.(*Probe_Status_NetworkInterface)
	return res, ok
}

// SetTo stores value for selected field in Status
func (fpmv *ProbeStatus_FieldPathMapValue) SetTo(target **Probe_Status) {
	if *target == nil {
		*target = new(Probe_Status)
	}
	switch fpmv.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		if (*target).NetworkInterfaces == nil {
			(*target).NetworkInterfaces = make(map[string]*Probe_Status_NetworkInterface)
		}
		(*target).NetworkInterfaces[fpmv.key] = fpmv.value.(*Probe_Status_NetworkInterface)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpmv.selector))
	}
}

func (fpmv *ProbeStatus_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatus_FieldPathMapValue' with the value under path in 'Probe_Status'.
func (fpmv *ProbeStatus_FieldPathMapValue) CompareWith(source *Probe_Status) (int, bool) {
	switch fpmv.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpmv.selector))
	}
}

func (fpmv *ProbeStatus_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*Probe_Status))
}

type ProbeStatus_FieldSubPathValue struct {
	ProbeStatus_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbeStatus_FieldPathValue = (*ProbeStatus_FieldSubPathValue)(nil)

func (fpvs *ProbeStatus_FieldSubPathValue) AsAsInfoPathValue() (common.ASInfo_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.ASInfo_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeStatus_FieldSubPathValue) AsCarrierPathValue() (common.Carrier_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Carrier_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeStatus_FieldSubPathValue) AsActiveLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeStatus_FieldSubPathValue) AsDiscoveredLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeStatus_FieldSubPathValue) AsSoftwareVersionPathValue() (common.SoftwareVersion_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.SoftwareVersion_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeStatus_FieldSubPathValue) AsSystemInfoPathValue() (ProbeStatusSystem_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeStatusSystem_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeStatus_FieldSubPathValue) AsActivationPathValue() (ProbeStatusActivationState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeStatusActivationState_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeStatus_FieldSubPathValue) AsBandwidthPathValue() (ProbeStatusBandwidth_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeStatusBandwidth_FieldPathValue)
	return res, ok
}

func (fpvs *ProbeStatus_FieldSubPathValue) SetTo(target **Probe_Status) {
	if *target == nil {
		*target = new(Probe_Status)
	}
	switch fpvs.Selector() {
	case ProbeStatus_FieldPathSelectorAsInfo:
		fpvs.subPathValue.(common.ASInfo_FieldPathValue).SetTo(&(*target).AsInfo)
	case ProbeStatus_FieldPathSelectorCarrier:
		fpvs.subPathValue.(common.Carrier_FieldPathValue).SetTo(&(*target).Carrier)
	case ProbeStatus_FieldPathSelectorActiveLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).ActiveLocation)
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).DiscoveredLocation)
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		fpvs.subPathValue.(common.SoftwareVersion_FieldPathValue).SetTo(&(*target).SoftwareVersion)
	case ProbeStatus_FieldPathSelectorSystemInfo:
		fpvs.subPathValue.(ProbeStatusSystem_FieldPathValue).SetTo(&(*target).SystemInfo)
	case ProbeStatus_FieldPathSelectorActivation:
		fpvs.subPathValue.(ProbeStatusActivationState_FieldPathValue).SetTo(&(*target).Activation)
	case ProbeStatus_FieldPathSelectorBandwidth:
		fpvs.subPathValue.(ProbeStatusBandwidth_FieldPathValue).SetTo(&(*target).Bandwidth)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeStatus_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbeStatus_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbeStatus_FieldSubPathValue) CompareWith(source *Probe_Status) (int, bool) {
	switch fpvs.Selector() {
	case ProbeStatus_FieldPathSelectorAsInfo:
		return fpvs.subPathValue.(common.ASInfo_FieldPathValue).CompareWith(source.GetAsInfo())
	case ProbeStatus_FieldPathSelectorCarrier:
		return fpvs.subPathValue.(common.Carrier_FieldPathValue).CompareWith(source.GetCarrier())
	case ProbeStatus_FieldPathSelectorActiveLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetActiveLocation())
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetDiscoveredLocation())
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		return fpvs.subPathValue.(common.SoftwareVersion_FieldPathValue).CompareWith(source.GetSoftwareVersion())
	case ProbeStatus_FieldPathSelectorSystemInfo:
		return fpvs.subPathValue.(ProbeStatusSystem_FieldPathValue).CompareWith(source.GetSystemInfo())
	case ProbeStatus_FieldPathSelectorActivation:
		return fpvs.subPathValue.(ProbeStatusActivationState_FieldPathValue).CompareWith(source.GetActivation())
	case ProbeStatus_FieldPathSelectorBandwidth:
		return fpvs.subPathValue.(ProbeStatusBandwidth_FieldPathValue).CompareWith(source.GetBandwidth())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeStatus_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Probe_Status))
}

// ProbeStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type ProbeStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatus_FieldPath
	ContainsValue(*Probe_Status) bool
}

// ParseProbeStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatus_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatus_FieldPathArrayItemValue), nil
}

func MustParseProbeStatus_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatus_FieldTerminalPathArrayItemValue struct {
	ProbeStatus_FieldTerminalPath
	value interface{}
}

var _ ProbeStatus_FieldPathArrayItemValue = (*ProbeStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Status as interface{}
func (fpaiv *ProbeStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatus_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *ProbeStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Status) bool {
	slice := fpaiv.ProbeStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbeStatus_FieldSubPathArrayItemValue struct {
	ProbeStatus_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) AsAsInfoPathItemValue() (common.ASInfo_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.ASInfo_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) AsCarrierPathItemValue() (common.Carrier_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Carrier_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) AsActiveLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) AsDiscoveredLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) AsSoftwareVersionPathItemValue() (common.SoftwareVersion_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.SoftwareVersion_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) AsSystemInfoPathItemValue() (ProbeStatusSystem_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeStatusSystem_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) AsActivationPathItemValue() (ProbeStatusActivationState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeStatusActivationState_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) AsBandwidthPathItemValue() (ProbeStatusBandwidth_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeStatusBandwidth_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaivs *ProbeStatus_FieldSubPathArrayItemValue) ContainsValue(source *Probe_Status) bool {
	switch fpaivs.Selector() {
	case ProbeStatus_FieldPathSelectorAsInfo:
		return fpaivs.subPathItemValue.(common.ASInfo_FieldPathArrayItemValue).ContainsValue(source.GetAsInfo())
	case ProbeStatus_FieldPathSelectorCarrier:
		return fpaivs.subPathItemValue.(common.Carrier_FieldPathArrayItemValue).ContainsValue(source.GetCarrier())
	case ProbeStatus_FieldPathSelectorActiveLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetActiveLocation())
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetDiscoveredLocation())
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		return fpaivs.subPathItemValue.(common.SoftwareVersion_FieldPathArrayItemValue).ContainsValue(source.GetSoftwareVersion())
	case ProbeStatus_FieldPathSelectorSystemInfo:
		return fpaivs.subPathItemValue.(ProbeStatusSystem_FieldPathArrayItemValue).ContainsValue(source.GetSystemInfo())
	case ProbeStatus_FieldPathSelectorActivation:
		return fpaivs.subPathItemValue.(ProbeStatusActivationState_FieldPathArrayItemValue).ContainsValue(source.GetActivation())
	case ProbeStatus_FieldPathSelectorBandwidth:
		return fpaivs.subPathItemValue.(ProbeStatusBandwidth_FieldPathArrayItemValue).ContainsValue(source.GetBandwidth())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status: %d", fpaivs.Selector()))
	}
}

// ProbeStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type ProbeStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatus_FieldPath
}

func ParseProbeStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatus_FieldPathArrayOfValues), nil
}

func MustParseProbeStatus_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatus_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatus_FieldTerminalPathArrayOfValues struct {
	ProbeStatus_FieldTerminalPath
	values interface{}
}

var _ ProbeStatus_FieldPathArrayOfValues = (*ProbeStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatus_FieldPathSelectorExternalIpAddressV4:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorExternalIpAddressV6:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorExternalHostname:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorAsInfo:
		for _, v := range fpaov.values.([]*common.ASInfo) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorCarrier:
		for _, v := range fpaov.values.([]*common.Carrier) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorActiveLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorDiscoveredLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorSoftwareVersion:
		for _, v := range fpaov.values.([]*common.SoftwareVersion) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorSystemInfo:
		for _, v := range fpaov.values.([]*Probe_Status_System) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorActivation:
		for _, v := range fpaov.values.([]*Probe_Status_ActivationState) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorConnection:
		for _, v := range fpaov.values.([]Probe_Status_ConnectionStatus) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorConnectionStatusChangeTime:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorBandwidth:
		for _, v := range fpaov.values.([]*Probe_Status_Bandwidth) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		for _, v := range fpaov.values.([]map[string]*Probe_Status_NetworkInterface) {
			values = append(values, v)
		}
	case ProbeStatus_FieldPathSelectorAgentType:
		for _, v := range fpaov.values.([]Probe_AgentType) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsExternalIpAddressV4ArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsExternalIpAddressV6ArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsExternalHostnameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsAsInfoArrayOfValues() ([]*common.ASInfo, bool) {
	res, ok := fpaov.values.([]*common.ASInfo)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsCarrierArrayOfValues() ([]*common.Carrier, bool) {
	res, ok := fpaov.values.([]*common.Carrier)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsActiveLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsDiscoveredLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsSoftwareVersionArrayOfValues() ([]*common.SoftwareVersion, bool) {
	res, ok := fpaov.values.([]*common.SoftwareVersion)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsSystemInfoArrayOfValues() ([]*Probe_Status_System, bool) {
	res, ok := fpaov.values.([]*Probe_Status_System)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsActivationArrayOfValues() ([]*Probe_Status_ActivationState, bool) {
	res, ok := fpaov.values.([]*Probe_Status_ActivationState)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsConnectionArrayOfValues() ([]Probe_Status_ConnectionStatus, bool) {
	res, ok := fpaov.values.([]Probe_Status_ConnectionStatus)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsConnectionStatusChangeTimeArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsBandwidthArrayOfValues() ([]*Probe_Status_Bandwidth, bool) {
	res, ok := fpaov.values.([]*Probe_Status_Bandwidth)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsNetworkInterfacesArrayOfValues() ([]map[string]*Probe_Status_NetworkInterface, bool) {
	res, ok := fpaov.values.([]map[string]*Probe_Status_NetworkInterface)
	return res, ok
}
func (fpaov *ProbeStatus_FieldTerminalPathArrayOfValues) AsAgentTypeArrayOfValues() ([]Probe_AgentType, bool) {
	res, ok := fpaov.values.([]Probe_AgentType)
	return res, ok
}

type ProbeStatus_FieldPathMapArrayOfValues struct {
	ProbeStatus_FieldPathMap
	values interface{}
}

var _ ProbeStatus_FieldPathArrayOfValues = (*ProbeStatus_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ProbeStatus_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ProbeStatus_FieldPathSelectorNetworkInterfaces:
		for _, v := range fpmaov.values.([]*Probe_Status_NetworkInterface) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ProbeStatus_FieldPathMapArrayOfValues) AsNetworkInterfacesArrayOfElementValues() ([]*Probe_Status_NetworkInterface, bool) {
	res, ok := fpmaov.values.([]*Probe_Status_NetworkInterface)
	return res, ok
}

type ProbeStatus_FieldSubPathArrayOfValues struct {
	ProbeStatus_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbeStatus_FieldPathArrayOfValues = (*ProbeStatus_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) AsAsInfoPathArrayOfValues() (common.ASInfo_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.ASInfo_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) AsCarrierPathArrayOfValues() (common.Carrier_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Carrier_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) AsActiveLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) AsDiscoveredLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) AsSoftwareVersionPathArrayOfValues() (common.SoftwareVersion_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.SoftwareVersion_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) AsSystemInfoPathArrayOfValues() (ProbeStatusSystem_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeStatusSystem_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) AsActivationPathArrayOfValues() (ProbeStatusActivationState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeStatusActivationState_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeStatus_FieldSubPathArrayOfValues) AsBandwidthPathArrayOfValues() (ProbeStatusBandwidth_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeStatusBandwidth_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeSpecActivationSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeSpecActivationSpec_FieldPathSelector
	Get(source *Probe_Spec_ActivationSpec) []interface{}
	GetSingle(source *Probe_Spec_ActivationSpec) (interface{}, bool)
	ClearValue(item *Probe_Spec_ActivationSpec)

	// Those methods build corresponding ProbeSpecActivationSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeSpecActivationSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeSpecActivationSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeSpecActivationSpec_FieldPathArrayItemValue
}

type ProbeSpecActivationSpec_FieldPathSelector int32

const (
	ProbeSpecActivationSpec_FieldPathSelectorType                   ProbeSpecActivationSpec_FieldPathSelector = 0
	ProbeSpecActivationSpec_FieldPathSelectorToken                  ProbeSpecActivationSpec_FieldPathSelector = 1
	ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate ProbeSpecActivationSpec_FieldPathSelector = 2
	ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras       ProbeSpecActivationSpec_FieldPathSelector = 3
	ProbeSpecActivationSpec_FieldPathSelectorReusableToken          ProbeSpecActivationSpec_FieldPathSelector = 4
)

func (s ProbeSpecActivationSpec_FieldPathSelector) String() string {
	switch s {
	case ProbeSpecActivationSpec_FieldPathSelectorType:
		return "type"
	case ProbeSpecActivationSpec_FieldPathSelectorToken:
		return "token"
	case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
		return "send_invitation_on_create"
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		return "invitation_extras"
	case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
		return "reusable_token"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", s))
	}
}

func BuildProbeSpecActivationSpec_FieldPath(fp gotenobject.RawFieldPath) (ProbeSpecActivationSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Spec_ActivationSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &ProbeSpecActivationSpec_FieldTerminalPath{selector: ProbeSpecActivationSpec_FieldPathSelectorType}, nil
		case "token":
			return &ProbeSpecActivationSpec_FieldTerminalPath{selector: ProbeSpecActivationSpec_FieldPathSelectorToken}, nil
		case "send_invitation_on_create", "sendInvitationOnCreate", "send-invitation-on-create":
			return &ProbeSpecActivationSpec_FieldTerminalPath{selector: ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate}, nil
		case "invitation_extras", "invitationExtras", "invitation-extras":
			return &ProbeSpecActivationSpec_FieldTerminalPath{selector: ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras}, nil
		case "reusable_token", "reusableToken", "reusable-token":
			return &ProbeSpecActivationSpec_FieldTerminalPath{selector: ProbeSpecActivationSpec_FieldPathSelectorReusableToken}, nil
		}
	} else {
		switch fp[0] {
		case "invitation_extras", "invitationExtras", "invitation-extras":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object Probe_Spec_ActivationSpec)", fp)
			}
			return &ProbeSpecActivationSpec_FieldPathMap{selector: ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Spec_ActivationSpec", fp)
}

func ParseProbeSpecActivationSpec_FieldPath(rawField string) (ProbeSpecActivationSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeSpecActivationSpec_FieldPath(fp)
}

func MustParseProbeSpecActivationSpec_FieldPath(rawField string) ProbeSpecActivationSpec_FieldPath {
	fp, err := ParseProbeSpecActivationSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeSpecActivationSpec_FieldTerminalPath struct {
	selector ProbeSpecActivationSpec_FieldPathSelector
}

var _ ProbeSpecActivationSpec_FieldPath = (*ProbeSpecActivationSpec_FieldTerminalPath)(nil)

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) Selector() ProbeSpecActivationSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeSpecActivationSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeSpecActivationSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Spec_ActivationSpec
func (fp *ProbeSpecActivationSpec_FieldTerminalPath) Get(source *Probe_Spec_ActivationSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeSpecActivationSpec_FieldPathSelectorType:
			values = append(values, source.Type)
		case ProbeSpecActivationSpec_FieldPathSelectorToken:
			values = append(values, source.Token)
		case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
			values = append(values, source.SendInvitationOnCreate)
		case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
			values = append(values, source.InvitationExtras)
		case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
			values = append(values, source.ReusableToken)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Spec_ActivationSpec))
}

// GetSingle returns value pointed by specific field of from source Probe_Spec_ActivationSpec
func (fp *ProbeSpecActivationSpec_FieldTerminalPath) GetSingle(source *Probe_Spec_ActivationSpec) (interface{}, bool) {
	switch fp.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorType:
		return source.GetType(), source != nil
	case ProbeSpecActivationSpec_FieldPathSelectorToken:
		return source.GetToken(), source != nil
	case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
		return source.GetSendInvitationOnCreate(), source != nil
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		res := source.GetInvitationExtras()
		return res, res != nil
	case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
		return source.GetReusableToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fp.selector))
	}
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Spec_ActivationSpec))
}

// GetDefault returns a default value of the field type
func (fp *ProbeSpecActivationSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorType:
		return Probe_Spec_ActivationSpec_ACTIVATION_TYPE_UNSPECIFIED
	case ProbeSpecActivationSpec_FieldPathSelectorToken:
		return ""
	case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
		return false
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		return (map[string]string)(nil)
	case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fp.selector))
	}
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) ClearValue(item *Probe_Spec_ActivationSpec) {
	if item != nil {
		switch fp.selector {
		case ProbeSpecActivationSpec_FieldPathSelectorType:
			item.Type = Probe_Spec_ActivationSpec_ACTIVATION_TYPE_UNSPECIFIED
		case ProbeSpecActivationSpec_FieldPathSelectorToken:
			item.Token = ""
		case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
			item.SendInvitationOnCreate = false
		case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
			item.InvitationExtras = nil
		case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
			item.ReusableToken = false
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fp.selector))
		}
	}
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Spec_ActivationSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeSpecActivationSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeSpecActivationSpec_FieldPathSelectorType ||
		fp.selector == ProbeSpecActivationSpec_FieldPathSelectorToken ||
		fp.selector == ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate ||
		fp.selector == ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras ||
		fp.selector == ProbeSpecActivationSpec_FieldPathSelectorReusableToken
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) WithIValue(value interface{}) ProbeSpecActivationSpec_FieldPathValue {
	switch fp.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorType:
		return &ProbeSpecActivationSpec_FieldTerminalPathValue{ProbeSpecActivationSpec_FieldTerminalPath: *fp, value: value.(Probe_Spec_ActivationSpec_ActivationType)}
	case ProbeSpecActivationSpec_FieldPathSelectorToken:
		return &ProbeSpecActivationSpec_FieldTerminalPathValue{ProbeSpecActivationSpec_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
		return &ProbeSpecActivationSpec_FieldTerminalPathValue{ProbeSpecActivationSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		return &ProbeSpecActivationSpec_FieldTerminalPathValue{ProbeSpecActivationSpec_FieldTerminalPath: *fp, value: value.(map[string]string)}
	case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
		return &ProbeSpecActivationSpec_FieldTerminalPathValue{ProbeSpecActivationSpec_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fp.selector))
	}
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeSpecActivationSpec_FieldPathArrayOfValues {
	fpaov := &ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues{ProbeSpecActivationSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorType:
		return &ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues{ProbeSpecActivationSpec_FieldTerminalPath: *fp, values: values.([]Probe_Spec_ActivationSpec_ActivationType)}
	case ProbeSpecActivationSpec_FieldPathSelectorToken:
		return &ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues{ProbeSpecActivationSpec_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
		return &ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues{ProbeSpecActivationSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		return &ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues{ProbeSpecActivationSpec_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
		return &ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues{ProbeSpecActivationSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeSpecActivationSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fp.selector))
	}
}

func (fp *ProbeSpecActivationSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type ProbeSpecActivationSpec_FieldPathMap struct {
	key      string
	selector ProbeSpecActivationSpec_FieldPathSelector
}

var _ ProbeSpecActivationSpec_FieldPath = (*ProbeSpecActivationSpec_FieldPathMap)(nil)

func (fpm *ProbeSpecActivationSpec_FieldPathMap) Selector() ProbeSpecActivationSpec_FieldPathSelector {
	return fpm.selector
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *ProbeSpecActivationSpec_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *ProbeSpecActivationSpec_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source Probe_Spec_ActivationSpec
func (fpm *ProbeSpecActivationSpec_FieldPathMap) Get(source *Probe_Spec_ActivationSpec) (values []interface{}) {
	switch fpm.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		if value, ok := source.GetInvitationExtras()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpm.selector))
	}
	return
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*Probe_Spec_ActivationSpec))
}

// GetSingle returns value by selected field map key from source Probe_Spec_ActivationSpec
func (fpm *ProbeSpecActivationSpec_FieldPathMap) GetSingle(source *Probe_Spec_ActivationSpec) (interface{}, bool) {
	switch fpm.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		res, ok := source.GetInvitationExtras()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpm.selector))
	}
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*Probe_Spec_ActivationSpec))
}

// GetDefault returns a default value of the field type
func (fpm *ProbeSpecActivationSpec_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpm.selector))
	}
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) ClearValue(item *Probe_Spec_ActivationSpec) {
	if item != nil {
		switch fpm.selector {
		case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
			delete(item.InvitationExtras, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpm.selector))
		}
	}
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*Probe_Spec_ActivationSpec))
}

// IsLeaf - whether field path is holds simple value
func (fpm *ProbeSpecActivationSpec_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpm.selector))
	}
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) WithIValue(value interface{}) ProbeSpecActivationSpec_FieldPathValue {
	switch fpm.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		return &ProbeSpecActivationSpec_FieldPathMapValue{ProbeSpecActivationSpec_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpm.selector))
	}
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) WithIArrayOfValues(values interface{}) ProbeSpecActivationSpec_FieldPathArrayOfValues {
	switch fpm.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		return &ProbeSpecActivationSpec_FieldPathMapArrayOfValues{ProbeSpecActivationSpec_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpm.selector))
	}
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) WithIArrayItemValue(value interface{}) ProbeSpecActivationSpec_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *ProbeSpecActivationSpec_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// ProbeSpecActivationSpec_FieldPathValue allows storing values for ActivationSpec fields according to their type
type ProbeSpecActivationSpec_FieldPathValue interface {
	ProbeSpecActivationSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Spec_ActivationSpec)
	CompareWith(*Probe_Spec_ActivationSpec) (cmp int, comparable bool)
}

func ParseProbeSpecActivationSpec_FieldPathValue(pathStr, valueStr string) (ProbeSpecActivationSpec_FieldPathValue, error) {
	fp, err := ParseProbeSpecActivationSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeSpecActivationSpec_FieldPathValue), nil
}

func MustParseProbeSpecActivationSpec_FieldPathValue(pathStr, valueStr string) ProbeSpecActivationSpec_FieldPathValue {
	fpv, err := ParseProbeSpecActivationSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeSpecActivationSpec_FieldTerminalPathValue struct {
	ProbeSpecActivationSpec_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecActivationSpec_FieldPathValue = (*ProbeSpecActivationSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ActivationSpec' as interface{}
func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) AsTypeValue() (Probe_Spec_ActivationSpec_ActivationType, bool) {
	res, ok := fpv.value.(Probe_Spec_ActivationSpec_ActivationType)
	return res, ok
}
func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) AsTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) AsSendInvitationOnCreateValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) AsInvitationExtrasValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}
func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) AsReusableTokenValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object ActivationSpec
func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) SetTo(target **Probe_Spec_ActivationSpec) {
	if *target == nil {
		*target = new(Probe_Spec_ActivationSpec)
	}
	switch fpv.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorType:
		(*target).Type = fpv.value.(Probe_Spec_ActivationSpec_ActivationType)
	case ProbeSpecActivationSpec_FieldPathSelectorToken:
		(*target).Token = fpv.value.(string)
	case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
		(*target).SendInvitationOnCreate = fpv.value.(bool)
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		(*target).InvitationExtras = fpv.value.(map[string]string)
	case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
		(*target).ReusableToken = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec_ActivationSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeSpecActivationSpec_FieldTerminalPathValue' with the value under path in 'Probe_Spec_ActivationSpec'.
func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) CompareWith(source *Probe_Spec_ActivationSpec) (int, bool) {
	switch fpv.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorType:
		leftValue := fpv.value.(Probe_Spec_ActivationSpec_ActivationType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpecActivationSpec_FieldPathSelectorToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
		leftValue := fpv.value.(bool)
		rightValue := source.GetSendInvitationOnCreate()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		return 0, false
	case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
		leftValue := fpv.value.(bool)
		rightValue := source.GetReusableToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecActivationSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Spec_ActivationSpec))
}

type ProbeSpecActivationSpec_FieldPathMapValue struct {
	ProbeSpecActivationSpec_FieldPathMap
	value interface{}
}

var _ ProbeSpecActivationSpec_FieldPathValue = (*ProbeSpecActivationSpec_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in ActivationSpec as interface{}
func (fpmv *ProbeSpecActivationSpec_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *ProbeSpecActivationSpec_FieldPathMapValue) AsInvitationExtrasElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in ActivationSpec
func (fpmv *ProbeSpecActivationSpec_FieldPathMapValue) SetTo(target **Probe_Spec_ActivationSpec) {
	if *target == nil {
		*target = new(Probe_Spec_ActivationSpec)
	}
	switch fpmv.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		if (*target).InvitationExtras == nil {
			(*target).InvitationExtras = make(map[string]string)
		}
		(*target).InvitationExtras[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpmv.selector))
	}
}

func (fpmv *ProbeSpecActivationSpec_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec_ActivationSpec)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeSpecActivationSpec_FieldPathMapValue' with the value under path in 'Probe_Spec_ActivationSpec'.
func (fpmv *ProbeSpecActivationSpec_FieldPathMapValue) CompareWith(source *Probe_Spec_ActivationSpec) (int, bool) {
	switch fpmv.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		leftValue := fpmv.value.(string)
		rightValue := source.GetInvitationExtras()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_ActivationSpec: %d", fpmv.selector))
	}
}

func (fpmv *ProbeSpecActivationSpec_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*Probe_Spec_ActivationSpec))
}

// ProbeSpecActivationSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for ActivationSpec according to their type
// Present only for array (repeated) types.
type ProbeSpecActivationSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeSpecActivationSpec_FieldPath
	ContainsValue(*Probe_Spec_ActivationSpec) bool
}

// ParseProbeSpecActivationSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeSpecActivationSpec_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeSpecActivationSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeSpecActivationSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeSpecActivationSpec_FieldPathArrayItemValue), nil
}

func MustParseProbeSpecActivationSpec_FieldPathArrayItemValue(pathStr, valueStr string) ProbeSpecActivationSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeSpecActivationSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeSpecActivationSpec_FieldTerminalPathArrayItemValue struct {
	ProbeSpecActivationSpec_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecActivationSpec_FieldPathArrayItemValue = (*ProbeSpecActivationSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Spec_ActivationSpec as interface{}
func (fpaiv *ProbeSpecActivationSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeSpecActivationSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Spec_ActivationSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeSpecActivationSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Spec_ActivationSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ActivationSpec'
func (fpaiv *ProbeSpecActivationSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Spec_ActivationSpec) bool {
	slice := fpaiv.ProbeSpecActivationSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeSpecActivationSpec_FieldPathArrayOfValues allows storing slice of values for ActivationSpec fields according to their type
type ProbeSpecActivationSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeSpecActivationSpec_FieldPath
}

func ParseProbeSpecActivationSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeSpecActivationSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeSpecActivationSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeSpecActivationSpec_FieldPathArrayOfValues), nil
}

func MustParseProbeSpecActivationSpec_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeSpecActivationSpec_FieldPathArrayOfValues {
	fpaov, err := ParseProbeSpecActivationSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues struct {
	ProbeSpecActivationSpec_FieldTerminalPath
	values interface{}
}

var _ ProbeSpecActivationSpec_FieldPathArrayOfValues = (*ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorType:
		for _, v := range fpaov.values.([]Probe_Spec_ActivationSpec_ActivationType) {
			values = append(values, v)
		}
	case ProbeSpecActivationSpec_FieldPathSelectorToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeSpecActivationSpec_FieldPathSelectorSendInvitationOnCreate:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	case ProbeSpecActivationSpec_FieldPathSelectorReusableToken:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]Probe_Spec_ActivationSpec_ActivationType, bool) {
	res, ok := fpaov.values.([]Probe_Spec_ActivationSpec_ActivationType)
	return res, ok
}
func (fpaov *ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues) AsTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues) AsSendInvitationOnCreateArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues) AsInvitationExtrasArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}
func (fpaov *ProbeSpecActivationSpec_FieldTerminalPathArrayOfValues) AsReusableTokenArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type ProbeSpecActivationSpec_FieldPathMapArrayOfValues struct {
	ProbeSpecActivationSpec_FieldPathMap
	values interface{}
}

var _ ProbeSpecActivationSpec_FieldPathArrayOfValues = (*ProbeSpecActivationSpec_FieldPathMapArrayOfValues)(nil)

func (fpmaov *ProbeSpecActivationSpec_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case ProbeSpecActivationSpec_FieldPathSelectorInvitationExtras:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *ProbeSpecActivationSpec_FieldPathMapArrayOfValues) AsInvitationExtrasArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeSpecAccessTokenSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeSpecAccessTokenSpec_FieldPathSelector
	Get(source *Probe_Spec_AccessTokenSpec) []interface{}
	GetSingle(source *Probe_Spec_AccessTokenSpec) (interface{}, bool)
	ClearValue(item *Probe_Spec_AccessTokenSpec)

	// Those methods build corresponding ProbeSpecAccessTokenSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeSpecAccessTokenSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeSpecAccessTokenSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeSpecAccessTokenSpec_FieldPathArrayItemValue
}

type ProbeSpecAccessTokenSpec_FieldPathSelector int32

const (
	ProbeSpecAccessTokenSpec_FieldPathSelectorEnable      ProbeSpecAccessTokenSpec_FieldPathSelector = 0
	ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken ProbeSpecAccessTokenSpec_FieldPathSelector = 1
)

func (s ProbeSpecAccessTokenSpec_FieldPathSelector) String() string {
	switch s {
	case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
		return "enable"
	case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
		return "access_token"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", s))
	}
}

func BuildProbeSpecAccessTokenSpec_FieldPath(fp gotenobject.RawFieldPath) (ProbeSpecAccessTokenSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Spec_AccessTokenSpec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enable":
			return &ProbeSpecAccessTokenSpec_FieldTerminalPath{selector: ProbeSpecAccessTokenSpec_FieldPathSelectorEnable}, nil
		case "access_token", "accessToken", "access-token":
			return &ProbeSpecAccessTokenSpec_FieldTerminalPath{selector: ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Spec_AccessTokenSpec", fp)
}

func ParseProbeSpecAccessTokenSpec_FieldPath(rawField string) (ProbeSpecAccessTokenSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeSpecAccessTokenSpec_FieldPath(fp)
}

func MustParseProbeSpecAccessTokenSpec_FieldPath(rawField string) ProbeSpecAccessTokenSpec_FieldPath {
	fp, err := ParseProbeSpecAccessTokenSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeSpecAccessTokenSpec_FieldTerminalPath struct {
	selector ProbeSpecAccessTokenSpec_FieldPathSelector
}

var _ ProbeSpecAccessTokenSpec_FieldPath = (*ProbeSpecAccessTokenSpec_FieldTerminalPath)(nil)

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) Selector() ProbeSpecAccessTokenSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Spec_AccessTokenSpec
func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) Get(source *Probe_Spec_AccessTokenSpec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
			values = append(values, source.Enable)
		case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
			values = append(values, source.AccessToken)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Spec_AccessTokenSpec))
}

// GetSingle returns value pointed by specific field of from source Probe_Spec_AccessTokenSpec
func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) GetSingle(source *Probe_Spec_AccessTokenSpec) (interface{}, bool) {
	switch fp.selector {
	case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
		return source.GetEnable(), source != nil
	case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
		return source.GetAccessToken(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fp.selector))
	}
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Spec_AccessTokenSpec))
}

// GetDefault returns a default value of the field type
func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
		return false
	case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fp.selector))
	}
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) ClearValue(item *Probe_Spec_AccessTokenSpec) {
	if item != nil {
		switch fp.selector {
		case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
			item.Enable = false
		case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
			item.AccessToken = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fp.selector))
		}
	}
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Spec_AccessTokenSpec))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeSpecAccessTokenSpec_FieldPathSelectorEnable ||
		fp.selector == ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) WithIValue(value interface{}) ProbeSpecAccessTokenSpec_FieldPathValue {
	switch fp.selector {
	case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
		return &ProbeSpecAccessTokenSpec_FieldTerminalPathValue{ProbeSpecAccessTokenSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
		return &ProbeSpecAccessTokenSpec_FieldTerminalPathValue{ProbeSpecAccessTokenSpec_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fp.selector))
	}
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeSpecAccessTokenSpec_FieldPathArrayOfValues {
	fpaov := &ProbeSpecAccessTokenSpec_FieldTerminalPathArrayOfValues{ProbeSpecAccessTokenSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
		return &ProbeSpecAccessTokenSpec_FieldTerminalPathArrayOfValues{ProbeSpecAccessTokenSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
		return &ProbeSpecAccessTokenSpec_FieldTerminalPathArrayOfValues{ProbeSpecAccessTokenSpec_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeSpecAccessTokenSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fp.selector))
	}
}

func (fp *ProbeSpecAccessTokenSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeSpecAccessTokenSpec_FieldPathValue allows storing values for AccessTokenSpec fields according to their type
type ProbeSpecAccessTokenSpec_FieldPathValue interface {
	ProbeSpecAccessTokenSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Spec_AccessTokenSpec)
	CompareWith(*Probe_Spec_AccessTokenSpec) (cmp int, comparable bool)
}

func ParseProbeSpecAccessTokenSpec_FieldPathValue(pathStr, valueStr string) (ProbeSpecAccessTokenSpec_FieldPathValue, error) {
	fp, err := ParseProbeSpecAccessTokenSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessTokenSpec field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeSpecAccessTokenSpec_FieldPathValue), nil
}

func MustParseProbeSpecAccessTokenSpec_FieldPathValue(pathStr, valueStr string) ProbeSpecAccessTokenSpec_FieldPathValue {
	fpv, err := ParseProbeSpecAccessTokenSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeSpecAccessTokenSpec_FieldTerminalPathValue struct {
	ProbeSpecAccessTokenSpec_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecAccessTokenSpec_FieldPathValue = (*ProbeSpecAccessTokenSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AccessTokenSpec' as interface{}
func (fpv *ProbeSpecAccessTokenSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeSpecAccessTokenSpec_FieldTerminalPathValue) AsEnableValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ProbeSpecAccessTokenSpec_FieldTerminalPathValue) AsAccessTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object AccessTokenSpec
func (fpv *ProbeSpecAccessTokenSpec_FieldTerminalPathValue) SetTo(target **Probe_Spec_AccessTokenSpec) {
	if *target == nil {
		*target = new(Probe_Spec_AccessTokenSpec)
	}
	switch fpv.selector {
	case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
		(*target).Enable = fpv.value.(bool)
	case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
		(*target).AccessToken = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecAccessTokenSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec_AccessTokenSpec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeSpecAccessTokenSpec_FieldTerminalPathValue' with the value under path in 'Probe_Spec_AccessTokenSpec'.
func (fpv *ProbeSpecAccessTokenSpec_FieldTerminalPathValue) CompareWith(source *Probe_Spec_AccessTokenSpec) (int, bool) {
	switch fpv.selector {
	case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnable()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetAccessToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_AccessTokenSpec: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecAccessTokenSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Spec_AccessTokenSpec))
}

// ProbeSpecAccessTokenSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for AccessTokenSpec according to their type
// Present only for array (repeated) types.
type ProbeSpecAccessTokenSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeSpecAccessTokenSpec_FieldPath
	ContainsValue(*Probe_Spec_AccessTokenSpec) bool
}

// ParseProbeSpecAccessTokenSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeSpecAccessTokenSpec_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeSpecAccessTokenSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeSpecAccessTokenSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessTokenSpec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeSpecAccessTokenSpec_FieldPathArrayItemValue), nil
}

func MustParseProbeSpecAccessTokenSpec_FieldPathArrayItemValue(pathStr, valueStr string) ProbeSpecAccessTokenSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeSpecAccessTokenSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeSpecAccessTokenSpec_FieldTerminalPathArrayItemValue struct {
	ProbeSpecAccessTokenSpec_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecAccessTokenSpec_FieldPathArrayItemValue = (*ProbeSpecAccessTokenSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Spec_AccessTokenSpec as interface{}
func (fpaiv *ProbeSpecAccessTokenSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeSpecAccessTokenSpec_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Spec_AccessTokenSpec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeSpecAccessTokenSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Spec_AccessTokenSpec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AccessTokenSpec'
func (fpaiv *ProbeSpecAccessTokenSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Spec_AccessTokenSpec) bool {
	slice := fpaiv.ProbeSpecAccessTokenSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeSpecAccessTokenSpec_FieldPathArrayOfValues allows storing slice of values for AccessTokenSpec fields according to their type
type ProbeSpecAccessTokenSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeSpecAccessTokenSpec_FieldPath
}

func ParseProbeSpecAccessTokenSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeSpecAccessTokenSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeSpecAccessTokenSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessTokenSpec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeSpecAccessTokenSpec_FieldPathArrayOfValues), nil
}

func MustParseProbeSpecAccessTokenSpec_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeSpecAccessTokenSpec_FieldPathArrayOfValues {
	fpaov, err := ParseProbeSpecAccessTokenSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeSpecAccessTokenSpec_FieldTerminalPathArrayOfValues struct {
	ProbeSpecAccessTokenSpec_FieldTerminalPath
	values interface{}
}

var _ ProbeSpecAccessTokenSpec_FieldPathArrayOfValues = (*ProbeSpecAccessTokenSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeSpecAccessTokenSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeSpecAccessTokenSpec_FieldPathSelectorEnable:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ProbeSpecAccessTokenSpec_FieldPathSelectorAccessToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeSpecAccessTokenSpec_FieldTerminalPathArrayOfValues) AsEnableArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ProbeSpecAccessTokenSpec_FieldTerminalPathArrayOfValues) AsAccessTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeSpecTargetServers_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeSpecTargetServers_FieldPathSelector
	Get(source *Probe_Spec_TargetServers) []interface{}
	GetSingle(source *Probe_Spec_TargetServers) (interface{}, bool)
	ClearValue(item *Probe_Spec_TargetServers)

	// Those methods build corresponding ProbeSpecTargetServers_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeSpecTargetServers_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeSpecTargetServers_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeSpecTargetServers_FieldPathArrayItemValue
}

type ProbeSpecTargetServers_FieldPathSelector int32

const (
	ProbeSpecTargetServers_FieldPathSelectorIcmpTarget        ProbeSpecTargetServers_FieldPathSelector = 0
	ProbeSpecTargetServers_FieldPathSelectorUdpTarget         ProbeSpecTargetServers_FieldPathSelector = 1
	ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget   ProbeSpecTargetServers_FieldPathSelector = 2
	ProbeSpecTargetServers_FieldPathSelectorTargetAddressType ProbeSpecTargetServers_FieldPathSelector = 3
)

func (s ProbeSpecTargetServers_FieldPathSelector) String() string {
	switch s {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		return "icmp_target"
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		return "udp_target"
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		return "speed_test_target"
	case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
		return "target_address_type"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", s))
	}
}

func BuildProbeSpecTargetServers_FieldPath(fp gotenobject.RawFieldPath) (ProbeSpecTargetServers_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Spec_TargetServers")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "icmp_target", "icmpTarget", "icmp-target":
			return &ProbeSpecTargetServers_FieldTerminalPath{selector: ProbeSpecTargetServers_FieldPathSelectorIcmpTarget}, nil
		case "udp_target", "udpTarget", "udp-target":
			return &ProbeSpecTargetServers_FieldTerminalPath{selector: ProbeSpecTargetServers_FieldPathSelectorUdpTarget}, nil
		case "speed_test_target", "speedTestTarget", "speed-test-target":
			return &ProbeSpecTargetServers_FieldTerminalPath{selector: ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget}, nil
		case "target_address_type", "targetAddressType", "target-address-type":
			return &ProbeSpecTargetServers_FieldTerminalPath{selector: ProbeSpecTargetServers_FieldPathSelectorTargetAddressType}, nil
		}
	} else {
		switch fp[0] {
		case "icmp_target", "icmpTarget", "icmp-target":
			if subpath, err := BuildProbeSpecTargetServersIcmpTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpecTargetServers_FieldSubPath{selector: ProbeSpecTargetServers_FieldPathSelectorIcmpTarget, subPath: subpath}, nil
			}
		case "udp_target", "udpTarget", "udp-target":
			if subpath, err := BuildProbeSpecTargetServersUdpTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpecTargetServers_FieldSubPath{selector: ProbeSpecTargetServers_FieldPathSelectorUdpTarget, subPath: subpath}, nil
			}
		case "speed_test_target", "speedTestTarget", "speed-test-target":
			if subpath, err := BuildProbeSpecTargetServersSpeedTestTarget_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeSpecTargetServers_FieldSubPath{selector: ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Spec_TargetServers", fp)
}

func ParseProbeSpecTargetServers_FieldPath(rawField string) (ProbeSpecTargetServers_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeSpecTargetServers_FieldPath(fp)
}

func MustParseProbeSpecTargetServers_FieldPath(rawField string) ProbeSpecTargetServers_FieldPath {
	fp, err := ParseProbeSpecTargetServers_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeSpecTargetServers_FieldTerminalPath struct {
	selector ProbeSpecTargetServers_FieldPathSelector
}

var _ ProbeSpecTargetServers_FieldPath = (*ProbeSpecTargetServers_FieldTerminalPath)(nil)

func (fp *ProbeSpecTargetServers_FieldTerminalPath) Selector() ProbeSpecTargetServers_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeSpecTargetServers_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeSpecTargetServers_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Spec_TargetServers
func (fp *ProbeSpecTargetServers_FieldTerminalPath) Get(source *Probe_Spec_TargetServers) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
			if source.IcmpTarget != nil {
				values = append(values, source.IcmpTarget)
			}
		case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
			if source.UdpTarget != nil {
				values = append(values, source.UdpTarget)
			}
		case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
			if source.SpeedTestTarget != nil {
				values = append(values, source.SpeedTestTarget)
			}
		case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
			values = append(values, source.TargetAddressType)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Spec_TargetServers))
}

// GetSingle returns value pointed by specific field of from source Probe_Spec_TargetServers
func (fp *ProbeSpecTargetServers_FieldTerminalPath) GetSingle(source *Probe_Spec_TargetServers) (interface{}, bool) {
	switch fp.selector {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		res := source.GetIcmpTarget()
		return res, res != nil
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		res := source.GetUdpTarget()
		return res, res != nil
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		res := source.GetSpeedTestTarget()
		return res, res != nil
	case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
		return source.GetTargetAddressType(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Spec_TargetServers))
}

// GetDefault returns a default value of the field type
func (fp *ProbeSpecTargetServers_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		return (*Probe_Spec_TargetServers_IcmpTarget)(nil)
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		return (*Probe_Spec_TargetServers_UdpTarget)(nil)
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		return (*Probe_Spec_TargetServers_SpeedTestTarget)(nil)
	case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
		return Probe_Spec_TargetServers_EXTERNAL_IP
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) ClearValue(item *Probe_Spec_TargetServers) {
	if item != nil {
		switch fp.selector {
		case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
			item.IcmpTarget = nil
		case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
			item.UdpTarget = nil
		case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
			item.SpeedTestTarget = nil
		case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
			item.TargetAddressType = Probe_Spec_TargetServers_EXTERNAL_IP
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fp.selector))
		}
	}
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Spec_TargetServers))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeSpecTargetServers_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeSpecTargetServers_FieldPathSelectorTargetAddressType
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) WithIValue(value interface{}) ProbeSpecTargetServers_FieldPathValue {
	switch fp.selector {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		return &ProbeSpecTargetServers_FieldTerminalPathValue{ProbeSpecTargetServers_FieldTerminalPath: *fp, value: value.(*Probe_Spec_TargetServers_IcmpTarget)}
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		return &ProbeSpecTargetServers_FieldTerminalPathValue{ProbeSpecTargetServers_FieldTerminalPath: *fp, value: value.(*Probe_Spec_TargetServers_UdpTarget)}
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		return &ProbeSpecTargetServers_FieldTerminalPathValue{ProbeSpecTargetServers_FieldTerminalPath: *fp, value: value.(*Probe_Spec_TargetServers_SpeedTestTarget)}
	case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
		return &ProbeSpecTargetServers_FieldTerminalPathValue{ProbeSpecTargetServers_FieldTerminalPath: *fp, value: value.(Probe_Spec_TargetServers_TargetIPAddressType)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeSpecTargetServers_FieldPathArrayOfValues {
	fpaov := &ProbeSpecTargetServers_FieldTerminalPathArrayOfValues{ProbeSpecTargetServers_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		return &ProbeSpecTargetServers_FieldTerminalPathArrayOfValues{ProbeSpecTargetServers_FieldTerminalPath: *fp, values: values.([]*Probe_Spec_TargetServers_IcmpTarget)}
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		return &ProbeSpecTargetServers_FieldTerminalPathArrayOfValues{ProbeSpecTargetServers_FieldTerminalPath: *fp, values: values.([]*Probe_Spec_TargetServers_UdpTarget)}
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		return &ProbeSpecTargetServers_FieldTerminalPathArrayOfValues{ProbeSpecTargetServers_FieldTerminalPath: *fp, values: values.([]*Probe_Spec_TargetServers_SpeedTestTarget)}
	case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
		return &ProbeSpecTargetServers_FieldTerminalPathArrayOfValues{ProbeSpecTargetServers_FieldTerminalPath: *fp, values: values.([]Probe_Spec_TargetServers_TargetIPAddressType)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeSpecTargetServers_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServers_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbeSpecTargetServers_FieldSubPath struct {
	selector ProbeSpecTargetServers_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbeSpecTargetServers_FieldPath = (*ProbeSpecTargetServers_FieldSubPath)(nil)

func (fps *ProbeSpecTargetServers_FieldSubPath) Selector() ProbeSpecTargetServers_FieldPathSelector {
	return fps.selector
}
func (fps *ProbeSpecTargetServers_FieldSubPath) AsIcmpTargetSubPath() (ProbeSpecTargetServersIcmpTarget_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeSpecTargetServersIcmpTarget_FieldPath)
	return res, ok
}
func (fps *ProbeSpecTargetServers_FieldSubPath) AsUdpTargetSubPath() (ProbeSpecTargetServersUdpTarget_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeSpecTargetServersUdpTarget_FieldPath)
	return res, ok
}
func (fps *ProbeSpecTargetServers_FieldSubPath) AsSpeedTestTargetSubPath() (ProbeSpecTargetServersSpeedTestTarget_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeSpecTargetServersSpeedTestTarget_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbeSpecTargetServers_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbeSpecTargetServers_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Probe_Spec_TargetServers
func (fps *ProbeSpecTargetServers_FieldSubPath) Get(source *Probe_Spec_TargetServers) (values []interface{}) {
	if asIcmpTargetFieldPath, ok := fps.AsIcmpTargetSubPath(); ok {
		values = append(values, asIcmpTargetFieldPath.Get(source.GetIcmpTarget())...)
	} else if asUdpTargetFieldPath, ok := fps.AsUdpTargetSubPath(); ok {
		values = append(values, asUdpTargetFieldPath.Get(source.GetUdpTarget())...)
	} else if asSpeedTestTargetFieldPath, ok := fps.AsSpeedTestTargetSubPath(); ok {
		values = append(values, asSpeedTestTargetFieldPath.Get(source.GetSpeedTestTarget())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fps.selector))
	}
	return
}

func (fps *ProbeSpecTargetServers_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Probe_Spec_TargetServers))
}

// GetSingle returns value of selected field from source Probe_Spec_TargetServers
func (fps *ProbeSpecTargetServers_FieldSubPath) GetSingle(source *Probe_Spec_TargetServers) (interface{}, bool) {
	switch fps.selector {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		if source.GetIcmpTarget() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetIcmpTarget())
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		if source.GetUdpTarget() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetUdpTarget())
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		if source.GetSpeedTestTarget() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpeedTestTarget())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fps.selector))
	}
}

func (fps *ProbeSpecTargetServers_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Probe_Spec_TargetServers))
}

// GetDefault returns a default value of the field type
func (fps *ProbeSpecTargetServers_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbeSpecTargetServers_FieldSubPath) ClearValue(item *Probe_Spec_TargetServers) {
	if item != nil {
		switch fps.selector {
		case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
			fps.subPath.ClearValueRaw(item.IcmpTarget)
		case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
			fps.subPath.ClearValueRaw(item.UdpTarget)
		case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
			fps.subPath.ClearValueRaw(item.SpeedTestTarget)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fps.selector))
		}
	}
}

func (fps *ProbeSpecTargetServers_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Probe_Spec_TargetServers))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbeSpecTargetServers_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbeSpecTargetServers_FieldSubPath) WithIValue(value interface{}) ProbeSpecTargetServers_FieldPathValue {
	return &ProbeSpecTargetServers_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbeSpecTargetServers_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbeSpecTargetServers_FieldSubPath) WithIArrayOfValues(values interface{}) ProbeSpecTargetServers_FieldPathArrayOfValues {
	return &ProbeSpecTargetServers_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbeSpecTargetServers_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbeSpecTargetServers_FieldSubPath) WithIArrayItemValue(value interface{}) ProbeSpecTargetServers_FieldPathArrayItemValue {
	return &ProbeSpecTargetServers_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbeSpecTargetServers_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbeSpecTargetServers_FieldPathValue allows storing values for TargetServers fields according to their type
type ProbeSpecTargetServers_FieldPathValue interface {
	ProbeSpecTargetServers_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Spec_TargetServers)
	CompareWith(*Probe_Spec_TargetServers) (cmp int, comparable bool)
}

func ParseProbeSpecTargetServers_FieldPathValue(pathStr, valueStr string) (ProbeSpecTargetServers_FieldPathValue, error) {
	fp, err := ParseProbeSpecTargetServers_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TargetServers field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeSpecTargetServers_FieldPathValue), nil
}

func MustParseProbeSpecTargetServers_FieldPathValue(pathStr, valueStr string) ProbeSpecTargetServers_FieldPathValue {
	fpv, err := ParseProbeSpecTargetServers_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeSpecTargetServers_FieldTerminalPathValue struct {
	ProbeSpecTargetServers_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecTargetServers_FieldPathValue = (*ProbeSpecTargetServers_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'TargetServers' as interface{}
func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) AsIcmpTargetValue() (*Probe_Spec_TargetServers_IcmpTarget, bool) {
	res, ok := fpv.value.(*Probe_Spec_TargetServers_IcmpTarget)
	return res, ok
}
func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) AsUdpTargetValue() (*Probe_Spec_TargetServers_UdpTarget, bool) {
	res, ok := fpv.value.(*Probe_Spec_TargetServers_UdpTarget)
	return res, ok
}
func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) AsSpeedTestTargetValue() (*Probe_Spec_TargetServers_SpeedTestTarget, bool) {
	res, ok := fpv.value.(*Probe_Spec_TargetServers_SpeedTestTarget)
	return res, ok
}
func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) AsTargetAddressTypeValue() (Probe_Spec_TargetServers_TargetIPAddressType, bool) {
	res, ok := fpv.value.(Probe_Spec_TargetServers_TargetIPAddressType)
	return res, ok
}

// SetTo stores value for selected field for object TargetServers
func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) SetTo(target **Probe_Spec_TargetServers) {
	if *target == nil {
		*target = new(Probe_Spec_TargetServers)
	}
	switch fpv.selector {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		(*target).IcmpTarget = fpv.value.(*Probe_Spec_TargetServers_IcmpTarget)
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		(*target).UdpTarget = fpv.value.(*Probe_Spec_TargetServers_UdpTarget)
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		(*target).SpeedTestTarget = fpv.value.(*Probe_Spec_TargetServers_SpeedTestTarget)
	case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
		(*target).TargetAddressType = fpv.value.(Probe_Spec_TargetServers_TargetIPAddressType)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec_TargetServers)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeSpecTargetServers_FieldTerminalPathValue' with the value under path in 'Probe_Spec_TargetServers'.
func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) CompareWith(source *Probe_Spec_TargetServers) (int, bool) {
	switch fpv.selector {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		return 0, false
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		return 0, false
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		return 0, false
	case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
		leftValue := fpv.value.(Probe_Spec_TargetServers_TargetIPAddressType)
		rightValue := source.GetTargetAddressType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecTargetServers_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Spec_TargetServers))
}

type ProbeSpecTargetServers_FieldSubPathValue struct {
	ProbeSpecTargetServers_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbeSpecTargetServers_FieldPathValue = (*ProbeSpecTargetServers_FieldSubPathValue)(nil)

func (fpvs *ProbeSpecTargetServers_FieldSubPathValue) AsIcmpTargetPathValue() (ProbeSpecTargetServersIcmpTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeSpecTargetServersIcmpTarget_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeSpecTargetServers_FieldSubPathValue) AsUdpTargetPathValue() (ProbeSpecTargetServersUdpTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeSpecTargetServersUdpTarget_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeSpecTargetServers_FieldSubPathValue) AsSpeedTestTargetPathValue() (ProbeSpecTargetServersSpeedTestTarget_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeSpecTargetServersSpeedTestTarget_FieldPathValue)
	return res, ok
}

func (fpvs *ProbeSpecTargetServers_FieldSubPathValue) SetTo(target **Probe_Spec_TargetServers) {
	if *target == nil {
		*target = new(Probe_Spec_TargetServers)
	}
	switch fpvs.Selector() {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		fpvs.subPathValue.(ProbeSpecTargetServersIcmpTarget_FieldPathValue).SetTo(&(*target).IcmpTarget)
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		fpvs.subPathValue.(ProbeSpecTargetServersUdpTarget_FieldPathValue).SetTo(&(*target).UdpTarget)
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		fpvs.subPathValue.(ProbeSpecTargetServersSpeedTestTarget_FieldPathValue).SetTo(&(*target).SpeedTestTarget)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeSpecTargetServers_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec_TargetServers)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbeSpecTargetServers_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbeSpecTargetServers_FieldSubPathValue) CompareWith(source *Probe_Spec_TargetServers) (int, bool) {
	switch fpvs.Selector() {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		return fpvs.subPathValue.(ProbeSpecTargetServersIcmpTarget_FieldPathValue).CompareWith(source.GetIcmpTarget())
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		return fpvs.subPathValue.(ProbeSpecTargetServersUdpTarget_FieldPathValue).CompareWith(source.GetUdpTarget())
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		return fpvs.subPathValue.(ProbeSpecTargetServersSpeedTestTarget_FieldPathValue).CompareWith(source.GetSpeedTestTarget())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeSpecTargetServers_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Probe_Spec_TargetServers))
}

// ProbeSpecTargetServers_FieldPathArrayItemValue allows storing single item in Path-specific values for TargetServers according to their type
// Present only for array (repeated) types.
type ProbeSpecTargetServers_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeSpecTargetServers_FieldPath
	ContainsValue(*Probe_Spec_TargetServers) bool
}

// ParseProbeSpecTargetServers_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeSpecTargetServers_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeSpecTargetServers_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeSpecTargetServers_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TargetServers field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeSpecTargetServers_FieldPathArrayItemValue), nil
}

func MustParseProbeSpecTargetServers_FieldPathArrayItemValue(pathStr, valueStr string) ProbeSpecTargetServers_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeSpecTargetServers_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeSpecTargetServers_FieldTerminalPathArrayItemValue struct {
	ProbeSpecTargetServers_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecTargetServers_FieldPathArrayItemValue = (*ProbeSpecTargetServers_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Spec_TargetServers as interface{}
func (fpaiv *ProbeSpecTargetServers_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeSpecTargetServers_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Spec_TargetServers) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeSpecTargetServers_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Spec_TargetServers))
}

// Contains returns a boolean indicating if value that is being held is present in given 'TargetServers'
func (fpaiv *ProbeSpecTargetServers_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Spec_TargetServers) bool {
	slice := fpaiv.ProbeSpecTargetServers_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbeSpecTargetServers_FieldSubPathArrayItemValue struct {
	ProbeSpecTargetServers_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbeSpecTargetServers_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbeSpecTargetServers_FieldSubPathArrayItemValue) AsIcmpTargetPathItemValue() (ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeSpecTargetServers_FieldSubPathArrayItemValue) AsUdpTargetPathItemValue() (ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeSpecTargetServers_FieldSubPathArrayItemValue) AsSpeedTestTargetPathItemValue() (ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'TargetServers'
func (fpaivs *ProbeSpecTargetServers_FieldSubPathArrayItemValue) ContainsValue(source *Probe_Spec_TargetServers) bool {
	switch fpaivs.Selector() {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		return fpaivs.subPathItemValue.(ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue).ContainsValue(source.GetIcmpTarget())
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		return fpaivs.subPathItemValue.(ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue).ContainsValue(source.GetUdpTarget())
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		return fpaivs.subPathItemValue.(ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue).ContainsValue(source.GetSpeedTestTarget())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers: %d", fpaivs.Selector()))
	}
}

// ProbeSpecTargetServers_FieldPathArrayOfValues allows storing slice of values for TargetServers fields according to their type
type ProbeSpecTargetServers_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeSpecTargetServers_FieldPath
}

func ParseProbeSpecTargetServers_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeSpecTargetServers_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeSpecTargetServers_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing TargetServers field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeSpecTargetServers_FieldPathArrayOfValues), nil
}

func MustParseProbeSpecTargetServers_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeSpecTargetServers_FieldPathArrayOfValues {
	fpaov, err := ParseProbeSpecTargetServers_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeSpecTargetServers_FieldTerminalPathArrayOfValues struct {
	ProbeSpecTargetServers_FieldTerminalPath
	values interface{}
}

var _ ProbeSpecTargetServers_FieldPathArrayOfValues = (*ProbeSpecTargetServers_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeSpecTargetServers_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeSpecTargetServers_FieldPathSelectorIcmpTarget:
		for _, v := range fpaov.values.([]*Probe_Spec_TargetServers_IcmpTarget) {
			values = append(values, v)
		}
	case ProbeSpecTargetServers_FieldPathSelectorUdpTarget:
		for _, v := range fpaov.values.([]*Probe_Spec_TargetServers_UdpTarget) {
			values = append(values, v)
		}
	case ProbeSpecTargetServers_FieldPathSelectorSpeedTestTarget:
		for _, v := range fpaov.values.([]*Probe_Spec_TargetServers_SpeedTestTarget) {
			values = append(values, v)
		}
	case ProbeSpecTargetServers_FieldPathSelectorTargetAddressType:
		for _, v := range fpaov.values.([]Probe_Spec_TargetServers_TargetIPAddressType) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeSpecTargetServers_FieldTerminalPathArrayOfValues) AsIcmpTargetArrayOfValues() ([]*Probe_Spec_TargetServers_IcmpTarget, bool) {
	res, ok := fpaov.values.([]*Probe_Spec_TargetServers_IcmpTarget)
	return res, ok
}
func (fpaov *ProbeSpecTargetServers_FieldTerminalPathArrayOfValues) AsUdpTargetArrayOfValues() ([]*Probe_Spec_TargetServers_UdpTarget, bool) {
	res, ok := fpaov.values.([]*Probe_Spec_TargetServers_UdpTarget)
	return res, ok
}
func (fpaov *ProbeSpecTargetServers_FieldTerminalPathArrayOfValues) AsSpeedTestTargetArrayOfValues() ([]*Probe_Spec_TargetServers_SpeedTestTarget, bool) {
	res, ok := fpaov.values.([]*Probe_Spec_TargetServers_SpeedTestTarget)
	return res, ok
}
func (fpaov *ProbeSpecTargetServers_FieldTerminalPathArrayOfValues) AsTargetAddressTypeArrayOfValues() ([]Probe_Spec_TargetServers_TargetIPAddressType, bool) {
	res, ok := fpaov.values.([]Probe_Spec_TargetServers_TargetIPAddressType)
	return res, ok
}

type ProbeSpecTargetServers_FieldSubPathArrayOfValues struct {
	ProbeSpecTargetServers_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbeSpecTargetServers_FieldPathArrayOfValues = (*ProbeSpecTargetServers_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbeSpecTargetServers_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbeSpecTargetServers_FieldSubPathArrayOfValues) AsIcmpTargetPathArrayOfValues() (ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeSpecTargetServers_FieldSubPathArrayOfValues) AsUdpTargetPathArrayOfValues() (ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeSpecTargetServers_FieldSubPathArrayOfValues) AsSpeedTestTargetPathArrayOfValues() (ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeSpecTargetServersIcmpTarget_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeSpecTargetServersIcmpTarget_FieldPathSelector
	Get(source *Probe_Spec_TargetServers_IcmpTarget) []interface{}
	GetSingle(source *Probe_Spec_TargetServers_IcmpTarget) (interface{}, bool)
	ClearValue(item *Probe_Spec_TargetServers_IcmpTarget)

	// Those methods build corresponding ProbeSpecTargetServersIcmpTarget_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeSpecTargetServersIcmpTarget_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue
}

type ProbeSpecTargetServersIcmpTarget_FieldPathSelector int32

const (
	ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled ProbeSpecTargetServersIcmpTarget_FieldPathSelector = 0
)

func (s ProbeSpecTargetServersIcmpTarget_FieldPathSelector) String() string {
	switch s {
	case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
		return "enabled"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", s))
	}
}

func BuildProbeSpecTargetServersIcmpTarget_FieldPath(fp gotenobject.RawFieldPath) (ProbeSpecTargetServersIcmpTarget_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Spec_TargetServers_IcmpTarget")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled":
			return &ProbeSpecTargetServersIcmpTarget_FieldTerminalPath{selector: ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Spec_TargetServers_IcmpTarget", fp)
}

func ParseProbeSpecTargetServersIcmpTarget_FieldPath(rawField string) (ProbeSpecTargetServersIcmpTarget_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeSpecTargetServersIcmpTarget_FieldPath(fp)
}

func MustParseProbeSpecTargetServersIcmpTarget_FieldPath(rawField string) ProbeSpecTargetServersIcmpTarget_FieldPath {
	fp, err := ParseProbeSpecTargetServersIcmpTarget_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeSpecTargetServersIcmpTarget_FieldTerminalPath struct {
	selector ProbeSpecTargetServersIcmpTarget_FieldPathSelector
}

var _ ProbeSpecTargetServersIcmpTarget_FieldPath = (*ProbeSpecTargetServersIcmpTarget_FieldTerminalPath)(nil)

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) Selector() ProbeSpecTargetServersIcmpTarget_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Spec_TargetServers_IcmpTarget
func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) Get(source *Probe_Spec_TargetServers_IcmpTarget) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Spec_TargetServers_IcmpTarget))
}

// GetSingle returns value pointed by specific field of from source Probe_Spec_TargetServers_IcmpTarget
func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) GetSingle(source *Probe_Spec_TargetServers_IcmpTarget) (interface{}, bool) {
	switch fp.selector {
	case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Spec_TargetServers_IcmpTarget))
}

// GetDefault returns a default value of the field type
func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) ClearValue(item *Probe_Spec_TargetServers_IcmpTarget) {
	if item != nil {
		switch fp.selector {
		case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
			item.Enabled = false
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fp.selector))
		}
	}
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Spec_TargetServers_IcmpTarget))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) WithIValue(value interface{}) ProbeSpecTargetServersIcmpTarget_FieldPathValue {
	switch fp.selector {
	case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
		return &ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue{ProbeSpecTargetServersIcmpTarget_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues {
	fpaov := &ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayOfValues{ProbeSpecTargetServersIcmpTarget_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
		return &ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayOfValues{ProbeSpecTargetServersIcmpTarget_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersIcmpTarget_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeSpecTargetServersIcmpTarget_FieldPathValue allows storing values for IcmpTarget fields according to their type
type ProbeSpecTargetServersIcmpTarget_FieldPathValue interface {
	ProbeSpecTargetServersIcmpTarget_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Spec_TargetServers_IcmpTarget)
	CompareWith(*Probe_Spec_TargetServers_IcmpTarget) (cmp int, comparable bool)
}

func ParseProbeSpecTargetServersIcmpTarget_FieldPathValue(pathStr, valueStr string) (ProbeSpecTargetServersIcmpTarget_FieldPathValue, error) {
	fp, err := ParseProbeSpecTargetServersIcmpTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing IcmpTarget field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeSpecTargetServersIcmpTarget_FieldPathValue), nil
}

func MustParseProbeSpecTargetServersIcmpTarget_FieldPathValue(pathStr, valueStr string) ProbeSpecTargetServersIcmpTarget_FieldPathValue {
	fpv, err := ParseProbeSpecTargetServersIcmpTarget_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue struct {
	ProbeSpecTargetServersIcmpTarget_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecTargetServersIcmpTarget_FieldPathValue = (*ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'IcmpTarget' as interface{}
func (fpv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object IcmpTarget
func (fpv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue) SetTo(target **Probe_Spec_TargetServers_IcmpTarget) {
	if *target == nil {
		*target = new(Probe_Spec_TargetServers_IcmpTarget)
	}
	switch fpv.selector {
	case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec_TargetServers_IcmpTarget)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue' with the value under path in 'Probe_Spec_TargetServers_IcmpTarget'.
func (fpv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue) CompareWith(source *Probe_Spec_TargetServers_IcmpTarget) (int, bool) {
	switch fpv.selector {
	case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_IcmpTarget: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Spec_TargetServers_IcmpTarget))
}

// ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue allows storing single item in Path-specific values for IcmpTarget according to their type
// Present only for array (repeated) types.
type ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeSpecTargetServersIcmpTarget_FieldPath
	ContainsValue(*Probe_Spec_TargetServers_IcmpTarget) bool
}

// ParseProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeSpecTargetServersIcmpTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing IcmpTarget field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue), nil
}

func MustParseProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue(pathStr, valueStr string) ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayItemValue struct {
	ProbeSpecTargetServersIcmpTarget_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecTargetServersIcmpTarget_FieldPathArrayItemValue = (*ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Spec_TargetServers_IcmpTarget as interface{}
func (fpaiv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Spec_TargetServers_IcmpTarget) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Spec_TargetServers_IcmpTarget))
}

// Contains returns a boolean indicating if value that is being held is present in given 'IcmpTarget'
func (fpaiv *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Spec_TargetServers_IcmpTarget) bool {
	slice := fpaiv.ProbeSpecTargetServersIcmpTarget_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues allows storing slice of values for IcmpTarget fields according to their type
type ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeSpecTargetServersIcmpTarget_FieldPath
}

func ParseProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeSpecTargetServersIcmpTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing IcmpTarget field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues), nil
}

func MustParseProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues {
	fpaov, err := ParseProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayOfValues struct {
	ProbeSpecTargetServersIcmpTarget_FieldTerminalPath
	values interface{}
}

var _ ProbeSpecTargetServersIcmpTarget_FieldPathArrayOfValues = (*ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeSpecTargetServersIcmpTarget_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeSpecTargetServersIcmpTarget_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeSpecTargetServersUdpTarget_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeSpecTargetServersUdpTarget_FieldPathSelector
	Get(source *Probe_Spec_TargetServers_UdpTarget) []interface{}
	GetSingle(source *Probe_Spec_TargetServers_UdpTarget) (interface{}, bool)
	ClearValue(item *Probe_Spec_TargetServers_UdpTarget)

	// Those methods build corresponding ProbeSpecTargetServersUdpTarget_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeSpecTargetServersUdpTarget_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue
}

type ProbeSpecTargetServersUdpTarget_FieldPathSelector int32

const (
	ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled ProbeSpecTargetServersUdpTarget_FieldPathSelector = 0
	ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort    ProbeSpecTargetServersUdpTarget_FieldPathSelector = 1
)

func (s ProbeSpecTargetServersUdpTarget_FieldPathSelector) String() string {
	switch s {
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
		return "enabled"
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
		return "port"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", s))
	}
}

func BuildProbeSpecTargetServersUdpTarget_FieldPath(fp gotenobject.RawFieldPath) (ProbeSpecTargetServersUdpTarget_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Spec_TargetServers_UdpTarget")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled":
			return &ProbeSpecTargetServersUdpTarget_FieldTerminalPath{selector: ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled}, nil
		case "port":
			return &ProbeSpecTargetServersUdpTarget_FieldTerminalPath{selector: ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Spec_TargetServers_UdpTarget", fp)
}

func ParseProbeSpecTargetServersUdpTarget_FieldPath(rawField string) (ProbeSpecTargetServersUdpTarget_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeSpecTargetServersUdpTarget_FieldPath(fp)
}

func MustParseProbeSpecTargetServersUdpTarget_FieldPath(rawField string) ProbeSpecTargetServersUdpTarget_FieldPath {
	fp, err := ParseProbeSpecTargetServersUdpTarget_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeSpecTargetServersUdpTarget_FieldTerminalPath struct {
	selector ProbeSpecTargetServersUdpTarget_FieldPathSelector
}

var _ ProbeSpecTargetServersUdpTarget_FieldPath = (*ProbeSpecTargetServersUdpTarget_FieldTerminalPath)(nil)

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) Selector() ProbeSpecTargetServersUdpTarget_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Spec_TargetServers_UdpTarget
func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) Get(source *Probe_Spec_TargetServers_UdpTarget) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
			values = append(values, source.Port)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Spec_TargetServers_UdpTarget))
}

// GetSingle returns value pointed by specific field of from source Probe_Spec_TargetServers_UdpTarget
func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) GetSingle(source *Probe_Spec_TargetServers_UdpTarget) (interface{}, bool) {
	switch fp.selector {
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
		return source.GetPort(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Spec_TargetServers_UdpTarget))
}

// GetDefault returns a default value of the field type
func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
		return false
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) ClearValue(item *Probe_Spec_TargetServers_UdpTarget) {
	if item != nil {
		switch fp.selector {
		case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
			item.Enabled = false
		case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
			item.Port = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fp.selector))
		}
	}
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Spec_TargetServers_UdpTarget))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled ||
		fp.selector == ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) WithIValue(value interface{}) ProbeSpecTargetServersUdpTarget_FieldPathValue {
	switch fp.selector {
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
		return &ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue{ProbeSpecTargetServersUdpTarget_FieldTerminalPath: *fp, value: value.(bool)}
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
		return &ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue{ProbeSpecTargetServersUdpTarget_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues {
	fpaov := &ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayOfValues{ProbeSpecTargetServersUdpTarget_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
		return &ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayOfValues{ProbeSpecTargetServersUdpTarget_FieldTerminalPath: *fp, values: values.([]bool)}
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
		return &ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayOfValues{ProbeSpecTargetServersUdpTarget_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersUdpTarget_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeSpecTargetServersUdpTarget_FieldPathValue allows storing values for UdpTarget fields according to their type
type ProbeSpecTargetServersUdpTarget_FieldPathValue interface {
	ProbeSpecTargetServersUdpTarget_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Spec_TargetServers_UdpTarget)
	CompareWith(*Probe_Spec_TargetServers_UdpTarget) (cmp int, comparable bool)
}

func ParseProbeSpecTargetServersUdpTarget_FieldPathValue(pathStr, valueStr string) (ProbeSpecTargetServersUdpTarget_FieldPathValue, error) {
	fp, err := ParseProbeSpecTargetServersUdpTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UdpTarget field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeSpecTargetServersUdpTarget_FieldPathValue), nil
}

func MustParseProbeSpecTargetServersUdpTarget_FieldPathValue(pathStr, valueStr string) ProbeSpecTargetServersUdpTarget_FieldPathValue {
	fpv, err := ParseProbeSpecTargetServersUdpTarget_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue struct {
	ProbeSpecTargetServersUdpTarget_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecTargetServersUdpTarget_FieldPathValue = (*ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UdpTarget' as interface{}
func (fpv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue) AsPortValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object UdpTarget
func (fpv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue) SetTo(target **Probe_Spec_TargetServers_UdpTarget) {
	if *target == nil {
		*target = new(Probe_Spec_TargetServers_UdpTarget)
	}
	switch fpv.selector {
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
		(*target).Port = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec_TargetServers_UdpTarget)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue' with the value under path in 'Probe_Spec_TargetServers_UdpTarget'.
func (fpv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue) CompareWith(source *Probe_Spec_TargetServers_UdpTarget) (int, bool) {
	switch fpv.selector {
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_UdpTarget: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Spec_TargetServers_UdpTarget))
}

// ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue allows storing single item in Path-specific values for UdpTarget according to their type
// Present only for array (repeated) types.
type ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeSpecTargetServersUdpTarget_FieldPath
	ContainsValue(*Probe_Spec_TargetServers_UdpTarget) bool
}

// ParseProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeSpecTargetServersUdpTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UdpTarget field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue), nil
}

func MustParseProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue(pathStr, valueStr string) ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayItemValue struct {
	ProbeSpecTargetServersUdpTarget_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecTargetServersUdpTarget_FieldPathArrayItemValue = (*ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Spec_TargetServers_UdpTarget as interface{}
func (fpaiv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Spec_TargetServers_UdpTarget) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Spec_TargetServers_UdpTarget))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UdpTarget'
func (fpaiv *ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Spec_TargetServers_UdpTarget) bool {
	slice := fpaiv.ProbeSpecTargetServersUdpTarget_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues allows storing slice of values for UdpTarget fields according to their type
type ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeSpecTargetServersUdpTarget_FieldPath
}

func ParseProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeSpecTargetServersUdpTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UdpTarget field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues), nil
}

func MustParseProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues {
	fpaov, err := ParseProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayOfValues struct {
	ProbeSpecTargetServersUdpTarget_FieldTerminalPath
	values interface{}
}

var _ ProbeSpecTargetServersUdpTarget_FieldPathArrayOfValues = (*ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ProbeSpecTargetServersUdpTarget_FieldPathSelectorPort:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ProbeSpecTargetServersUdpTarget_FieldTerminalPathArrayOfValues) AsPortArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeSpecTargetServersSpeedTestTarget_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeSpecTargetServersSpeedTestTarget_FieldPathSelector
	Get(source *Probe_Spec_TargetServers_SpeedTestTarget) []interface{}
	GetSingle(source *Probe_Spec_TargetServers_SpeedTestTarget) (interface{}, bool)
	ClearValue(item *Probe_Spec_TargetServers_SpeedTestTarget)

	// Those methods build corresponding ProbeSpecTargetServersSpeedTestTarget_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeSpecTargetServersSpeedTestTarget_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue
}

type ProbeSpecTargetServersSpeedTestTarget_FieldPathSelector int32

const (
	ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled ProbeSpecTargetServersSpeedTestTarget_FieldPathSelector = 0
	ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort ProbeSpecTargetServersSpeedTestTarget_FieldPathSelector = 1
)

func (s ProbeSpecTargetServersSpeedTestTarget_FieldPathSelector) String() string {
	switch s {
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
		return "enabled"
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
		return "tcp_port"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", s))
	}
}

func BuildProbeSpecTargetServersSpeedTestTarget_FieldPath(fp gotenobject.RawFieldPath) (ProbeSpecTargetServersSpeedTestTarget_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Spec_TargetServers_SpeedTestTarget")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "enabled":
			return &ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath{selector: ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled}, nil
		case "tcp_port", "tcpPort", "tcp-port":
			return &ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath{selector: ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Spec_TargetServers_SpeedTestTarget", fp)
}

func ParseProbeSpecTargetServersSpeedTestTarget_FieldPath(rawField string) (ProbeSpecTargetServersSpeedTestTarget_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeSpecTargetServersSpeedTestTarget_FieldPath(fp)
}

func MustParseProbeSpecTargetServersSpeedTestTarget_FieldPath(rawField string) ProbeSpecTargetServersSpeedTestTarget_FieldPath {
	fp, err := ParseProbeSpecTargetServersSpeedTestTarget_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath struct {
	selector ProbeSpecTargetServersSpeedTestTarget_FieldPathSelector
}

var _ ProbeSpecTargetServersSpeedTestTarget_FieldPath = (*ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath)(nil)

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) Selector() ProbeSpecTargetServersSpeedTestTarget_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Spec_TargetServers_SpeedTestTarget
func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) Get(source *Probe_Spec_TargetServers_SpeedTestTarget) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
			values = append(values, source.Enabled)
		case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
			values = append(values, source.TcpPort)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Spec_TargetServers_SpeedTestTarget))
}

// GetSingle returns value pointed by specific field of from source Probe_Spec_TargetServers_SpeedTestTarget
func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) GetSingle(source *Probe_Spec_TargetServers_SpeedTestTarget) (interface{}, bool) {
	switch fp.selector {
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
		return source.GetEnabled(), source != nil
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
		return source.GetTcpPort(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Spec_TargetServers_SpeedTestTarget))
}

// GetDefault returns a default value of the field type
func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
		return false
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) ClearValue(item *Probe_Spec_TargetServers_SpeedTestTarget) {
	if item != nil {
		switch fp.selector {
		case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
			item.Enabled = false
		case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
			item.TcpPort = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fp.selector))
		}
	}
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Spec_TargetServers_SpeedTestTarget))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled ||
		fp.selector == ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) WithIValue(value interface{}) ProbeSpecTargetServersSpeedTestTarget_FieldPathValue {
	switch fp.selector {
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
		return &ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue{ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath: *fp, value: value.(bool)}
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
		return &ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue{ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues {
	fpaov := &ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayOfValues{ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
		return &ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayOfValues{ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath: *fp, values: values.([]bool)}
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
		return &ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayOfValues{ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fp.selector))
	}
}

func (fp *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeSpecTargetServersSpeedTestTarget_FieldPathValue allows storing values for SpeedTestTarget fields according to their type
type ProbeSpecTargetServersSpeedTestTarget_FieldPathValue interface {
	ProbeSpecTargetServersSpeedTestTarget_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Spec_TargetServers_SpeedTestTarget)
	CompareWith(*Probe_Spec_TargetServers_SpeedTestTarget) (cmp int, comparable bool)
}

func ParseProbeSpecTargetServersSpeedTestTarget_FieldPathValue(pathStr, valueStr string) (ProbeSpecTargetServersSpeedTestTarget_FieldPathValue, error) {
	fp, err := ParseProbeSpecTargetServersSpeedTestTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SpeedTestTarget field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeSpecTargetServersSpeedTestTarget_FieldPathValue), nil
}

func MustParseProbeSpecTargetServersSpeedTestTarget_FieldPathValue(pathStr, valueStr string) ProbeSpecTargetServersSpeedTestTarget_FieldPathValue {
	fpv, err := ParseProbeSpecTargetServersSpeedTestTarget_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue struct {
	ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecTargetServersSpeedTestTarget_FieldPathValue = (*ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'SpeedTestTarget' as interface{}
func (fpv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue) AsEnabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue) AsTcpPortValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object SpeedTestTarget
func (fpv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue) SetTo(target **Probe_Spec_TargetServers_SpeedTestTarget) {
	if *target == nil {
		*target = new(Probe_Spec_TargetServers_SpeedTestTarget)
	}
	switch fpv.selector {
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
		(*target).Enabled = fpv.value.(bool)
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
		(*target).TcpPort = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Spec_TargetServers_SpeedTestTarget)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue' with the value under path in 'Probe_Spec_TargetServers_SpeedTestTarget'.
func (fpv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue) CompareWith(source *Probe_Spec_TargetServers_SpeedTestTarget) (int, bool) {
	switch fpv.selector {
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetEnabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
		leftValue := fpv.value.(int32)
		rightValue := source.GetTcpPort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Spec_TargetServers_SpeedTestTarget: %d", fpv.selector))
	}
}

func (fpv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Spec_TargetServers_SpeedTestTarget))
}

// ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue allows storing single item in Path-specific values for SpeedTestTarget according to their type
// Present only for array (repeated) types.
type ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeSpecTargetServersSpeedTestTarget_FieldPath
	ContainsValue(*Probe_Spec_TargetServers_SpeedTestTarget) bool
}

// ParseProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeSpecTargetServersSpeedTestTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SpeedTestTarget field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue), nil
}

func MustParseProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue(pathStr, valueStr string) ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayItemValue struct {
	ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath
	value interface{}
}

var _ ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayItemValue = (*ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Spec_TargetServers_SpeedTestTarget as interface{}
func (fpaiv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Spec_TargetServers_SpeedTestTarget) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Spec_TargetServers_SpeedTestTarget))
}

// Contains returns a boolean indicating if value that is being held is present in given 'SpeedTestTarget'
func (fpaiv *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Spec_TargetServers_SpeedTestTarget) bool {
	slice := fpaiv.ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues allows storing slice of values for SpeedTestTarget fields according to their type
type ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeSpecTargetServersSpeedTestTarget_FieldPath
}

func ParseProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeSpecTargetServersSpeedTestTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing SpeedTestTarget field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues), nil
}

func MustParseProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues {
	fpaov, err := ParseProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayOfValues struct {
	ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPath
	values interface{}
}

var _ ProbeSpecTargetServersSpeedTestTarget_FieldPathArrayOfValues = (*ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorEnabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ProbeSpecTargetServersSpeedTestTarget_FieldPathSelectorTcpPort:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayOfValues) AsEnabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ProbeSpecTargetServersSpeedTestTarget_FieldTerminalPathArrayOfValues) AsTcpPortArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusSystem_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusSystem_FieldPathSelector
	Get(source *Probe_Status_System) []interface{}
	GetSingle(source *Probe_Status_System) (interface{}, bool)
	ClearValue(item *Probe_Status_System)

	// Those methods build corresponding ProbeStatusSystem_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusSystem_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusSystem_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusSystem_FieldPathArrayItemValue
}

type ProbeStatusSystem_FieldPathSelector int32

const (
	ProbeStatusSystem_FieldPathSelectorManufacturer ProbeStatusSystem_FieldPathSelector = 0
	ProbeStatusSystem_FieldPathSelectorModel        ProbeStatusSystem_FieldPathSelector = 1
	ProbeStatusSystem_FieldPathSelectorSku          ProbeStatusSystem_FieldPathSelector = 2
	ProbeStatusSystem_FieldPathSelectorFamily       ProbeStatusSystem_FieldPathSelector = 3
	ProbeStatusSystem_FieldPathSelectorSerialNumber ProbeStatusSystem_FieldPathSelector = 4
	ProbeStatusSystem_FieldPathSelectorPlatform     ProbeStatusSystem_FieldPathSelector = 5
	ProbeStatusSystem_FieldPathSelectorArchitecture ProbeStatusSystem_FieldPathSelector = 6
	ProbeStatusSystem_FieldPathSelectorOs           ProbeStatusSystem_FieldPathSelector = 7
	ProbeStatusSystem_FieldPathSelectorHostName     ProbeStatusSystem_FieldPathSelector = 8
)

func (s ProbeStatusSystem_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusSystem_FieldPathSelectorManufacturer:
		return "manufacturer"
	case ProbeStatusSystem_FieldPathSelectorModel:
		return "model"
	case ProbeStatusSystem_FieldPathSelectorSku:
		return "sku"
	case ProbeStatusSystem_FieldPathSelectorFamily:
		return "family"
	case ProbeStatusSystem_FieldPathSelectorSerialNumber:
		return "serial_number"
	case ProbeStatusSystem_FieldPathSelectorPlatform:
		return "platform"
	case ProbeStatusSystem_FieldPathSelectorArchitecture:
		return "architecture"
	case ProbeStatusSystem_FieldPathSelectorOs:
		return "os"
	case ProbeStatusSystem_FieldPathSelectorHostName:
		return "host_name"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", s))
	}
}

func BuildProbeStatusSystem_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusSystem_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Status_System")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "manufacturer":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorManufacturer}, nil
		case "model":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorModel}, nil
		case "sku":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorSku}, nil
		case "family":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorFamily}, nil
		case "serial_number", "serialNumber", "serial-number":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorSerialNumber}, nil
		case "platform":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorPlatform}, nil
		case "architecture":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorArchitecture}, nil
		case "os":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorOs}, nil
		case "host_name", "hostName", "host-name":
			return &ProbeStatusSystem_FieldTerminalPath{selector: ProbeStatusSystem_FieldPathSelectorHostName}, nil
		}
	} else {
		switch fp[0] {
		case "os":
			if subpath, err := BuildProbeStatusSystemOS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatusSystem_FieldSubPath{selector: ProbeStatusSystem_FieldPathSelectorOs, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Status_System", fp)
}

func ParseProbeStatusSystem_FieldPath(rawField string) (ProbeStatusSystem_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusSystem_FieldPath(fp)
}

func MustParseProbeStatusSystem_FieldPath(rawField string) ProbeStatusSystem_FieldPath {
	fp, err := ParseProbeStatusSystem_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusSystem_FieldTerminalPath struct {
	selector ProbeStatusSystem_FieldPathSelector
}

var _ ProbeStatusSystem_FieldPath = (*ProbeStatusSystem_FieldTerminalPath)(nil)

func (fp *ProbeStatusSystem_FieldTerminalPath) Selector() ProbeStatusSystem_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusSystem_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusSystem_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Status_System
func (fp *ProbeStatusSystem_FieldTerminalPath) Get(source *Probe_Status_System) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusSystem_FieldPathSelectorManufacturer:
			values = append(values, source.Manufacturer)
		case ProbeStatusSystem_FieldPathSelectorModel:
			values = append(values, source.Model)
		case ProbeStatusSystem_FieldPathSelectorSku:
			values = append(values, source.Sku)
		case ProbeStatusSystem_FieldPathSelectorFamily:
			values = append(values, source.Family)
		case ProbeStatusSystem_FieldPathSelectorSerialNumber:
			values = append(values, source.SerialNumber)
		case ProbeStatusSystem_FieldPathSelectorPlatform:
			values = append(values, source.Platform)
		case ProbeStatusSystem_FieldPathSelectorArchitecture:
			values = append(values, source.Architecture)
		case ProbeStatusSystem_FieldPathSelectorOs:
			if source.Os != nil {
				values = append(values, source.Os)
			}
		case ProbeStatusSystem_FieldPathSelectorHostName:
			values = append(values, source.HostName)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusSystem_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Status_System))
}

// GetSingle returns value pointed by specific field of from source Probe_Status_System
func (fp *ProbeStatusSystem_FieldTerminalPath) GetSingle(source *Probe_Status_System) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusSystem_FieldPathSelectorManufacturer:
		return source.GetManufacturer(), source != nil
	case ProbeStatusSystem_FieldPathSelectorModel:
		return source.GetModel(), source != nil
	case ProbeStatusSystem_FieldPathSelectorSku:
		return source.GetSku(), source != nil
	case ProbeStatusSystem_FieldPathSelectorFamily:
		return source.GetFamily(), source != nil
	case ProbeStatusSystem_FieldPathSelectorSerialNumber:
		return source.GetSerialNumber(), source != nil
	case ProbeStatusSystem_FieldPathSelectorPlatform:
		return source.GetPlatform(), source != nil
	case ProbeStatusSystem_FieldPathSelectorArchitecture:
		return source.GetArchitecture(), source != nil
	case ProbeStatusSystem_FieldPathSelectorOs:
		res := source.GetOs()
		return res, res != nil
	case ProbeStatusSystem_FieldPathSelectorHostName:
		return source.GetHostName(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fp.selector))
	}
}

func (fp *ProbeStatusSystem_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Status_System))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusSystem_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusSystem_FieldPathSelectorManufacturer:
		return ""
	case ProbeStatusSystem_FieldPathSelectorModel:
		return ""
	case ProbeStatusSystem_FieldPathSelectorSku:
		return ""
	case ProbeStatusSystem_FieldPathSelectorFamily:
		return ""
	case ProbeStatusSystem_FieldPathSelectorSerialNumber:
		return ""
	case ProbeStatusSystem_FieldPathSelectorPlatform:
		return ""
	case ProbeStatusSystem_FieldPathSelectorArchitecture:
		return ""
	case ProbeStatusSystem_FieldPathSelectorOs:
		return (*Probe_Status_System_OS)(nil)
	case ProbeStatusSystem_FieldPathSelectorHostName:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fp.selector))
	}
}

func (fp *ProbeStatusSystem_FieldTerminalPath) ClearValue(item *Probe_Status_System) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusSystem_FieldPathSelectorManufacturer:
			item.Manufacturer = ""
		case ProbeStatusSystem_FieldPathSelectorModel:
			item.Model = ""
		case ProbeStatusSystem_FieldPathSelectorSku:
			item.Sku = ""
		case ProbeStatusSystem_FieldPathSelectorFamily:
			item.Family = ""
		case ProbeStatusSystem_FieldPathSelectorSerialNumber:
			item.SerialNumber = ""
		case ProbeStatusSystem_FieldPathSelectorPlatform:
			item.Platform = ""
		case ProbeStatusSystem_FieldPathSelectorArchitecture:
			item.Architecture = ""
		case ProbeStatusSystem_FieldPathSelectorOs:
			item.Os = nil
		case ProbeStatusSystem_FieldPathSelectorHostName:
			item.HostName = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusSystem_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Status_System))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusSystem_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusSystem_FieldPathSelectorManufacturer ||
		fp.selector == ProbeStatusSystem_FieldPathSelectorModel ||
		fp.selector == ProbeStatusSystem_FieldPathSelectorSku ||
		fp.selector == ProbeStatusSystem_FieldPathSelectorFamily ||
		fp.selector == ProbeStatusSystem_FieldPathSelectorSerialNumber ||
		fp.selector == ProbeStatusSystem_FieldPathSelectorPlatform ||
		fp.selector == ProbeStatusSystem_FieldPathSelectorArchitecture ||
		fp.selector == ProbeStatusSystem_FieldPathSelectorHostName
}

func (fp *ProbeStatusSystem_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusSystem_FieldPathValue {
	switch fp.selector {
	case ProbeStatusSystem_FieldPathSelectorManufacturer:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystem_FieldPathSelectorModel:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystem_FieldPathSelectorSku:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystem_FieldPathSelectorFamily:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystem_FieldPathSelectorSerialNumber:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystem_FieldPathSelectorPlatform:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystem_FieldPathSelectorArchitecture:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystem_FieldPathSelectorOs:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(*Probe_Status_System_OS)}
	case ProbeStatusSystem_FieldPathSelectorHostName:
		return &ProbeStatusSystem_FieldTerminalPathValue{ProbeStatusSystem_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fp.selector))
	}
}

func (fp *ProbeStatusSystem_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusSystem_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusSystem_FieldPathArrayOfValues {
	fpaov := &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusSystem_FieldPathSelectorManufacturer:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystem_FieldPathSelectorModel:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystem_FieldPathSelectorSku:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystem_FieldPathSelectorFamily:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystem_FieldPathSelectorSerialNumber:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystem_FieldPathSelectorPlatform:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystem_FieldPathSelectorArchitecture:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystem_FieldPathSelectorOs:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]*Probe_Status_System_OS)}
	case ProbeStatusSystem_FieldPathSelectorHostName:
		return &ProbeStatusSystem_FieldTerminalPathArrayOfValues{ProbeStatusSystem_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusSystem_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusSystem_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusSystem_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fp.selector))
	}
}

func (fp *ProbeStatusSystem_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbeStatusSystem_FieldSubPath struct {
	selector ProbeStatusSystem_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbeStatusSystem_FieldPath = (*ProbeStatusSystem_FieldSubPath)(nil)

func (fps *ProbeStatusSystem_FieldSubPath) Selector() ProbeStatusSystem_FieldPathSelector {
	return fps.selector
}
func (fps *ProbeStatusSystem_FieldSubPath) AsOsSubPath() (ProbeStatusSystemOS_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeStatusSystemOS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbeStatusSystem_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbeStatusSystem_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Probe_Status_System
func (fps *ProbeStatusSystem_FieldSubPath) Get(source *Probe_Status_System) (values []interface{}) {
	if asOSFieldPath, ok := fps.AsOsSubPath(); ok {
		values = append(values, asOSFieldPath.Get(source.GetOs())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fps.selector))
	}
	return
}

func (fps *ProbeStatusSystem_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Probe_Status_System))
}

// GetSingle returns value of selected field from source Probe_Status_System
func (fps *ProbeStatusSystem_FieldSubPath) GetSingle(source *Probe_Status_System) (interface{}, bool) {
	switch fps.selector {
	case ProbeStatusSystem_FieldPathSelectorOs:
		if source.GetOs() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOs())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fps.selector))
	}
}

func (fps *ProbeStatusSystem_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Probe_Status_System))
}

// GetDefault returns a default value of the field type
func (fps *ProbeStatusSystem_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbeStatusSystem_FieldSubPath) ClearValue(item *Probe_Status_System) {
	if item != nil {
		switch fps.selector {
		case ProbeStatusSystem_FieldPathSelectorOs:
			fps.subPath.ClearValueRaw(item.Os)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fps.selector))
		}
	}
}

func (fps *ProbeStatusSystem_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Probe_Status_System))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbeStatusSystem_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbeStatusSystem_FieldSubPath) WithIValue(value interface{}) ProbeStatusSystem_FieldPathValue {
	return &ProbeStatusSystem_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbeStatusSystem_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbeStatusSystem_FieldSubPath) WithIArrayOfValues(values interface{}) ProbeStatusSystem_FieldPathArrayOfValues {
	return &ProbeStatusSystem_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbeStatusSystem_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbeStatusSystem_FieldSubPath) WithIArrayItemValue(value interface{}) ProbeStatusSystem_FieldPathArrayItemValue {
	return &ProbeStatusSystem_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbeStatusSystem_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbeStatusSystem_FieldPathValue allows storing values for System fields according to their type
type ProbeStatusSystem_FieldPathValue interface {
	ProbeStatusSystem_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Status_System)
	CompareWith(*Probe_Status_System) (cmp int, comparable bool)
}

func ParseProbeStatusSystem_FieldPathValue(pathStr, valueStr string) (ProbeStatusSystem_FieldPathValue, error) {
	fp, err := ParseProbeStatusSystem_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing System field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusSystem_FieldPathValue), nil
}

func MustParseProbeStatusSystem_FieldPathValue(pathStr, valueStr string) ProbeStatusSystem_FieldPathValue {
	fpv, err := ParseProbeStatusSystem_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusSystem_FieldTerminalPathValue struct {
	ProbeStatusSystem_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusSystem_FieldPathValue = (*ProbeStatusSystem_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'System' as interface{}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsManufacturerValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsModelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsSkuValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsFamilyValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsSerialNumberValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsPlatformValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsArchitectureValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsOsValue() (*Probe_Status_System_OS, bool) {
	res, ok := fpv.value.(*Probe_Status_System_OS)
	return res, ok
}
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) AsHostNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object System
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) SetTo(target **Probe_Status_System) {
	if *target == nil {
		*target = new(Probe_Status_System)
	}
	switch fpv.selector {
	case ProbeStatusSystem_FieldPathSelectorManufacturer:
		(*target).Manufacturer = fpv.value.(string)
	case ProbeStatusSystem_FieldPathSelectorModel:
		(*target).Model = fpv.value.(string)
	case ProbeStatusSystem_FieldPathSelectorSku:
		(*target).Sku = fpv.value.(string)
	case ProbeStatusSystem_FieldPathSelectorFamily:
		(*target).Family = fpv.value.(string)
	case ProbeStatusSystem_FieldPathSelectorSerialNumber:
		(*target).SerialNumber = fpv.value.(string)
	case ProbeStatusSystem_FieldPathSelectorPlatform:
		(*target).Platform = fpv.value.(string)
	case ProbeStatusSystem_FieldPathSelectorArchitecture:
		(*target).Architecture = fpv.value.(string)
	case ProbeStatusSystem_FieldPathSelectorOs:
		(*target).Os = fpv.value.(*Probe_Status_System_OS)
	case ProbeStatusSystem_FieldPathSelectorHostName:
		(*target).HostName = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusSystem_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_System)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusSystem_FieldTerminalPathValue' with the value under path in 'Probe_Status_System'.
func (fpv *ProbeStatusSystem_FieldTerminalPathValue) CompareWith(source *Probe_Status_System) (int, bool) {
	switch fpv.selector {
	case ProbeStatusSystem_FieldPathSelectorManufacturer:
		leftValue := fpv.value.(string)
		rightValue := source.GetManufacturer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystem_FieldPathSelectorModel:
		leftValue := fpv.value.(string)
		rightValue := source.GetModel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystem_FieldPathSelectorSku:
		leftValue := fpv.value.(string)
		rightValue := source.GetSku()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystem_FieldPathSelectorFamily:
		leftValue := fpv.value.(string)
		rightValue := source.GetFamily()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystem_FieldPathSelectorSerialNumber:
		leftValue := fpv.value.(string)
		rightValue := source.GetSerialNumber()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystem_FieldPathSelectorPlatform:
		leftValue := fpv.value.(string)
		rightValue := source.GetPlatform()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystem_FieldPathSelectorArchitecture:
		leftValue := fpv.value.(string)
		rightValue := source.GetArchitecture()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystem_FieldPathSelectorOs:
		return 0, false
	case ProbeStatusSystem_FieldPathSelectorHostName:
		leftValue := fpv.value.(string)
		rightValue := source.GetHostName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusSystem_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Status_System))
}

type ProbeStatusSystem_FieldSubPathValue struct {
	ProbeStatusSystem_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbeStatusSystem_FieldPathValue = (*ProbeStatusSystem_FieldSubPathValue)(nil)

func (fpvs *ProbeStatusSystem_FieldSubPathValue) AsOsPathValue() (ProbeStatusSystemOS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeStatusSystemOS_FieldPathValue)
	return res, ok
}

func (fpvs *ProbeStatusSystem_FieldSubPathValue) SetTo(target **Probe_Status_System) {
	if *target == nil {
		*target = new(Probe_Status_System)
	}
	switch fpvs.Selector() {
	case ProbeStatusSystem_FieldPathSelectorOs:
		fpvs.subPathValue.(ProbeStatusSystemOS_FieldPathValue).SetTo(&(*target).Os)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeStatusSystem_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_System)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbeStatusSystem_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbeStatusSystem_FieldSubPathValue) CompareWith(source *Probe_Status_System) (int, bool) {
	switch fpvs.Selector() {
	case ProbeStatusSystem_FieldPathSelectorOs:
		return fpvs.subPathValue.(ProbeStatusSystemOS_FieldPathValue).CompareWith(source.GetOs())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeStatusSystem_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Probe_Status_System))
}

// ProbeStatusSystem_FieldPathArrayItemValue allows storing single item in Path-specific values for System according to their type
// Present only for array (repeated) types.
type ProbeStatusSystem_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusSystem_FieldPath
	ContainsValue(*Probe_Status_System) bool
}

// ParseProbeStatusSystem_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusSystem_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusSystem_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusSystem_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing System field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusSystem_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusSystem_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusSystem_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusSystem_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusSystem_FieldTerminalPathArrayItemValue struct {
	ProbeStatusSystem_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusSystem_FieldPathArrayItemValue = (*ProbeStatusSystem_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Status_System as interface{}
func (fpaiv *ProbeStatusSystem_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatusSystem_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Status_System) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusSystem_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Status_System))
}

// Contains returns a boolean indicating if value that is being held is present in given 'System'
func (fpaiv *ProbeStatusSystem_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Status_System) bool {
	slice := fpaiv.ProbeStatusSystem_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbeStatusSystem_FieldSubPathArrayItemValue struct {
	ProbeStatusSystem_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbeStatusSystem_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbeStatusSystem_FieldSubPathArrayItemValue) AsOsPathItemValue() (ProbeStatusSystemOS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeStatusSystemOS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'System'
func (fpaivs *ProbeStatusSystem_FieldSubPathArrayItemValue) ContainsValue(source *Probe_Status_System) bool {
	switch fpaivs.Selector() {
	case ProbeStatusSystem_FieldPathSelectorOs:
		return fpaivs.subPathItemValue.(ProbeStatusSystemOS_FieldPathArrayItemValue).ContainsValue(source.GetOs())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System: %d", fpaivs.Selector()))
	}
}

// ProbeStatusSystem_FieldPathArrayOfValues allows storing slice of values for System fields according to their type
type ProbeStatusSystem_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusSystem_FieldPath
}

func ParseProbeStatusSystem_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusSystem_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusSystem_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing System field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusSystem_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusSystem_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusSystem_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusSystem_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusSystem_FieldTerminalPathArrayOfValues struct {
	ProbeStatusSystem_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusSystem_FieldPathArrayOfValues = (*ProbeStatusSystem_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusSystem_FieldPathSelectorManufacturer:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystem_FieldPathSelectorModel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystem_FieldPathSelectorSku:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystem_FieldPathSelectorFamily:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystem_FieldPathSelectorSerialNumber:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystem_FieldPathSelectorPlatform:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystem_FieldPathSelectorArchitecture:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystem_FieldPathSelectorOs:
		for _, v := range fpaov.values.([]*Probe_Status_System_OS) {
			values = append(values, v)
		}
	case ProbeStatusSystem_FieldPathSelectorHostName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsManufacturerArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsModelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsSkuArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsFamilyArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsSerialNumberArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsPlatformArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsArchitectureArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsOsArrayOfValues() ([]*Probe_Status_System_OS, bool) {
	res, ok := fpaov.values.([]*Probe_Status_System_OS)
	return res, ok
}
func (fpaov *ProbeStatusSystem_FieldTerminalPathArrayOfValues) AsHostNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

type ProbeStatusSystem_FieldSubPathArrayOfValues struct {
	ProbeStatusSystem_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbeStatusSystem_FieldPathArrayOfValues = (*ProbeStatusSystem_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbeStatusSystem_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbeStatusSystem_FieldSubPathArrayOfValues) AsOsPathArrayOfValues() (ProbeStatusSystemOS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeStatusSystemOS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusActivationState_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusActivationState_FieldPathSelector
	Get(source *Probe_Status_ActivationState) []interface{}
	GetSingle(source *Probe_Status_ActivationState) (interface{}, bool)
	ClearValue(item *Probe_Status_ActivationState)

	// Those methods build corresponding ProbeStatusActivationState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusActivationState_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusActivationState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusActivationState_FieldPathArrayItemValue
}

type ProbeStatusActivationState_FieldPathSelector int32

const (
	ProbeStatusActivationState_FieldPathSelectorStatus         ProbeStatusActivationState_FieldPathSelector = 0
	ProbeStatusActivationState_FieldPathSelectorCurrentSession ProbeStatusActivationState_FieldPathSelector = 1
	ProbeStatusActivationState_FieldPathSelectorServiceAccount ProbeStatusActivationState_FieldPathSelector = 2
	ProbeStatusActivationState_FieldPathSelectorLastInvitation ProbeStatusActivationState_FieldPathSelector = 3
)

func (s ProbeStatusActivationState_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusActivationState_FieldPathSelectorStatus:
		return "status"
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		return "current_session"
	case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
		return "service_account"
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		return "last_invitation"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", s))
	}
}

func BuildProbeStatusActivationState_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusActivationState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Status_ActivationState")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "status":
			return &ProbeStatusActivationState_FieldTerminalPath{selector: ProbeStatusActivationState_FieldPathSelectorStatus}, nil
		case "current_session", "currentSession", "current-session":
			return &ProbeStatusActivationState_FieldTerminalPath{selector: ProbeStatusActivationState_FieldPathSelectorCurrentSession}, nil
		case "service_account", "serviceAccount", "service-account":
			return &ProbeStatusActivationState_FieldTerminalPath{selector: ProbeStatusActivationState_FieldPathSelectorServiceAccount}, nil
		case "last_invitation", "lastInvitation", "last-invitation":
			return &ProbeStatusActivationState_FieldTerminalPath{selector: ProbeStatusActivationState_FieldPathSelectorLastInvitation}, nil
		}
	} else {
		switch fp[0] {
		case "current_session", "currentSession", "current-session":
			if subpath, err := BuildProbeStatusActivationStateSession_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatusActivationState_FieldSubPath{selector: ProbeStatusActivationState_FieldPathSelectorCurrentSession, subPath: subpath}, nil
			}
		case "last_invitation", "lastInvitation", "last-invitation":
			if subpath, err := BuildProbeStatusActivationStateInvitationState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbeStatusActivationState_FieldSubPath{selector: ProbeStatusActivationState_FieldPathSelectorLastInvitation, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Status_ActivationState", fp)
}

func ParseProbeStatusActivationState_FieldPath(rawField string) (ProbeStatusActivationState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusActivationState_FieldPath(fp)
}

func MustParseProbeStatusActivationState_FieldPath(rawField string) ProbeStatusActivationState_FieldPath {
	fp, err := ParseProbeStatusActivationState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusActivationState_FieldTerminalPath struct {
	selector ProbeStatusActivationState_FieldPathSelector
}

var _ ProbeStatusActivationState_FieldPath = (*ProbeStatusActivationState_FieldTerminalPath)(nil)

func (fp *ProbeStatusActivationState_FieldTerminalPath) Selector() ProbeStatusActivationState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusActivationState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusActivationState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Status_ActivationState
func (fp *ProbeStatusActivationState_FieldTerminalPath) Get(source *Probe_Status_ActivationState) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusActivationState_FieldPathSelectorStatus:
			values = append(values, source.Status)
		case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
			if source.CurrentSession != nil {
				values = append(values, source.CurrentSession)
			}
		case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
			if source.ServiceAccount != nil {
				values = append(values, source.ServiceAccount)
			}
		case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
			if source.LastInvitation != nil {
				values = append(values, source.LastInvitation)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Status_ActivationState))
}

// GetSingle returns value pointed by specific field of from source Probe_Status_ActivationState
func (fp *ProbeStatusActivationState_FieldTerminalPath) GetSingle(source *Probe_Status_ActivationState) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusActivationState_FieldPathSelectorStatus:
		return source.GetStatus(), source != nil
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		res := source.GetCurrentSession()
		return res, res != nil
	case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
		res := source.GetServiceAccount()
		return res, res != nil
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		res := source.GetLastInvitation()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Status_ActivationState))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusActivationState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusActivationState_FieldPathSelectorStatus:
		return Probe_Status_ActivationState_ACTIVATION_STATUS_UNSPECIFIED
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		return (*Probe_Status_ActivationState_Session)(nil)
	case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
		return (*iam_service_account.Reference)(nil)
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		return (*Probe_Status_ActivationState_InvitationState)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) ClearValue(item *Probe_Status_ActivationState) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusActivationState_FieldPathSelectorStatus:
			item.Status = Probe_Status_ActivationState_ACTIVATION_STATUS_UNSPECIFIED
		case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
			item.CurrentSession = nil
		case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
			item.ServiceAccount = nil
		case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
			item.LastInvitation = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Status_ActivationState))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusActivationState_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusActivationState_FieldPathSelectorStatus ||
		fp.selector == ProbeStatusActivationState_FieldPathSelectorServiceAccount
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusActivationState_FieldPathValue {
	switch fp.selector {
	case ProbeStatusActivationState_FieldPathSelectorStatus:
		return &ProbeStatusActivationState_FieldTerminalPathValue{ProbeStatusActivationState_FieldTerminalPath: *fp, value: value.(Probe_Status_ActivationState_Status)}
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		return &ProbeStatusActivationState_FieldTerminalPathValue{ProbeStatusActivationState_FieldTerminalPath: *fp, value: value.(*Probe_Status_ActivationState_Session)}
	case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
		return &ProbeStatusActivationState_FieldTerminalPathValue{ProbeStatusActivationState_FieldTerminalPath: *fp, value: value.(*iam_service_account.Reference)}
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		return &ProbeStatusActivationState_FieldTerminalPathValue{ProbeStatusActivationState_FieldTerminalPath: *fp, value: value.(*Probe_Status_ActivationState_InvitationState)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusActivationState_FieldPathArrayOfValues {
	fpaov := &ProbeStatusActivationState_FieldTerminalPathArrayOfValues{ProbeStatusActivationState_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusActivationState_FieldPathSelectorStatus:
		return &ProbeStatusActivationState_FieldTerminalPathArrayOfValues{ProbeStatusActivationState_FieldTerminalPath: *fp, values: values.([]Probe_Status_ActivationState_Status)}
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		return &ProbeStatusActivationState_FieldTerminalPathArrayOfValues{ProbeStatusActivationState_FieldTerminalPath: *fp, values: values.([]*Probe_Status_ActivationState_Session)}
	case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
		return &ProbeStatusActivationState_FieldTerminalPathArrayOfValues{ProbeStatusActivationState_FieldTerminalPath: *fp, values: values.([]*iam_service_account.Reference)}
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		return &ProbeStatusActivationState_FieldTerminalPathArrayOfValues{ProbeStatusActivationState_FieldTerminalPath: *fp, values: values.([]*Probe_Status_ActivationState_InvitationState)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusActivationState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbeStatusActivationState_FieldSubPath struct {
	selector ProbeStatusActivationState_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbeStatusActivationState_FieldPath = (*ProbeStatusActivationState_FieldSubPath)(nil)

func (fps *ProbeStatusActivationState_FieldSubPath) Selector() ProbeStatusActivationState_FieldPathSelector {
	return fps.selector
}
func (fps *ProbeStatusActivationState_FieldSubPath) AsCurrentSessionSubPath() (ProbeStatusActivationStateSession_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeStatusActivationStateSession_FieldPath)
	return res, ok
}
func (fps *ProbeStatusActivationState_FieldSubPath) AsLastInvitationSubPath() (ProbeStatusActivationStateInvitationState_FieldPath, bool) {
	res, ok := fps.subPath.(ProbeStatusActivationStateInvitationState_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbeStatusActivationState_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbeStatusActivationState_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Probe_Status_ActivationState
func (fps *ProbeStatusActivationState_FieldSubPath) Get(source *Probe_Status_ActivationState) (values []interface{}) {
	if asSessionFieldPath, ok := fps.AsCurrentSessionSubPath(); ok {
		values = append(values, asSessionFieldPath.Get(source.GetCurrentSession())...)
	} else if asInvitationStateFieldPath, ok := fps.AsLastInvitationSubPath(); ok {
		values = append(values, asInvitationStateFieldPath.Get(source.GetLastInvitation())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fps.selector))
	}
	return
}

func (fps *ProbeStatusActivationState_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Probe_Status_ActivationState))
}

// GetSingle returns value of selected field from source Probe_Status_ActivationState
func (fps *ProbeStatusActivationState_FieldSubPath) GetSingle(source *Probe_Status_ActivationState) (interface{}, bool) {
	switch fps.selector {
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		if source.GetCurrentSession() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCurrentSession())
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		if source.GetLastInvitation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLastInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fps.selector))
	}
}

func (fps *ProbeStatusActivationState_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Probe_Status_ActivationState))
}

// GetDefault returns a default value of the field type
func (fps *ProbeStatusActivationState_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbeStatusActivationState_FieldSubPath) ClearValue(item *Probe_Status_ActivationState) {
	if item != nil {
		switch fps.selector {
		case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
			fps.subPath.ClearValueRaw(item.CurrentSession)
		case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
			fps.subPath.ClearValueRaw(item.LastInvitation)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fps.selector))
		}
	}
}

func (fps *ProbeStatusActivationState_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Probe_Status_ActivationState))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbeStatusActivationState_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbeStatusActivationState_FieldSubPath) WithIValue(value interface{}) ProbeStatusActivationState_FieldPathValue {
	return &ProbeStatusActivationState_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbeStatusActivationState_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbeStatusActivationState_FieldSubPath) WithIArrayOfValues(values interface{}) ProbeStatusActivationState_FieldPathArrayOfValues {
	return &ProbeStatusActivationState_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbeStatusActivationState_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbeStatusActivationState_FieldSubPath) WithIArrayItemValue(value interface{}) ProbeStatusActivationState_FieldPathArrayItemValue {
	return &ProbeStatusActivationState_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbeStatusActivationState_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbeStatusActivationState_FieldPathValue allows storing values for ActivationState fields according to their type
type ProbeStatusActivationState_FieldPathValue interface {
	ProbeStatusActivationState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Status_ActivationState)
	CompareWith(*Probe_Status_ActivationState) (cmp int, comparable bool)
}

func ParseProbeStatusActivationState_FieldPathValue(pathStr, valueStr string) (ProbeStatusActivationState_FieldPathValue, error) {
	fp, err := ParseProbeStatusActivationState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationState field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusActivationState_FieldPathValue), nil
}

func MustParseProbeStatusActivationState_FieldPathValue(pathStr, valueStr string) ProbeStatusActivationState_FieldPathValue {
	fpv, err := ParseProbeStatusActivationState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusActivationState_FieldTerminalPathValue struct {
	ProbeStatusActivationState_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusActivationState_FieldPathValue = (*ProbeStatusActivationState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ActivationState' as interface{}
func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) AsStatusValue() (Probe_Status_ActivationState_Status, bool) {
	res, ok := fpv.value.(Probe_Status_ActivationState_Status)
	return res, ok
}
func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) AsCurrentSessionValue() (*Probe_Status_ActivationState_Session, bool) {
	res, ok := fpv.value.(*Probe_Status_ActivationState_Session)
	return res, ok
}
func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) AsServiceAccountValue() (*iam_service_account.Reference, bool) {
	res, ok := fpv.value.(*iam_service_account.Reference)
	return res, ok
}
func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) AsLastInvitationValue() (*Probe_Status_ActivationState_InvitationState, bool) {
	res, ok := fpv.value.(*Probe_Status_ActivationState_InvitationState)
	return res, ok
}

// SetTo stores value for selected field for object ActivationState
func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) SetTo(target **Probe_Status_ActivationState) {
	if *target == nil {
		*target = new(Probe_Status_ActivationState)
	}
	switch fpv.selector {
	case ProbeStatusActivationState_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(Probe_Status_ActivationState_Status)
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		(*target).CurrentSession = fpv.value.(*Probe_Status_ActivationState_Session)
	case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
		(*target).ServiceAccount = fpv.value.(*iam_service_account.Reference)
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		(*target).LastInvitation = fpv.value.(*Probe_Status_ActivationState_InvitationState)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_ActivationState)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusActivationState_FieldTerminalPathValue' with the value under path in 'Probe_Status_ActivationState'.
func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) CompareWith(source *Probe_Status_ActivationState) (int, bool) {
	switch fpv.selector {
	case ProbeStatusActivationState_FieldPathSelectorStatus:
		leftValue := fpv.value.(Probe_Status_ActivationState_Status)
		rightValue := source.GetStatus()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		return 0, false
	case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
		leftValue := fpv.value.(*iam_service_account.Reference)
		rightValue := source.GetServiceAccount()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusActivationState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Status_ActivationState))
}

type ProbeStatusActivationState_FieldSubPathValue struct {
	ProbeStatusActivationState_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbeStatusActivationState_FieldPathValue = (*ProbeStatusActivationState_FieldSubPathValue)(nil)

func (fpvs *ProbeStatusActivationState_FieldSubPathValue) AsCurrentSessionPathValue() (ProbeStatusActivationStateSession_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeStatusActivationStateSession_FieldPathValue)
	return res, ok
}
func (fpvs *ProbeStatusActivationState_FieldSubPathValue) AsLastInvitationPathValue() (ProbeStatusActivationStateInvitationState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProbeStatusActivationStateInvitationState_FieldPathValue)
	return res, ok
}

func (fpvs *ProbeStatusActivationState_FieldSubPathValue) SetTo(target **Probe_Status_ActivationState) {
	if *target == nil {
		*target = new(Probe_Status_ActivationState)
	}
	switch fpvs.Selector() {
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		fpvs.subPathValue.(ProbeStatusActivationStateSession_FieldPathValue).SetTo(&(*target).CurrentSession)
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		fpvs.subPathValue.(ProbeStatusActivationStateInvitationState_FieldPathValue).SetTo(&(*target).LastInvitation)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeStatusActivationState_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_ActivationState)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbeStatusActivationState_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbeStatusActivationState_FieldSubPathValue) CompareWith(source *Probe_Status_ActivationState) (int, bool) {
	switch fpvs.Selector() {
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		return fpvs.subPathValue.(ProbeStatusActivationStateSession_FieldPathValue).CompareWith(source.GetCurrentSession())
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		return fpvs.subPathValue.(ProbeStatusActivationStateInvitationState_FieldPathValue).CompareWith(source.GetLastInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbeStatusActivationState_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Probe_Status_ActivationState))
}

// ProbeStatusActivationState_FieldPathArrayItemValue allows storing single item in Path-specific values for ActivationState according to their type
// Present only for array (repeated) types.
type ProbeStatusActivationState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusActivationState_FieldPath
	ContainsValue(*Probe_Status_ActivationState) bool
}

// ParseProbeStatusActivationState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusActivationState_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusActivationState_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusActivationState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationState field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusActivationState_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusActivationState_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusActivationState_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusActivationState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusActivationState_FieldTerminalPathArrayItemValue struct {
	ProbeStatusActivationState_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusActivationState_FieldPathArrayItemValue = (*ProbeStatusActivationState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Status_ActivationState as interface{}
func (fpaiv *ProbeStatusActivationState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatusActivationState_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Status_ActivationState) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusActivationState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Status_ActivationState))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ActivationState'
func (fpaiv *ProbeStatusActivationState_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Status_ActivationState) bool {
	slice := fpaiv.ProbeStatusActivationState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbeStatusActivationState_FieldSubPathArrayItemValue struct {
	ProbeStatusActivationState_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbeStatusActivationState_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbeStatusActivationState_FieldSubPathArrayItemValue) AsCurrentSessionPathItemValue() (ProbeStatusActivationStateSession_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeStatusActivationStateSession_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbeStatusActivationState_FieldSubPathArrayItemValue) AsLastInvitationPathItemValue() (ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ActivationState'
func (fpaivs *ProbeStatusActivationState_FieldSubPathArrayItemValue) ContainsValue(source *Probe_Status_ActivationState) bool {
	switch fpaivs.Selector() {
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		return fpaivs.subPathItemValue.(ProbeStatusActivationStateSession_FieldPathArrayItemValue).ContainsValue(source.GetCurrentSession())
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		return fpaivs.subPathItemValue.(ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue).ContainsValue(source.GetLastInvitation())
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState: %d", fpaivs.Selector()))
	}
}

// ProbeStatusActivationState_FieldPathArrayOfValues allows storing slice of values for ActivationState fields according to their type
type ProbeStatusActivationState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusActivationState_FieldPath
}

func ParseProbeStatusActivationState_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusActivationState_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusActivationState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ActivationState field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusActivationState_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusActivationState_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusActivationState_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusActivationState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusActivationState_FieldTerminalPathArrayOfValues struct {
	ProbeStatusActivationState_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusActivationState_FieldPathArrayOfValues = (*ProbeStatusActivationState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusActivationState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusActivationState_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]Probe_Status_ActivationState_Status) {
			values = append(values, v)
		}
	case ProbeStatusActivationState_FieldPathSelectorCurrentSession:
		for _, v := range fpaov.values.([]*Probe_Status_ActivationState_Session) {
			values = append(values, v)
		}
	case ProbeStatusActivationState_FieldPathSelectorServiceAccount:
		for _, v := range fpaov.values.([]*iam_service_account.Reference) {
			values = append(values, v)
		}
	case ProbeStatusActivationState_FieldPathSelectorLastInvitation:
		for _, v := range fpaov.values.([]*Probe_Status_ActivationState_InvitationState) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusActivationState_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]Probe_Status_ActivationState_Status, bool) {
	res, ok := fpaov.values.([]Probe_Status_ActivationState_Status)
	return res, ok
}
func (fpaov *ProbeStatusActivationState_FieldTerminalPathArrayOfValues) AsCurrentSessionArrayOfValues() ([]*Probe_Status_ActivationState_Session, bool) {
	res, ok := fpaov.values.([]*Probe_Status_ActivationState_Session)
	return res, ok
}
func (fpaov *ProbeStatusActivationState_FieldTerminalPathArrayOfValues) AsServiceAccountArrayOfValues() ([]*iam_service_account.Reference, bool) {
	res, ok := fpaov.values.([]*iam_service_account.Reference)
	return res, ok
}
func (fpaov *ProbeStatusActivationState_FieldTerminalPathArrayOfValues) AsLastInvitationArrayOfValues() ([]*Probe_Status_ActivationState_InvitationState, bool) {
	res, ok := fpaov.values.([]*Probe_Status_ActivationState_InvitationState)
	return res, ok
}

type ProbeStatusActivationState_FieldSubPathArrayOfValues struct {
	ProbeStatusActivationState_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbeStatusActivationState_FieldPathArrayOfValues = (*ProbeStatusActivationState_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbeStatusActivationState_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbeStatusActivationState_FieldSubPathArrayOfValues) AsCurrentSessionPathArrayOfValues() (ProbeStatusActivationStateSession_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeStatusActivationStateSession_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbeStatusActivationState_FieldSubPathArrayOfValues) AsLastInvitationPathArrayOfValues() (ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusBandwidth_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusBandwidth_FieldPathSelector
	Get(source *Probe_Status_Bandwidth) []interface{}
	GetSingle(source *Probe_Status_Bandwidth) (interface{}, bool)
	ClearValue(item *Probe_Status_Bandwidth)

	// Those methods build corresponding ProbeStatusBandwidth_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusBandwidth_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusBandwidth_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusBandwidth_FieldPathArrayItemValue
}

type ProbeStatusBandwidth_FieldPathSelector int32

const (
	ProbeStatusBandwidth_FieldPathSelectorUploadMbps      ProbeStatusBandwidth_FieldPathSelector = 0
	ProbeStatusBandwidth_FieldPathSelectorDownloadMbps    ProbeStatusBandwidth_FieldPathSelector = 1
	ProbeStatusBandwidth_FieldPathSelectorTestServer      ProbeStatusBandwidth_FieldPathSelector = 2
	ProbeStatusBandwidth_FieldPathSelectorServerIpAddress ProbeStatusBandwidth_FieldPathSelector = 3
	ProbeStatusBandwidth_FieldPathSelectorLastReported    ProbeStatusBandwidth_FieldPathSelector = 4
)

func (s ProbeStatusBandwidth_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
		return "upload_mbps"
	case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
		return "download_mbps"
	case ProbeStatusBandwidth_FieldPathSelectorTestServer:
		return "test_server"
	case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
		return "server_ip_address"
	case ProbeStatusBandwidth_FieldPathSelectorLastReported:
		return "last_reported"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", s))
	}
}

func BuildProbeStatusBandwidth_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusBandwidth_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Status_Bandwidth")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "upload_mbps", "uploadMbps", "upload-mbps":
			return &ProbeStatusBandwidth_FieldTerminalPath{selector: ProbeStatusBandwidth_FieldPathSelectorUploadMbps}, nil
		case "download_mbps", "downloadMbps", "download-mbps":
			return &ProbeStatusBandwidth_FieldTerminalPath{selector: ProbeStatusBandwidth_FieldPathSelectorDownloadMbps}, nil
		case "test_server", "testServer", "test-server":
			return &ProbeStatusBandwidth_FieldTerminalPath{selector: ProbeStatusBandwidth_FieldPathSelectorTestServer}, nil
		case "server_ip_address", "serverIpAddress", "server-ip-address":
			return &ProbeStatusBandwidth_FieldTerminalPath{selector: ProbeStatusBandwidth_FieldPathSelectorServerIpAddress}, nil
		case "last_reported", "lastReported", "last-reported":
			return &ProbeStatusBandwidth_FieldTerminalPath{selector: ProbeStatusBandwidth_FieldPathSelectorLastReported}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Status_Bandwidth", fp)
}

func ParseProbeStatusBandwidth_FieldPath(rawField string) (ProbeStatusBandwidth_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusBandwidth_FieldPath(fp)
}

func MustParseProbeStatusBandwidth_FieldPath(rawField string) ProbeStatusBandwidth_FieldPath {
	fp, err := ParseProbeStatusBandwidth_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusBandwidth_FieldTerminalPath struct {
	selector ProbeStatusBandwidth_FieldPathSelector
}

var _ ProbeStatusBandwidth_FieldPath = (*ProbeStatusBandwidth_FieldTerminalPath)(nil)

func (fp *ProbeStatusBandwidth_FieldTerminalPath) Selector() ProbeStatusBandwidth_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusBandwidth_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusBandwidth_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Status_Bandwidth
func (fp *ProbeStatusBandwidth_FieldTerminalPath) Get(source *Probe_Status_Bandwidth) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
			values = append(values, source.UploadMbps)
		case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
			values = append(values, source.DownloadMbps)
		case ProbeStatusBandwidth_FieldPathSelectorTestServer:
			values = append(values, source.TestServer)
		case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
			values = append(values, source.ServerIpAddress)
		case ProbeStatusBandwidth_FieldPathSelectorLastReported:
			if source.LastReported != nil {
				values = append(values, source.LastReported)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Status_Bandwidth))
}

// GetSingle returns value pointed by specific field of from source Probe_Status_Bandwidth
func (fp *ProbeStatusBandwidth_FieldTerminalPath) GetSingle(source *Probe_Status_Bandwidth) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
		return source.GetUploadMbps(), source != nil
	case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
		return source.GetDownloadMbps(), source != nil
	case ProbeStatusBandwidth_FieldPathSelectorTestServer:
		return source.GetTestServer(), source != nil
	case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
		return source.GetServerIpAddress(), source != nil
	case ProbeStatusBandwidth_FieldPathSelectorLastReported:
		res := source.GetLastReported()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fp.selector))
	}
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Status_Bandwidth))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusBandwidth_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
		return float64(0)
	case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
		return float64(0)
	case ProbeStatusBandwidth_FieldPathSelectorTestServer:
		return ""
	case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
		return ""
	case ProbeStatusBandwidth_FieldPathSelectorLastReported:
		return (*timestamp.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fp.selector))
	}
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) ClearValue(item *Probe_Status_Bandwidth) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
			item.UploadMbps = float64(0)
		case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
			item.DownloadMbps = float64(0)
		case ProbeStatusBandwidth_FieldPathSelectorTestServer:
			item.TestServer = ""
		case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
			item.ServerIpAddress = ""
		case ProbeStatusBandwidth_FieldPathSelectorLastReported:
			item.LastReported = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Status_Bandwidth))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusBandwidth_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusBandwidth_FieldPathSelectorUploadMbps ||
		fp.selector == ProbeStatusBandwidth_FieldPathSelectorDownloadMbps ||
		fp.selector == ProbeStatusBandwidth_FieldPathSelectorTestServer ||
		fp.selector == ProbeStatusBandwidth_FieldPathSelectorServerIpAddress ||
		fp.selector == ProbeStatusBandwidth_FieldPathSelectorLastReported
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusBandwidth_FieldPathValue {
	switch fp.selector {
	case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
		return &ProbeStatusBandwidth_FieldTerminalPathValue{ProbeStatusBandwidth_FieldTerminalPath: *fp, value: value.(float64)}
	case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
		return &ProbeStatusBandwidth_FieldTerminalPathValue{ProbeStatusBandwidth_FieldTerminalPath: *fp, value: value.(float64)}
	case ProbeStatusBandwidth_FieldPathSelectorTestServer:
		return &ProbeStatusBandwidth_FieldTerminalPathValue{ProbeStatusBandwidth_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
		return &ProbeStatusBandwidth_FieldTerminalPathValue{ProbeStatusBandwidth_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusBandwidth_FieldPathSelectorLastReported:
		return &ProbeStatusBandwidth_FieldTerminalPathValue{ProbeStatusBandwidth_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fp.selector))
	}
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusBandwidth_FieldPathArrayOfValues {
	fpaov := &ProbeStatusBandwidth_FieldTerminalPathArrayOfValues{ProbeStatusBandwidth_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
		return &ProbeStatusBandwidth_FieldTerminalPathArrayOfValues{ProbeStatusBandwidth_FieldTerminalPath: *fp, values: values.([]float64)}
	case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
		return &ProbeStatusBandwidth_FieldTerminalPathArrayOfValues{ProbeStatusBandwidth_FieldTerminalPath: *fp, values: values.([]float64)}
	case ProbeStatusBandwidth_FieldPathSelectorTestServer:
		return &ProbeStatusBandwidth_FieldTerminalPathArrayOfValues{ProbeStatusBandwidth_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
		return &ProbeStatusBandwidth_FieldTerminalPathArrayOfValues{ProbeStatusBandwidth_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusBandwidth_FieldPathSelectorLastReported:
		return &ProbeStatusBandwidth_FieldTerminalPathArrayOfValues{ProbeStatusBandwidth_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusBandwidth_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fp.selector))
	}
}

func (fp *ProbeStatusBandwidth_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeStatusBandwidth_FieldPathValue allows storing values for Bandwidth fields according to their type
type ProbeStatusBandwidth_FieldPathValue interface {
	ProbeStatusBandwidth_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Status_Bandwidth)
	CompareWith(*Probe_Status_Bandwidth) (cmp int, comparable bool)
}

func ParseProbeStatusBandwidth_FieldPathValue(pathStr, valueStr string) (ProbeStatusBandwidth_FieldPathValue, error) {
	fp, err := ParseProbeStatusBandwidth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Bandwidth field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusBandwidth_FieldPathValue), nil
}

func MustParseProbeStatusBandwidth_FieldPathValue(pathStr, valueStr string) ProbeStatusBandwidth_FieldPathValue {
	fpv, err := ParseProbeStatusBandwidth_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusBandwidth_FieldTerminalPathValue struct {
	ProbeStatusBandwidth_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusBandwidth_FieldPathValue = (*ProbeStatusBandwidth_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Bandwidth' as interface{}
func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) AsUploadMbpsValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) AsDownloadMbpsValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}
func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) AsTestServerValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) AsServerIpAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) AsLastReportedValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object Bandwidth
func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) SetTo(target **Probe_Status_Bandwidth) {
	if *target == nil {
		*target = new(Probe_Status_Bandwidth)
	}
	switch fpv.selector {
	case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
		(*target).UploadMbps = fpv.value.(float64)
	case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
		(*target).DownloadMbps = fpv.value.(float64)
	case ProbeStatusBandwidth_FieldPathSelectorTestServer:
		(*target).TestServer = fpv.value.(string)
	case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
		(*target).ServerIpAddress = fpv.value.(string)
	case ProbeStatusBandwidth_FieldPathSelectorLastReported:
		(*target).LastReported = fpv.value.(*timestamp.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_Bandwidth)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusBandwidth_FieldTerminalPathValue' with the value under path in 'Probe_Status_Bandwidth'.
func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) CompareWith(source *Probe_Status_Bandwidth) (int, bool) {
	switch fpv.selector {
	case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
		leftValue := fpv.value.(float64)
		rightValue := source.GetUploadMbps()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
		leftValue := fpv.value.(float64)
		rightValue := source.GetDownloadMbps()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusBandwidth_FieldPathSelectorTestServer:
		leftValue := fpv.value.(string)
		rightValue := source.GetTestServer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetServerIpAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusBandwidth_FieldPathSelectorLastReported:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetLastReported()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_Bandwidth: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusBandwidth_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Status_Bandwidth))
}

// ProbeStatusBandwidth_FieldPathArrayItemValue allows storing single item in Path-specific values for Bandwidth according to their type
// Present only for array (repeated) types.
type ProbeStatusBandwidth_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusBandwidth_FieldPath
	ContainsValue(*Probe_Status_Bandwidth) bool
}

// ParseProbeStatusBandwidth_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusBandwidth_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusBandwidth_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusBandwidth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Bandwidth field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusBandwidth_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusBandwidth_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusBandwidth_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusBandwidth_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusBandwidth_FieldTerminalPathArrayItemValue struct {
	ProbeStatusBandwidth_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusBandwidth_FieldPathArrayItemValue = (*ProbeStatusBandwidth_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Status_Bandwidth as interface{}
func (fpaiv *ProbeStatusBandwidth_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatusBandwidth_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Status_Bandwidth) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusBandwidth_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Status_Bandwidth))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Bandwidth'
func (fpaiv *ProbeStatusBandwidth_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Status_Bandwidth) bool {
	slice := fpaiv.ProbeStatusBandwidth_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeStatusBandwidth_FieldPathArrayOfValues allows storing slice of values for Bandwidth fields according to their type
type ProbeStatusBandwidth_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusBandwidth_FieldPath
}

func ParseProbeStatusBandwidth_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusBandwidth_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusBandwidth_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Bandwidth field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusBandwidth_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusBandwidth_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusBandwidth_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusBandwidth_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusBandwidth_FieldTerminalPathArrayOfValues struct {
	ProbeStatusBandwidth_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusBandwidth_FieldPathArrayOfValues = (*ProbeStatusBandwidth_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusBandwidth_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusBandwidth_FieldPathSelectorUploadMbps:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case ProbeStatusBandwidth_FieldPathSelectorDownloadMbps:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	case ProbeStatusBandwidth_FieldPathSelectorTestServer:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusBandwidth_FieldPathSelectorServerIpAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusBandwidth_FieldPathSelectorLastReported:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusBandwidth_FieldTerminalPathArrayOfValues) AsUploadMbpsArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *ProbeStatusBandwidth_FieldTerminalPathArrayOfValues) AsDownloadMbpsArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}
func (fpaov *ProbeStatusBandwidth_FieldTerminalPathArrayOfValues) AsTestServerArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusBandwidth_FieldTerminalPathArrayOfValues) AsServerIpAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusBandwidth_FieldTerminalPathArrayOfValues) AsLastReportedArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusNetworkInterface_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusNetworkInterface_FieldPathSelector
	Get(source *Probe_Status_NetworkInterface) []interface{}
	GetSingle(source *Probe_Status_NetworkInterface) (interface{}, bool)
	ClearValue(item *Probe_Status_NetworkInterface)

	// Those methods build corresponding ProbeStatusNetworkInterface_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusNetworkInterface_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusNetworkInterface_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusNetworkInterface_FieldPathArrayItemValue
}

type ProbeStatusNetworkInterface_FieldPathSelector int32

const (
	ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName       ProbeStatusNetworkInterface_FieldPathSelector = 0
	ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4         ProbeStatusNetworkInterface_FieldPathSelector = 1
	ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4 ProbeStatusNetworkInterface_FieldPathSelector = 2
	ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6         ProbeStatusNetworkInterface_FieldPathSelector = 3
	ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6 ProbeStatusNetworkInterface_FieldPathSelector = 4
)

func (s ProbeStatusNetworkInterface_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
		return "interface_name"
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		return "ip_address_v4"
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		return "external_ip_address_v4"
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		return "ip_address_v6"
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		return "external_ip_address_v6"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", s))
	}
}

func BuildProbeStatusNetworkInterface_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusNetworkInterface_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Status_NetworkInterface")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "interface_name", "interfaceName", "interface-name":
			return &ProbeStatusNetworkInterface_FieldTerminalPath{selector: ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName}, nil
		case "ip_address_v4", "ipAddressV4", "ip-address-v4":
			return &ProbeStatusNetworkInterface_FieldTerminalPath{selector: ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4}, nil
		case "external_ip_address_v4", "externalIpAddressV4", "external-ip-address-v4":
			return &ProbeStatusNetworkInterface_FieldTerminalPath{selector: ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4}, nil
		case "ip_address_v6", "ipAddressV6", "ip-address-v6":
			return &ProbeStatusNetworkInterface_FieldTerminalPath{selector: ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6}, nil
		case "external_ip_address_v6", "externalIpAddressV6", "external-ip-address-v6":
			return &ProbeStatusNetworkInterface_FieldTerminalPath{selector: ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Status_NetworkInterface", fp)
}

func ParseProbeStatusNetworkInterface_FieldPath(rawField string) (ProbeStatusNetworkInterface_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusNetworkInterface_FieldPath(fp)
}

func MustParseProbeStatusNetworkInterface_FieldPath(rawField string) ProbeStatusNetworkInterface_FieldPath {
	fp, err := ParseProbeStatusNetworkInterface_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusNetworkInterface_FieldTerminalPath struct {
	selector ProbeStatusNetworkInterface_FieldPathSelector
}

var _ ProbeStatusNetworkInterface_FieldPath = (*ProbeStatusNetworkInterface_FieldTerminalPath)(nil)

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) Selector() ProbeStatusNetworkInterface_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Status_NetworkInterface
func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) Get(source *Probe_Status_NetworkInterface) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
			values = append(values, source.InterfaceName)
		case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
			for _, value := range source.GetIpAddressV4() {
				values = append(values, value)
			}
		case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
			for _, value := range source.GetExternalIpAddressV4() {
				values = append(values, value)
			}
		case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
			for _, value := range source.GetIpAddressV6() {
				values = append(values, value)
			}
		case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
			for _, value := range source.GetExternalIpAddressV6() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Status_NetworkInterface))
}

// GetSingle returns value pointed by specific field of from source Probe_Status_NetworkInterface
func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) GetSingle(source *Probe_Status_NetworkInterface) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
		return source.GetInterfaceName(), source != nil
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		res := source.GetIpAddressV4()
		return res, res != nil
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		res := source.GetExternalIpAddressV4()
		return res, res != nil
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		res := source.GetIpAddressV6()
		return res, res != nil
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		res := source.GetExternalIpAddressV6()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fp.selector))
	}
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Status_NetworkInterface))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
		return ""
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		return ([]string)(nil)
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		return ([]string)(nil)
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		return ([]string)(nil)
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fp.selector))
	}
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) ClearValue(item *Probe_Status_NetworkInterface) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
			item.InterfaceName = ""
		case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
			item.IpAddressV4 = nil
		case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
			item.ExternalIpAddressV4 = nil
		case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
			item.IpAddressV6 = nil
		case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
			item.ExternalIpAddressV6 = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Status_NetworkInterface))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName ||
		fp.selector == ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4 ||
		fp.selector == ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4 ||
		fp.selector == ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6 ||
		fp.selector == ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusNetworkInterface_FieldPathValue {
	switch fp.selector {
	case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
		return &ProbeStatusNetworkInterface_FieldTerminalPathValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		return &ProbeStatusNetworkInterface_FieldTerminalPathValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.([]string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		return &ProbeStatusNetworkInterface_FieldTerminalPathValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.([]string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		return &ProbeStatusNetworkInterface_FieldTerminalPathValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.([]string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		return &ProbeStatusNetworkInterface_FieldTerminalPathValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fp.selector))
	}
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusNetworkInterface_FieldPathArrayOfValues {
	fpaov := &ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues{ProbeStatusNetworkInterface_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, values: values.([][]string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, values: values.([][]string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, values: values.([][]string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusNetworkInterface_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		return &ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue{ProbeStatusNetworkInterface_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fp.selector))
	}
}

func (fp *ProbeStatusNetworkInterface_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeStatusNetworkInterface_FieldPathValue allows storing values for NetworkInterface fields according to their type
type ProbeStatusNetworkInterface_FieldPathValue interface {
	ProbeStatusNetworkInterface_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Status_NetworkInterface)
	CompareWith(*Probe_Status_NetworkInterface) (cmp int, comparable bool)
}

func ParseProbeStatusNetworkInterface_FieldPathValue(pathStr, valueStr string) (ProbeStatusNetworkInterface_FieldPathValue, error) {
	fp, err := ParseProbeStatusNetworkInterface_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NetworkInterface field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusNetworkInterface_FieldPathValue), nil
}

func MustParseProbeStatusNetworkInterface_FieldPathValue(pathStr, valueStr string) ProbeStatusNetworkInterface_FieldPathValue {
	fpv, err := ParseProbeStatusNetworkInterface_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusNetworkInterface_FieldTerminalPathValue struct {
	ProbeStatusNetworkInterface_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusNetworkInterface_FieldPathValue = (*ProbeStatusNetworkInterface_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'NetworkInterface' as interface{}
func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) AsInterfaceNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) AsIpAddressV4Value() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) AsExternalIpAddressV4Value() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) AsIpAddressV6Value() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) AsExternalIpAddressV6Value() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object NetworkInterface
func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) SetTo(target **Probe_Status_NetworkInterface) {
	if *target == nil {
		*target = new(Probe_Status_NetworkInterface)
	}
	switch fpv.selector {
	case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
		(*target).InterfaceName = fpv.value.(string)
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		(*target).IpAddressV4 = fpv.value.([]string)
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		(*target).ExternalIpAddressV4 = fpv.value.([]string)
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		(*target).IpAddressV6 = fpv.value.([]string)
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		(*target).ExternalIpAddressV6 = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_NetworkInterface)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusNetworkInterface_FieldTerminalPathValue' with the value under path in 'Probe_Status_NetworkInterface'.
func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) CompareWith(source *Probe_Status_NetworkInterface) (int, bool) {
	switch fpv.selector {
	case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
		leftValue := fpv.value.(string)
		rightValue := source.GetInterfaceName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		return 0, false
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		return 0, false
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		return 0, false
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_NetworkInterface: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusNetworkInterface_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Status_NetworkInterface))
}

// ProbeStatusNetworkInterface_FieldPathArrayItemValue allows storing single item in Path-specific values for NetworkInterface according to their type
// Present only for array (repeated) types.
type ProbeStatusNetworkInterface_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusNetworkInterface_FieldPath
	ContainsValue(*Probe_Status_NetworkInterface) bool
}

// ParseProbeStatusNetworkInterface_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusNetworkInterface_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusNetworkInterface_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusNetworkInterface_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NetworkInterface field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusNetworkInterface_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusNetworkInterface_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusNetworkInterface_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusNetworkInterface_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue struct {
	ProbeStatusNetworkInterface_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusNetworkInterface_FieldPathArrayItemValue = (*ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Status_NetworkInterface as interface{}
func (fpaiv *ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue) AsIpAddressV4ItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue) AsExternalIpAddressV4ItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue) AsIpAddressV6ItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue) AsExternalIpAddressV6ItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Status_NetworkInterface) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Status_NetworkInterface))
}

// Contains returns a boolean indicating if value that is being held is present in given 'NetworkInterface'
func (fpaiv *ProbeStatusNetworkInterface_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Status_NetworkInterface) bool {
	slice := fpaiv.ProbeStatusNetworkInterface_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeStatusNetworkInterface_FieldPathArrayOfValues allows storing slice of values for NetworkInterface fields according to their type
type ProbeStatusNetworkInterface_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusNetworkInterface_FieldPath
}

func ParseProbeStatusNetworkInterface_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusNetworkInterface_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusNetworkInterface_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing NetworkInterface field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusNetworkInterface_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusNetworkInterface_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusNetworkInterface_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusNetworkInterface_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues struct {
	ProbeStatusNetworkInterface_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusNetworkInterface_FieldPathArrayOfValues = (*ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusNetworkInterface_FieldPathSelectorInterfaceName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV4:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV4:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ProbeStatusNetworkInterface_FieldPathSelectorIpAddressV6:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ProbeStatusNetworkInterface_FieldPathSelectorExternalIpAddressV6:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues) AsInterfaceNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues) AsIpAddressV4ArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues) AsExternalIpAddressV4ArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues) AsIpAddressV6ArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ProbeStatusNetworkInterface_FieldTerminalPathArrayOfValues) AsExternalIpAddressV6ArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusSystemOS_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusSystemOS_FieldPathSelector
	Get(source *Probe_Status_System_OS) []interface{}
	GetSingle(source *Probe_Status_System_OS) (interface{}, bool)
	ClearValue(item *Probe_Status_System_OS)

	// Those methods build corresponding ProbeStatusSystemOS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusSystemOS_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusSystemOS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusSystemOS_FieldPathArrayItemValue
}

type ProbeStatusSystemOS_FieldPathSelector int32

const (
	ProbeStatusSystemOS_FieldPathSelectorName         ProbeStatusSystemOS_FieldPathSelector = 0
	ProbeStatusSystemOS_FieldPathSelectorVersion      ProbeStatusSystemOS_FieldPathSelector = 1
	ProbeStatusSystemOS_FieldPathSelectorBuildVersion ProbeStatusSystemOS_FieldPathSelector = 2
	ProbeStatusSystemOS_FieldPathSelectorKernel       ProbeStatusSystemOS_FieldPathSelector = 3
)

func (s ProbeStatusSystemOS_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusSystemOS_FieldPathSelectorName:
		return "name"
	case ProbeStatusSystemOS_FieldPathSelectorVersion:
		return "version"
	case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
		return "build_version"
	case ProbeStatusSystemOS_FieldPathSelectorKernel:
		return "kernel"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", s))
	}
}

func BuildProbeStatusSystemOS_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusSystemOS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Status_System_OS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProbeStatusSystemOS_FieldTerminalPath{selector: ProbeStatusSystemOS_FieldPathSelectorName}, nil
		case "version":
			return &ProbeStatusSystemOS_FieldTerminalPath{selector: ProbeStatusSystemOS_FieldPathSelectorVersion}, nil
		case "build_version", "buildVersion", "build-version":
			return &ProbeStatusSystemOS_FieldTerminalPath{selector: ProbeStatusSystemOS_FieldPathSelectorBuildVersion}, nil
		case "kernel":
			return &ProbeStatusSystemOS_FieldTerminalPath{selector: ProbeStatusSystemOS_FieldPathSelectorKernel}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Status_System_OS", fp)
}

func ParseProbeStatusSystemOS_FieldPath(rawField string) (ProbeStatusSystemOS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusSystemOS_FieldPath(fp)
}

func MustParseProbeStatusSystemOS_FieldPath(rawField string) ProbeStatusSystemOS_FieldPath {
	fp, err := ParseProbeStatusSystemOS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusSystemOS_FieldTerminalPath struct {
	selector ProbeStatusSystemOS_FieldPathSelector
}

var _ ProbeStatusSystemOS_FieldPath = (*ProbeStatusSystemOS_FieldTerminalPath)(nil)

func (fp *ProbeStatusSystemOS_FieldTerminalPath) Selector() ProbeStatusSystemOS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusSystemOS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusSystemOS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Status_System_OS
func (fp *ProbeStatusSystemOS_FieldTerminalPath) Get(source *Probe_Status_System_OS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusSystemOS_FieldPathSelectorName:
			values = append(values, source.Name)
		case ProbeStatusSystemOS_FieldPathSelectorVersion:
			values = append(values, source.Version)
		case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
			values = append(values, source.BuildVersion)
		case ProbeStatusSystemOS_FieldPathSelectorKernel:
			values = append(values, source.Kernel)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Status_System_OS))
}

// GetSingle returns value pointed by specific field of from source Probe_Status_System_OS
func (fp *ProbeStatusSystemOS_FieldTerminalPath) GetSingle(source *Probe_Status_System_OS) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusSystemOS_FieldPathSelectorName:
		return source.GetName(), source != nil
	case ProbeStatusSystemOS_FieldPathSelectorVersion:
		return source.GetVersion(), source != nil
	case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
		return source.GetBuildVersion(), source != nil
	case ProbeStatusSystemOS_FieldPathSelectorKernel:
		return source.GetKernel(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fp.selector))
	}
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Status_System_OS))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusSystemOS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusSystemOS_FieldPathSelectorName:
		return ""
	case ProbeStatusSystemOS_FieldPathSelectorVersion:
		return ""
	case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
		return ""
	case ProbeStatusSystemOS_FieldPathSelectorKernel:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fp.selector))
	}
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) ClearValue(item *Probe_Status_System_OS) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusSystemOS_FieldPathSelectorName:
			item.Name = ""
		case ProbeStatusSystemOS_FieldPathSelectorVersion:
			item.Version = ""
		case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
			item.BuildVersion = ""
		case ProbeStatusSystemOS_FieldPathSelectorKernel:
			item.Kernel = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Status_System_OS))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusSystemOS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusSystemOS_FieldPathSelectorName ||
		fp.selector == ProbeStatusSystemOS_FieldPathSelectorVersion ||
		fp.selector == ProbeStatusSystemOS_FieldPathSelectorBuildVersion ||
		fp.selector == ProbeStatusSystemOS_FieldPathSelectorKernel
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusSystemOS_FieldPathValue {
	switch fp.selector {
	case ProbeStatusSystemOS_FieldPathSelectorName:
		return &ProbeStatusSystemOS_FieldTerminalPathValue{ProbeStatusSystemOS_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystemOS_FieldPathSelectorVersion:
		return &ProbeStatusSystemOS_FieldTerminalPathValue{ProbeStatusSystemOS_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
		return &ProbeStatusSystemOS_FieldTerminalPathValue{ProbeStatusSystemOS_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusSystemOS_FieldPathSelectorKernel:
		return &ProbeStatusSystemOS_FieldTerminalPathValue{ProbeStatusSystemOS_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fp.selector))
	}
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusSystemOS_FieldPathArrayOfValues {
	fpaov := &ProbeStatusSystemOS_FieldTerminalPathArrayOfValues{ProbeStatusSystemOS_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusSystemOS_FieldPathSelectorName:
		return &ProbeStatusSystemOS_FieldTerminalPathArrayOfValues{ProbeStatusSystemOS_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystemOS_FieldPathSelectorVersion:
		return &ProbeStatusSystemOS_FieldTerminalPathArrayOfValues{ProbeStatusSystemOS_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
		return &ProbeStatusSystemOS_FieldTerminalPathArrayOfValues{ProbeStatusSystemOS_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusSystemOS_FieldPathSelectorKernel:
		return &ProbeStatusSystemOS_FieldTerminalPathArrayOfValues{ProbeStatusSystemOS_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusSystemOS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fp.selector))
	}
}

func (fp *ProbeStatusSystemOS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeStatusSystemOS_FieldPathValue allows storing values for OS fields according to their type
type ProbeStatusSystemOS_FieldPathValue interface {
	ProbeStatusSystemOS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Status_System_OS)
	CompareWith(*Probe_Status_System_OS) (cmp int, comparable bool)
}

func ParseProbeStatusSystemOS_FieldPathValue(pathStr, valueStr string) (ProbeStatusSystemOS_FieldPathValue, error) {
	fp, err := ParseProbeStatusSystemOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OS field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusSystemOS_FieldPathValue), nil
}

func MustParseProbeStatusSystemOS_FieldPathValue(pathStr, valueStr string) ProbeStatusSystemOS_FieldPathValue {
	fpv, err := ParseProbeStatusSystemOS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusSystemOS_FieldTerminalPathValue struct {
	ProbeStatusSystemOS_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusSystemOS_FieldPathValue = (*ProbeStatusSystemOS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'OS' as interface{}
func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) AsNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) AsVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) AsBuildVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) AsKernelValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object OS
func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) SetTo(target **Probe_Status_System_OS) {
	if *target == nil {
		*target = new(Probe_Status_System_OS)
	}
	switch fpv.selector {
	case ProbeStatusSystemOS_FieldPathSelectorName:
		(*target).Name = fpv.value.(string)
	case ProbeStatusSystemOS_FieldPathSelectorVersion:
		(*target).Version = fpv.value.(string)
	case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
		(*target).BuildVersion = fpv.value.(string)
	case ProbeStatusSystemOS_FieldPathSelectorKernel:
		(*target).Kernel = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_System_OS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusSystemOS_FieldTerminalPathValue' with the value under path in 'Probe_Status_System_OS'.
func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) CompareWith(source *Probe_Status_System_OS) (int, bool) {
	switch fpv.selector {
	case ProbeStatusSystemOS_FieldPathSelectorName:
		leftValue := fpv.value.(string)
		rightValue := source.GetName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystemOS_FieldPathSelectorVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetBuildVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusSystemOS_FieldPathSelectorKernel:
		leftValue := fpv.value.(string)
		rightValue := source.GetKernel()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_System_OS: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusSystemOS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Status_System_OS))
}

// ProbeStatusSystemOS_FieldPathArrayItemValue allows storing single item in Path-specific values for OS according to their type
// Present only for array (repeated) types.
type ProbeStatusSystemOS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusSystemOS_FieldPath
	ContainsValue(*Probe_Status_System_OS) bool
}

// ParseProbeStatusSystemOS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusSystemOS_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusSystemOS_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusSystemOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusSystemOS_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusSystemOS_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusSystemOS_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusSystemOS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusSystemOS_FieldTerminalPathArrayItemValue struct {
	ProbeStatusSystemOS_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusSystemOS_FieldPathArrayItemValue = (*ProbeStatusSystemOS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Status_System_OS as interface{}
func (fpaiv *ProbeStatusSystemOS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatusSystemOS_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Status_System_OS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusSystemOS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Status_System_OS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'OS'
func (fpaiv *ProbeStatusSystemOS_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Status_System_OS) bool {
	slice := fpaiv.ProbeStatusSystemOS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeStatusSystemOS_FieldPathArrayOfValues allows storing slice of values for OS fields according to their type
type ProbeStatusSystemOS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusSystemOS_FieldPath
}

func ParseProbeStatusSystemOS_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusSystemOS_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusSystemOS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing OS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusSystemOS_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusSystemOS_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusSystemOS_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusSystemOS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusSystemOS_FieldTerminalPathArrayOfValues struct {
	ProbeStatusSystemOS_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusSystemOS_FieldPathArrayOfValues = (*ProbeStatusSystemOS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusSystemOS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusSystemOS_FieldPathSelectorName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystemOS_FieldPathSelectorVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystemOS_FieldPathSelectorBuildVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusSystemOS_FieldPathSelectorKernel:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusSystemOS_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystemOS_FieldTerminalPathArrayOfValues) AsVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystemOS_FieldTerminalPathArrayOfValues) AsBuildVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusSystemOS_FieldTerminalPathArrayOfValues) AsKernelArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusActivationStateSession_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusActivationStateSession_FieldPathSelector
	Get(source *Probe_Status_ActivationState_Session) []interface{}
	GetSingle(source *Probe_Status_ActivationState_Session) (interface{}, bool)
	ClearValue(item *Probe_Status_ActivationState_Session)

	// Those methods build corresponding ProbeStatusActivationStateSession_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusActivationStateSession_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusActivationStateSession_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusActivationStateSession_FieldPathArrayItemValue
}

type ProbeStatusActivationStateSession_FieldPathSelector int32

const (
	ProbeStatusActivationStateSession_FieldPathSelectorClientCookie ProbeStatusActivationStateSession_FieldPathSelector = 0
	ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline ProbeStatusActivationStateSession_FieldPathSelector = 1
)

func (s ProbeStatusActivationStateSession_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
		return "client_cookie"
	case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
		return "lock_deadline"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", s))
	}
}

func BuildProbeStatusActivationStateSession_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusActivationStateSession_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Status_ActivationState_Session")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "client_cookie", "clientCookie", "client-cookie":
			return &ProbeStatusActivationStateSession_FieldTerminalPath{selector: ProbeStatusActivationStateSession_FieldPathSelectorClientCookie}, nil
		case "lock_deadline", "lockDeadline", "lock-deadline":
			return &ProbeStatusActivationStateSession_FieldTerminalPath{selector: ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Status_ActivationState_Session", fp)
}

func ParseProbeStatusActivationStateSession_FieldPath(rawField string) (ProbeStatusActivationStateSession_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusActivationStateSession_FieldPath(fp)
}

func MustParseProbeStatusActivationStateSession_FieldPath(rawField string) ProbeStatusActivationStateSession_FieldPath {
	fp, err := ParseProbeStatusActivationStateSession_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusActivationStateSession_FieldTerminalPath struct {
	selector ProbeStatusActivationStateSession_FieldPathSelector
}

var _ ProbeStatusActivationStateSession_FieldPath = (*ProbeStatusActivationStateSession_FieldTerminalPath)(nil)

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) Selector() ProbeStatusActivationStateSession_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Status_ActivationState_Session
func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) Get(source *Probe_Status_ActivationState_Session) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
			values = append(values, source.ClientCookie)
		case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
			if source.LockDeadline != nil {
				values = append(values, source.LockDeadline)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Status_ActivationState_Session))
}

// GetSingle returns value pointed by specific field of from source Probe_Status_ActivationState_Session
func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) GetSingle(source *Probe_Status_ActivationState_Session) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
		return source.GetClientCookie(), source != nil
	case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
		res := source.GetLockDeadline()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Status_ActivationState_Session))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
		return ""
	case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
		return (*timestamp.Timestamp)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) ClearValue(item *Probe_Status_ActivationState_Session) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
			item.ClientCookie = ""
		case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
			item.LockDeadline = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Status_ActivationState_Session))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusActivationStateSession_FieldPathSelectorClientCookie ||
		fp.selector == ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusActivationStateSession_FieldPathValue {
	switch fp.selector {
	case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
		return &ProbeStatusActivationStateSession_FieldTerminalPathValue{ProbeStatusActivationStateSession_FieldTerminalPath: *fp, value: value.(string)}
	case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
		return &ProbeStatusActivationStateSession_FieldTerminalPathValue{ProbeStatusActivationStateSession_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusActivationStateSession_FieldPathArrayOfValues {
	fpaov := &ProbeStatusActivationStateSession_FieldTerminalPathArrayOfValues{ProbeStatusActivationStateSession_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
		return &ProbeStatusActivationStateSession_FieldTerminalPathArrayOfValues{ProbeStatusActivationStateSession_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
		return &ProbeStatusActivationStateSession_FieldTerminalPathArrayOfValues{ProbeStatusActivationStateSession_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusActivationStateSession_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationStateSession_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeStatusActivationStateSession_FieldPathValue allows storing values for Session fields according to their type
type ProbeStatusActivationStateSession_FieldPathValue interface {
	ProbeStatusActivationStateSession_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Status_ActivationState_Session)
	CompareWith(*Probe_Status_ActivationState_Session) (cmp int, comparable bool)
}

func ParseProbeStatusActivationStateSession_FieldPathValue(pathStr, valueStr string) (ProbeStatusActivationStateSession_FieldPathValue, error) {
	fp, err := ParseProbeStatusActivationStateSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Session field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusActivationStateSession_FieldPathValue), nil
}

func MustParseProbeStatusActivationStateSession_FieldPathValue(pathStr, valueStr string) ProbeStatusActivationStateSession_FieldPathValue {
	fpv, err := ParseProbeStatusActivationStateSession_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusActivationStateSession_FieldTerminalPathValue struct {
	ProbeStatusActivationStateSession_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusActivationStateSession_FieldPathValue = (*ProbeStatusActivationStateSession_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Session' as interface{}
func (fpv *ProbeStatusActivationStateSession_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusActivationStateSession_FieldTerminalPathValue) AsClientCookieValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbeStatusActivationStateSession_FieldTerminalPathValue) AsLockDeadlineValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}

// SetTo stores value for selected field for object Session
func (fpv *ProbeStatusActivationStateSession_FieldTerminalPathValue) SetTo(target **Probe_Status_ActivationState_Session) {
	if *target == nil {
		*target = new(Probe_Status_ActivationState_Session)
	}
	switch fpv.selector {
	case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
		(*target).ClientCookie = fpv.value.(string)
	case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
		(*target).LockDeadline = fpv.value.(*timestamp.Timestamp)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusActivationStateSession_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_ActivationState_Session)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusActivationStateSession_FieldTerminalPathValue' with the value under path in 'Probe_Status_ActivationState_Session'.
func (fpv *ProbeStatusActivationStateSession_FieldTerminalPathValue) CompareWith(source *Probe_Status_ActivationState_Session) (int, bool) {
	switch fpv.selector {
	case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
		leftValue := fpv.value.(string)
		rightValue := source.GetClientCookie()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetLockDeadline()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_Session: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusActivationStateSession_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Status_ActivationState_Session))
}

// ProbeStatusActivationStateSession_FieldPathArrayItemValue allows storing single item in Path-specific values for Session according to their type
// Present only for array (repeated) types.
type ProbeStatusActivationStateSession_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusActivationStateSession_FieldPath
	ContainsValue(*Probe_Status_ActivationState_Session) bool
}

// ParseProbeStatusActivationStateSession_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusActivationStateSession_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusActivationStateSession_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusActivationStateSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Session field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusActivationStateSession_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusActivationStateSession_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusActivationStateSession_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusActivationStateSession_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusActivationStateSession_FieldTerminalPathArrayItemValue struct {
	ProbeStatusActivationStateSession_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusActivationStateSession_FieldPathArrayItemValue = (*ProbeStatusActivationStateSession_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Status_ActivationState_Session as interface{}
func (fpaiv *ProbeStatusActivationStateSession_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatusActivationStateSession_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Status_ActivationState_Session) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusActivationStateSession_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Status_ActivationState_Session))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Session'
func (fpaiv *ProbeStatusActivationStateSession_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Status_ActivationState_Session) bool {
	slice := fpaiv.ProbeStatusActivationStateSession_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeStatusActivationStateSession_FieldPathArrayOfValues allows storing slice of values for Session fields according to their type
type ProbeStatusActivationStateSession_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusActivationStateSession_FieldPath
}

func ParseProbeStatusActivationStateSession_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusActivationStateSession_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusActivationStateSession_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Session field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusActivationStateSession_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusActivationStateSession_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusActivationStateSession_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusActivationStateSession_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusActivationStateSession_FieldTerminalPathArrayOfValues struct {
	ProbeStatusActivationStateSession_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusActivationStateSession_FieldPathArrayOfValues = (*ProbeStatusActivationStateSession_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusActivationStateSession_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusActivationStateSession_FieldPathSelectorClientCookie:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbeStatusActivationStateSession_FieldPathSelectorLockDeadline:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusActivationStateSession_FieldTerminalPathArrayOfValues) AsClientCookieArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbeStatusActivationStateSession_FieldTerminalPathArrayOfValues) AsLockDeadlineArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbeStatusActivationStateInvitationState_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbeStatusActivationStateInvitationState_FieldPathSelector
	Get(source *Probe_Status_ActivationState_InvitationState) []interface{}
	GetSingle(source *Probe_Status_ActivationState_InvitationState) (interface{}, bool)
	ClearValue(item *Probe_Status_ActivationState_InvitationState)

	// Those methods build corresponding ProbeStatusActivationStateInvitationState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbeStatusActivationStateInvitationState_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue
}

type ProbeStatusActivationStateInvitationState_FieldPathSelector int32

const (
	ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate ProbeStatusActivationStateInvitationState_FieldPathSelector = 0
	ProbeStatusActivationStateInvitationState_FieldPathSelectorSender   ProbeStatusActivationStateInvitationState_FieldPathSelector = 1
)

func (s ProbeStatusActivationStateInvitationState_FieldPathSelector) String() string {
	switch s {
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
		return "sent_date"
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
		return "sender"
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", s))
	}
}

func BuildProbeStatusActivationStateInvitationState_FieldPath(fp gotenobject.RawFieldPath) (ProbeStatusActivationStateInvitationState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Probe_Status_ActivationState_InvitationState")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "sent_date", "sentDate", "sent-date":
			return &ProbeStatusActivationStateInvitationState_FieldTerminalPath{selector: ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate}, nil
		case "sender":
			return &ProbeStatusActivationStateInvitationState_FieldTerminalPath{selector: ProbeStatusActivationStateInvitationState_FieldPathSelectorSender}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Probe_Status_ActivationState_InvitationState", fp)
}

func ParseProbeStatusActivationStateInvitationState_FieldPath(rawField string) (ProbeStatusActivationStateInvitationState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbeStatusActivationStateInvitationState_FieldPath(fp)
}

func MustParseProbeStatusActivationStateInvitationState_FieldPath(rawField string) ProbeStatusActivationStateInvitationState_FieldPath {
	fp, err := ParseProbeStatusActivationStateInvitationState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbeStatusActivationStateInvitationState_FieldTerminalPath struct {
	selector ProbeStatusActivationStateInvitationState_FieldPathSelector
}

var _ ProbeStatusActivationStateInvitationState_FieldPath = (*ProbeStatusActivationStateInvitationState_FieldTerminalPath)(nil)

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) Selector() ProbeStatusActivationStateInvitationState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Probe_Status_ActivationState_InvitationState
func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) Get(source *Probe_Status_ActivationState_InvitationState) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
			if source.SentDate != nil {
				values = append(values, source.SentDate)
			}
		case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
			values = append(values, source.Sender)
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Probe_Status_ActivationState_InvitationState))
}

// GetSingle returns value pointed by specific field of from source Probe_Status_ActivationState_InvitationState
func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) GetSingle(source *Probe_Status_ActivationState_InvitationState) (interface{}, bool) {
	switch fp.selector {
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
		res := source.GetSentDate()
		return res, res != nil
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
		return source.GetSender(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Probe_Status_ActivationState_InvitationState))
}

// GetDefault returns a default value of the field type
func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
		return (*timestamp.Timestamp)(nil)
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) ClearValue(item *Probe_Status_ActivationState_InvitationState) {
	if item != nil {
		switch fp.selector {
		case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
			item.SentDate = nil
		case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
			item.Sender = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fp.selector))
		}
	}
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Probe_Status_ActivationState_InvitationState))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate ||
		fp.selector == ProbeStatusActivationStateInvitationState_FieldPathSelectorSender
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) WithIValue(value interface{}) ProbeStatusActivationStateInvitationState_FieldPathValue {
	switch fp.selector {
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
		return &ProbeStatusActivationStateInvitationState_FieldTerminalPathValue{ProbeStatusActivationStateInvitationState_FieldTerminalPath: *fp, value: value.(*timestamp.Timestamp)}
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
		return &ProbeStatusActivationStateInvitationState_FieldTerminalPathValue{ProbeStatusActivationStateInvitationState_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues {
	fpaov := &ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayOfValues{ProbeStatusActivationStateInvitationState_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
		return &ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayOfValues{ProbeStatusActivationStateInvitationState_FieldTerminalPath: *fp, values: values.([]*timestamp.Timestamp)}
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
		return &ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayOfValues{ProbeStatusActivationStateInvitationState_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fp.selector))
	}
}

func (fp *ProbeStatusActivationStateInvitationState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProbeStatusActivationStateInvitationState_FieldPathValue allows storing values for InvitationState fields according to their type
type ProbeStatusActivationStateInvitationState_FieldPathValue interface {
	ProbeStatusActivationStateInvitationState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Probe_Status_ActivationState_InvitationState)
	CompareWith(*Probe_Status_ActivationState_InvitationState) (cmp int, comparable bool)
}

func ParseProbeStatusActivationStateInvitationState_FieldPathValue(pathStr, valueStr string) (ProbeStatusActivationStateInvitationState_FieldPathValue, error) {
	fp, err := ParseProbeStatusActivationStateInvitationState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing InvitationState field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbeStatusActivationStateInvitationState_FieldPathValue), nil
}

func MustParseProbeStatusActivationStateInvitationState_FieldPathValue(pathStr, valueStr string) ProbeStatusActivationStateInvitationState_FieldPathValue {
	fpv, err := ParseProbeStatusActivationStateInvitationState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbeStatusActivationStateInvitationState_FieldTerminalPathValue struct {
	ProbeStatusActivationStateInvitationState_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusActivationStateInvitationState_FieldPathValue = (*ProbeStatusActivationStateInvitationState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'InvitationState' as interface{}
func (fpv *ProbeStatusActivationStateInvitationState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbeStatusActivationStateInvitationState_FieldTerminalPathValue) AsSentDateValue() (*timestamp.Timestamp, bool) {
	res, ok := fpv.value.(*timestamp.Timestamp)
	return res, ok
}
func (fpv *ProbeStatusActivationStateInvitationState_FieldTerminalPathValue) AsSenderValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object InvitationState
func (fpv *ProbeStatusActivationStateInvitationState_FieldTerminalPathValue) SetTo(target **Probe_Status_ActivationState_InvitationState) {
	if *target == nil {
		*target = new(Probe_Status_ActivationState_InvitationState)
	}
	switch fpv.selector {
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
		(*target).SentDate = fpv.value.(*timestamp.Timestamp)
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
		(*target).Sender = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusActivationStateInvitationState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Probe_Status_ActivationState_InvitationState)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbeStatusActivationStateInvitationState_FieldTerminalPathValue' with the value under path in 'Probe_Status_ActivationState_InvitationState'.
func (fpv *ProbeStatusActivationStateInvitationState_FieldTerminalPathValue) CompareWith(source *Probe_Status_ActivationState_InvitationState) (int, bool) {
	switch fpv.selector {
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
		leftValue := fpv.value.(*timestamp.Timestamp)
		rightValue := source.GetSentDate()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.AsTime().Equal(rightValue.AsTime()) {
			return 0, true
		} else if leftValue.AsTime().Before(rightValue.AsTime()) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
		leftValue := fpv.value.(string)
		rightValue := source.GetSender()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Probe_Status_ActivationState_InvitationState: %d", fpv.selector))
	}
}

func (fpv *ProbeStatusActivationStateInvitationState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Probe_Status_ActivationState_InvitationState))
}

// ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue allows storing single item in Path-specific values for InvitationState according to their type
// Present only for array (repeated) types.
type ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbeStatusActivationStateInvitationState_FieldPath
	ContainsValue(*Probe_Status_ActivationState_InvitationState) bool
}

// ParseProbeStatusActivationStateInvitationState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbeStatusActivationStateInvitationState_FieldPathArrayItemValue(pathStr, valueStr string) (ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue, error) {
	fp, err := ParseProbeStatusActivationStateInvitationState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing InvitationState field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue), nil
}

func MustParseProbeStatusActivationStateInvitationState_FieldPathArrayItemValue(pathStr, valueStr string) ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue {
	fpaiv, err := ParseProbeStatusActivationStateInvitationState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayItemValue struct {
	ProbeStatusActivationStateInvitationState_FieldTerminalPath
	value interface{}
}

var _ ProbeStatusActivationStateInvitationState_FieldPathArrayItemValue = (*ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Probe_Status_ActivationState_InvitationState as interface{}
func (fpaiv *ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayItemValue) GetSingle(source *Probe_Status_ActivationState_InvitationState) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Probe_Status_ActivationState_InvitationState))
}

// Contains returns a boolean indicating if value that is being held is present in given 'InvitationState'
func (fpaiv *ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayItemValue) ContainsValue(source *Probe_Status_ActivationState_InvitationState) bool {
	slice := fpaiv.ProbeStatusActivationStateInvitationState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues allows storing slice of values for InvitationState fields according to their type
type ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbeStatusActivationStateInvitationState_FieldPath
}

func ParseProbeStatusActivationStateInvitationState_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues, error) {
	fp, err := ParseProbeStatusActivationStateInvitationState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing InvitationState field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues), nil
}

func MustParseProbeStatusActivationStateInvitationState_FieldPathArrayOfValues(pathStr, valuesStr string) ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues {
	fpaov, err := ParseProbeStatusActivationStateInvitationState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayOfValues struct {
	ProbeStatusActivationStateInvitationState_FieldTerminalPath
	values interface{}
}

var _ ProbeStatusActivationStateInvitationState_FieldPathArrayOfValues = (*ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSentDate:
		for _, v := range fpaov.values.([]*timestamp.Timestamp) {
			values = append(values, v)
		}
	case ProbeStatusActivationStateInvitationState_FieldPathSelectorSender:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayOfValues) AsSentDateArrayOfValues() ([]*timestamp.Timestamp, bool) {
	res, ok := fpaov.values.([]*timestamp.Timestamp)
	return res, ok
}
func (fpaov *ProbeStatusActivationStateInvitationState_FieldTerminalPathArrayOfValues) AsSenderArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
