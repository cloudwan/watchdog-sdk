// Code generated by protoc-gen-goten-resource
// Resource change: ProbeChange
// DO NOT EDIT!!!

package probe

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &field_mask.FieldMask{}
	_ = &project.Project{}
)

func (c *ProbeChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ProbeChange_Added_)
	return ok
}

func (c *ProbeChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ProbeChange_Modified_)
	return ok
}

func (c *ProbeChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ProbeChange_Current_)
	return ok
}

func (c *ProbeChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*ProbeChange_Removed_)
	return ok
}

func (c *ProbeChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ProbeChange_Added_:
		return cType.Added.ViewIndex
	case *ProbeChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *ProbeChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *ProbeChange_Removed_:
		return cType.Removed.ViewIndex
	case *ProbeChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *ProbeChange) GetProbe() *Probe {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ProbeChange_Added_:
		return cType.Added.Probe
	case *ProbeChange_Modified_:
		return cType.Modified.Probe
	case *ProbeChange_Current_:
		return cType.Current.Probe
	case *ProbeChange_Removed_:
		return nil
	}
	return nil
}

func (c *ProbeChange) GetResource() gotenresource.Resource {
	return c.GetProbe()
}

func (c *ProbeChange) GetProbeName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *ProbeChange_Added_:
		return cType.Added.Probe.GetName()
	case *ProbeChange_Modified_:
		return cType.Modified.Name
	case *ProbeChange_Current_:
		return cType.Current.Probe.GetName()
	case *ProbeChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *ProbeChange) GetRawName() gotenresource.Name {
	return c.GetProbeName()
}

func (c *ProbeChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &ProbeChange_Added_{
		Added: &ProbeChange_Added{
			Probe:     snapshot.(*Probe),
			ViewIndex: int32(idx),
		},
	}
}

func (c *ProbeChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &ProbeChange_Modified_{
		Modified: &ProbeChange_Modified{
			Name:              name.(*Name),
			Probe:             snapshot.(*Probe),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *ProbeChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &ProbeChange_Current_{
		Current: &ProbeChange_Current{
			Probe: snapshot.(*Probe),
		},
	}
}

func (c *ProbeChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &ProbeChange_Removed_{
		Removed: &ProbeChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
