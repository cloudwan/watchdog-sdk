// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/project.proto
// DO NOT EDIT!!!

package project

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	policy "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/policy"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &policy.Policy{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Project_FieldPath interface {
	gotenobject.FieldPath
	Selector() Project_FieldPathSelector
	Get(source *Project) []interface{}
	GetSingle(source *Project) (interface{}, bool)
	ClearValue(item *Project)

	// Those methods build corresponding Project_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Project_FieldPathValue
	WithIArrayOfValues(values interface{}) Project_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Project_FieldPathArrayItemValue
}

type Project_FieldPathSelector int32

const (
	Project_FieldPathSelectorName                       Project_FieldPathSelector = 0
	Project_FieldPathSelectorMetadata                   Project_FieldPathSelector = 1
	Project_FieldPathSelectorMultiRegionPolicy          Project_FieldPathSelector = 2
	Project_FieldPathSelectorProbeStatusExposureMode    Project_FieldPathSelector = 3
	Project_FieldPathSelectorSlackWebhookUrl            Project_FieldPathSelector = 4
	Project_FieldPathSelectorTeamsWebhookUrl            Project_FieldPathSelector = 5
	Project_FieldPathSelectorInternetSummaryTargetGroup Project_FieldPathSelector = 6
	Project_FieldPathSelectorPreferredLocale            Project_FieldPathSelector = 7
	Project_FieldPathSelectorExternalIpCheckUrl         Project_FieldPathSelector = 8
)

func (s Project_FieldPathSelector) String() string {
	switch s {
	case Project_FieldPathSelectorName:
		return "name"
	case Project_FieldPathSelectorMetadata:
		return "metadata"
	case Project_FieldPathSelectorMultiRegionPolicy:
		return "multi_region_policy"
	case Project_FieldPathSelectorProbeStatusExposureMode:
		return "probe_status_exposure_mode"
	case Project_FieldPathSelectorSlackWebhookUrl:
		return "slack_webhook_url"
	case Project_FieldPathSelectorTeamsWebhookUrl:
		return "teams_webhook_url"
	case Project_FieldPathSelectorInternetSummaryTargetGroup:
		return "internet_summary_target_group"
	case Project_FieldPathSelectorPreferredLocale:
		return "preferred_locale"
	case Project_FieldPathSelectorExternalIpCheckUrl:
		return "external_ip_check_url"
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", s))
	}
}

func BuildProject_FieldPath(fp gotenobject.RawFieldPath) (Project_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Project")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorName}, nil
		case "metadata":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorMetadata}, nil
		case "multi_region_policy", "multiRegionPolicy", "multi-region-policy":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorMultiRegionPolicy}, nil
		case "probe_status_exposure_mode", "probeStatusExposureMode", "probe-status-exposure-mode":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorProbeStatusExposureMode}, nil
		case "slack_webhook_url", "slackWebhookUrl", "slack-webhook-url":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorSlackWebhookUrl}, nil
		case "teams_webhook_url", "teamsWebhookUrl", "teams-webhook-url":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorTeamsWebhookUrl}, nil
		case "internet_summary_target_group", "internetSummaryTargetGroup", "internet-summary-target-group":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorInternetSummaryTargetGroup}, nil
		case "preferred_locale", "preferredLocale", "preferred-locale":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorPreferredLocale}, nil
		case "external_ip_check_url", "externalIpCheckUrl", "external-ip-check-url":
			return &Project_FieldTerminalPath{selector: Project_FieldPathSelectorExternalIpCheckUrl}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Project_FieldSubPath{selector: Project_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "multi_region_policy", "multiRegionPolicy", "multi-region-policy":
			if subpath, err := policy.BuildPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Project_FieldSubPath{selector: Project_FieldPathSelectorMultiRegionPolicy, subPath: subpath}, nil
			}
		case "preferred_locale", "preferredLocale", "preferred-locale":
			if subpath, err := BuildProjectLocale_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Project_FieldSubPath{selector: Project_FieldPathSelectorPreferredLocale, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Project", fp)
}

func ParseProject_FieldPath(rawField string) (Project_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProject_FieldPath(fp)
}

func MustParseProject_FieldPath(rawField string) Project_FieldPath {
	fp, err := ParseProject_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Project_FieldTerminalPath struct {
	selector Project_FieldPathSelector
}

var _ Project_FieldPath = (*Project_FieldTerminalPath)(nil)

func (fp *Project_FieldTerminalPath) Selector() Project_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Project_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Project_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Project
func (fp *Project_FieldTerminalPath) Get(source *Project) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Project_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Project_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Project_FieldPathSelectorMultiRegionPolicy:
			if source.MultiRegionPolicy != nil {
				values = append(values, source.MultiRegionPolicy)
			}
		case Project_FieldPathSelectorProbeStatusExposureMode:
			values = append(values, source.ProbeStatusExposureMode)
		case Project_FieldPathSelectorSlackWebhookUrl:
			values = append(values, source.SlackWebhookUrl)
		case Project_FieldPathSelectorTeamsWebhookUrl:
			values = append(values, source.TeamsWebhookUrl)
		case Project_FieldPathSelectorInternetSummaryTargetGroup:
			values = append(values, source.InternetSummaryTargetGroup)
		case Project_FieldPathSelectorPreferredLocale:
			if source.PreferredLocale != nil {
				values = append(values, source.PreferredLocale)
			}
		case Project_FieldPathSelectorExternalIpCheckUrl:
			for _, value := range source.GetExternalIpCheckUrl() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
		}
	}
	return
}

func (fp *Project_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Project))
}

// GetSingle returns value pointed by specific field of from source Project
func (fp *Project_FieldTerminalPath) GetSingle(source *Project) (interface{}, bool) {
	switch fp.selector {
	case Project_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Project_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Project_FieldPathSelectorMultiRegionPolicy:
		res := source.GetMultiRegionPolicy()
		return res, res != nil
	case Project_FieldPathSelectorProbeStatusExposureMode:
		return source.GetProbeStatusExposureMode(), source != nil
	case Project_FieldPathSelectorSlackWebhookUrl:
		return source.GetSlackWebhookUrl(), source != nil
	case Project_FieldPathSelectorTeamsWebhookUrl:
		return source.GetTeamsWebhookUrl(), source != nil
	case Project_FieldPathSelectorInternetSummaryTargetGroup:
		return source.GetInternetSummaryTargetGroup(), source != nil
	case Project_FieldPathSelectorPreferredLocale:
		res := source.GetPreferredLocale()
		return res, res != nil
	case Project_FieldPathSelectorExternalIpCheckUrl:
		res := source.GetExternalIpCheckUrl()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
}

func (fp *Project_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Project))
}

// GetDefault returns a default value of the field type
func (fp *Project_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Project_FieldPathSelectorName:
		return (*Name)(nil)
	case Project_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case Project_FieldPathSelectorMultiRegionPolicy:
		return (*policy.Policy)(nil)
	case Project_FieldPathSelectorProbeStatusExposureMode:
		return Project_ProbeStatusExposureModeUnspecified
	case Project_FieldPathSelectorSlackWebhookUrl:
		return ""
	case Project_FieldPathSelectorTeamsWebhookUrl:
		return ""
	case Project_FieldPathSelectorInternetSummaryTargetGroup:
		return ""
	case Project_FieldPathSelectorPreferredLocale:
		return (*Project_Locale)(nil)
	case Project_FieldPathSelectorExternalIpCheckUrl:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
}

func (fp *Project_FieldTerminalPath) ClearValue(item *Project) {
	if item != nil {
		switch fp.selector {
		case Project_FieldPathSelectorName:
			item.Name = nil
		case Project_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Project_FieldPathSelectorMultiRegionPolicy:
			item.MultiRegionPolicy = nil
		case Project_FieldPathSelectorProbeStatusExposureMode:
			item.ProbeStatusExposureMode = Project_ProbeStatusExposureModeUnspecified
		case Project_FieldPathSelectorSlackWebhookUrl:
			item.SlackWebhookUrl = ""
		case Project_FieldPathSelectorTeamsWebhookUrl:
			item.TeamsWebhookUrl = ""
		case Project_FieldPathSelectorInternetSummaryTargetGroup:
			item.InternetSummaryTargetGroup = ""
		case Project_FieldPathSelectorPreferredLocale:
			item.PreferredLocale = nil
		case Project_FieldPathSelectorExternalIpCheckUrl:
			item.ExternalIpCheckUrl = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
		}
	}
}

func (fp *Project_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Project))
}

// IsLeaf - whether field path is holds simple value
func (fp *Project_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Project_FieldPathSelectorName ||
		fp.selector == Project_FieldPathSelectorProbeStatusExposureMode ||
		fp.selector == Project_FieldPathSelectorSlackWebhookUrl ||
		fp.selector == Project_FieldPathSelectorTeamsWebhookUrl ||
		fp.selector == Project_FieldPathSelectorInternetSummaryTargetGroup ||
		fp.selector == Project_FieldPathSelectorExternalIpCheckUrl
}

func (fp *Project_FieldTerminalPath) WithIValue(value interface{}) Project_FieldPathValue {
	switch fp.selector {
	case Project_FieldPathSelectorName:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*Name)}
	case Project_FieldPathSelectorMetadata:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case Project_FieldPathSelectorMultiRegionPolicy:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*policy.Policy)}
	case Project_FieldPathSelectorProbeStatusExposureMode:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(Project_ProbeStatusExposureMode)}
	case Project_FieldPathSelectorSlackWebhookUrl:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(string)}
	case Project_FieldPathSelectorTeamsWebhookUrl:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(string)}
	case Project_FieldPathSelectorInternetSummaryTargetGroup:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(string)}
	case Project_FieldPathSelectorPreferredLocale:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.(*Project_Locale)}
	case Project_FieldPathSelectorExternalIpCheckUrl:
		return &Project_FieldTerminalPathValue{Project_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
}

func (fp *Project_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Project_FieldTerminalPath) WithIArrayOfValues(values interface{}) Project_FieldPathArrayOfValues {
	fpaov := &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp}
	switch fp.selector {
	case Project_FieldPathSelectorName:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Project_FieldPathSelectorMetadata:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case Project_FieldPathSelectorMultiRegionPolicy:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*policy.Policy)}
	case Project_FieldPathSelectorProbeStatusExposureMode:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]Project_ProbeStatusExposureMode)}
	case Project_FieldPathSelectorSlackWebhookUrl:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]string)}
	case Project_FieldPathSelectorTeamsWebhookUrl:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]string)}
	case Project_FieldPathSelectorInternetSummaryTargetGroup:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]string)}
	case Project_FieldPathSelectorPreferredLocale:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([]*Project_Locale)}
	case Project_FieldPathSelectorExternalIpCheckUrl:
		return &Project_FieldTerminalPathArrayOfValues{Project_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
	return fpaov
}

func (fp *Project_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Project_FieldTerminalPath) WithIArrayItemValue(value interface{}) Project_FieldPathArrayItemValue {
	switch fp.selector {
	case Project_FieldPathSelectorExternalIpCheckUrl:
		return &Project_FieldTerminalPathArrayItemValue{Project_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fp.selector))
	}
}

func (fp *Project_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Project_FieldSubPath struct {
	selector Project_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Project_FieldPath = (*Project_FieldSubPath)(nil)

func (fps *Project_FieldSubPath) Selector() Project_FieldPathSelector {
	return fps.selector
}
func (fps *Project_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *Project_FieldSubPath) AsMultiRegionPolicySubPath() (policy.Policy_FieldPath, bool) {
	res, ok := fps.subPath.(policy.Policy_FieldPath)
	return res, ok
}
func (fps *Project_FieldSubPath) AsPreferredLocaleSubPath() (ProjectLocale_FieldPath, bool) {
	res, ok := fps.subPath.(ProjectLocale_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Project_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Project_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Project
func (fps *Project_FieldSubPath) Get(source *Project) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asPolicyFieldPath, ok := fps.AsMultiRegionPolicySubPath(); ok {
		values = append(values, asPolicyFieldPath.Get(source.GetMultiRegionPolicy())...)
	} else if asLocaleFieldPath, ok := fps.AsPreferredLocaleSubPath(); ok {
		values = append(values, asLocaleFieldPath.Get(source.GetPreferredLocale())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Project: %d", fps.selector))
	}
	return
}

func (fps *Project_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Project))
}

// GetSingle returns value of selected field from source Project
func (fps *Project_FieldSubPath) GetSingle(source *Project) (interface{}, bool) {
	switch fps.selector {
	case Project_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Project_FieldPathSelectorMultiRegionPolicy:
		if source.GetMultiRegionPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMultiRegionPolicy())
	case Project_FieldPathSelectorPreferredLocale:
		if source.GetPreferredLocale() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPreferredLocale())
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fps.selector))
	}
}

func (fps *Project_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Project))
}

// GetDefault returns a default value of the field type
func (fps *Project_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Project_FieldSubPath) ClearValue(item *Project) {
	if item != nil {
		switch fps.selector {
		case Project_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Project_FieldPathSelectorMultiRegionPolicy:
			fps.subPath.ClearValueRaw(item.MultiRegionPolicy)
		case Project_FieldPathSelectorPreferredLocale:
			fps.subPath.ClearValueRaw(item.PreferredLocale)
		default:
			panic(fmt.Sprintf("Invalid selector for Project: %d", fps.selector))
		}
	}
}

func (fps *Project_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Project))
}

// IsLeaf - whether field path is holds simple value
func (fps *Project_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Project_FieldSubPath) WithIValue(value interface{}) Project_FieldPathValue {
	return &Project_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Project_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Project_FieldSubPath) WithIArrayOfValues(values interface{}) Project_FieldPathArrayOfValues {
	return &Project_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Project_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Project_FieldSubPath) WithIArrayItemValue(value interface{}) Project_FieldPathArrayItemValue {
	return &Project_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Project_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Project_FieldPathValue allows storing values for Project fields according to their type
type Project_FieldPathValue interface {
	Project_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Project)
	CompareWith(*Project) (cmp int, comparable bool)
}

func ParseProject_FieldPathValue(pathStr, valueStr string) (Project_FieldPathValue, error) {
	fp, err := ParseProject_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Project field path value from %s: %v", valueStr, err)
	}
	return fpv.(Project_FieldPathValue), nil
}

func MustParseProject_FieldPathValue(pathStr, valueStr string) Project_FieldPathValue {
	fpv, err := ParseProject_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Project_FieldTerminalPathValue struct {
	Project_FieldTerminalPath
	value interface{}
}

var _ Project_FieldPathValue = (*Project_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Project' as interface{}
func (fpv *Project_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Project_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsMultiRegionPolicyValue() (*policy.Policy, bool) {
	res, ok := fpv.value.(*policy.Policy)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsProbeStatusExposureModeValue() (Project_ProbeStatusExposureMode, bool) {
	res, ok := fpv.value.(Project_ProbeStatusExposureMode)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsSlackWebhookUrlValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsTeamsWebhookUrlValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsInternetSummaryTargetGroupValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsPreferredLocaleValue() (*Project_Locale, bool) {
	res, ok := fpv.value.(*Project_Locale)
	return res, ok
}
func (fpv *Project_FieldTerminalPathValue) AsExternalIpCheckUrlValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Project
func (fpv *Project_FieldTerminalPathValue) SetTo(target **Project) {
	if *target == nil {
		*target = new(Project)
	}
	switch fpv.selector {
	case Project_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Project_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case Project_FieldPathSelectorMultiRegionPolicy:
		(*target).MultiRegionPolicy = fpv.value.(*policy.Policy)
	case Project_FieldPathSelectorProbeStatusExposureMode:
		(*target).ProbeStatusExposureMode = fpv.value.(Project_ProbeStatusExposureMode)
	case Project_FieldPathSelectorSlackWebhookUrl:
		(*target).SlackWebhookUrl = fpv.value.(string)
	case Project_FieldPathSelectorTeamsWebhookUrl:
		(*target).TeamsWebhookUrl = fpv.value.(string)
	case Project_FieldPathSelectorInternetSummaryTargetGroup:
		(*target).InternetSummaryTargetGroup = fpv.value.(string)
	case Project_FieldPathSelectorPreferredLocale:
		(*target).PreferredLocale = fpv.value.(*Project_Locale)
	case Project_FieldPathSelectorExternalIpCheckUrl:
		(*target).ExternalIpCheckUrl = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpv.selector))
	}
}

func (fpv *Project_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Project)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Project_FieldTerminalPathValue' with the value under path in 'Project'.
func (fpv *Project_FieldTerminalPathValue) CompareWith(source *Project) (int, bool) {
	switch fpv.selector {
	case Project_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorMetadata:
		return 0, false
	case Project_FieldPathSelectorMultiRegionPolicy:
		return 0, false
	case Project_FieldPathSelectorProbeStatusExposureMode:
		leftValue := fpv.value.(Project_ProbeStatusExposureMode)
		rightValue := source.GetProbeStatusExposureMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorSlackWebhookUrl:
		leftValue := fpv.value.(string)
		rightValue := source.GetSlackWebhookUrl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorTeamsWebhookUrl:
		leftValue := fpv.value.(string)
		rightValue := source.GetTeamsWebhookUrl()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorInternetSummaryTargetGroup:
		leftValue := fpv.value.(string)
		rightValue := source.GetInternetSummaryTargetGroup()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Project_FieldPathSelectorPreferredLocale:
		return 0, false
	case Project_FieldPathSelectorExternalIpCheckUrl:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpv.selector))
	}
}

func (fpv *Project_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Project))
}

type Project_FieldSubPathValue struct {
	Project_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Project_FieldPathValue = (*Project_FieldSubPathValue)(nil)

func (fpvs *Project_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Project_FieldSubPathValue) AsMultiRegionPolicyPathValue() (policy.Policy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(policy.Policy_FieldPathValue)
	return res, ok
}
func (fpvs *Project_FieldSubPathValue) AsPreferredLocalePathValue() (ProjectLocale_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProjectLocale_FieldPathValue)
	return res, ok
}

func (fpvs *Project_FieldSubPathValue) SetTo(target **Project) {
	if *target == nil {
		*target = new(Project)
	}
	switch fpvs.Selector() {
	case Project_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Project_FieldPathSelectorMultiRegionPolicy:
		fpvs.subPathValue.(policy.Policy_FieldPathValue).SetTo(&(*target).MultiRegionPolicy)
	case Project_FieldPathSelectorPreferredLocale:
		fpvs.subPathValue.(ProjectLocale_FieldPathValue).SetTo(&(*target).PreferredLocale)
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpvs.Selector()))
	}
}

func (fpvs *Project_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Project)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Project_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Project_FieldSubPathValue) CompareWith(source *Project) (int, bool) {
	switch fpvs.Selector() {
	case Project_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Project_FieldPathSelectorMultiRegionPolicy:
		return fpvs.subPathValue.(policy.Policy_FieldPathValue).CompareWith(source.GetMultiRegionPolicy())
	case Project_FieldPathSelectorPreferredLocale:
		return fpvs.subPathValue.(ProjectLocale_FieldPathValue).CompareWith(source.GetPreferredLocale())
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpvs.Selector()))
	}
}

func (fpvs *Project_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Project))
}

// Project_FieldPathArrayItemValue allows storing single item in Path-specific values for Project according to their type
// Present only for array (repeated) types.
type Project_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Project_FieldPath
	ContainsValue(*Project) bool
}

// ParseProject_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProject_FieldPathArrayItemValue(pathStr, valueStr string) (Project_FieldPathArrayItemValue, error) {
	fp, err := ParseProject_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Project field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Project_FieldPathArrayItemValue), nil
}

func MustParseProject_FieldPathArrayItemValue(pathStr, valueStr string) Project_FieldPathArrayItemValue {
	fpaiv, err := ParseProject_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Project_FieldTerminalPathArrayItemValue struct {
	Project_FieldTerminalPath
	value interface{}
}

var _ Project_FieldPathArrayItemValue = (*Project_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Project as interface{}
func (fpaiv *Project_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Project_FieldTerminalPathArrayItemValue) AsExternalIpCheckUrlItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *Project_FieldTerminalPathArrayItemValue) GetSingle(source *Project) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Project_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Project))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Project'
func (fpaiv *Project_FieldTerminalPathArrayItemValue) ContainsValue(source *Project) bool {
	slice := fpaiv.Project_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Project_FieldSubPathArrayItemValue struct {
	Project_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Project_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Project_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Project_FieldSubPathArrayItemValue) AsMultiRegionPolicyPathItemValue() (policy.Policy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(policy.Policy_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Project_FieldSubPathArrayItemValue) AsPreferredLocalePathItemValue() (ProjectLocale_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProjectLocale_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Project'
func (fpaivs *Project_FieldSubPathArrayItemValue) ContainsValue(source *Project) bool {
	switch fpaivs.Selector() {
	case Project_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Project_FieldPathSelectorMultiRegionPolicy:
		return fpaivs.subPathItemValue.(policy.Policy_FieldPathArrayItemValue).ContainsValue(source.GetMultiRegionPolicy())
	case Project_FieldPathSelectorPreferredLocale:
		return fpaivs.subPathItemValue.(ProjectLocale_FieldPathArrayItemValue).ContainsValue(source.GetPreferredLocale())
	default:
		panic(fmt.Sprintf("Invalid selector for Project: %d", fpaivs.Selector()))
	}
}

// Project_FieldPathArrayOfValues allows storing slice of values for Project fields according to their type
type Project_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Project_FieldPath
}

func ParseProject_FieldPathArrayOfValues(pathStr, valuesStr string) (Project_FieldPathArrayOfValues, error) {
	fp, err := ParseProject_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Project field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Project_FieldPathArrayOfValues), nil
}

func MustParseProject_FieldPathArrayOfValues(pathStr, valuesStr string) Project_FieldPathArrayOfValues {
	fpaov, err := ParseProject_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Project_FieldTerminalPathArrayOfValues struct {
	Project_FieldTerminalPath
	values interface{}
}

var _ Project_FieldPathArrayOfValues = (*Project_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Project_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Project_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorMultiRegionPolicy:
		for _, v := range fpaov.values.([]*policy.Policy) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorProbeStatusExposureMode:
		for _, v := range fpaov.values.([]Project_ProbeStatusExposureMode) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorSlackWebhookUrl:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorTeamsWebhookUrl:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorInternetSummaryTargetGroup:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorPreferredLocale:
		for _, v := range fpaov.values.([]*Project_Locale) {
			values = append(values, v)
		}
	case Project_FieldPathSelectorExternalIpCheckUrl:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsMultiRegionPolicyArrayOfValues() ([]*policy.Policy, bool) {
	res, ok := fpaov.values.([]*policy.Policy)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsProbeStatusExposureModeArrayOfValues() ([]Project_ProbeStatusExposureMode, bool) {
	res, ok := fpaov.values.([]Project_ProbeStatusExposureMode)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsSlackWebhookUrlArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsTeamsWebhookUrlArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsInternetSummaryTargetGroupArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsPreferredLocaleArrayOfValues() ([]*Project_Locale, bool) {
	res, ok := fpaov.values.([]*Project_Locale)
	return res, ok
}
func (fpaov *Project_FieldTerminalPathArrayOfValues) AsExternalIpCheckUrlArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

type Project_FieldSubPathArrayOfValues struct {
	Project_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Project_FieldPathArrayOfValues = (*Project_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Project_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Project_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Project_FieldSubPathArrayOfValues) AsMultiRegionPolicyPathArrayOfValues() (policy.Policy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(policy.Policy_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Project_FieldSubPathArrayOfValues) AsPreferredLocalePathArrayOfValues() (ProjectLocale_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProjectLocale_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProjectLocale_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProjectLocale_FieldPathSelector
	Get(source *Project_Locale) []interface{}
	GetSingle(source *Project_Locale) (interface{}, bool)
	ClearValue(item *Project_Locale)

	// Those methods build corresponding ProjectLocale_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProjectLocale_FieldPathValue
	WithIArrayOfValues(values interface{}) ProjectLocale_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProjectLocale_FieldPathArrayItemValue
}

type ProjectLocale_FieldPathSelector int32

const (
	ProjectLocale_FieldPathSelectorLangugageCode ProjectLocale_FieldPathSelector = 0
)

func (s ProjectLocale_FieldPathSelector) String() string {
	switch s {
	case ProjectLocale_FieldPathSelectorLangugageCode:
		return "langugage_code"
	default:
		panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", s))
	}
}

func BuildProjectLocale_FieldPath(fp gotenobject.RawFieldPath) (ProjectLocale_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Project_Locale")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "langugage_code", "langugageCode", "langugage-code":
			return &ProjectLocale_FieldTerminalPath{selector: ProjectLocale_FieldPathSelectorLangugageCode}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Project_Locale", fp)
}

func ParseProjectLocale_FieldPath(rawField string) (ProjectLocale_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProjectLocale_FieldPath(fp)
}

func MustParseProjectLocale_FieldPath(rawField string) ProjectLocale_FieldPath {
	fp, err := ParseProjectLocale_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProjectLocale_FieldTerminalPath struct {
	selector ProjectLocale_FieldPathSelector
}

var _ ProjectLocale_FieldPath = (*ProjectLocale_FieldTerminalPath)(nil)

func (fp *ProjectLocale_FieldTerminalPath) Selector() ProjectLocale_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProjectLocale_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProjectLocale_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Project_Locale
func (fp *ProjectLocale_FieldTerminalPath) Get(source *Project_Locale) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProjectLocale_FieldPathSelectorLangugageCode:
			values = append(values, source.LangugageCode)
		default:
			panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fp.selector))
		}
	}
	return
}

func (fp *ProjectLocale_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Project_Locale))
}

// GetSingle returns value pointed by specific field of from source Project_Locale
func (fp *ProjectLocale_FieldTerminalPath) GetSingle(source *Project_Locale) (interface{}, bool) {
	switch fp.selector {
	case ProjectLocale_FieldPathSelectorLangugageCode:
		return source.GetLangugageCode(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fp.selector))
	}
}

func (fp *ProjectLocale_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Project_Locale))
}

// GetDefault returns a default value of the field type
func (fp *ProjectLocale_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProjectLocale_FieldPathSelectorLangugageCode:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fp.selector))
	}
}

func (fp *ProjectLocale_FieldTerminalPath) ClearValue(item *Project_Locale) {
	if item != nil {
		switch fp.selector {
		case ProjectLocale_FieldPathSelectorLangugageCode:
			item.LangugageCode = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fp.selector))
		}
	}
}

func (fp *ProjectLocale_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Project_Locale))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProjectLocale_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProjectLocale_FieldPathSelectorLangugageCode
}

func (fp *ProjectLocale_FieldTerminalPath) WithIValue(value interface{}) ProjectLocale_FieldPathValue {
	switch fp.selector {
	case ProjectLocale_FieldPathSelectorLangugageCode:
		return &ProjectLocale_FieldTerminalPathValue{ProjectLocale_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fp.selector))
	}
}

func (fp *ProjectLocale_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProjectLocale_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProjectLocale_FieldPathArrayOfValues {
	fpaov := &ProjectLocale_FieldTerminalPathArrayOfValues{ProjectLocale_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProjectLocale_FieldPathSelectorLangugageCode:
		return &ProjectLocale_FieldTerminalPathArrayOfValues{ProjectLocale_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProjectLocale_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProjectLocale_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProjectLocale_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fp.selector))
	}
}

func (fp *ProjectLocale_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProjectLocale_FieldPathValue allows storing values for Locale fields according to their type
type ProjectLocale_FieldPathValue interface {
	ProjectLocale_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Project_Locale)
	CompareWith(*Project_Locale) (cmp int, comparable bool)
}

func ParseProjectLocale_FieldPathValue(pathStr, valueStr string) (ProjectLocale_FieldPathValue, error) {
	fp, err := ParseProjectLocale_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Locale field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProjectLocale_FieldPathValue), nil
}

func MustParseProjectLocale_FieldPathValue(pathStr, valueStr string) ProjectLocale_FieldPathValue {
	fpv, err := ParseProjectLocale_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProjectLocale_FieldTerminalPathValue struct {
	ProjectLocale_FieldTerminalPath
	value interface{}
}

var _ ProjectLocale_FieldPathValue = (*ProjectLocale_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Locale' as interface{}
func (fpv *ProjectLocale_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProjectLocale_FieldTerminalPathValue) AsLangugageCodeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Locale
func (fpv *ProjectLocale_FieldTerminalPathValue) SetTo(target **Project_Locale) {
	if *target == nil {
		*target = new(Project_Locale)
	}
	switch fpv.selector {
	case ProjectLocale_FieldPathSelectorLangugageCode:
		(*target).LangugageCode = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fpv.selector))
	}
}

func (fpv *ProjectLocale_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Project_Locale)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProjectLocale_FieldTerminalPathValue' with the value under path in 'Project_Locale'.
func (fpv *ProjectLocale_FieldTerminalPathValue) CompareWith(source *Project_Locale) (int, bool) {
	switch fpv.selector {
	case ProjectLocale_FieldPathSelectorLangugageCode:
		leftValue := fpv.value.(string)
		rightValue := source.GetLangugageCode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Project_Locale: %d", fpv.selector))
	}
}

func (fpv *ProjectLocale_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Project_Locale))
}

// ProjectLocale_FieldPathArrayItemValue allows storing single item in Path-specific values for Locale according to their type
// Present only for array (repeated) types.
type ProjectLocale_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProjectLocale_FieldPath
	ContainsValue(*Project_Locale) bool
}

// ParseProjectLocale_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProjectLocale_FieldPathArrayItemValue(pathStr, valueStr string) (ProjectLocale_FieldPathArrayItemValue, error) {
	fp, err := ParseProjectLocale_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Locale field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProjectLocale_FieldPathArrayItemValue), nil
}

func MustParseProjectLocale_FieldPathArrayItemValue(pathStr, valueStr string) ProjectLocale_FieldPathArrayItemValue {
	fpaiv, err := ParseProjectLocale_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProjectLocale_FieldTerminalPathArrayItemValue struct {
	ProjectLocale_FieldTerminalPath
	value interface{}
}

var _ ProjectLocale_FieldPathArrayItemValue = (*ProjectLocale_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Project_Locale as interface{}
func (fpaiv *ProjectLocale_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProjectLocale_FieldTerminalPathArrayItemValue) GetSingle(source *Project_Locale) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProjectLocale_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Project_Locale))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Locale'
func (fpaiv *ProjectLocale_FieldTerminalPathArrayItemValue) ContainsValue(source *Project_Locale) bool {
	slice := fpaiv.ProjectLocale_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProjectLocale_FieldPathArrayOfValues allows storing slice of values for Locale fields according to their type
type ProjectLocale_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProjectLocale_FieldPath
}

func ParseProjectLocale_FieldPathArrayOfValues(pathStr, valuesStr string) (ProjectLocale_FieldPathArrayOfValues, error) {
	fp, err := ParseProjectLocale_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Locale field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProjectLocale_FieldPathArrayOfValues), nil
}

func MustParseProjectLocale_FieldPathArrayOfValues(pathStr, valuesStr string) ProjectLocale_FieldPathArrayOfValues {
	fpaov, err := ParseProjectLocale_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProjectLocale_FieldTerminalPathArrayOfValues struct {
	ProjectLocale_FieldTerminalPath
	values interface{}
}

var _ ProjectLocale_FieldPathArrayOfValues = (*ProjectLocale_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProjectLocale_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProjectLocale_FieldPathSelectorLangugageCode:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProjectLocale_FieldTerminalPathArrayOfValues) AsLangugageCodeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
