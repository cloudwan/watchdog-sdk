// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha2/probing_target.proto
// DO NOT EDIT!!!

package probing_target

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProbingTarget_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProbingTarget_FieldPathSelector
	Get(source *ProbingTarget) []interface{}
	GetSingle(source *ProbingTarget) (interface{}, bool)
	ClearValue(item *ProbingTarget)

	// Those methods build corresponding ProbingTarget_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProbingTarget_FieldPathValue
	WithIArrayOfValues(values interface{}) ProbingTarget_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProbingTarget_FieldPathArrayItemValue
}

type ProbingTarget_FieldPathSelector int32

const (
	ProbingTarget_FieldPathSelectorName              ProbingTarget_FieldPathSelector = 0
	ProbingTarget_FieldPathSelectorDisplayName       ProbingTarget_FieldPathSelector = 1
	ProbingTarget_FieldPathSelectorMetadata          ProbingTarget_FieldPathSelector = 2
	ProbingTarget_FieldPathSelectorGroup             ProbingTarget_FieldPathSelector = 3
	ProbingTarget_FieldPathSelectorMode              ProbingTarget_FieldPathSelector = 4
	ProbingTarget_FieldPathSelectorIpVersion         ProbingTarget_FieldPathSelector = 5
	ProbingTarget_FieldPathSelectorAddress           ProbingTarget_FieldPathSelector = 6
	ProbingTarget_FieldPathSelectorCategory          ProbingTarget_FieldPathSelector = 7
	ProbingTarget_FieldPathSelectorLocationType      ProbingTarget_FieldPathSelector = 8
	ProbingTarget_FieldPathSelectorLocation          ProbingTarget_FieldPathSelector = 9
	ProbingTarget_FieldPathSelectorHttpProbingConfig ProbingTarget_FieldPathSelector = 10
	ProbingTarget_FieldPathSelectorAgent             ProbingTarget_FieldPathSelector = 11
	ProbingTarget_FieldPathSelectorAddresses         ProbingTarget_FieldPathSelector = 12
	ProbingTarget_FieldPathSelectorTargetType        ProbingTarget_FieldPathSelector = 13
	ProbingTarget_FieldPathSelectorUdpPort           ProbingTarget_FieldPathSelector = 14
	ProbingTarget_FieldPathSelectorSpeedtestTcpPort  ProbingTarget_FieldPathSelector = 15
)

func (s ProbingTarget_FieldPathSelector) String() string {
	switch s {
	case ProbingTarget_FieldPathSelectorName:
		return "name"
	case ProbingTarget_FieldPathSelectorDisplayName:
		return "display_name"
	case ProbingTarget_FieldPathSelectorMetadata:
		return "metadata"
	case ProbingTarget_FieldPathSelectorGroup:
		return "group"
	case ProbingTarget_FieldPathSelectorMode:
		return "mode"
	case ProbingTarget_FieldPathSelectorIpVersion:
		return "ip_version"
	case ProbingTarget_FieldPathSelectorAddress:
		return "address"
	case ProbingTarget_FieldPathSelectorCategory:
		return "category"
	case ProbingTarget_FieldPathSelectorLocationType:
		return "location_type"
	case ProbingTarget_FieldPathSelectorLocation:
		return "location"
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		return "http_probing_config"
	case ProbingTarget_FieldPathSelectorAgent:
		return "agent"
	case ProbingTarget_FieldPathSelectorAddresses:
		return "addresses"
	case ProbingTarget_FieldPathSelectorTargetType:
		return "target_type"
	case ProbingTarget_FieldPathSelectorUdpPort:
		return "udp_port"
	case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
		return "speedtest_tcp_port"
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", s))
	}
}

func BuildProbingTarget_FieldPath(fp gotenobject.RawFieldPath) (ProbingTarget_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ProbingTarget")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorDisplayName}, nil
		case "metadata":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorMetadata}, nil
		case "group":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorGroup}, nil
		case "mode":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorMode}, nil
		case "ip_version", "ipVersion", "ip-version":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorIpVersion}, nil
		case "address":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorAddress}, nil
		case "category":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorCategory}, nil
		case "location_type", "locationType", "location-type":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorLocationType}, nil
		case "location":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorLocation}, nil
		case "http_probing_config", "httpProbingConfig", "http-probing-config":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorHttpProbingConfig}, nil
		case "agent":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorAgent}, nil
		case "addresses":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorAddresses}, nil
		case "target_type", "targetType", "target-type":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorTargetType}, nil
		case "udp_port", "udpPort", "udp-port":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorUdpPort}, nil
		case "speedtest_tcp_port", "speedtestTcpPort", "speedtest-tcp-port":
			return &ProbingTarget_FieldTerminalPath{selector: ProbingTarget_FieldPathSelectorSpeedtestTcpPort}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingTarget_FieldSubPath{selector: ProbingTarget_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "location":
			if subpath, err := common.BuildLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingTarget_FieldSubPath{selector: ProbingTarget_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "http_probing_config", "httpProbingConfig", "http-probing-config":
			if subpath, err := common.BuildHTTPProbingConfig_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProbingTarget_FieldSubPath{selector: ProbingTarget_FieldPathSelectorHttpProbingConfig, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ProbingTarget", fp)
}

func ParseProbingTarget_FieldPath(rawField string) (ProbingTarget_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProbingTarget_FieldPath(fp)
}

func MustParseProbingTarget_FieldPath(rawField string) ProbingTarget_FieldPath {
	fp, err := ParseProbingTarget_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProbingTarget_FieldTerminalPath struct {
	selector ProbingTarget_FieldPathSelector
}

var _ ProbingTarget_FieldPath = (*ProbingTarget_FieldTerminalPath)(nil)

func (fp *ProbingTarget_FieldTerminalPath) Selector() ProbingTarget_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProbingTarget_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProbingTarget_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ProbingTarget
func (fp *ProbingTarget_FieldTerminalPath) Get(source *ProbingTarget) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProbingTarget_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case ProbingTarget_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case ProbingTarget_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case ProbingTarget_FieldPathSelectorGroup:
			if source.Group != nil {
				values = append(values, source.Group)
			}
		case ProbingTarget_FieldPathSelectorMode:
			values = append(values, source.Mode)
		case ProbingTarget_FieldPathSelectorIpVersion:
			values = append(values, source.IpVersion)
		case ProbingTarget_FieldPathSelectorAddress:
			values = append(values, source.Address)
		case ProbingTarget_FieldPathSelectorCategory:
			values = append(values, source.Category)
		case ProbingTarget_FieldPathSelectorLocationType:
			values = append(values, source.LocationType)
		case ProbingTarget_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case ProbingTarget_FieldPathSelectorHttpProbingConfig:
			if source.HttpProbingConfig != nil {
				values = append(values, source.HttpProbingConfig)
			}
		case ProbingTarget_FieldPathSelectorAgent:
			if source.Agent != nil {
				values = append(values, source.Agent)
			}
		case ProbingTarget_FieldPathSelectorAddresses:
			for _, value := range source.GetAddresses() {
				values = append(values, value)
			}
		case ProbingTarget_FieldPathSelectorTargetType:
			values = append(values, source.TargetType)
		case ProbingTarget_FieldPathSelectorUdpPort:
			values = append(values, source.UdpPort)
		case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
			values = append(values, source.SpeedtestTcpPort)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fp.selector))
		}
	}
	return
}

func (fp *ProbingTarget_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ProbingTarget))
}

// GetSingle returns value pointed by specific field of from source ProbingTarget
func (fp *ProbingTarget_FieldTerminalPath) GetSingle(source *ProbingTarget) (interface{}, bool) {
	switch fp.selector {
	case ProbingTarget_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case ProbingTarget_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case ProbingTarget_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case ProbingTarget_FieldPathSelectorGroup:
		res := source.GetGroup()
		return res, res != nil
	case ProbingTarget_FieldPathSelectorMode:
		return source.GetMode(), source != nil
	case ProbingTarget_FieldPathSelectorIpVersion:
		return source.GetIpVersion(), source != nil
	case ProbingTarget_FieldPathSelectorAddress:
		return source.GetAddress(), source != nil
	case ProbingTarget_FieldPathSelectorCategory:
		return source.GetCategory(), source != nil
	case ProbingTarget_FieldPathSelectorLocationType:
		return source.GetLocationType(), source != nil
	case ProbingTarget_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		res := source.GetHttpProbingConfig()
		return res, res != nil
	case ProbingTarget_FieldPathSelectorAgent:
		res := source.GetAgent()
		return res, res != nil
	case ProbingTarget_FieldPathSelectorAddresses:
		res := source.GetAddresses()
		return res, res != nil
	case ProbingTarget_FieldPathSelectorTargetType:
		return source.GetTargetType(), source != nil
	case ProbingTarget_FieldPathSelectorUdpPort:
		return source.GetUdpPort(), source != nil
	case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
		return source.GetSpeedtestTcpPort(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fp.selector))
	}
}

func (fp *ProbingTarget_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ProbingTarget))
}

// GetDefault returns a default value of the field type
func (fp *ProbingTarget_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProbingTarget_FieldPathSelectorName:
		return (*Name)(nil)
	case ProbingTarget_FieldPathSelectorDisplayName:
		return ""
	case ProbingTarget_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case ProbingTarget_FieldPathSelectorGroup:
		return (*probing_target_group.Reference)(nil)
	case ProbingTarget_FieldPathSelectorMode:
		return common.ProbingMode_PROBING_MODE_UNSPECIFIED
	case ProbingTarget_FieldPathSelectorIpVersion:
		return common.IpVersion_IP_VERSION_UNSPECIFIED
	case ProbingTarget_FieldPathSelectorAddress:
		return ""
	case ProbingTarget_FieldPathSelectorCategory:
		return ""
	case ProbingTarget_FieldPathSelectorLocationType:
		return common.LocationType_LOCATION_TYPE_UNSPECIFIED
	case ProbingTarget_FieldPathSelectorLocation:
		return (*common.Location)(nil)
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		return (*common.HTTPProbingConfig)(nil)
	case ProbingTarget_FieldPathSelectorAgent:
		return (*probe.Reference)(nil)
	case ProbingTarget_FieldPathSelectorAddresses:
		return ([]string)(nil)
	case ProbingTarget_FieldPathSelectorTargetType:
		return ProbingTarget_UNMANAGED_TARGET
	case ProbingTarget_FieldPathSelectorUdpPort:
		return int32(0)
	case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fp.selector))
	}
}

func (fp *ProbingTarget_FieldTerminalPath) ClearValue(item *ProbingTarget) {
	if item != nil {
		switch fp.selector {
		case ProbingTarget_FieldPathSelectorName:
			item.Name = nil
		case ProbingTarget_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case ProbingTarget_FieldPathSelectorMetadata:
			item.Metadata = nil
		case ProbingTarget_FieldPathSelectorGroup:
			item.Group = nil
		case ProbingTarget_FieldPathSelectorMode:
			item.Mode = common.ProbingMode_PROBING_MODE_UNSPECIFIED
		case ProbingTarget_FieldPathSelectorIpVersion:
			item.IpVersion = common.IpVersion_IP_VERSION_UNSPECIFIED
		case ProbingTarget_FieldPathSelectorAddress:
			item.Address = ""
		case ProbingTarget_FieldPathSelectorCategory:
			item.Category = ""
		case ProbingTarget_FieldPathSelectorLocationType:
			item.LocationType = common.LocationType_LOCATION_TYPE_UNSPECIFIED
		case ProbingTarget_FieldPathSelectorLocation:
			item.Location = nil
		case ProbingTarget_FieldPathSelectorHttpProbingConfig:
			item.HttpProbingConfig = nil
		case ProbingTarget_FieldPathSelectorAgent:
			item.Agent = nil
		case ProbingTarget_FieldPathSelectorAddresses:
			item.Addresses = nil
		case ProbingTarget_FieldPathSelectorTargetType:
			item.TargetType = ProbingTarget_UNMANAGED_TARGET
		case ProbingTarget_FieldPathSelectorUdpPort:
			item.UdpPort = int32(0)
		case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
			item.SpeedtestTcpPort = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fp.selector))
		}
	}
}

func (fp *ProbingTarget_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ProbingTarget))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProbingTarget_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProbingTarget_FieldPathSelectorName ||
		fp.selector == ProbingTarget_FieldPathSelectorDisplayName ||
		fp.selector == ProbingTarget_FieldPathSelectorGroup ||
		fp.selector == ProbingTarget_FieldPathSelectorMode ||
		fp.selector == ProbingTarget_FieldPathSelectorIpVersion ||
		fp.selector == ProbingTarget_FieldPathSelectorAddress ||
		fp.selector == ProbingTarget_FieldPathSelectorCategory ||
		fp.selector == ProbingTarget_FieldPathSelectorLocationType ||
		fp.selector == ProbingTarget_FieldPathSelectorAgent ||
		fp.selector == ProbingTarget_FieldPathSelectorAddresses ||
		fp.selector == ProbingTarget_FieldPathSelectorTargetType ||
		fp.selector == ProbingTarget_FieldPathSelectorUdpPort ||
		fp.selector == ProbingTarget_FieldPathSelectorSpeedtestTcpPort
}

func (fp *ProbingTarget_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ProbingTarget_FieldTerminalPath) WithIValue(value interface{}) ProbingTarget_FieldPathValue {
	switch fp.selector {
	case ProbingTarget_FieldPathSelectorName:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(*Name)}
	case ProbingTarget_FieldPathSelectorDisplayName:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingTarget_FieldPathSelectorMetadata:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case ProbingTarget_FieldPathSelectorGroup:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(*probing_target_group.Reference)}
	case ProbingTarget_FieldPathSelectorMode:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(common.ProbingMode)}
	case ProbingTarget_FieldPathSelectorIpVersion:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(common.IpVersion)}
	case ProbingTarget_FieldPathSelectorAddress:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingTarget_FieldPathSelectorCategory:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(string)}
	case ProbingTarget_FieldPathSelectorLocationType:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(common.LocationType)}
	case ProbingTarget_FieldPathSelectorLocation:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(*common.Location)}
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(*common.HTTPProbingConfig)}
	case ProbingTarget_FieldPathSelectorAgent:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(*probe.Reference)}
	case ProbingTarget_FieldPathSelectorAddresses:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.([]string)}
	case ProbingTarget_FieldPathSelectorTargetType:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(ProbingTarget_TargetType)}
	case ProbingTarget_FieldPathSelectorUdpPort:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(int32)}
	case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
		return &ProbingTarget_FieldTerminalPathValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fp.selector))
	}
}

func (fp *ProbingTarget_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProbingTarget_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProbingTarget_FieldPathArrayOfValues {
	fpaov := &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProbingTarget_FieldPathSelectorName:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]*Name)}
	case ProbingTarget_FieldPathSelectorDisplayName:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingTarget_FieldPathSelectorMetadata:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case ProbingTarget_FieldPathSelectorGroup:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]*probing_target_group.Reference)}
	case ProbingTarget_FieldPathSelectorMode:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]common.ProbingMode)}
	case ProbingTarget_FieldPathSelectorIpVersion:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]common.IpVersion)}
	case ProbingTarget_FieldPathSelectorAddress:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingTarget_FieldPathSelectorCategory:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]string)}
	case ProbingTarget_FieldPathSelectorLocationType:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]common.LocationType)}
	case ProbingTarget_FieldPathSelectorLocation:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]*common.Location)}
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]*common.HTTPProbingConfig)}
	case ProbingTarget_FieldPathSelectorAgent:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]*probe.Reference)}
	case ProbingTarget_FieldPathSelectorAddresses:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([][]string)}
	case ProbingTarget_FieldPathSelectorTargetType:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]ProbingTarget_TargetType)}
	case ProbingTarget_FieldPathSelectorUdpPort:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]int32)}
	case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
		return &ProbingTarget_FieldTerminalPathArrayOfValues{ProbingTarget_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProbingTarget_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProbingTarget_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProbingTarget_FieldPathArrayItemValue {
	switch fp.selector {
	case ProbingTarget_FieldPathSelectorAddresses:
		return &ProbingTarget_FieldTerminalPathArrayItemValue{ProbingTarget_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fp.selector))
	}
}

func (fp *ProbingTarget_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProbingTarget_FieldSubPath struct {
	selector ProbingTarget_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProbingTarget_FieldPath = (*ProbingTarget_FieldSubPath)(nil)

func (fps *ProbingTarget_FieldSubPath) Selector() ProbingTarget_FieldPathSelector {
	return fps.selector
}
func (fps *ProbingTarget_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *ProbingTarget_FieldSubPath) AsLocationSubPath() (common.Location_FieldPath, bool) {
	res, ok := fps.subPath.(common.Location_FieldPath)
	return res, ok
}
func (fps *ProbingTarget_FieldSubPath) AsHttpProbingConfigSubPath() (common.HTTPProbingConfig_FieldPath, bool) {
	res, ok := fps.subPath.(common.HTTPProbingConfig_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProbingTarget_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProbingTarget_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ProbingTarget
func (fps *ProbingTarget_FieldSubPath) Get(source *ProbingTarget) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asLocationFieldPath, ok := fps.AsLocationSubPath(); ok {
		values = append(values, asLocationFieldPath.Get(source.GetLocation())...)
	} else if asHTTPProbingConfigFieldPath, ok := fps.AsHttpProbingConfigSubPath(); ok {
		values = append(values, asHTTPProbingConfigFieldPath.Get(source.GetHttpProbingConfig())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fps.selector))
	}
	return
}

func (fps *ProbingTarget_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ProbingTarget))
}

// GetSingle returns value of selected field from source ProbingTarget
func (fps *ProbingTarget_FieldSubPath) GetSingle(source *ProbingTarget) (interface{}, bool) {
	switch fps.selector {
	case ProbingTarget_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case ProbingTarget_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		if source.GetHttpProbingConfig() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHttpProbingConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fps.selector))
	}
}

func (fps *ProbingTarget_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ProbingTarget))
}

// GetDefault returns a default value of the field type
func (fps *ProbingTarget_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProbingTarget_FieldSubPath) ClearValue(item *ProbingTarget) {
	if item != nil {
		switch fps.selector {
		case ProbingTarget_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case ProbingTarget_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case ProbingTarget_FieldPathSelectorHttpProbingConfig:
			fps.subPath.ClearValueRaw(item.HttpProbingConfig)
		default:
			panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fps.selector))
		}
	}
}

func (fps *ProbingTarget_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ProbingTarget))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProbingTarget_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProbingTarget_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&ProbingTarget_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *ProbingTarget_FieldSubPath) WithIValue(value interface{}) ProbingTarget_FieldPathValue {
	return &ProbingTarget_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProbingTarget_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProbingTarget_FieldSubPath) WithIArrayOfValues(values interface{}) ProbingTarget_FieldPathArrayOfValues {
	return &ProbingTarget_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProbingTarget_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProbingTarget_FieldSubPath) WithIArrayItemValue(value interface{}) ProbingTarget_FieldPathArrayItemValue {
	return &ProbingTarget_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProbingTarget_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProbingTarget_FieldPathValue allows storing values for ProbingTarget fields according to their type
type ProbingTarget_FieldPathValue interface {
	ProbingTarget_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ProbingTarget)
	CompareWith(*ProbingTarget) (cmp int, comparable bool)
}

func ParseProbingTarget_FieldPathValue(pathStr, valueStr string) (ProbingTarget_FieldPathValue, error) {
	fp, err := ParseProbingTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingTarget field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProbingTarget_FieldPathValue), nil
}

func MustParseProbingTarget_FieldPathValue(pathStr, valueStr string) ProbingTarget_FieldPathValue {
	fpv, err := ParseProbingTarget_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProbingTarget_FieldTerminalPathValue struct {
	ProbingTarget_FieldTerminalPath
	value interface{}
}

var _ ProbingTarget_FieldPathValue = (*ProbingTarget_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ProbingTarget' as interface{}
func (fpv *ProbingTarget_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsGroupValue() (*probing_target_group.Reference, bool) {
	res, ok := fpv.value.(*probing_target_group.Reference)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsModeValue() (common.ProbingMode, bool) {
	res, ok := fpv.value.(common.ProbingMode)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsIpVersionValue() (common.IpVersion, bool) {
	res, ok := fpv.value.(common.IpVersion)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsCategoryValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsLocationTypeValue() (common.LocationType, bool) {
	res, ok := fpv.value.(common.LocationType)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsLocationValue() (*common.Location, bool) {
	res, ok := fpv.value.(*common.Location)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsHttpProbingConfigValue() (*common.HTTPProbingConfig, bool) {
	res, ok := fpv.value.(*common.HTTPProbingConfig)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsAgentValue() (*probe.Reference, bool) {
	res, ok := fpv.value.(*probe.Reference)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsTargetTypeValue() (ProbingTarget_TargetType, bool) {
	res, ok := fpv.value.(ProbingTarget_TargetType)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsUdpPortValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ProbingTarget_FieldTerminalPathValue) AsSpeedtestTcpPortValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object ProbingTarget
func (fpv *ProbingTarget_FieldTerminalPathValue) SetTo(target **ProbingTarget) {
	if *target == nil {
		*target = new(ProbingTarget)
	}
	switch fpv.selector {
	case ProbingTarget_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case ProbingTarget_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case ProbingTarget_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case ProbingTarget_FieldPathSelectorGroup:
		(*target).Group = fpv.value.(*probing_target_group.Reference)
	case ProbingTarget_FieldPathSelectorMode:
		(*target).Mode = fpv.value.(common.ProbingMode)
	case ProbingTarget_FieldPathSelectorIpVersion:
		(*target).IpVersion = fpv.value.(common.IpVersion)
	case ProbingTarget_FieldPathSelectorAddress:
		(*target).Address = fpv.value.(string)
	case ProbingTarget_FieldPathSelectorCategory:
		(*target).Category = fpv.value.(string)
	case ProbingTarget_FieldPathSelectorLocationType:
		(*target).LocationType = fpv.value.(common.LocationType)
	case ProbingTarget_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*common.Location)
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		(*target).HttpProbingConfig = fpv.value.(*common.HTTPProbingConfig)
	case ProbingTarget_FieldPathSelectorAgent:
		(*target).Agent = fpv.value.(*probe.Reference)
	case ProbingTarget_FieldPathSelectorAddresses:
		(*target).Addresses = fpv.value.([]string)
	case ProbingTarget_FieldPathSelectorTargetType:
		(*target).TargetType = fpv.value.(ProbingTarget_TargetType)
	case ProbingTarget_FieldPathSelectorUdpPort:
		(*target).UdpPort = fpv.value.(int32)
	case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
		(*target).SpeedtestTcpPort = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fpv.selector))
	}
}

func (fpv *ProbingTarget_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingTarget)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProbingTarget_FieldTerminalPathValue' with the value under path in 'ProbingTarget'.
func (fpv *ProbingTarget_FieldTerminalPathValue) CompareWith(source *ProbingTarget) (int, bool) {
	switch fpv.selector {
	case ProbingTarget_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorMetadata:
		return 0, false
	case ProbingTarget_FieldPathSelectorGroup:
		leftValue := fpv.value.(*probing_target_group.Reference)
		rightValue := source.GetGroup()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorMode:
		leftValue := fpv.value.(common.ProbingMode)
		rightValue := source.GetMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorIpVersion:
		leftValue := fpv.value.(common.IpVersion)
		rightValue := source.GetIpVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorCategory:
		leftValue := fpv.value.(string)
		rightValue := source.GetCategory()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorLocationType:
		leftValue := fpv.value.(common.LocationType)
		rightValue := source.GetLocationType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorLocation:
		return 0, false
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		return 0, false
	case ProbingTarget_FieldPathSelectorAgent:
		leftValue := fpv.value.(*probe.Reference)
		rightValue := source.GetAgent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorAddresses:
		return 0, false
	case ProbingTarget_FieldPathSelectorTargetType:
		leftValue := fpv.value.(ProbingTarget_TargetType)
		rightValue := source.GetTargetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorUdpPort:
		leftValue := fpv.value.(int32)
		rightValue := source.GetUdpPort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
		leftValue := fpv.value.(int32)
		rightValue := source.GetSpeedtestTcpPort()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fpv.selector))
	}
}

func (fpv *ProbingTarget_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ProbingTarget))
}

type ProbingTarget_FieldSubPathValue struct {
	ProbingTarget_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProbingTarget_FieldPathValue = (*ProbingTarget_FieldSubPathValue)(nil)

func (fpvs *ProbingTarget_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingTarget_FieldSubPathValue) AsLocationPathValue() (common.Location_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.Location_FieldPathValue)
	return res, ok
}
func (fpvs *ProbingTarget_FieldSubPathValue) AsHttpProbingConfigPathValue() (common.HTTPProbingConfig_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue)
	return res, ok
}

func (fpvs *ProbingTarget_FieldSubPathValue) SetTo(target **ProbingTarget) {
	if *target == nil {
		*target = new(ProbingTarget)
	}
	switch fpvs.Selector() {
	case ProbingTarget_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case ProbingTarget_FieldPathSelectorLocation:
		fpvs.subPathValue.(common.Location_FieldPathValue).SetTo(&(*target).Location)
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue).SetTo(&(*target).HttpProbingConfig)
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingTarget_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ProbingTarget)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProbingTarget_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProbingTarget_FieldSubPathValue) CompareWith(source *ProbingTarget) (int, bool) {
	switch fpvs.Selector() {
	case ProbingTarget_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case ProbingTarget_FieldPathSelectorLocation:
		return fpvs.subPathValue.(common.Location_FieldPathValue).CompareWith(source.GetLocation())
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		return fpvs.subPathValue.(common.HTTPProbingConfig_FieldPathValue).CompareWith(source.GetHttpProbingConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fpvs.Selector()))
	}
}

func (fpvs *ProbingTarget_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ProbingTarget))
}

// ProbingTarget_FieldPathArrayItemValue allows storing single item in Path-specific values for ProbingTarget according to their type
// Present only for array (repeated) types.
type ProbingTarget_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProbingTarget_FieldPath
	ContainsValue(*ProbingTarget) bool
}

// ParseProbingTarget_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProbingTarget_FieldPathArrayItemValue(pathStr, valueStr string) (ProbingTarget_FieldPathArrayItemValue, error) {
	fp, err := ParseProbingTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingTarget field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProbingTarget_FieldPathArrayItemValue), nil
}

func MustParseProbingTarget_FieldPathArrayItemValue(pathStr, valueStr string) ProbingTarget_FieldPathArrayItemValue {
	fpaiv, err := ParseProbingTarget_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProbingTarget_FieldTerminalPathArrayItemValue struct {
	ProbingTarget_FieldTerminalPath
	value interface{}
}

var _ ProbingTarget_FieldPathArrayItemValue = (*ProbingTarget_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ProbingTarget as interface{}
func (fpaiv *ProbingTarget_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProbingTarget_FieldTerminalPathArrayItemValue) AsAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProbingTarget_FieldTerminalPathArrayItemValue) GetSingle(source *ProbingTarget) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProbingTarget_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ProbingTarget))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingTarget'
func (fpaiv *ProbingTarget_FieldTerminalPathArrayItemValue) ContainsValue(source *ProbingTarget) bool {
	slice := fpaiv.ProbingTarget_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProbingTarget_FieldSubPathArrayItemValue struct {
	ProbingTarget_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProbingTarget_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProbingTarget_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingTarget_FieldSubPathArrayItemValue) AsLocationPathItemValue() (common.Location_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *ProbingTarget_FieldSubPathArrayItemValue) AsHttpProbingConfigPathItemValue() (common.HTTPProbingConfig_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.HTTPProbingConfig_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ProbingTarget'
func (fpaivs *ProbingTarget_FieldSubPathArrayItemValue) ContainsValue(source *ProbingTarget) bool {
	switch fpaivs.Selector() {
	case ProbingTarget_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case ProbingTarget_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(common.Location_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		return fpaivs.subPathItemValue.(common.HTTPProbingConfig_FieldPathArrayItemValue).ContainsValue(source.GetHttpProbingConfig())
	default:
		panic(fmt.Sprintf("Invalid selector for ProbingTarget: %d", fpaivs.Selector()))
	}
}

// ProbingTarget_FieldPathArrayOfValues allows storing slice of values for ProbingTarget fields according to their type
type ProbingTarget_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProbingTarget_FieldPath
}

func ParseProbingTarget_FieldPathArrayOfValues(pathStr, valuesStr string) (ProbingTarget_FieldPathArrayOfValues, error) {
	fp, err := ParseProbingTarget_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ProbingTarget field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProbingTarget_FieldPathArrayOfValues), nil
}

func MustParseProbingTarget_FieldPathArrayOfValues(pathStr, valuesStr string) ProbingTarget_FieldPathArrayOfValues {
	fpaov, err := ParseProbingTarget_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProbingTarget_FieldTerminalPathArrayOfValues struct {
	ProbingTarget_FieldTerminalPath
	values interface{}
}

var _ ProbingTarget_FieldPathArrayOfValues = (*ProbingTarget_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProbingTarget_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorGroup:
		for _, v := range fpaov.values.([]*probing_target_group.Reference) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorMode:
		for _, v := range fpaov.values.([]common.ProbingMode) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorIpVersion:
		for _, v := range fpaov.values.([]common.IpVersion) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorCategory:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorLocationType:
		for _, v := range fpaov.values.([]common.LocationType) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*common.Location) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorHttpProbingConfig:
		for _, v := range fpaov.values.([]*common.HTTPProbingConfig) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorAgent:
		for _, v := range fpaov.values.([]*probe.Reference) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorTargetType:
		for _, v := range fpaov.values.([]ProbingTarget_TargetType) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorUdpPort:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ProbingTarget_FieldPathSelectorSpeedtestTcpPort:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsGroupArrayOfValues() ([]*probing_target_group.Reference, bool) {
	res, ok := fpaov.values.([]*probing_target_group.Reference)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsModeArrayOfValues() ([]common.ProbingMode, bool) {
	res, ok := fpaov.values.([]common.ProbingMode)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsIpVersionArrayOfValues() ([]common.IpVersion, bool) {
	res, ok := fpaov.values.([]common.IpVersion)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsCategoryArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsLocationTypeArrayOfValues() ([]common.LocationType, bool) {
	res, ok := fpaov.values.([]common.LocationType)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*common.Location, bool) {
	res, ok := fpaov.values.([]*common.Location)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsHttpProbingConfigArrayOfValues() ([]*common.HTTPProbingConfig, bool) {
	res, ok := fpaov.values.([]*common.HTTPProbingConfig)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsAgentArrayOfValues() ([]*probe.Reference, bool) {
	res, ok := fpaov.values.([]*probe.Reference)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsTargetTypeArrayOfValues() ([]ProbingTarget_TargetType, bool) {
	res, ok := fpaov.values.([]ProbingTarget_TargetType)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsUdpPortArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ProbingTarget_FieldTerminalPathArrayOfValues) AsSpeedtestTcpPortArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

type ProbingTarget_FieldSubPathArrayOfValues struct {
	ProbingTarget_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProbingTarget_FieldPathArrayOfValues = (*ProbingTarget_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProbingTarget_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProbingTarget_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingTarget_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (common.Location_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.Location_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *ProbingTarget_FieldSubPathArrayOfValues) AsHttpProbingConfigPathArrayOfValues() (common.HTTPProbingConfig_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.HTTPProbingConfig_FieldPathArrayOfValues)
	return res, ok
}
