// Code generated by protoc-gen-goten-resource
// Resource: ProbingTarget
// DO NOT EDIT!!!

package probing_target

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

type ProbingTargetList []*ProbingTarget

func (l ProbingTargetList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ProbingTarget))
}

func (l ProbingTargetList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ProbingTargetList)...)
}

func (l ProbingTargetList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ProbingTargetList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ProbingTarget)
}

func (l ProbingTargetList) Length() int {
	return len(l)
}

type ProbingTargetChangeList []*ProbingTargetChange

func (l ProbingTargetChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ProbingTargetChange))
}

func (l ProbingTargetChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ProbingTargetChangeList)...)
}

func (l ProbingTargetChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ProbingTargetChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ProbingTargetChange)
}

func (l ProbingTargetChangeList) Length() int {
	return len(l)
}

type ProbingTargetNameList []*Name

func (l ProbingTargetNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ProbingTargetNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ProbingTargetNameList)...)
}

func (l ProbingTargetNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingTargetNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ProbingTargetNameList) Length() int {
	return len(l)
}

type ProbingTargetReferenceList []*Reference

func (l ProbingTargetReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ProbingTargetReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ProbingTargetReferenceList)...)
}

func (l ProbingTargetReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingTargetReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ProbingTargetReferenceList) Length() int {
	return len(l)
}

type ProbingTargetParentNameList []*ParentName

func (l ProbingTargetParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ProbingTargetParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ProbingTargetParentNameList)...)
}

func (l ProbingTargetParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingTargetParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ProbingTargetParentNameList) Length() int {
	return len(l)
}

type ProbingTargetParentReferenceList []*ParentReference

func (l ProbingTargetParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ProbingTargetParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ProbingTargetParentReferenceList)...)
}

func (l ProbingTargetParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingTargetParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingTargetParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ProbingTargetParentReferenceList) Length() int {
	return len(l)
}

type ProbingTargetMap map[Name]*ProbingTarget

func (m ProbingTargetMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ProbingTargetMap) Set(res gotenresource.Resource) {
	tRes := res.(*ProbingTarget)
	m[*tRes.Name] = tRes
}

func (m ProbingTargetMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingTargetMap) Length() int {
	return len(m)
}

func (m ProbingTargetMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ProbingTargetChangeMap map[Name]*ProbingTargetChange

func (m ProbingTargetChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ProbingTargetChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ProbingTargetChange)
	m[*tChange.GetProbingTargetName()] = tChange
}

func (m ProbingTargetChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingTargetChangeMap) Length() int {
	return len(m)
}

func (m ProbingTargetChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
