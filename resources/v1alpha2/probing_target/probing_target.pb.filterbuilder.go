// Code generated by protoc-gen-goten-resource
// Resource: ProbingTarget
// DO NOT EDIT!!!

package probing_target

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_memo "github.com/cloudwan/edgelq-sdk/common/types/memo"
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	multi_region_policy "github.com/cloudwan/edgelq-sdk/common/types/multi_region_policy"
	devices_device "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/device"
	devices_project "github.com/cloudwan/edgelq-sdk/devices/resources/v1alpha2/project"
	iam_attestation_domain "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/attestation_domain"
	iam_iam_common "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/common"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/project"
	iam_service_account "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha2/service_account"
	meta_service "github.com/cloudwan/edgelq-sdk/meta/resources/v1alpha2/service"
	admin_area "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/admin_area"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe"
	probe_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probe_group"
	probing_target_group "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_target_group"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/project"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_memo.Memo{}
	_ = &ntt_meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
	_ = &devices_device.Device{}
	_ = &devices_project.Project{}
	_ = &iam_attestation_domain.AttestationDomain{}
	_ = &iam_iam_common.PCR{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &iam_service_account.ServiceAccount{}
	_ = &meta_service.Service{}
	_ = &duration.Duration{}
	_ = &field_mask.FieldMask{}
	_ = &timestamp.Timestamp{}
	_ = &wrappers.DoubleValue{}
	_ = &latlng.LatLng{}
	_ = &admin_area.BBox{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probe_group.ProbeGroup{}
	_ = &probing_target_group.ProbingTargetGroup{}
	_ = &project.Project{}
)

type FilterBuilderOrCondition interface {
	_IsProbingTargetFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsProbingTargetFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp ProbingTarget_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      ProbingTarget_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) DisplayName() *filterCndBuilderDisplayName {
	return &filterCndBuilderDisplayName{builder: b.builder}
}

func (b *filterCndBuilder) Metadata() *filterCndBuilderMetadata {
	return &filterCndBuilderMetadata{builder: b.builder}
}

func (b *filterCndBuilder) Group() *filterCndBuilderGroup {
	return &filterCndBuilderGroup{builder: b.builder}
}

func (b *filterCndBuilder) GroupName() *filterCndBuilderGroupName {
	return &filterCndBuilderGroupName{builder: b.builder}
}

func (b *filterCndBuilder) Mode() *filterCndBuilderMode {
	return &filterCndBuilderMode{builder: b.builder}
}

func (b *filterCndBuilder) IpVersion() *filterCndBuilderIpVersion {
	return &filterCndBuilderIpVersion{builder: b.builder}
}

func (b *filterCndBuilder) Address() *filterCndBuilderAddress {
	return &filterCndBuilderAddress{builder: b.builder}
}

func (b *filterCndBuilder) Category() *filterCndBuilderCategory {
	return &filterCndBuilderCategory{builder: b.builder}
}

func (b *filterCndBuilder) LocationType() *filterCndBuilderLocationType {
	return &filterCndBuilderLocationType{builder: b.builder}
}

func (b *filterCndBuilder) Location() *filterCndBuilderLocation {
	return &filterCndBuilderLocation{builder: b.builder}
}

func (b *filterCndBuilder) HttpProbingConfig() *filterCndBuilderHttpProbingConfig {
	return &filterCndBuilderHttpProbingConfig{builder: b.builder}
}

func (b *filterCndBuilder) ProxyConfiguration() *filterCndBuilderProxyConfiguration {
	return &filterCndBuilderProxyConfiguration{builder: b.builder}
}

func (b *filterCndBuilder) Agent() *filterCndBuilderAgent {
	return &filterCndBuilderAgent{builder: b.builder}
}

func (b *filterCndBuilder) Addresses() *filterCndBuilderAddresses {
	return &filterCndBuilderAddresses{builder: b.builder}
}

func (b *filterCndBuilder) TargetType() *filterCndBuilderTargetType {
	return &filterCndBuilderTargetType{builder: b.builder}
}

func (b *filterCndBuilder) UdpPort() *filterCndBuilderUdpPort {
	return &filterCndBuilderUdpPort{builder: b.builder}
}

func (b *filterCndBuilder) SpeedtestTcpPort() *filterCndBuilderSpeedtestTcpPort {
	return &filterCndBuilderSpeedtestTcpPort{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderDisplayName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderDisplayName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderDisplayName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderDisplayName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderDisplayName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderDisplayName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderDisplayName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderDisplayName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().DisplayName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderDisplayName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().DisplayName().FieldPath(),
	})
}

func (b *filterCndBuilderDisplayName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().DisplayName().WithValue(value),
	})
}

type filterCndBuilderMetadata struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadata) Eq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadata) Neq(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadata) Gt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadata) Gte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadata) Lt(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadata) Lte(value *ntt_meta.Meta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadata) In(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) NotIn(values []*ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadata) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().FieldPath(),
	})
}

func (b *filterCndBuilderMetadata) compare(op gotenfilter.CompareOperator, value *ntt_meta.Meta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().WithValue(value),
	})
}

func (b *filterCndBuilderMetadata) CreateTime() *filterCndBuilderMetadataCreateTime {
	return &filterCndBuilderMetadataCreateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) UpdateTime() *filterCndBuilderMetadataUpdateTime {
	return &filterCndBuilderMetadataUpdateTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) DeleteTime() *filterCndBuilderMetadataDeleteTime {
	return &filterCndBuilderMetadataDeleteTime{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Uuid() *filterCndBuilderMetadataUuid {
	return &filterCndBuilderMetadataUuid{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Tags() *filterCndBuilderMetadataTags {
	return &filterCndBuilderMetadataTags{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Labels() *filterCndBuilderMetadataLabels {
	return &filterCndBuilderMetadataLabels{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Annotations() *filterCndBuilderMetadataAnnotations {
	return &filterCndBuilderMetadataAnnotations{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Generation() *filterCndBuilderMetadataGeneration {
	return &filterCndBuilderMetadataGeneration{builder: b.builder}
}

func (b *filterCndBuilderMetadata) ResourceVersion() *filterCndBuilderMetadataResourceVersion {
	return &filterCndBuilderMetadataResourceVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadata) OwnerReferences() *filterCndBuilderMetadataOwnerReferences {
	return &filterCndBuilderMetadataOwnerReferences{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Shards() *filterCndBuilderMetadataShards {
	return &filterCndBuilderMetadataShards{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Syncing() *filterCndBuilderMetadataSyncing {
	return &filterCndBuilderMetadataSyncing{builder: b.builder}
}

func (b *filterCndBuilderMetadata) Lifecycle() *filterCndBuilderMetadataLifecycle {
	return &filterCndBuilderMetadataLifecycle{builder: b.builder}
}

type filterCndBuilderMetadataCreateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataCreateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataCreateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataCreateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().CreateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().CreateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataCreateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().CreateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUpdateTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUpdateTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUpdateTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUpdateTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().UpdateTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().UpdateTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUpdateTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().UpdateTime().WithValue(value),
	})
}

type filterCndBuilderMetadataDeleteTime struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataDeleteTime) Eq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Neq(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Gte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lt(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataDeleteTime) Lte(value *timestamp.Timestamp) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataDeleteTime) In(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) NotIn(values []*timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().DeleteTime().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().DeleteTime().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataDeleteTime) compare(op gotenfilter.CompareOperator, value *timestamp.Timestamp) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().DeleteTime().WithValue(value),
	})
}

type filterCndBuilderMetadataUuid struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataUuid) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataUuid) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataUuid) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataUuid) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataUuid) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataUuid) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataUuid) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Uuid().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Uuid().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataUuid) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Uuid().WithValue(value),
	})
}

type filterCndBuilderMetadataTags struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataTags) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataTags) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataTags) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataTags) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataTags) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataTags) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataTags) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Tags().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataTags) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Tags().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataTags) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Tags().FieldPath(),
		Value:     NewProbingTargetFieldPathBuilder().Metadata().Tags().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingTargetFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProbingTarget_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingTargetFieldPathBuilder().Metadata().Tags()
	itemValues := make([]ProbingTarget_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Tags().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataTags) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Tags().WithValue(value),
	})
}

type filterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLabels) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLabels) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLabels) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLabels) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLabels) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLabels) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLabels) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Labels().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Labels().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Labels().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLabels) WithKey(key string) *mapFilterCndBuilderMetadataLabels {
	return &mapFilterCndBuilderMetadataLabels{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataLabels struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataLabels) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataLabels) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataLabels) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Labels().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataLabels) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Labels().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataAnnotations) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataAnnotations) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataAnnotations) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Annotations().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Annotations().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Annotations().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataAnnotations) WithKey(key string) *mapFilterCndBuilderMetadataAnnotations {
	return &mapFilterCndBuilderMetadataAnnotations{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataAnnotations struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataAnnotations) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataAnnotations) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Annotations().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataAnnotations) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Annotations().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataGeneration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataGeneration) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataGeneration) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataGeneration) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataGeneration) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataGeneration) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataGeneration) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataGeneration) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Generation().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Generation().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataGeneration) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Generation().WithValue(value),
	})
}

type filterCndBuilderMetadataResourceVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataResourceVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataResourceVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataResourceVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().ResourceVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().ResourceVersion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataResourceVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().ResourceVersion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferences struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferences) Eq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Neq(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Gte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lt(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) Lte(value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferences) In(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) NotIn(values [][]*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Contains(value *ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Value:     NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAnyOf(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProbingTarget_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) ContainsAll(values []*ntt_meta.OwnerReference) *FilterBuilder {
	pathSelector := NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences()
	itemValues := make([]ProbingTarget_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) compare(op gotenfilter.CompareOperator, value []*ntt_meta.OwnerReference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataOwnerReferences) Kind() *filterCndBuilderMetadataOwnerReferencesKind {
	return &filterCndBuilderMetadataOwnerReferencesKind{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Version() *filterCndBuilderMetadataOwnerReferencesVersion {
	return &filterCndBuilderMetadataOwnerReferencesVersion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Name() *filterCndBuilderMetadataOwnerReferencesName {
	return &filterCndBuilderMetadataOwnerReferencesName{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Region() *filterCndBuilderMetadataOwnerReferencesRegion {
	return &filterCndBuilderMetadataOwnerReferencesRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) Controller() *filterCndBuilderMetadataOwnerReferencesController {
	return &filterCndBuilderMetadataOwnerReferencesController{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) BlockOwnerDeletion() *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion {
	return &filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion{builder: b.builder}
}

func (b *filterCndBuilderMetadataOwnerReferences) RequiresOwnerReference() *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference {
	return &filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference{builder: b.builder}
}

type filterCndBuilderMetadataOwnerReferencesKind struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Kind().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Kind().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesKind) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Kind().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Version().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Version().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesVersion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Version().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Name().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Name().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Region().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Region().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Region().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesController struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesController) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Controller().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Controller().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesController) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().Controller().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesBlockOwnerDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().BlockOwnerDeletion().WithValue(value),
	})
}

type filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataOwnerReferencesRequiresOwnerReference) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().OwnerReferences().RequiresOwnerReference().WithValue(value),
	})
}

type filterCndBuilderMetadataShards struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataShards) Eq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataShards) Neq(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataShards) Gt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataShards) Gte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataShards) Lt(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataShards) Lte(value map[string]int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataShards) In(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) NotIn(values []map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Shards().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Shards().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value map[string]int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Shards().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataShards) WithKey(key string) *mapFilterCndBuilderMetadataShards {
	return &mapFilterCndBuilderMetadataShards{builder: b.builder, key: key}
}

type mapFilterCndBuilderMetadataShards struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderMetadataShards) Eq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Neq(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Gte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lt(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderMetadataShards) Lte(value int64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderMetadataShards) In(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) NotIn(values []int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Shards().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderMetadataShards) compare(op gotenfilter.CompareOperator, value int64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Shards().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderMetadataSyncing struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncing) Eq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncing) Neq(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncing) Gt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncing) Gte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncing) Lt(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncing) Lte(value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncing) In(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) NotIn(values []*ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Syncing().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncing) compare(op gotenfilter.CompareOperator, value *ntt_meta.SyncingMeta) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Syncing().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncing) OwningRegion() *filterCndBuilderMetadataSyncingOwningRegion {
	return &filterCndBuilderMetadataSyncingOwningRegion{builder: b.builder}
}

func (b *filterCndBuilderMetadataSyncing) Regions() *filterCndBuilderMetadataSyncingRegions {
	return &filterCndBuilderMetadataSyncingRegions{builder: b.builder}
}

type filterCndBuilderMetadataSyncingOwningRegion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Syncing().OwningRegion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().OwningRegion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingOwningRegion) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Syncing().OwningRegion().WithValue(value),
	})
}

type filterCndBuilderMetadataSyncingRegions struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataSyncingRegions) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataSyncingRegions) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Value:     NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().WithItemValue(value),
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProbingTarget_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions()
	itemValues := make([]ProbingTarget_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderMetadataSyncingRegions) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Syncing().Regions().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycle struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycle) Eq(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Neq(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gt(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Gte(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lt(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycle) Lte(value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycle) In(values []*ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) NotIn(values []*ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycle) compare(op gotenfilter.CompareOperator, value *ntt_meta.Lifecycle) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().WithValue(value),
	})
}

func (b *filterCndBuilderMetadataLifecycle) State() *filterCndBuilderMetadataLifecycleState {
	return &filterCndBuilderMetadataLifecycleState{builder: b.builder}
}

func (b *filterCndBuilderMetadataLifecycle) BlockDeletion() *filterCndBuilderMetadataLifecycleBlockDeletion {
	return &filterCndBuilderMetadataLifecycleBlockDeletion{builder: b.builder}
}

type filterCndBuilderMetadataLifecycleState struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleState) Eq(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Neq(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gt(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Gte(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lt(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleState) Lte(value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleState) In(values []ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) NotIn(values []ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().State().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().State().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleState) compare(op gotenfilter.CompareOperator, value ntt_meta.Lifecycle_State) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().State().WithValue(value),
	})
}

type filterCndBuilderMetadataLifecycleBlockDeletion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Eq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Neq(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Gte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lt(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) Lte(value bool) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) In(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) NotIn(values []bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().FieldPath(),
	})
}

func (b *filterCndBuilderMetadataLifecycleBlockDeletion) compare(op gotenfilter.CompareOperator, value bool) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Metadata().Lifecycle().BlockDeletion().WithValue(value),
	})
}

type filterCndBuilderGroup struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGroup) Eq(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGroup) Neq(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGroup) Gt(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGroup) Gte(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGroup) Lt(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGroup) Lte(value *probing_target_group.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGroup) In(values []*probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Group().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGroup) NotIn(values []*probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Group().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGroup) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Group().FieldPath(),
	})
}

func (b *filterCndBuilderGroup) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Group().FieldPath(),
	})
}

func (b *filterCndBuilderGroup) compare(op gotenfilter.CompareOperator, value *probing_target_group.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Group().WithValue(value),
	})
}

type filterCndBuilderGroupName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderGroupName) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderGroupName) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderGroupName) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderGroupName) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderGroupName) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderGroupName) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderGroupName) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().GroupName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGroupName) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().GroupName().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderGroupName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().GroupName().FieldPath(),
	})
}

func (b *filterCndBuilderGroupName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().GroupName().FieldPath(),
	})
}

func (b *filterCndBuilderGroupName) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().GroupName().WithValue(value),
	})
}

type filterCndBuilderMode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderMode) Eq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderMode) Neq(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderMode) Gt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderMode) Gte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderMode) Lt(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderMode) Lte(value common.ProbingMode) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderMode) In(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMode) NotIn(values []common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Mode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderMode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderMode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Mode().FieldPath(),
	})
}

func (b *filterCndBuilderMode) compare(op gotenfilter.CompareOperator, value common.ProbingMode) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Mode().WithValue(value),
	})
}

type filterCndBuilderIpVersion struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderIpVersion) Eq(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderIpVersion) Neq(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderIpVersion) Gt(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderIpVersion) Gte(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderIpVersion) Lt(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderIpVersion) Lte(value common.IpVersion) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderIpVersion) In(values []common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().IpVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIpVersion) NotIn(values []common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().IpVersion().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderIpVersion) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().IpVersion().FieldPath(),
	})
}

func (b *filterCndBuilderIpVersion) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().IpVersion().FieldPath(),
	})
}

func (b *filterCndBuilderIpVersion) compare(op gotenfilter.CompareOperator, value common.IpVersion) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().IpVersion().WithValue(value),
	})
}

type filterCndBuilderAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Address().FieldPath(),
	})
}

func (b *filterCndBuilderAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Address().FieldPath(),
	})
}

func (b *filterCndBuilderAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Address().WithValue(value),
	})
}

type filterCndBuilderCategory struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderCategory) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderCategory) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderCategory) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderCategory) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderCategory) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderCategory) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderCategory) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Category().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderCategory) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Category().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderCategory) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Category().FieldPath(),
	})
}

func (b *filterCndBuilderCategory) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Category().FieldPath(),
	})
}

func (b *filterCndBuilderCategory) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Category().WithValue(value),
	})
}

type filterCndBuilderLocationType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationType) Eq(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationType) Neq(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationType) Gt(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationType) Gte(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationType) Lt(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationType) Lte(value common.LocationType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationType) In(values []common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().LocationType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationType) NotIn(values []common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().LocationType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().LocationType().FieldPath(),
	})
}

func (b *filterCndBuilderLocationType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().LocationType().FieldPath(),
	})
}

func (b *filterCndBuilderLocationType) compare(op gotenfilter.CompareOperator, value common.LocationType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().LocationType().WithValue(value),
	})
}

type filterCndBuilderLocation struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocation) Eq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocation) Neq(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocation) Gt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocation) Gte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocation) Lt(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocation) Lte(value *common.Location) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocation) In(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocation) NotIn(values []*common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocation) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().FieldPath(),
	})
}

func (b *filterCndBuilderLocation) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().FieldPath(),
	})
}

func (b *filterCndBuilderLocation) compare(op gotenfilter.CompareOperator, value *common.Location) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().WithValue(value),
	})
}

func (b *filterCndBuilderLocation) Address() *filterCndBuilderLocationAddress {
	return &filterCndBuilderLocationAddress{builder: b.builder}
}

func (b *filterCndBuilderLocation) AdminHierarchy() *filterCndBuilderLocationAdminHierarchy {
	return &filterCndBuilderLocationAdminHierarchy{builder: b.builder}
}

func (b *filterCndBuilderLocation) Coordinates() *filterCndBuilderLocationCoordinates {
	return &filterCndBuilderLocationCoordinates{builder: b.builder}
}

func (b *filterCndBuilderLocation) Accuracy() *filterCndBuilderLocationAccuracy {
	return &filterCndBuilderLocationAccuracy{builder: b.builder}
}

type filterCndBuilderLocationAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddress) Eq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddress) Neq(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddress) Gt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddress) Gte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddress) Lt(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddress) Lte(value *common.Address) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddress) In(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddress) NotIn(values []*common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddress) compare(op gotenfilter.CompareOperator, value *common.Address) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().WithValue(value),
	})
}

func (b *filterCndBuilderLocationAddress) PostalCode() *filterCndBuilderLocationAddressPostalCode {
	return &filterCndBuilderLocationAddressPostalCode{builder: b.builder}
}

func (b *filterCndBuilderLocationAddress) CountryCode() *filterCndBuilderLocationAddressCountryCode {
	return &filterCndBuilderLocationAddressCountryCode{builder: b.builder}
}

func (b *filterCndBuilderLocationAddress) Continent() *filterCndBuilderLocationAddressContinent {
	return &filterCndBuilderLocationAddressContinent{builder: b.builder}
}

func (b *filterCndBuilderLocationAddress) Country() *filterCndBuilderLocationAddressCountry {
	return &filterCndBuilderLocationAddressCountry{builder: b.builder}
}

func (b *filterCndBuilderLocationAddress) AdminArea1() *filterCndBuilderLocationAddressAdminArea1 {
	return &filterCndBuilderLocationAddressAdminArea1{builder: b.builder}
}

func (b *filterCndBuilderLocationAddress) AdminArea2() *filterCndBuilderLocationAddressAdminArea2 {
	return &filterCndBuilderLocationAddressAdminArea2{builder: b.builder}
}

func (b *filterCndBuilderLocationAddress) AdminArea3() *filterCndBuilderLocationAddressAdminArea3 {
	return &filterCndBuilderLocationAddressAdminArea3{builder: b.builder}
}

func (b *filterCndBuilderLocationAddress) AdminArea4() *filterCndBuilderLocationAddressAdminArea4 {
	return &filterCndBuilderLocationAddressAdminArea4{builder: b.builder}
}

func (b *filterCndBuilderLocationAddress) StreetAddress() *filterCndBuilderLocationAddressStreetAddress {
	return &filterCndBuilderLocationAddressStreetAddress{builder: b.builder}
}

type filterCndBuilderLocationAddressPostalCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressPostalCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressPostalCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressPostalCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressPostalCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressPostalCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressPostalCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressPostalCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressPostalCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().PostalCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressPostalCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressPostalCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().PostalCode().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressPostalCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().PostalCode().WithValue(value),
	})
}

type filterCndBuilderLocationAddressCountryCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressCountryCode) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressCountryCode) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressCountryCode) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressCountryCode) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressCountryCode) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressCountryCode) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressCountryCode) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressCountryCode) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().CountryCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressCountryCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressCountryCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().CountryCode().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressCountryCode) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().CountryCode().WithValue(value),
	})
}

type filterCndBuilderLocationAddressContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressContinent) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressContinent) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressContinent) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressContinent) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressContinent) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressContinent) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressContinent) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressContinent) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressContinent) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().Continent().WithValue(value),
	})
}

type filterCndBuilderLocationAddressCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressCountry) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressCountry) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressCountry) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressCountry) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressCountry) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressCountry) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressCountry) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressCountry) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().Country().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressCountry) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().Country().WithValue(value),
	})
}

type filterCndBuilderLocationAddressAdminArea1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressAdminArea1) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressAdminArea1) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressAdminArea1) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressAdminArea1) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressAdminArea1) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressAdminArea1) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressAdminArea1) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea1) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea1().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea1) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea1().WithValue(value),
	})
}

type filterCndBuilderLocationAddressAdminArea2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressAdminArea2) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressAdminArea2) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressAdminArea2) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressAdminArea2) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressAdminArea2) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressAdminArea2) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressAdminArea2) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea2) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea2().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea2) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea2().WithValue(value),
	})
}

type filterCndBuilderLocationAddressAdminArea3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressAdminArea3) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressAdminArea3) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressAdminArea3) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressAdminArea3) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressAdminArea3) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressAdminArea3) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressAdminArea3) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea3) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea3().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea3) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea3().WithValue(value),
	})
}

type filterCndBuilderLocationAddressAdminArea4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressAdminArea4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressAdminArea4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressAdminArea4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressAdminArea4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressAdminArea4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressAdminArea4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressAdminArea4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea4().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressAdminArea4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().AdminArea4().WithValue(value),
	})
}

type filterCndBuilderLocationAddressStreetAddress struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAddressStreetAddress) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAddressStreetAddress) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAddressStreetAddress) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAddressStreetAddress) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAddressStreetAddress) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAddressStreetAddress) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAddressStreetAddress) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressStreetAddress) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Address().StreetAddress().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAddressStreetAddress) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressStreetAddress) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Address().StreetAddress().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAddressStreetAddress) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Address().StreetAddress().WithValue(value),
	})
}

type filterCndBuilderLocationAdminHierarchy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAdminHierarchy) Eq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAdminHierarchy) Neq(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAdminHierarchy) Gt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAdminHierarchy) Gte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAdminHierarchy) Lt(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAdminHierarchy) Lte(value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAdminHierarchy) In(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchy) NotIn(values []*admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchy) compare(op gotenfilter.CompareOperator, value *admin_area.AdminHierarchy) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().WithValue(value),
	})
}

func (b *filterCndBuilderLocationAdminHierarchy) Continent() *filterCndBuilderLocationAdminHierarchyContinent {
	return &filterCndBuilderLocationAdminHierarchyContinent{builder: b.builder}
}

func (b *filterCndBuilderLocationAdminHierarchy) Country() *filterCndBuilderLocationAdminHierarchyCountry {
	return &filterCndBuilderLocationAdminHierarchyCountry{builder: b.builder}
}

func (b *filterCndBuilderLocationAdminHierarchy) Admin1() *filterCndBuilderLocationAdminHierarchyAdmin1 {
	return &filterCndBuilderLocationAdminHierarchyAdmin1{builder: b.builder}
}

func (b *filterCndBuilderLocationAdminHierarchy) Admin2() *filterCndBuilderLocationAdminHierarchyAdmin2 {
	return &filterCndBuilderLocationAdminHierarchyAdmin2{builder: b.builder}
}

func (b *filterCndBuilderLocationAdminHierarchy) Admin3() *filterCndBuilderLocationAdminHierarchyAdmin3 {
	return &filterCndBuilderLocationAdminHierarchyAdmin3{builder: b.builder}
}

func (b *filterCndBuilderLocationAdminHierarchy) Admin4() *filterCndBuilderLocationAdminHierarchyAdmin4 {
	return &filterCndBuilderLocationAdminHierarchyAdmin4{builder: b.builder}
}

func (b *filterCndBuilderLocationAdminHierarchy) Admin5() *filterCndBuilderLocationAdminHierarchyAdmin5 {
	return &filterCndBuilderLocationAdminHierarchyAdmin5{builder: b.builder}
}

type filterCndBuilderLocationAdminHierarchyContinent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Continent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Continent().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyContinent) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Continent().WithValue(value),
	})
}

type filterCndBuilderLocationAdminHierarchyCountry struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Country().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Country().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyCountry) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Country().WithValue(value),
	})
}

type filterCndBuilderLocationAdminHierarchyAdmin1 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin1().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin1().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin1) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin1().WithValue(value),
	})
}

type filterCndBuilderLocationAdminHierarchyAdmin2 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin2().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin2().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin2) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin2().WithValue(value),
	})
}

type filterCndBuilderLocationAdminHierarchyAdmin3 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin3().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin3().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin3) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin3().WithValue(value),
	})
}

type filterCndBuilderLocationAdminHierarchyAdmin4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin4().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin4) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin4().WithValue(value),
	})
}

type filterCndBuilderLocationAdminHierarchyAdmin5 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) Eq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) Neq(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) Gt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) Gte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) Lt(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) Lte(value *admin_area.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) In(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) NotIn(values []*admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin5().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin5().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAdminHierarchyAdmin5) compare(op gotenfilter.CompareOperator, value *admin_area.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().AdminHierarchy().Admin5().WithValue(value),
	})
}

type filterCndBuilderLocationCoordinates struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationCoordinates) Eq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationCoordinates) Neq(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationCoordinates) Gt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationCoordinates) Gte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationCoordinates) Lt(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationCoordinates) Lte(value *latlng.LatLng) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationCoordinates) In(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationCoordinates) NotIn(values []*latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Coordinates().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationCoordinates) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderLocationCoordinates) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Coordinates().FieldPath(),
	})
}

func (b *filterCndBuilderLocationCoordinates) compare(op gotenfilter.CompareOperator, value *latlng.LatLng) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Coordinates().WithValue(value),
	})
}

type filterCndBuilderLocationAccuracy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderLocationAccuracy) Eq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderLocationAccuracy) Neq(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderLocationAccuracy) Gt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderLocationAccuracy) Gte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderLocationAccuracy) Lt(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderLocationAccuracy) Lte(value float64) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderLocationAccuracy) In(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAccuracy) NotIn(values []float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Location().Accuracy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderLocationAccuracy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAccuracy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Location().Accuracy().FieldPath(),
	})
}

func (b *filterCndBuilderLocationAccuracy) compare(op gotenfilter.CompareOperator, value float64) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Location().Accuracy().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfig) Eq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfig) Neq(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfig) Gt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfig) Gte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfig) Lt(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfig) Lte(value *common.HTTPProbingConfig) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfig) In(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfig) NotIn(values []*common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().WithValue(value),
	})
}

func (b *filterCndBuilderHttpProbingConfig) HttpRequest() *filterCndBuilderHttpProbingConfigHttpRequest {
	return &filterCndBuilderHttpProbingConfigHttpRequest{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfig) AuthConfig() *filterCndBuilderHttpProbingConfigAuthConfig {
	return &filterCndBuilderHttpProbingConfigAuthConfig{builder: b.builder}
}

type filterCndBuilderHttpProbingConfigHttpRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().WithValue(value),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) Url() *filterCndBuilderHttpProbingConfigHttpRequestUrl {
	return &filterCndBuilderHttpProbingConfigHttpRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) RequestHeaders() *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders {
	return &filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) RequestMethod() *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod {
	return &filterCndBuilderHttpProbingConfigHttpRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) ExpectedResponseCode() *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode {
	return &filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) Timeout() *filterCndBuilderHttpProbingConfigHttpRequestTimeout {
	return &filterCndBuilderHttpProbingConfigHttpRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) RequestBody() *filterCndBuilderHttpProbingConfigHttpRequestRequestBody {
	return &filterCndBuilderHttpProbingConfigHttpRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigHttpRequest) AuthenticationMethod() *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod {
	return &filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod{builder: b.builder}
}

type filterCndBuilderHttpProbingConfigHttpRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Url().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders {
	return &mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderHttpProbingConfigHttpRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigHttpRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigHttpRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigHttpRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigHttpRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().HttpRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfig struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) Eq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) Neq(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) Gt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) Gte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) Lt(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) Lte(value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) In(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) NotIn(values []*common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPAuth) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().WithValue(value),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) Username() *filterCndBuilderHttpProbingConfigAuthConfigUsername {
	return &filterCndBuilderHttpProbingConfigAuthConfigUsername{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) Password() *filterCndBuilderHttpProbingConfigAuthConfigPassword {
	return &filterCndBuilderHttpProbingConfigAuthConfigPassword{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) TokenRequest() *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenRequest{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) TokenResponseHeader() *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) TokenResponseBodyKey() *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) RequestHeaderTokenKey() *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey {
	return &filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfig) TokenResponseBodyExpiryKey() *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey{builder: b.builder}
}

type filterCndBuilderHttpProbingConfigAuthConfigUsername struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Username().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Username().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigUsername) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Username().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigPassword struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Password().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Password().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigPassword) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().Password().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenRequest struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) Eq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) Neq(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) Gt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) Gte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) Lt(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) Lte(value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) In(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) NotIn(values []*common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) compare(op gotenfilter.CompareOperator, value *common.HTTPProbingConfig_HTTPRequest) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().WithValue(value),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) Url() *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) RequestHeaders() *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) RequestMethod() *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) ExpectedResponseCode() *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) Timeout() *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) RequestBody() *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody{builder: b.builder}
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequest) AuthenticationMethod() *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod {
	return &filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod{builder: b.builder}
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Url().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestUrl) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Url().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value map[string]string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value map[string]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithValue(value),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) WithKey(key string) *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders {
	return &mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders{builder: b.builder, key: key}
}

type mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders struct {
	builder *FilterBuilder
	key     string
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithArrayOfValues(values),
	})
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).FieldPath(),
	})
}

func (b *mapFilterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestHeaders) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestHeaders().WithKey(b.key).WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) Eq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) Neq(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) Gte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lt(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) Lte(value common.HTTPRequestMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) In(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) NotIn(values []common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestMethod) compare(op gotenfilter.CompareOperator, value common.HTTPRequestMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestMethod().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Eq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Neq(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Gte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lt(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) Lte(value uint32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) In(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) NotIn(values []uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestExpectedResponseCode) compare(op gotenfilter.CompareOperator, value uint32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().ExpectedResponseCode().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) Eq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) Neq(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) Gt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) Gte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) Lt(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) Lte(value *duration.Duration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) In(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) NotIn(values []*duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestTimeout) compare(op gotenfilter.CompareOperator, value *duration.Duration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().Timeout().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestRequestBody) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().RequestBody().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Eq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Neq(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Gte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lt(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) Lte(value common.AuthenticationMethod) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) In(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) NotIn(values []common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenRequestAuthenticationMethod) compare(op gotenfilter.CompareOperator, value common.AuthenticationMethod) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenRequest().AuthenticationMethod().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseHeader().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseHeader) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseHeader().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyKey().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigRequestHeaderTokenKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().RequestHeaderTokenKey().WithValue(value),
	})
}

type filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().FieldPath(),
	})
}

func (b *filterCndBuilderHttpProbingConfigAuthConfigTokenResponseBodyExpiryKey) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().HttpProbingConfig().AuthConfig().TokenResponseBodyExpiryKey().WithValue(value),
	})
}

type filterCndBuilderProxyConfiguration struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProxyConfiguration) Eq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProxyConfiguration) Neq(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProxyConfiguration) Gt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProxyConfiguration) Gte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProxyConfiguration) Lt(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProxyConfiguration) Lte(value *common.ProxyConfiguration) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProxyConfiguration) In(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfiguration) NotIn(values []*common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfiguration) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfiguration) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfiguration) compare(op gotenfilter.CompareOperator, value *common.ProxyConfiguration) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().ProxyConfiguration().WithValue(value),
	})
}

func (b *filterCndBuilderProxyConfiguration) ProxySetting() *filterCndBuilderProxyConfigurationProxySetting {
	return &filterCndBuilderProxyConfigurationProxySetting{builder: b.builder}
}

func (b *filterCndBuilderProxyConfiguration) HttpProxy() *filterCndBuilderProxyConfigurationHttpProxy {
	return &filterCndBuilderProxyConfigurationHttpProxy{builder: b.builder}
}

func (b *filterCndBuilderProxyConfiguration) HttpsProxy() *filterCndBuilderProxyConfigurationHttpsProxy {
	return &filterCndBuilderProxyConfigurationHttpsProxy{builder: b.builder}
}

func (b *filterCndBuilderProxyConfiguration) NoProxy() *filterCndBuilderProxyConfigurationNoProxy {
	return &filterCndBuilderProxyConfigurationNoProxy{builder: b.builder}
}

type filterCndBuilderProxyConfigurationProxySetting struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProxyConfigurationProxySetting) Eq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProxyConfigurationProxySetting) Neq(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProxyConfigurationProxySetting) Gt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProxyConfigurationProxySetting) Gte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProxyConfigurationProxySetting) Lt(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProxyConfigurationProxySetting) Lte(value common.ProxySetting) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProxyConfigurationProxySetting) In(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfigurationProxySetting) NotIn(values []common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().ProxySetting().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfigurationProxySetting) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfigurationProxySetting) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().ProxySetting().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfigurationProxySetting) compare(op gotenfilter.CompareOperator, value common.ProxySetting) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().ProxyConfiguration().ProxySetting().WithValue(value),
	})
}

type filterCndBuilderProxyConfigurationHttpProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpProxy().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfigurationHttpProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpProxy().WithValue(value),
	})
}

type filterCndBuilderProxyConfigurationHttpsProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpsProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpsProxy().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfigurationHttpsProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().ProxyConfiguration().HttpsProxy().WithValue(value),
	})
}

type filterCndBuilderProxyConfigurationNoProxy struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderProxyConfigurationNoProxy) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderProxyConfigurationNoProxy) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderProxyConfigurationNoProxy) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderProxyConfigurationNoProxy) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderProxyConfigurationNoProxy) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderProxyConfigurationNoProxy) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderProxyConfigurationNoProxy) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfigurationNoProxy) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().ProxyConfiguration().NoProxy().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderProxyConfigurationNoProxy) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfigurationNoProxy) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().ProxyConfiguration().NoProxy().FieldPath(),
	})
}

func (b *filterCndBuilderProxyConfigurationNoProxy) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().ProxyConfiguration().NoProxy().WithValue(value),
	})
}

type filterCndBuilderAgent struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderAgent) Eq(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAgent) Neq(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAgent) Gt(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAgent) Gte(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAgent) Lt(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAgent) Lte(value *probe.Reference) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAgent) In(values []*probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Agent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAgent) NotIn(values []*probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Agent().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAgent) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Agent().FieldPath(),
	})
}

func (b *filterCndBuilderAgent) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Agent().FieldPath(),
	})
}

func (b *filterCndBuilderAgent) compare(op gotenfilter.CompareOperator, value *probe.Reference) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Agent().WithValue(value),
	})
}

type filterCndBuilderAddresses struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderAddresses) Eq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAddresses) Neq(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAddresses) Gt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAddresses) Gte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAddresses) Lt(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAddresses) Lte(value []string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAddresses) In(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAddresses) NotIn(values [][]string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().Addresses().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderAddresses) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderAddresses) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().Addresses().FieldPath(),
	})
}

func (b *filterCndBuilderAddresses) Contains(value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeValue,
		FieldPath: NewProbingTargetFieldPathBuilder().Addresses().FieldPath(),
		Value:     NewProbingTargetFieldPathBuilder().Addresses().WithItemValue(value),
	})
}

func (b *filterCndBuilderAddresses) ContainsAnyOf(values []string) *FilterBuilder {
	pathSelector := NewProbingTargetFieldPathBuilder().Addresses()
	itemValues := make([]ProbingTarget_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAny,
		FieldPath: NewProbingTargetFieldPathBuilder().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAddresses) ContainsAll(values []string) *FilterBuilder {
	pathSelector := NewProbingTargetFieldPathBuilder().Addresses()
	itemValues := make([]ProbingTarget_FieldPathArrayItemValue, 0, len(values))
	for _, value := range values {
		itemValues = append(itemValues, pathSelector.WithItemValue(value))
	}
	return b.builder.addCond(&FilterConditionContains{
		Type:      gotenresource.ConditionContainsTypeAll,
		FieldPath: NewProbingTargetFieldPathBuilder().Addresses().FieldPath(),
		Values:    itemValues,
	})
}

func (b *filterCndBuilderAddresses) compare(op gotenfilter.CompareOperator, value []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().Addresses().WithValue(value),
	})
}

type filterCndBuilderTargetType struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderTargetType) Eq(value ProbingTarget_TargetType) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderTargetType) Neq(value ProbingTarget_TargetType) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderTargetType) Gt(value ProbingTarget_TargetType) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderTargetType) Gte(value ProbingTarget_TargetType) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderTargetType) Lt(value ProbingTarget_TargetType) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderTargetType) Lte(value ProbingTarget_TargetType) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderTargetType) In(values []ProbingTarget_TargetType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().TargetType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderTargetType) NotIn(values []ProbingTarget_TargetType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().TargetType().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderTargetType) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().TargetType().FieldPath(),
	})
}

func (b *filterCndBuilderTargetType) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().TargetType().FieldPath(),
	})
}

func (b *filterCndBuilderTargetType) compare(op gotenfilter.CompareOperator, value ProbingTarget_TargetType) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().TargetType().WithValue(value),
	})
}

type filterCndBuilderUdpPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderUdpPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderUdpPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderUdpPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderUdpPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderUdpPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderUdpPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderUdpPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().UdpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderUdpPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().UdpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderUdpPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().UdpPort().FieldPath(),
	})
}

func (b *filterCndBuilderUdpPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().UdpPort().FieldPath(),
	})
}

func (b *filterCndBuilderUdpPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().UdpPort().WithValue(value),
	})
}

type filterCndBuilderSpeedtestTcpPort struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpeedtestTcpPort) Eq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpeedtestTcpPort) Neq(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpeedtestTcpPort) Gt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpeedtestTcpPort) Gte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpeedtestTcpPort) Lt(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpeedtestTcpPort) Lte(value int32) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpeedtestTcpPort) In(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().SpeedtestTcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpeedtestTcpPort) NotIn(values []int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		ProbingTarget_FieldPathArrayOfValues: NewProbingTargetFieldPathBuilder().SpeedtestTcpPort().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpeedtestTcpPort) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewProbingTargetFieldPathBuilder().SpeedtestTcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpeedtestTcpPort) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewProbingTargetFieldPathBuilder().SpeedtestTcpPort().FieldPath(),
	})
}

func (b *filterCndBuilderSpeedtestTcpPort) compare(op gotenfilter.CompareOperator, value int32) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                     op,
		ProbingTarget_FieldPathValue: NewProbingTargetFieldPathBuilder().SpeedtestTcpPort().WithValue(value),
	})
}
