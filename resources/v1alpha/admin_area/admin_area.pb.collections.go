// Code generated by protoc-gen-goten-resource
// Resource: AdminArea
// DO NOT EDIT!!!

package admin_area

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
)

type AdminAreaList []*AdminArea

func (l AdminAreaList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*AdminArea))
}

func (l AdminAreaList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(AdminAreaList)...)
}

func (l AdminAreaList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AdminAreaList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l AdminAreaList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*AdminArea)
}

func (l AdminAreaList) Length() int {
	return len(l)
}

type AdminAreaChangeList []*AdminAreaChange

func (l AdminAreaChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*AdminAreaChange))
}

func (l AdminAreaChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(AdminAreaChangeList)...)
}

func (l AdminAreaChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AdminAreaChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l AdminAreaChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*AdminAreaChange)
}

func (l AdminAreaChangeList) Length() int {
	return len(l)
}

type AdminAreaNameList []*Name

func (l AdminAreaNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l AdminAreaNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(AdminAreaNameList)...)
}

func (l AdminAreaNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AdminAreaNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AdminAreaNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l AdminAreaNameList) Length() int {
	return len(l)
}

type AdminAreaReferenceList []*Reference

func (l AdminAreaReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l AdminAreaReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(AdminAreaReferenceList)...)
}

func (l AdminAreaReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AdminAreaReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AdminAreaReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l AdminAreaReferenceList) Length() int {
	return len(l)
}

type AdminAreaMap map[Name]*AdminArea

func (m AdminAreaMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m AdminAreaMap) Set(res gotenresource.Resource) {
	tRes := res.(*AdminArea)
	m[*tRes.Name] = tRes
}

func (m AdminAreaMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AdminAreaMap) Length() int {
	return len(m)
}

func (m AdminAreaMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type AdminAreaChangeMap map[Name]*AdminAreaChange

func (m AdminAreaChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m AdminAreaChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*AdminAreaChange)
	m[*tChange.GetAdminAreaName()] = tChange
}

func (m AdminAreaChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AdminAreaChangeMap) Length() int {
	return len(m)
}

func (m AdminAreaChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
