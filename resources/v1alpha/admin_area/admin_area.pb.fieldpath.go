// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/admin_area.proto
// DO NOT EDIT!!!

package admin_area

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &latlng.LatLng{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BBox_FieldPath interface {
	gotenobject.FieldPath
	Selector() BBox_FieldPathSelector
	Get(source *BBox) []interface{}
	GetSingle(source *BBox) (interface{}, bool)
	ClearValue(item *BBox)

	// Those methods build corresponding BBox_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BBox_FieldPathValue
	WithIArrayOfValues(values interface{}) BBox_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BBox_FieldPathArrayItemValue
}

type BBox_FieldPathSelector int32

const (
	BBox_FieldPathSelectorSouthWest BBox_FieldPathSelector = 0
	BBox_FieldPathSelectorNorthEast BBox_FieldPathSelector = 1
)

func (s BBox_FieldPathSelector) String() string {
	switch s {
	case BBox_FieldPathSelectorSouthWest:
		return "south_west"
	case BBox_FieldPathSelectorNorthEast:
		return "north_east"
	default:
		panic(fmt.Sprintf("Invalid selector for BBox: %d", s))
	}
}

func BuildBBox_FieldPath(fp gotenobject.RawFieldPath) (BBox_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BBox")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "south_west", "southWest", "south-west":
			return &BBox_FieldTerminalPath{selector: BBox_FieldPathSelectorSouthWest}, nil
		case "north_east", "northEast", "north-east":
			return &BBox_FieldTerminalPath{selector: BBox_FieldPathSelectorNorthEast}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BBox", fp)
}

func ParseBBox_FieldPath(rawField string) (BBox_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBBox_FieldPath(fp)
}

func MustParseBBox_FieldPath(rawField string) BBox_FieldPath {
	fp, err := ParseBBox_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BBox_FieldTerminalPath struct {
	selector BBox_FieldPathSelector
}

var _ BBox_FieldPath = (*BBox_FieldTerminalPath)(nil)

func (fp *BBox_FieldTerminalPath) Selector() BBox_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BBox_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BBox_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BBox
func (fp *BBox_FieldTerminalPath) Get(source *BBox) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BBox_FieldPathSelectorSouthWest:
			if source.SouthWest != nil {
				values = append(values, source.SouthWest)
			}
		case BBox_FieldPathSelectorNorthEast:
			if source.NorthEast != nil {
				values = append(values, source.NorthEast)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BBox: %d", fp.selector))
		}
	}
	return
}

func (fp *BBox_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BBox))
}

// GetSingle returns value pointed by specific field of from source BBox
func (fp *BBox_FieldTerminalPath) GetSingle(source *BBox) (interface{}, bool) {
	switch fp.selector {
	case BBox_FieldPathSelectorSouthWest:
		res := source.GetSouthWest()
		return res, res != nil
	case BBox_FieldPathSelectorNorthEast:
		res := source.GetNorthEast()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BBox: %d", fp.selector))
	}
}

func (fp *BBox_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BBox))
}

// GetDefault returns a default value of the field type
func (fp *BBox_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BBox_FieldPathSelectorSouthWest:
		return (*latlng.LatLng)(nil)
	case BBox_FieldPathSelectorNorthEast:
		return (*latlng.LatLng)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BBox: %d", fp.selector))
	}
}

func (fp *BBox_FieldTerminalPath) ClearValue(item *BBox) {
	if item != nil {
		switch fp.selector {
		case BBox_FieldPathSelectorSouthWest:
			item.SouthWest = nil
		case BBox_FieldPathSelectorNorthEast:
			item.NorthEast = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BBox: %d", fp.selector))
		}
	}
}

func (fp *BBox_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BBox))
}

// IsLeaf - whether field path is holds simple value
func (fp *BBox_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BBox_FieldPathSelectorSouthWest ||
		fp.selector == BBox_FieldPathSelectorNorthEast
}

func (fp *BBox_FieldTerminalPath) WithIValue(value interface{}) BBox_FieldPathValue {
	switch fp.selector {
	case BBox_FieldPathSelectorSouthWest:
		return &BBox_FieldTerminalPathValue{BBox_FieldTerminalPath: *fp, value: value.(*latlng.LatLng)}
	case BBox_FieldPathSelectorNorthEast:
		return &BBox_FieldTerminalPathValue{BBox_FieldTerminalPath: *fp, value: value.(*latlng.LatLng)}
	default:
		panic(fmt.Sprintf("Invalid selector for BBox: %d", fp.selector))
	}
}

func (fp *BBox_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BBox_FieldTerminalPath) WithIArrayOfValues(values interface{}) BBox_FieldPathArrayOfValues {
	fpaov := &BBox_FieldTerminalPathArrayOfValues{BBox_FieldTerminalPath: *fp}
	switch fp.selector {
	case BBox_FieldPathSelectorSouthWest:
		return &BBox_FieldTerminalPathArrayOfValues{BBox_FieldTerminalPath: *fp, values: values.([]*latlng.LatLng)}
	case BBox_FieldPathSelectorNorthEast:
		return &BBox_FieldTerminalPathArrayOfValues{BBox_FieldTerminalPath: *fp, values: values.([]*latlng.LatLng)}
	default:
		panic(fmt.Sprintf("Invalid selector for BBox: %d", fp.selector))
	}
	return fpaov
}

func (fp *BBox_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BBox_FieldTerminalPath) WithIArrayItemValue(value interface{}) BBox_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for BBox: %d", fp.selector))
	}
}

func (fp *BBox_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BBox_FieldPathValue allows storing values for BBox fields according to their type
type BBox_FieldPathValue interface {
	BBox_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BBox)
	CompareWith(*BBox) (cmp int, comparable bool)
}

func ParseBBox_FieldPathValue(pathStr, valueStr string) (BBox_FieldPathValue, error) {
	fp, err := ParseBBox_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BBox field path value from %s: %v", valueStr, err)
	}
	return fpv.(BBox_FieldPathValue), nil
}

func MustParseBBox_FieldPathValue(pathStr, valueStr string) BBox_FieldPathValue {
	fpv, err := ParseBBox_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BBox_FieldTerminalPathValue struct {
	BBox_FieldTerminalPath
	value interface{}
}

var _ BBox_FieldPathValue = (*BBox_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BBox' as interface{}
func (fpv *BBox_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BBox_FieldTerminalPathValue) AsSouthWestValue() (*latlng.LatLng, bool) {
	res, ok := fpv.value.(*latlng.LatLng)
	return res, ok
}
func (fpv *BBox_FieldTerminalPathValue) AsNorthEastValue() (*latlng.LatLng, bool) {
	res, ok := fpv.value.(*latlng.LatLng)
	return res, ok
}

// SetTo stores value for selected field for object BBox
func (fpv *BBox_FieldTerminalPathValue) SetTo(target **BBox) {
	if *target == nil {
		*target = new(BBox)
	}
	switch fpv.selector {
	case BBox_FieldPathSelectorSouthWest:
		(*target).SouthWest = fpv.value.(*latlng.LatLng)
	case BBox_FieldPathSelectorNorthEast:
		(*target).NorthEast = fpv.value.(*latlng.LatLng)
	default:
		panic(fmt.Sprintf("Invalid selector for BBox: %d", fpv.selector))
	}
}

func (fpv *BBox_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BBox)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BBox_FieldTerminalPathValue' with the value under path in 'BBox'.
func (fpv *BBox_FieldTerminalPathValue) CompareWith(source *BBox) (int, bool) {
	switch fpv.selector {
	case BBox_FieldPathSelectorSouthWest:
		return 0, false
	case BBox_FieldPathSelectorNorthEast:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BBox: %d", fpv.selector))
	}
}

func (fpv *BBox_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BBox))
}

// BBox_FieldPathArrayItemValue allows storing single item in Path-specific values for BBox according to their type
// Present only for array (repeated) types.
type BBox_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BBox_FieldPath
	ContainsValue(*BBox) bool
}

// ParseBBox_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBBox_FieldPathArrayItemValue(pathStr, valueStr string) (BBox_FieldPathArrayItemValue, error) {
	fp, err := ParseBBox_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BBox field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BBox_FieldPathArrayItemValue), nil
}

func MustParseBBox_FieldPathArrayItemValue(pathStr, valueStr string) BBox_FieldPathArrayItemValue {
	fpaiv, err := ParseBBox_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BBox_FieldTerminalPathArrayItemValue struct {
	BBox_FieldTerminalPath
	value interface{}
}

var _ BBox_FieldPathArrayItemValue = (*BBox_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BBox as interface{}
func (fpaiv *BBox_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *BBox_FieldTerminalPathArrayItemValue) GetSingle(source *BBox) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BBox_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BBox))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BBox'
func (fpaiv *BBox_FieldTerminalPathArrayItemValue) ContainsValue(source *BBox) bool {
	slice := fpaiv.BBox_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BBox_FieldPathArrayOfValues allows storing slice of values for BBox fields according to their type
type BBox_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BBox_FieldPath
}

func ParseBBox_FieldPathArrayOfValues(pathStr, valuesStr string) (BBox_FieldPathArrayOfValues, error) {
	fp, err := ParseBBox_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BBox field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BBox_FieldPathArrayOfValues), nil
}

func MustParseBBox_FieldPathArrayOfValues(pathStr, valuesStr string) BBox_FieldPathArrayOfValues {
	fpaov, err := ParseBBox_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BBox_FieldTerminalPathArrayOfValues struct {
	BBox_FieldTerminalPath
	values interface{}
}

var _ BBox_FieldPathArrayOfValues = (*BBox_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BBox_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BBox_FieldPathSelectorSouthWest:
		for _, v := range fpaov.values.([]*latlng.LatLng) {
			values = append(values, v)
		}
	case BBox_FieldPathSelectorNorthEast:
		for _, v := range fpaov.values.([]*latlng.LatLng) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BBox_FieldTerminalPathArrayOfValues) AsSouthWestArrayOfValues() ([]*latlng.LatLng, bool) {
	res, ok := fpaov.values.([]*latlng.LatLng)
	return res, ok
}
func (fpaov *BBox_FieldTerminalPathArrayOfValues) AsNorthEastArrayOfValues() ([]*latlng.LatLng, bool) {
	res, ok := fpaov.values.([]*latlng.LatLng)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Geometry_FieldPath interface {
	gotenobject.FieldPath
	Selector() Geometry_FieldPathSelector
	Get(source *Geometry) []interface{}
	GetSingle(source *Geometry) (interface{}, bool)
	ClearValue(item *Geometry)

	// Those methods build corresponding Geometry_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Geometry_FieldPathValue
	WithIArrayOfValues(values interface{}) Geometry_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Geometry_FieldPathArrayItemValue
}

type Geometry_FieldPathSelector int32

const (
	Geometry_FieldPathSelectorCenter Geometry_FieldPathSelector = 0
	Geometry_FieldPathSelectorBbox   Geometry_FieldPathSelector = 1
)

func (s Geometry_FieldPathSelector) String() string {
	switch s {
	case Geometry_FieldPathSelectorCenter:
		return "center"
	case Geometry_FieldPathSelectorBbox:
		return "bbox"
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", s))
	}
}

func BuildGeometry_FieldPath(fp gotenobject.RawFieldPath) (Geometry_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Geometry")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "center":
			return &Geometry_FieldTerminalPath{selector: Geometry_FieldPathSelectorCenter}, nil
		case "bbox":
			return &Geometry_FieldTerminalPath{selector: Geometry_FieldPathSelectorBbox}, nil
		}
	} else {
		switch fp[0] {
		case "bbox":
			if subpath, err := BuildBBox_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Geometry_FieldSubPath{selector: Geometry_FieldPathSelectorBbox, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Geometry", fp)
}

func ParseGeometry_FieldPath(rawField string) (Geometry_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGeometry_FieldPath(fp)
}

func MustParseGeometry_FieldPath(rawField string) Geometry_FieldPath {
	fp, err := ParseGeometry_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Geometry_FieldTerminalPath struct {
	selector Geometry_FieldPathSelector
}

var _ Geometry_FieldPath = (*Geometry_FieldTerminalPath)(nil)

func (fp *Geometry_FieldTerminalPath) Selector() Geometry_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Geometry_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Geometry_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Geometry
func (fp *Geometry_FieldTerminalPath) Get(source *Geometry) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Geometry_FieldPathSelectorCenter:
			if source.Center != nil {
				values = append(values, source.Center)
			}
		case Geometry_FieldPathSelectorBbox:
			if source.Bbox != nil {
				values = append(values, source.Bbox)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Geometry: %d", fp.selector))
		}
	}
	return
}

func (fp *Geometry_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Geometry))
}

// GetSingle returns value pointed by specific field of from source Geometry
func (fp *Geometry_FieldTerminalPath) GetSingle(source *Geometry) (interface{}, bool) {
	switch fp.selector {
	case Geometry_FieldPathSelectorCenter:
		res := source.GetCenter()
		return res, res != nil
	case Geometry_FieldPathSelectorBbox:
		res := source.GetBbox()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fp.selector))
	}
}

func (fp *Geometry_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Geometry))
}

// GetDefault returns a default value of the field type
func (fp *Geometry_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Geometry_FieldPathSelectorCenter:
		return (*latlng.LatLng)(nil)
	case Geometry_FieldPathSelectorBbox:
		return (*BBox)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fp.selector))
	}
}

func (fp *Geometry_FieldTerminalPath) ClearValue(item *Geometry) {
	if item != nil {
		switch fp.selector {
		case Geometry_FieldPathSelectorCenter:
			item.Center = nil
		case Geometry_FieldPathSelectorBbox:
			item.Bbox = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Geometry: %d", fp.selector))
		}
	}
}

func (fp *Geometry_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Geometry))
}

// IsLeaf - whether field path is holds simple value
func (fp *Geometry_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Geometry_FieldPathSelectorCenter
}

func (fp *Geometry_FieldTerminalPath) WithIValue(value interface{}) Geometry_FieldPathValue {
	switch fp.selector {
	case Geometry_FieldPathSelectorCenter:
		return &Geometry_FieldTerminalPathValue{Geometry_FieldTerminalPath: *fp, value: value.(*latlng.LatLng)}
	case Geometry_FieldPathSelectorBbox:
		return &Geometry_FieldTerminalPathValue{Geometry_FieldTerminalPath: *fp, value: value.(*BBox)}
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fp.selector))
	}
}

func (fp *Geometry_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Geometry_FieldTerminalPath) WithIArrayOfValues(values interface{}) Geometry_FieldPathArrayOfValues {
	fpaov := &Geometry_FieldTerminalPathArrayOfValues{Geometry_FieldTerminalPath: *fp}
	switch fp.selector {
	case Geometry_FieldPathSelectorCenter:
		return &Geometry_FieldTerminalPathArrayOfValues{Geometry_FieldTerminalPath: *fp, values: values.([]*latlng.LatLng)}
	case Geometry_FieldPathSelectorBbox:
		return &Geometry_FieldTerminalPathArrayOfValues{Geometry_FieldTerminalPath: *fp, values: values.([]*BBox)}
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fp.selector))
	}
	return fpaov
}

func (fp *Geometry_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Geometry_FieldTerminalPath) WithIArrayItemValue(value interface{}) Geometry_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fp.selector))
	}
}

func (fp *Geometry_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Geometry_FieldSubPath struct {
	selector Geometry_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Geometry_FieldPath = (*Geometry_FieldSubPath)(nil)

func (fps *Geometry_FieldSubPath) Selector() Geometry_FieldPathSelector {
	return fps.selector
}
func (fps *Geometry_FieldSubPath) AsBboxSubPath() (BBox_FieldPath, bool) {
	res, ok := fps.subPath.(BBox_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Geometry_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Geometry_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Geometry
func (fps *Geometry_FieldSubPath) Get(source *Geometry) (values []interface{}) {
	if asBBoxFieldPath, ok := fps.AsBboxSubPath(); ok {
		values = append(values, asBBoxFieldPath.Get(source.GetBbox())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fps.selector))
	}
	return
}

func (fps *Geometry_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Geometry))
}

// GetSingle returns value of selected field from source Geometry
func (fps *Geometry_FieldSubPath) GetSingle(source *Geometry) (interface{}, bool) {
	switch fps.selector {
	case Geometry_FieldPathSelectorBbox:
		if source.GetBbox() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetBbox())
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fps.selector))
	}
}

func (fps *Geometry_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Geometry))
}

// GetDefault returns a default value of the field type
func (fps *Geometry_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Geometry_FieldSubPath) ClearValue(item *Geometry) {
	if item != nil {
		switch fps.selector {
		case Geometry_FieldPathSelectorBbox:
			fps.subPath.ClearValueRaw(item.Bbox)
		default:
			panic(fmt.Sprintf("Invalid selector for Geometry: %d", fps.selector))
		}
	}
}

func (fps *Geometry_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Geometry))
}

// IsLeaf - whether field path is holds simple value
func (fps *Geometry_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Geometry_FieldSubPath) WithIValue(value interface{}) Geometry_FieldPathValue {
	return &Geometry_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Geometry_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Geometry_FieldSubPath) WithIArrayOfValues(values interface{}) Geometry_FieldPathArrayOfValues {
	return &Geometry_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Geometry_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Geometry_FieldSubPath) WithIArrayItemValue(value interface{}) Geometry_FieldPathArrayItemValue {
	return &Geometry_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Geometry_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Geometry_FieldPathValue allows storing values for Geometry fields according to their type
type Geometry_FieldPathValue interface {
	Geometry_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Geometry)
	CompareWith(*Geometry) (cmp int, comparable bool)
}

func ParseGeometry_FieldPathValue(pathStr, valueStr string) (Geometry_FieldPathValue, error) {
	fp, err := ParseGeometry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Geometry field path value from %s: %v", valueStr, err)
	}
	return fpv.(Geometry_FieldPathValue), nil
}

func MustParseGeometry_FieldPathValue(pathStr, valueStr string) Geometry_FieldPathValue {
	fpv, err := ParseGeometry_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Geometry_FieldTerminalPathValue struct {
	Geometry_FieldTerminalPath
	value interface{}
}

var _ Geometry_FieldPathValue = (*Geometry_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Geometry' as interface{}
func (fpv *Geometry_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Geometry_FieldTerminalPathValue) AsCenterValue() (*latlng.LatLng, bool) {
	res, ok := fpv.value.(*latlng.LatLng)
	return res, ok
}
func (fpv *Geometry_FieldTerminalPathValue) AsBboxValue() (*BBox, bool) {
	res, ok := fpv.value.(*BBox)
	return res, ok
}

// SetTo stores value for selected field for object Geometry
func (fpv *Geometry_FieldTerminalPathValue) SetTo(target **Geometry) {
	if *target == nil {
		*target = new(Geometry)
	}
	switch fpv.selector {
	case Geometry_FieldPathSelectorCenter:
		(*target).Center = fpv.value.(*latlng.LatLng)
	case Geometry_FieldPathSelectorBbox:
		(*target).Bbox = fpv.value.(*BBox)
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fpv.selector))
	}
}

func (fpv *Geometry_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Geometry)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Geometry_FieldTerminalPathValue' with the value under path in 'Geometry'.
func (fpv *Geometry_FieldTerminalPathValue) CompareWith(source *Geometry) (int, bool) {
	switch fpv.selector {
	case Geometry_FieldPathSelectorCenter:
		return 0, false
	case Geometry_FieldPathSelectorBbox:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fpv.selector))
	}
}

func (fpv *Geometry_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Geometry))
}

type Geometry_FieldSubPathValue struct {
	Geometry_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Geometry_FieldPathValue = (*Geometry_FieldSubPathValue)(nil)

func (fpvs *Geometry_FieldSubPathValue) AsBboxPathValue() (BBox_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(BBox_FieldPathValue)
	return res, ok
}

func (fpvs *Geometry_FieldSubPathValue) SetTo(target **Geometry) {
	if *target == nil {
		*target = new(Geometry)
	}
	switch fpvs.Selector() {
	case Geometry_FieldPathSelectorBbox:
		fpvs.subPathValue.(BBox_FieldPathValue).SetTo(&(*target).Bbox)
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fpvs.Selector()))
	}
}

func (fpvs *Geometry_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Geometry)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Geometry_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Geometry_FieldSubPathValue) CompareWith(source *Geometry) (int, bool) {
	switch fpvs.Selector() {
	case Geometry_FieldPathSelectorBbox:
		return fpvs.subPathValue.(BBox_FieldPathValue).CompareWith(source.GetBbox())
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fpvs.Selector()))
	}
}

func (fpvs *Geometry_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Geometry))
}

// Geometry_FieldPathArrayItemValue allows storing single item in Path-specific values for Geometry according to their type
// Present only for array (repeated) types.
type Geometry_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Geometry_FieldPath
	ContainsValue(*Geometry) bool
}

// ParseGeometry_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGeometry_FieldPathArrayItemValue(pathStr, valueStr string) (Geometry_FieldPathArrayItemValue, error) {
	fp, err := ParseGeometry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Geometry field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Geometry_FieldPathArrayItemValue), nil
}

func MustParseGeometry_FieldPathArrayItemValue(pathStr, valueStr string) Geometry_FieldPathArrayItemValue {
	fpaiv, err := ParseGeometry_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Geometry_FieldTerminalPathArrayItemValue struct {
	Geometry_FieldTerminalPath
	value interface{}
}

var _ Geometry_FieldPathArrayItemValue = (*Geometry_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Geometry as interface{}
func (fpaiv *Geometry_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Geometry_FieldTerminalPathArrayItemValue) GetSingle(source *Geometry) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Geometry_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Geometry))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Geometry'
func (fpaiv *Geometry_FieldTerminalPathArrayItemValue) ContainsValue(source *Geometry) bool {
	slice := fpaiv.Geometry_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Geometry_FieldSubPathArrayItemValue struct {
	Geometry_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Geometry_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Geometry_FieldSubPathArrayItemValue) AsBboxPathItemValue() (BBox_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(BBox_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Geometry'
func (fpaivs *Geometry_FieldSubPathArrayItemValue) ContainsValue(source *Geometry) bool {
	switch fpaivs.Selector() {
	case Geometry_FieldPathSelectorBbox:
		return fpaivs.subPathItemValue.(BBox_FieldPathArrayItemValue).ContainsValue(source.GetBbox())
	default:
		panic(fmt.Sprintf("Invalid selector for Geometry: %d", fpaivs.Selector()))
	}
}

// Geometry_FieldPathArrayOfValues allows storing slice of values for Geometry fields according to their type
type Geometry_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Geometry_FieldPath
}

func ParseGeometry_FieldPathArrayOfValues(pathStr, valuesStr string) (Geometry_FieldPathArrayOfValues, error) {
	fp, err := ParseGeometry_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Geometry field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Geometry_FieldPathArrayOfValues), nil
}

func MustParseGeometry_FieldPathArrayOfValues(pathStr, valuesStr string) Geometry_FieldPathArrayOfValues {
	fpaov, err := ParseGeometry_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Geometry_FieldTerminalPathArrayOfValues struct {
	Geometry_FieldTerminalPath
	values interface{}
}

var _ Geometry_FieldPathArrayOfValues = (*Geometry_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Geometry_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Geometry_FieldPathSelectorCenter:
		for _, v := range fpaov.values.([]*latlng.LatLng) {
			values = append(values, v)
		}
	case Geometry_FieldPathSelectorBbox:
		for _, v := range fpaov.values.([]*BBox) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Geometry_FieldTerminalPathArrayOfValues) AsCenterArrayOfValues() ([]*latlng.LatLng, bool) {
	res, ok := fpaov.values.([]*latlng.LatLng)
	return res, ok
}
func (fpaov *Geometry_FieldTerminalPathArrayOfValues) AsBboxArrayOfValues() ([]*BBox, bool) {
	res, ok := fpaov.values.([]*BBox)
	return res, ok
}

type Geometry_FieldSubPathArrayOfValues struct {
	Geometry_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Geometry_FieldPathArrayOfValues = (*Geometry_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Geometry_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Geometry_FieldSubPathArrayOfValues) AsBboxPathArrayOfValues() (BBox_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(BBox_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AdminHierarchy_FieldPath interface {
	gotenobject.FieldPath
	Selector() AdminHierarchy_FieldPathSelector
	Get(source *AdminHierarchy) []interface{}
	GetSingle(source *AdminHierarchy) (interface{}, bool)
	ClearValue(item *AdminHierarchy)

	// Those methods build corresponding AdminHierarchy_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AdminHierarchy_FieldPathValue
	WithIArrayOfValues(values interface{}) AdminHierarchy_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AdminHierarchy_FieldPathArrayItemValue
}

type AdminHierarchy_FieldPathSelector int32

const (
	AdminHierarchy_FieldPathSelectorContinent AdminHierarchy_FieldPathSelector = 0
	AdminHierarchy_FieldPathSelectorCountry   AdminHierarchy_FieldPathSelector = 1
	AdminHierarchy_FieldPathSelectorAdmin1    AdminHierarchy_FieldPathSelector = 2
	AdminHierarchy_FieldPathSelectorAdmin2    AdminHierarchy_FieldPathSelector = 3
	AdminHierarchy_FieldPathSelectorAdmin3    AdminHierarchy_FieldPathSelector = 4
	AdminHierarchy_FieldPathSelectorAdmin4    AdminHierarchy_FieldPathSelector = 5
	AdminHierarchy_FieldPathSelectorAdmin5    AdminHierarchy_FieldPathSelector = 6
)

func (s AdminHierarchy_FieldPathSelector) String() string {
	switch s {
	case AdminHierarchy_FieldPathSelectorContinent:
		return "continent"
	case AdminHierarchy_FieldPathSelectorCountry:
		return "country"
	case AdminHierarchy_FieldPathSelectorAdmin1:
		return "admin1"
	case AdminHierarchy_FieldPathSelectorAdmin2:
		return "admin2"
	case AdminHierarchy_FieldPathSelectorAdmin3:
		return "admin3"
	case AdminHierarchy_FieldPathSelectorAdmin4:
		return "admin4"
	case AdminHierarchy_FieldPathSelectorAdmin5:
		return "admin5"
	default:
		panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", s))
	}
}

func BuildAdminHierarchy_FieldPath(fp gotenobject.RawFieldPath) (AdminHierarchy_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AdminHierarchy")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "continent":
			return &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorContinent}, nil
		case "country":
			return &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorCountry}, nil
		case "admin1", "admin_1", "admin-1":
			return &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin1}, nil
		case "admin2", "admin_2", "admin-2":
			return &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin2}, nil
		case "admin3", "admin_3", "admin-3":
			return &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin3}, nil
		case "admin4", "admin_4", "admin-4":
			return &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin4}, nil
		case "admin5", "admin_5", "admin-5":
			return &AdminHierarchy_FieldTerminalPath{selector: AdminHierarchy_FieldPathSelectorAdmin5}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AdminHierarchy", fp)
}

func ParseAdminHierarchy_FieldPath(rawField string) (AdminHierarchy_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAdminHierarchy_FieldPath(fp)
}

func MustParseAdminHierarchy_FieldPath(rawField string) AdminHierarchy_FieldPath {
	fp, err := ParseAdminHierarchy_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AdminHierarchy_FieldTerminalPath struct {
	selector AdminHierarchy_FieldPathSelector
}

var _ AdminHierarchy_FieldPath = (*AdminHierarchy_FieldTerminalPath)(nil)

func (fp *AdminHierarchy_FieldTerminalPath) Selector() AdminHierarchy_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AdminHierarchy_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AdminHierarchy_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AdminHierarchy
func (fp *AdminHierarchy_FieldTerminalPath) Get(source *AdminHierarchy) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AdminHierarchy_FieldPathSelectorContinent:
			if source.Continent != nil {
				values = append(values, source.Continent)
			}
		case AdminHierarchy_FieldPathSelectorCountry:
			if source.Country != nil {
				values = append(values, source.Country)
			}
		case AdminHierarchy_FieldPathSelectorAdmin1:
			if source.Admin1 != nil {
				values = append(values, source.Admin1)
			}
		case AdminHierarchy_FieldPathSelectorAdmin2:
			if source.Admin2 != nil {
				values = append(values, source.Admin2)
			}
		case AdminHierarchy_FieldPathSelectorAdmin3:
			if source.Admin3 != nil {
				values = append(values, source.Admin3)
			}
		case AdminHierarchy_FieldPathSelectorAdmin4:
			if source.Admin4 != nil {
				values = append(values, source.Admin4)
			}
		case AdminHierarchy_FieldPathSelectorAdmin5:
			if source.Admin5 != nil {
				values = append(values, source.Admin5)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fp.selector))
		}
	}
	return
}

func (fp *AdminHierarchy_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AdminHierarchy))
}

// GetSingle returns value pointed by specific field of from source AdminHierarchy
func (fp *AdminHierarchy_FieldTerminalPath) GetSingle(source *AdminHierarchy) (interface{}, bool) {
	switch fp.selector {
	case AdminHierarchy_FieldPathSelectorContinent:
		res := source.GetContinent()
		return res, res != nil
	case AdminHierarchy_FieldPathSelectorCountry:
		res := source.GetCountry()
		return res, res != nil
	case AdminHierarchy_FieldPathSelectorAdmin1:
		res := source.GetAdmin1()
		return res, res != nil
	case AdminHierarchy_FieldPathSelectorAdmin2:
		res := source.GetAdmin2()
		return res, res != nil
	case AdminHierarchy_FieldPathSelectorAdmin3:
		res := source.GetAdmin3()
		return res, res != nil
	case AdminHierarchy_FieldPathSelectorAdmin4:
		res := source.GetAdmin4()
		return res, res != nil
	case AdminHierarchy_FieldPathSelectorAdmin5:
		res := source.GetAdmin5()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fp.selector))
	}
}

func (fp *AdminHierarchy_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AdminHierarchy))
}

// GetDefault returns a default value of the field type
func (fp *AdminHierarchy_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AdminHierarchy_FieldPathSelectorContinent:
		return (*Reference)(nil)
	case AdminHierarchy_FieldPathSelectorCountry:
		return (*Reference)(nil)
	case AdminHierarchy_FieldPathSelectorAdmin1:
		return (*Reference)(nil)
	case AdminHierarchy_FieldPathSelectorAdmin2:
		return (*Reference)(nil)
	case AdminHierarchy_FieldPathSelectorAdmin3:
		return (*Reference)(nil)
	case AdminHierarchy_FieldPathSelectorAdmin4:
		return (*Reference)(nil)
	case AdminHierarchy_FieldPathSelectorAdmin5:
		return (*Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fp.selector))
	}
}

func (fp *AdminHierarchy_FieldTerminalPath) ClearValue(item *AdminHierarchy) {
	if item != nil {
		switch fp.selector {
		case AdminHierarchy_FieldPathSelectorContinent:
			item.Continent = nil
		case AdminHierarchy_FieldPathSelectorCountry:
			item.Country = nil
		case AdminHierarchy_FieldPathSelectorAdmin1:
			item.Admin1 = nil
		case AdminHierarchy_FieldPathSelectorAdmin2:
			item.Admin2 = nil
		case AdminHierarchy_FieldPathSelectorAdmin3:
			item.Admin3 = nil
		case AdminHierarchy_FieldPathSelectorAdmin4:
			item.Admin4 = nil
		case AdminHierarchy_FieldPathSelectorAdmin5:
			item.Admin5 = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fp.selector))
		}
	}
}

func (fp *AdminHierarchy_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AdminHierarchy))
}

// IsLeaf - whether field path is holds simple value
func (fp *AdminHierarchy_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AdminHierarchy_FieldPathSelectorContinent ||
		fp.selector == AdminHierarchy_FieldPathSelectorCountry ||
		fp.selector == AdminHierarchy_FieldPathSelectorAdmin1 ||
		fp.selector == AdminHierarchy_FieldPathSelectorAdmin2 ||
		fp.selector == AdminHierarchy_FieldPathSelectorAdmin3 ||
		fp.selector == AdminHierarchy_FieldPathSelectorAdmin4 ||
		fp.selector == AdminHierarchy_FieldPathSelectorAdmin5
}

func (fp *AdminHierarchy_FieldTerminalPath) WithIValue(value interface{}) AdminHierarchy_FieldPathValue {
	switch fp.selector {
	case AdminHierarchy_FieldPathSelectorContinent:
		return &AdminHierarchy_FieldTerminalPathValue{AdminHierarchy_FieldTerminalPath: *fp, value: value.(*Reference)}
	case AdminHierarchy_FieldPathSelectorCountry:
		return &AdminHierarchy_FieldTerminalPathValue{AdminHierarchy_FieldTerminalPath: *fp, value: value.(*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin1:
		return &AdminHierarchy_FieldTerminalPathValue{AdminHierarchy_FieldTerminalPath: *fp, value: value.(*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin2:
		return &AdminHierarchy_FieldTerminalPathValue{AdminHierarchy_FieldTerminalPath: *fp, value: value.(*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin3:
		return &AdminHierarchy_FieldTerminalPathValue{AdminHierarchy_FieldTerminalPath: *fp, value: value.(*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin4:
		return &AdminHierarchy_FieldTerminalPathValue{AdminHierarchy_FieldTerminalPath: *fp, value: value.(*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin5:
		return &AdminHierarchy_FieldTerminalPathValue{AdminHierarchy_FieldTerminalPath: *fp, value: value.(*Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fp.selector))
	}
}

func (fp *AdminHierarchy_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AdminHierarchy_FieldTerminalPath) WithIArrayOfValues(values interface{}) AdminHierarchy_FieldPathArrayOfValues {
	fpaov := &AdminHierarchy_FieldTerminalPathArrayOfValues{AdminHierarchy_FieldTerminalPath: *fp}
	switch fp.selector {
	case AdminHierarchy_FieldPathSelectorContinent:
		return &AdminHierarchy_FieldTerminalPathArrayOfValues{AdminHierarchy_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case AdminHierarchy_FieldPathSelectorCountry:
		return &AdminHierarchy_FieldTerminalPathArrayOfValues{AdminHierarchy_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin1:
		return &AdminHierarchy_FieldTerminalPathArrayOfValues{AdminHierarchy_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin2:
		return &AdminHierarchy_FieldTerminalPathArrayOfValues{AdminHierarchy_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin3:
		return &AdminHierarchy_FieldTerminalPathArrayOfValues{AdminHierarchy_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin4:
		return &AdminHierarchy_FieldTerminalPathArrayOfValues{AdminHierarchy_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case AdminHierarchy_FieldPathSelectorAdmin5:
		return &AdminHierarchy_FieldTerminalPathArrayOfValues{AdminHierarchy_FieldTerminalPath: *fp, values: values.([]*Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fp.selector))
	}
	return fpaov
}

func (fp *AdminHierarchy_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AdminHierarchy_FieldTerminalPath) WithIArrayItemValue(value interface{}) AdminHierarchy_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fp.selector))
	}
}

func (fp *AdminHierarchy_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AdminHierarchy_FieldPathValue allows storing values for AdminHierarchy fields according to their type
type AdminHierarchy_FieldPathValue interface {
	AdminHierarchy_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AdminHierarchy)
	CompareWith(*AdminHierarchy) (cmp int, comparable bool)
}

func ParseAdminHierarchy_FieldPathValue(pathStr, valueStr string) (AdminHierarchy_FieldPathValue, error) {
	fp, err := ParseAdminHierarchy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AdminHierarchy field path value from %s: %v", valueStr, err)
	}
	return fpv.(AdminHierarchy_FieldPathValue), nil
}

func MustParseAdminHierarchy_FieldPathValue(pathStr, valueStr string) AdminHierarchy_FieldPathValue {
	fpv, err := ParseAdminHierarchy_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AdminHierarchy_FieldTerminalPathValue struct {
	AdminHierarchy_FieldTerminalPath
	value interface{}
}

var _ AdminHierarchy_FieldPathValue = (*AdminHierarchy_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AdminHierarchy' as interface{}
func (fpv *AdminHierarchy_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AdminHierarchy_FieldTerminalPathValue) AsContinentValue() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *AdminHierarchy_FieldTerminalPathValue) AsCountryValue() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *AdminHierarchy_FieldTerminalPathValue) AsAdmin1Value() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *AdminHierarchy_FieldTerminalPathValue) AsAdmin2Value() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *AdminHierarchy_FieldTerminalPathValue) AsAdmin3Value() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *AdminHierarchy_FieldTerminalPathValue) AsAdmin4Value() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *AdminHierarchy_FieldTerminalPathValue) AsAdmin5Value() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}

// SetTo stores value for selected field for object AdminHierarchy
func (fpv *AdminHierarchy_FieldTerminalPathValue) SetTo(target **AdminHierarchy) {
	if *target == nil {
		*target = new(AdminHierarchy)
	}
	switch fpv.selector {
	case AdminHierarchy_FieldPathSelectorContinent:
		(*target).Continent = fpv.value.(*Reference)
	case AdminHierarchy_FieldPathSelectorCountry:
		(*target).Country = fpv.value.(*Reference)
	case AdminHierarchy_FieldPathSelectorAdmin1:
		(*target).Admin1 = fpv.value.(*Reference)
	case AdminHierarchy_FieldPathSelectorAdmin2:
		(*target).Admin2 = fpv.value.(*Reference)
	case AdminHierarchy_FieldPathSelectorAdmin3:
		(*target).Admin3 = fpv.value.(*Reference)
	case AdminHierarchy_FieldPathSelectorAdmin4:
		(*target).Admin4 = fpv.value.(*Reference)
	case AdminHierarchy_FieldPathSelectorAdmin5:
		(*target).Admin5 = fpv.value.(*Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fpv.selector))
	}
}

func (fpv *AdminHierarchy_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AdminHierarchy)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AdminHierarchy_FieldTerminalPathValue' with the value under path in 'AdminHierarchy'.
func (fpv *AdminHierarchy_FieldTerminalPathValue) CompareWith(source *AdminHierarchy) (int, bool) {
	switch fpv.selector {
	case AdminHierarchy_FieldPathSelectorContinent:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetContinent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AdminHierarchy_FieldPathSelectorCountry:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetCountry()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AdminHierarchy_FieldPathSelectorAdmin1:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetAdmin1()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AdminHierarchy_FieldPathSelectorAdmin2:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetAdmin2()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AdminHierarchy_FieldPathSelectorAdmin3:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetAdmin3()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AdminHierarchy_FieldPathSelectorAdmin4:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetAdmin4()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AdminHierarchy_FieldPathSelectorAdmin5:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetAdmin5()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminHierarchy: %d", fpv.selector))
	}
}

func (fpv *AdminHierarchy_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AdminHierarchy))
}

// AdminHierarchy_FieldPathArrayItemValue allows storing single item in Path-specific values for AdminHierarchy according to their type
// Present only for array (repeated) types.
type AdminHierarchy_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AdminHierarchy_FieldPath
	ContainsValue(*AdminHierarchy) bool
}

// ParseAdminHierarchy_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAdminHierarchy_FieldPathArrayItemValue(pathStr, valueStr string) (AdminHierarchy_FieldPathArrayItemValue, error) {
	fp, err := ParseAdminHierarchy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AdminHierarchy field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AdminHierarchy_FieldPathArrayItemValue), nil
}

func MustParseAdminHierarchy_FieldPathArrayItemValue(pathStr, valueStr string) AdminHierarchy_FieldPathArrayItemValue {
	fpaiv, err := ParseAdminHierarchy_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AdminHierarchy_FieldTerminalPathArrayItemValue struct {
	AdminHierarchy_FieldTerminalPath
	value interface{}
}

var _ AdminHierarchy_FieldPathArrayItemValue = (*AdminHierarchy_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AdminHierarchy as interface{}
func (fpaiv *AdminHierarchy_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AdminHierarchy_FieldTerminalPathArrayItemValue) GetSingle(source *AdminHierarchy) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AdminHierarchy_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AdminHierarchy))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AdminHierarchy'
func (fpaiv *AdminHierarchy_FieldTerminalPathArrayItemValue) ContainsValue(source *AdminHierarchy) bool {
	slice := fpaiv.AdminHierarchy_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AdminHierarchy_FieldPathArrayOfValues allows storing slice of values for AdminHierarchy fields according to their type
type AdminHierarchy_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AdminHierarchy_FieldPath
}

func ParseAdminHierarchy_FieldPathArrayOfValues(pathStr, valuesStr string) (AdminHierarchy_FieldPathArrayOfValues, error) {
	fp, err := ParseAdminHierarchy_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AdminHierarchy field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AdminHierarchy_FieldPathArrayOfValues), nil
}

func MustParseAdminHierarchy_FieldPathArrayOfValues(pathStr, valuesStr string) AdminHierarchy_FieldPathArrayOfValues {
	fpaov, err := ParseAdminHierarchy_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AdminHierarchy_FieldTerminalPathArrayOfValues struct {
	AdminHierarchy_FieldTerminalPath
	values interface{}
}

var _ AdminHierarchy_FieldPathArrayOfValues = (*AdminHierarchy_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AdminHierarchy_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AdminHierarchy_FieldPathSelectorContinent:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case AdminHierarchy_FieldPathSelectorCountry:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case AdminHierarchy_FieldPathSelectorAdmin1:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case AdminHierarchy_FieldPathSelectorAdmin2:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case AdminHierarchy_FieldPathSelectorAdmin3:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case AdminHierarchy_FieldPathSelectorAdmin4:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case AdminHierarchy_FieldPathSelectorAdmin5:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AdminHierarchy_FieldTerminalPathArrayOfValues) AsContinentArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *AdminHierarchy_FieldTerminalPathArrayOfValues) AsCountryArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *AdminHierarchy_FieldTerminalPathArrayOfValues) AsAdmin1ArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *AdminHierarchy_FieldTerminalPathArrayOfValues) AsAdmin2ArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *AdminHierarchy_FieldTerminalPathArrayOfValues) AsAdmin3ArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *AdminHierarchy_FieldTerminalPathArrayOfValues) AsAdmin4ArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *AdminHierarchy_FieldTerminalPathArrayOfValues) AsAdmin5ArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AdminArea_FieldPath interface {
	gotenobject.FieldPath
	Selector() AdminArea_FieldPathSelector
	Get(source *AdminArea) []interface{}
	GetSingle(source *AdminArea) (interface{}, bool)
	ClearValue(item *AdminArea)

	// Those methods build corresponding AdminArea_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AdminArea_FieldPathValue
	WithIArrayOfValues(values interface{}) AdminArea_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AdminArea_FieldPathArrayItemValue
}

type AdminArea_FieldPathSelector int32

const (
	AdminArea_FieldPathSelectorName               AdminArea_FieldPathSelector = 0
	AdminArea_FieldPathSelectorDisplayName        AdminArea_FieldPathSelector = 1
	AdminArea_FieldPathSelectorHierarchy          AdminArea_FieldPathSelector = 2
	AdminArea_FieldPathSelectorType               AdminArea_FieldPathSelector = 3
	AdminArea_FieldPathSelectorLabelGeometry      AdminArea_FieldPathSelector = 4
	AdminArea_FieldPathSelectorGeometry           AdminArea_FieldPathSelector = 5
	AdminArea_FieldPathSelectorMetadata           AdminArea_FieldPathSelector = 6
	AdminArea_FieldPathSelectorLocalLanguageNames AdminArea_FieldPathSelector = 7
)

func (s AdminArea_FieldPathSelector) String() string {
	switch s {
	case AdminArea_FieldPathSelectorName:
		return "name"
	case AdminArea_FieldPathSelectorDisplayName:
		return "display_name"
	case AdminArea_FieldPathSelectorHierarchy:
		return "hierarchy"
	case AdminArea_FieldPathSelectorType:
		return "type"
	case AdminArea_FieldPathSelectorLabelGeometry:
		return "label_geometry"
	case AdminArea_FieldPathSelectorGeometry:
		return "geometry"
	case AdminArea_FieldPathSelectorMetadata:
		return "metadata"
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		return "local_language_names"
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", s))
	}
}

func BuildAdminArea_FieldPath(fp gotenobject.RawFieldPath) (AdminArea_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AdminArea")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorDisplayName}, nil
		case "hierarchy":
			return &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorHierarchy}, nil
		case "type":
			return &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorType}, nil
		case "label_geometry", "labelGeometry", "label-geometry":
			return &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorLabelGeometry}, nil
		case "geometry":
			return &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorGeometry}, nil
		case "metadata":
			return &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorMetadata}, nil
		case "local_language_names", "localLanguageNames", "local-language-names":
			return &AdminArea_FieldTerminalPath{selector: AdminArea_FieldPathSelectorLocalLanguageNames}, nil
		}
	} else {
		switch fp[0] {
		case "hierarchy":
			if subpath, err := BuildAdminHierarchy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AdminArea_FieldSubPath{selector: AdminArea_FieldPathSelectorHierarchy, subPath: subpath}, nil
			}
		case "label_geometry", "labelGeometry", "label-geometry":
			if subpath, err := BuildGeometry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AdminArea_FieldSubPath{selector: AdminArea_FieldPathSelectorLabelGeometry, subPath: subpath}, nil
			}
		case "geometry":
			if subpath, err := BuildGeometry_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AdminArea_FieldSubPath{selector: AdminArea_FieldPathSelectorGeometry, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AdminArea_FieldSubPath{selector: AdminArea_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "local_language_names", "localLanguageNames", "local-language-names":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object AdminArea)", fp)
			}
			return &AdminArea_FieldPathMap{selector: AdminArea_FieldPathSelectorLocalLanguageNames, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AdminArea", fp)
}

func ParseAdminArea_FieldPath(rawField string) (AdminArea_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAdminArea_FieldPath(fp)
}

func MustParseAdminArea_FieldPath(rawField string) AdminArea_FieldPath {
	fp, err := ParseAdminArea_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AdminArea_FieldTerminalPath struct {
	selector AdminArea_FieldPathSelector
}

var _ AdminArea_FieldPath = (*AdminArea_FieldTerminalPath)(nil)

func (fp *AdminArea_FieldTerminalPath) Selector() AdminArea_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AdminArea_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AdminArea_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AdminArea
func (fp *AdminArea_FieldTerminalPath) Get(source *AdminArea) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AdminArea_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case AdminArea_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case AdminArea_FieldPathSelectorHierarchy:
			if source.Hierarchy != nil {
				values = append(values, source.Hierarchy)
			}
		case AdminArea_FieldPathSelectorType:
			values = append(values, source.Type)
		case AdminArea_FieldPathSelectorLabelGeometry:
			if source.LabelGeometry != nil {
				values = append(values, source.LabelGeometry)
			}
		case AdminArea_FieldPathSelectorGeometry:
			if source.Geometry != nil {
				values = append(values, source.Geometry)
			}
		case AdminArea_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case AdminArea_FieldPathSelectorLocalLanguageNames:
			values = append(values, source.LocalLanguageNames)
		default:
			panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fp.selector))
		}
	}
	return
}

func (fp *AdminArea_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AdminArea))
}

// GetSingle returns value pointed by specific field of from source AdminArea
func (fp *AdminArea_FieldTerminalPath) GetSingle(source *AdminArea) (interface{}, bool) {
	switch fp.selector {
	case AdminArea_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case AdminArea_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case AdminArea_FieldPathSelectorHierarchy:
		res := source.GetHierarchy()
		return res, res != nil
	case AdminArea_FieldPathSelectorType:
		return source.GetType(), source != nil
	case AdminArea_FieldPathSelectorLabelGeometry:
		res := source.GetLabelGeometry()
		return res, res != nil
	case AdminArea_FieldPathSelectorGeometry:
		res := source.GetGeometry()
		return res, res != nil
	case AdminArea_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		res := source.GetLocalLanguageNames()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fp.selector))
	}
}

func (fp *AdminArea_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AdminArea))
}

// GetDefault returns a default value of the field type
func (fp *AdminArea_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AdminArea_FieldPathSelectorName:
		return (*Name)(nil)
	case AdminArea_FieldPathSelectorDisplayName:
		return ""
	case AdminArea_FieldPathSelectorHierarchy:
		return (*AdminHierarchy)(nil)
	case AdminArea_FieldPathSelectorType:
		return AdminArea_TYPE_UNSPECIFIED
	case AdminArea_FieldPathSelectorLabelGeometry:
		return (*Geometry)(nil)
	case AdminArea_FieldPathSelectorGeometry:
		return (*Geometry)(nil)
	case AdminArea_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		return (map[string]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fp.selector))
	}
}

func (fp *AdminArea_FieldTerminalPath) ClearValue(item *AdminArea) {
	if item != nil {
		switch fp.selector {
		case AdminArea_FieldPathSelectorName:
			item.Name = nil
		case AdminArea_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case AdminArea_FieldPathSelectorHierarchy:
			item.Hierarchy = nil
		case AdminArea_FieldPathSelectorType:
			item.Type = AdminArea_TYPE_UNSPECIFIED
		case AdminArea_FieldPathSelectorLabelGeometry:
			item.LabelGeometry = nil
		case AdminArea_FieldPathSelectorGeometry:
			item.Geometry = nil
		case AdminArea_FieldPathSelectorMetadata:
			item.Metadata = nil
		case AdminArea_FieldPathSelectorLocalLanguageNames:
			item.LocalLanguageNames = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fp.selector))
		}
	}
}

func (fp *AdminArea_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AdminArea))
}

// IsLeaf - whether field path is holds simple value
func (fp *AdminArea_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AdminArea_FieldPathSelectorName ||
		fp.selector == AdminArea_FieldPathSelectorDisplayName ||
		fp.selector == AdminArea_FieldPathSelectorType ||
		fp.selector == AdminArea_FieldPathSelectorLocalLanguageNames
}

func (fp *AdminArea_FieldTerminalPath) WithIValue(value interface{}) AdminArea_FieldPathValue {
	switch fp.selector {
	case AdminArea_FieldPathSelectorName:
		return &AdminArea_FieldTerminalPathValue{AdminArea_FieldTerminalPath: *fp, value: value.(*Name)}
	case AdminArea_FieldPathSelectorDisplayName:
		return &AdminArea_FieldTerminalPathValue{AdminArea_FieldTerminalPath: *fp, value: value.(string)}
	case AdminArea_FieldPathSelectorHierarchy:
		return &AdminArea_FieldTerminalPathValue{AdminArea_FieldTerminalPath: *fp, value: value.(*AdminHierarchy)}
	case AdminArea_FieldPathSelectorType:
		return &AdminArea_FieldTerminalPathValue{AdminArea_FieldTerminalPath: *fp, value: value.(AdminArea_Type)}
	case AdminArea_FieldPathSelectorLabelGeometry:
		return &AdminArea_FieldTerminalPathValue{AdminArea_FieldTerminalPath: *fp, value: value.(*Geometry)}
	case AdminArea_FieldPathSelectorGeometry:
		return &AdminArea_FieldTerminalPathValue{AdminArea_FieldTerminalPath: *fp, value: value.(*Geometry)}
	case AdminArea_FieldPathSelectorMetadata:
		return &AdminArea_FieldTerminalPathValue{AdminArea_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		return &AdminArea_FieldTerminalPathValue{AdminArea_FieldTerminalPath: *fp, value: value.(map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fp.selector))
	}
}

func (fp *AdminArea_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AdminArea_FieldTerminalPath) WithIArrayOfValues(values interface{}) AdminArea_FieldPathArrayOfValues {
	fpaov := &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp}
	switch fp.selector {
	case AdminArea_FieldPathSelectorName:
		return &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp, values: values.([]*Name)}
	case AdminArea_FieldPathSelectorDisplayName:
		return &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp, values: values.([]string)}
	case AdminArea_FieldPathSelectorHierarchy:
		return &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp, values: values.([]*AdminHierarchy)}
	case AdminArea_FieldPathSelectorType:
		return &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp, values: values.([]AdminArea_Type)}
	case AdminArea_FieldPathSelectorLabelGeometry:
		return &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp, values: values.([]*Geometry)}
	case AdminArea_FieldPathSelectorGeometry:
		return &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp, values: values.([]*Geometry)}
	case AdminArea_FieldPathSelectorMetadata:
		return &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		return &AdminArea_FieldTerminalPathArrayOfValues{AdminArea_FieldTerminalPath: *fp, values: values.([]map[string]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fp.selector))
	}
	return fpaov
}

func (fp *AdminArea_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AdminArea_FieldTerminalPath) WithIArrayItemValue(value interface{}) AdminArea_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fp.selector))
	}
}

func (fp *AdminArea_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type AdminArea_FieldPathMap struct {
	key      string
	selector AdminArea_FieldPathSelector
}

var _ AdminArea_FieldPath = (*AdminArea_FieldPathMap)(nil)

func (fpm *AdminArea_FieldPathMap) Selector() AdminArea_FieldPathSelector {
	return fpm.selector
}

func (fpm *AdminArea_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *AdminArea_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *AdminArea_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source AdminArea
func (fpm *AdminArea_FieldPathMap) Get(source *AdminArea) (values []interface{}) {
	switch fpm.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		if value, ok := source.GetLocalLanguageNames()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpm.selector))
	}
	return
}

func (fpm *AdminArea_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*AdminArea))
}

// GetSingle returns value by selected field map key from source AdminArea
func (fpm *AdminArea_FieldPathMap) GetSingle(source *AdminArea) (interface{}, bool) {
	switch fpm.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		res, ok := source.GetLocalLanguageNames()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpm.selector))
	}
}

func (fpm *AdminArea_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*AdminArea))
}

// GetDefault returns a default value of the field type
func (fpm *AdminArea_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		var v string
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpm.selector))
	}
}

func (fpm *AdminArea_FieldPathMap) ClearValue(item *AdminArea) {
	if item != nil {
		switch fpm.selector {
		case AdminArea_FieldPathSelectorLocalLanguageNames:
			delete(item.LocalLanguageNames, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpm.selector))
		}
	}
}

func (fpm *AdminArea_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*AdminArea))
}

// IsLeaf - whether field path is holds simple value
func (fpm *AdminArea_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpm.selector))
	}
}

func (fpm *AdminArea_FieldPathMap) WithIValue(value interface{}) AdminArea_FieldPathValue {
	switch fpm.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		return &AdminArea_FieldPathMapValue{AdminArea_FieldPathMap: *fpm, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpm.selector))
	}
}

func (fpm *AdminArea_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *AdminArea_FieldPathMap) WithIArrayOfValues(values interface{}) AdminArea_FieldPathArrayOfValues {
	switch fpm.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		return &AdminArea_FieldPathMapArrayOfValues{AdminArea_FieldPathMap: *fpm, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpm.selector))
	}
}

func (fpm *AdminArea_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *AdminArea_FieldPathMap) WithIArrayItemValue(value interface{}) AdminArea_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *AdminArea_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

type AdminArea_FieldSubPath struct {
	selector AdminArea_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AdminArea_FieldPath = (*AdminArea_FieldSubPath)(nil)

func (fps *AdminArea_FieldSubPath) Selector() AdminArea_FieldPathSelector {
	return fps.selector
}
func (fps *AdminArea_FieldSubPath) AsHierarchySubPath() (AdminHierarchy_FieldPath, bool) {
	res, ok := fps.subPath.(AdminHierarchy_FieldPath)
	return res, ok
}
func (fps *AdminArea_FieldSubPath) AsLabelGeometrySubPath() (Geometry_FieldPath, bool) {
	res, ok := fps.subPath.(Geometry_FieldPath)
	return res, ok
}
func (fps *AdminArea_FieldSubPath) AsGeometrySubPath() (Geometry_FieldPath, bool) {
	res, ok := fps.subPath.(Geometry_FieldPath)
	return res, ok
}
func (fps *AdminArea_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AdminArea_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AdminArea_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AdminArea
func (fps *AdminArea_FieldSubPath) Get(source *AdminArea) (values []interface{}) {
	if asAdminHierarchyFieldPath, ok := fps.AsHierarchySubPath(); ok {
		values = append(values, asAdminHierarchyFieldPath.Get(source.GetHierarchy())...)
	} else if asGeometryFieldPath, ok := fps.AsLabelGeometrySubPath(); ok {
		values = append(values, asGeometryFieldPath.Get(source.GetLabelGeometry())...)
	} else if asGeometryFieldPath, ok := fps.AsGeometrySubPath(); ok {
		values = append(values, asGeometryFieldPath.Get(source.GetGeometry())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fps.selector))
	}
	return
}

func (fps *AdminArea_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AdminArea))
}

// GetSingle returns value of selected field from source AdminArea
func (fps *AdminArea_FieldSubPath) GetSingle(source *AdminArea) (interface{}, bool) {
	switch fps.selector {
	case AdminArea_FieldPathSelectorHierarchy:
		if source.GetHierarchy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetHierarchy())
	case AdminArea_FieldPathSelectorLabelGeometry:
		if source.GetLabelGeometry() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLabelGeometry())
	case AdminArea_FieldPathSelectorGeometry:
		if source.GetGeometry() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetGeometry())
	case AdminArea_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fps.selector))
	}
}

func (fps *AdminArea_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AdminArea))
}

// GetDefault returns a default value of the field type
func (fps *AdminArea_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AdminArea_FieldSubPath) ClearValue(item *AdminArea) {
	if item != nil {
		switch fps.selector {
		case AdminArea_FieldPathSelectorHierarchy:
			fps.subPath.ClearValueRaw(item.Hierarchy)
		case AdminArea_FieldPathSelectorLabelGeometry:
			fps.subPath.ClearValueRaw(item.LabelGeometry)
		case AdminArea_FieldPathSelectorGeometry:
			fps.subPath.ClearValueRaw(item.Geometry)
		case AdminArea_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fps.selector))
		}
	}
}

func (fps *AdminArea_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AdminArea))
}

// IsLeaf - whether field path is holds simple value
func (fps *AdminArea_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AdminArea_FieldSubPath) WithIValue(value interface{}) AdminArea_FieldPathValue {
	return &AdminArea_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AdminArea_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AdminArea_FieldSubPath) WithIArrayOfValues(values interface{}) AdminArea_FieldPathArrayOfValues {
	return &AdminArea_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AdminArea_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AdminArea_FieldSubPath) WithIArrayItemValue(value interface{}) AdminArea_FieldPathArrayItemValue {
	return &AdminArea_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AdminArea_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AdminArea_FieldPathValue allows storing values for AdminArea fields according to their type
type AdminArea_FieldPathValue interface {
	AdminArea_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AdminArea)
	CompareWith(*AdminArea) (cmp int, comparable bool)
}

func ParseAdminArea_FieldPathValue(pathStr, valueStr string) (AdminArea_FieldPathValue, error) {
	fp, err := ParseAdminArea_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AdminArea field path value from %s: %v", valueStr, err)
	}
	return fpv.(AdminArea_FieldPathValue), nil
}

func MustParseAdminArea_FieldPathValue(pathStr, valueStr string) AdminArea_FieldPathValue {
	fpv, err := ParseAdminArea_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AdminArea_FieldTerminalPathValue struct {
	AdminArea_FieldTerminalPath
	value interface{}
}

var _ AdminArea_FieldPathValue = (*AdminArea_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AdminArea' as interface{}
func (fpv *AdminArea_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AdminArea_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *AdminArea_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AdminArea_FieldTerminalPathValue) AsHierarchyValue() (*AdminHierarchy, bool) {
	res, ok := fpv.value.(*AdminHierarchy)
	return res, ok
}
func (fpv *AdminArea_FieldTerminalPathValue) AsTypeValue() (AdminArea_Type, bool) {
	res, ok := fpv.value.(AdminArea_Type)
	return res, ok
}
func (fpv *AdminArea_FieldTerminalPathValue) AsLabelGeometryValue() (*Geometry, bool) {
	res, ok := fpv.value.(*Geometry)
	return res, ok
}
func (fpv *AdminArea_FieldTerminalPathValue) AsGeometryValue() (*Geometry, bool) {
	res, ok := fpv.value.(*Geometry)
	return res, ok
}
func (fpv *AdminArea_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *AdminArea_FieldTerminalPathValue) AsLocalLanguageNamesValue() (map[string]string, bool) {
	res, ok := fpv.value.(map[string]string)
	return res, ok
}

// SetTo stores value for selected field for object AdminArea
func (fpv *AdminArea_FieldTerminalPathValue) SetTo(target **AdminArea) {
	if *target == nil {
		*target = new(AdminArea)
	}
	switch fpv.selector {
	case AdminArea_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case AdminArea_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case AdminArea_FieldPathSelectorHierarchy:
		(*target).Hierarchy = fpv.value.(*AdminHierarchy)
	case AdminArea_FieldPathSelectorType:
		(*target).Type = fpv.value.(AdminArea_Type)
	case AdminArea_FieldPathSelectorLabelGeometry:
		(*target).LabelGeometry = fpv.value.(*Geometry)
	case AdminArea_FieldPathSelectorGeometry:
		(*target).Geometry = fpv.value.(*Geometry)
	case AdminArea_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		(*target).LocalLanguageNames = fpv.value.(map[string]string)
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpv.selector))
	}
}

func (fpv *AdminArea_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AdminArea)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AdminArea_FieldTerminalPathValue' with the value under path in 'AdminArea'.
func (fpv *AdminArea_FieldTerminalPathValue) CompareWith(source *AdminArea) (int, bool) {
	switch fpv.selector {
	case AdminArea_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AdminArea_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AdminArea_FieldPathSelectorHierarchy:
		return 0, false
	case AdminArea_FieldPathSelectorType:
		leftValue := fpv.value.(AdminArea_Type)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AdminArea_FieldPathSelectorLabelGeometry:
		return 0, false
	case AdminArea_FieldPathSelectorGeometry:
		return 0, false
	case AdminArea_FieldPathSelectorMetadata:
		return 0, false
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpv.selector))
	}
}

func (fpv *AdminArea_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AdminArea))
}

type AdminArea_FieldPathMapValue struct {
	AdminArea_FieldPathMap
	value interface{}
}

var _ AdminArea_FieldPathValue = (*AdminArea_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in AdminArea as interface{}
func (fpmv *AdminArea_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *AdminArea_FieldPathMapValue) AsLocalLanguageNamesElementValue() (string, bool) {
	res, ok := fpmv.value.(string)
	return res, ok
}

// SetTo stores value for selected field in AdminArea
func (fpmv *AdminArea_FieldPathMapValue) SetTo(target **AdminArea) {
	if *target == nil {
		*target = new(AdminArea)
	}
	switch fpmv.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		if (*target).LocalLanguageNames == nil {
			(*target).LocalLanguageNames = make(map[string]string)
		}
		(*target).LocalLanguageNames[fpmv.key] = fpmv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpmv.selector))
	}
}

func (fpmv *AdminArea_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AdminArea)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AdminArea_FieldPathMapValue' with the value under path in 'AdminArea'.
func (fpmv *AdminArea_FieldPathMapValue) CompareWith(source *AdminArea) (int, bool) {
	switch fpmv.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		leftValue := fpmv.value.(string)
		rightValue := source.GetLocalLanguageNames()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpmv.selector))
	}
}

func (fpmv *AdminArea_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*AdminArea))
}

type AdminArea_FieldSubPathValue struct {
	AdminArea_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AdminArea_FieldPathValue = (*AdminArea_FieldSubPathValue)(nil)

func (fpvs *AdminArea_FieldSubPathValue) AsHierarchyPathValue() (AdminHierarchy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AdminHierarchy_FieldPathValue)
	return res, ok
}
func (fpvs *AdminArea_FieldSubPathValue) AsLabelGeometryPathValue() (Geometry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Geometry_FieldPathValue)
	return res, ok
}
func (fpvs *AdminArea_FieldSubPathValue) AsGeometryPathValue() (Geometry_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Geometry_FieldPathValue)
	return res, ok
}
func (fpvs *AdminArea_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *AdminArea_FieldSubPathValue) SetTo(target **AdminArea) {
	if *target == nil {
		*target = new(AdminArea)
	}
	switch fpvs.Selector() {
	case AdminArea_FieldPathSelectorHierarchy:
		fpvs.subPathValue.(AdminHierarchy_FieldPathValue).SetTo(&(*target).Hierarchy)
	case AdminArea_FieldPathSelectorLabelGeometry:
		fpvs.subPathValue.(Geometry_FieldPathValue).SetTo(&(*target).LabelGeometry)
	case AdminArea_FieldPathSelectorGeometry:
		fpvs.subPathValue.(Geometry_FieldPathValue).SetTo(&(*target).Geometry)
	case AdminArea_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpvs.Selector()))
	}
}

func (fpvs *AdminArea_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AdminArea)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AdminArea_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AdminArea_FieldSubPathValue) CompareWith(source *AdminArea) (int, bool) {
	switch fpvs.Selector() {
	case AdminArea_FieldPathSelectorHierarchy:
		return fpvs.subPathValue.(AdminHierarchy_FieldPathValue).CompareWith(source.GetHierarchy())
	case AdminArea_FieldPathSelectorLabelGeometry:
		return fpvs.subPathValue.(Geometry_FieldPathValue).CompareWith(source.GetLabelGeometry())
	case AdminArea_FieldPathSelectorGeometry:
		return fpvs.subPathValue.(Geometry_FieldPathValue).CompareWith(source.GetGeometry())
	case AdminArea_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpvs.Selector()))
	}
}

func (fpvs *AdminArea_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AdminArea))
}

// AdminArea_FieldPathArrayItemValue allows storing single item in Path-specific values for AdminArea according to their type
// Present only for array (repeated) types.
type AdminArea_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AdminArea_FieldPath
	ContainsValue(*AdminArea) bool
}

// ParseAdminArea_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAdminArea_FieldPathArrayItemValue(pathStr, valueStr string) (AdminArea_FieldPathArrayItemValue, error) {
	fp, err := ParseAdminArea_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AdminArea field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AdminArea_FieldPathArrayItemValue), nil
}

func MustParseAdminArea_FieldPathArrayItemValue(pathStr, valueStr string) AdminArea_FieldPathArrayItemValue {
	fpaiv, err := ParseAdminArea_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AdminArea_FieldTerminalPathArrayItemValue struct {
	AdminArea_FieldTerminalPath
	value interface{}
}

var _ AdminArea_FieldPathArrayItemValue = (*AdminArea_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AdminArea as interface{}
func (fpaiv *AdminArea_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AdminArea_FieldTerminalPathArrayItemValue) GetSingle(source *AdminArea) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AdminArea_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AdminArea))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AdminArea'
func (fpaiv *AdminArea_FieldTerminalPathArrayItemValue) ContainsValue(source *AdminArea) bool {
	slice := fpaiv.AdminArea_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AdminArea_FieldSubPathArrayItemValue struct {
	AdminArea_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AdminArea_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AdminArea_FieldSubPathArrayItemValue) AsHierarchyPathItemValue() (AdminHierarchy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AdminHierarchy_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AdminArea_FieldSubPathArrayItemValue) AsLabelGeometryPathItemValue() (Geometry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Geometry_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AdminArea_FieldSubPathArrayItemValue) AsGeometryPathItemValue() (Geometry_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Geometry_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AdminArea_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AdminArea'
func (fpaivs *AdminArea_FieldSubPathArrayItemValue) ContainsValue(source *AdminArea) bool {
	switch fpaivs.Selector() {
	case AdminArea_FieldPathSelectorHierarchy:
		return fpaivs.subPathItemValue.(AdminHierarchy_FieldPathArrayItemValue).ContainsValue(source.GetHierarchy())
	case AdminArea_FieldPathSelectorLabelGeometry:
		return fpaivs.subPathItemValue.(Geometry_FieldPathArrayItemValue).ContainsValue(source.GetLabelGeometry())
	case AdminArea_FieldPathSelectorGeometry:
		return fpaivs.subPathItemValue.(Geometry_FieldPathArrayItemValue).ContainsValue(source.GetGeometry())
	case AdminArea_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for AdminArea: %d", fpaivs.Selector()))
	}
}

// AdminArea_FieldPathArrayOfValues allows storing slice of values for AdminArea fields according to their type
type AdminArea_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AdminArea_FieldPath
}

func ParseAdminArea_FieldPathArrayOfValues(pathStr, valuesStr string) (AdminArea_FieldPathArrayOfValues, error) {
	fp, err := ParseAdminArea_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AdminArea field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AdminArea_FieldPathArrayOfValues), nil
}

func MustParseAdminArea_FieldPathArrayOfValues(pathStr, valuesStr string) AdminArea_FieldPathArrayOfValues {
	fpaov, err := ParseAdminArea_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AdminArea_FieldTerminalPathArrayOfValues struct {
	AdminArea_FieldTerminalPath
	values interface{}
}

var _ AdminArea_FieldPathArrayOfValues = (*AdminArea_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AdminArea_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case AdminArea_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AdminArea_FieldPathSelectorHierarchy:
		for _, v := range fpaov.values.([]*AdminHierarchy) {
			values = append(values, v)
		}
	case AdminArea_FieldPathSelectorType:
		for _, v := range fpaov.values.([]AdminArea_Type) {
			values = append(values, v)
		}
	case AdminArea_FieldPathSelectorLabelGeometry:
		for _, v := range fpaov.values.([]*Geometry) {
			values = append(values, v)
		}
	case AdminArea_FieldPathSelectorGeometry:
		for _, v := range fpaov.values.([]*Geometry) {
			values = append(values, v)
		}
	case AdminArea_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		for _, v := range fpaov.values.([]map[string]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) AsHierarchyArrayOfValues() ([]*AdminHierarchy, bool) {
	res, ok := fpaov.values.([]*AdminHierarchy)
	return res, ok
}
func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]AdminArea_Type, bool) {
	res, ok := fpaov.values.([]AdminArea_Type)
	return res, ok
}
func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) AsLabelGeometryArrayOfValues() ([]*Geometry, bool) {
	res, ok := fpaov.values.([]*Geometry)
	return res, ok
}
func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) AsGeometryArrayOfValues() ([]*Geometry, bool) {
	res, ok := fpaov.values.([]*Geometry)
	return res, ok
}
func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *AdminArea_FieldTerminalPathArrayOfValues) AsLocalLanguageNamesArrayOfValues() ([]map[string]string, bool) {
	res, ok := fpaov.values.([]map[string]string)
	return res, ok
}

type AdminArea_FieldPathMapArrayOfValues struct {
	AdminArea_FieldPathMap
	values interface{}
}

var _ AdminArea_FieldPathArrayOfValues = (*AdminArea_FieldPathMapArrayOfValues)(nil)

func (fpmaov *AdminArea_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case AdminArea_FieldPathSelectorLocalLanguageNames:
		for _, v := range fpmaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *AdminArea_FieldPathMapArrayOfValues) AsLocalLanguageNamesArrayOfElementValues() ([]string, bool) {
	res, ok := fpmaov.values.([]string)
	return res, ok
}

type AdminArea_FieldSubPathArrayOfValues struct {
	AdminArea_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AdminArea_FieldPathArrayOfValues = (*AdminArea_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AdminArea_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AdminArea_FieldSubPathArrayOfValues) AsHierarchyPathArrayOfValues() (AdminHierarchy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AdminHierarchy_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AdminArea_FieldSubPathArrayOfValues) AsLabelGeometryPathArrayOfValues() (Geometry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Geometry_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AdminArea_FieldSubPathArrayOfValues) AsGeometryPathArrayOfValues() (Geometry_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Geometry_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AdminArea_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
