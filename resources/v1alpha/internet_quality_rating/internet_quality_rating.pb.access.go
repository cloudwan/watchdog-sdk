// Code generated by protoc-gen-goten-resource
// Resource: InternetQualityRating
// DO NOT EDIT!!!

package internet_quality_rating

import (
	"context"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probe"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = context.Context(nil)

	_ = codes.Internal
	_ = status.Status{}

	_ = watch_type.WatchType_STATEFUL
	_ = gotenobject.FieldPath(nil)
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &timestamp.Timestamp{}
	_ = &probe.Probe{}
)

type InternetQualityRatingAccess interface {
	GetInternetQualityRating(context.Context, *GetQuery) (*InternetQualityRating, error)
	BatchGetInternetQualityRatings(context.Context, []*Reference, ...gotenresource.BatchGetOption) error
	QueryInternetQualityRatings(context.Context, *ListQuery) (*QueryResultSnapshot, error)
	WatchInternetQualityRating(context.Context, *GetQuery, func(*InternetQualityRatingChange) error) error
	WatchInternetQualityRatings(context.Context, *WatchQuery, func(*QueryResultChange) error) error
	SaveInternetQualityRating(context.Context, *InternetQualityRating, ...gotenresource.SaveOption) error
	DeleteInternetQualityRating(context.Context, *Reference, ...gotenresource.DeleteOption) error
}

type anyCastAccess struct {
	InternetQualityRatingAccess
}

func AsAnyCastAccess(access InternetQualityRatingAccess) gotenresource.Access {
	return &anyCastAccess{InternetQualityRatingAccess: access}
}

func (a *anyCastAccess) Get(ctx context.Context, q gotenresource.GetQuery) (gotenresource.Resource, error) {
	if asInternetQualityRatingQuery, ok := q.(*GetQuery); ok {
		return a.GetInternetQualityRating(ctx, asInternetQualityRatingQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected InternetQualityRating, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Query(ctx context.Context, q gotenresource.ListQuery) (gotenresource.QueryResultSnapshot, error) {
	if asInternetQualityRatingQuery, ok := q.(*ListQuery); ok {
		return a.QueryInternetQualityRatings(ctx, asInternetQualityRatingQuery)
	}
	return nil, status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected InternetQualityRating, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Search(ctx context.Context, q gotenresource.SearchQuery) (gotenresource.SearchQueryResultSnapshot, error) {
	return nil, status.Errorf(codes.Internal, "Search is not available for InternetQualityRating")
}

func (a *anyCastAccess) Watch(ctx context.Context, q gotenresource.GetQuery, cb func(ch gotenresource.ResourceChange) error) error {
	if asInternetQualityRatingQuery, ok := q.(*GetQuery); ok {
		return a.WatchInternetQualityRating(ctx, asInternetQualityRatingQuery, func(change *InternetQualityRatingChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected InternetQualityRating, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) WatchQuery(ctx context.Context, q gotenresource.WatchQuery, cb func(ch gotenresource.QueryResultChange) error) error {
	if asInternetQualityRatingQuery, ok := q.(*WatchQuery); ok {
		return a.WatchInternetQualityRatings(ctx, asInternetQualityRatingQuery, func(change *QueryResultChange) error {
			return cb(change)
		})
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected InternetQualityRating, got: %s",
		q.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Save(ctx context.Context, res gotenresource.Resource, opts ...gotenresource.SaveOption) error {
	if asInternetQualityRatingRes, ok := res.(*InternetQualityRating); ok {
		return a.SaveInternetQualityRating(ctx, asInternetQualityRatingRes, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected InternetQualityRating, got: %s",
		res.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) Delete(ctx context.Context, ref gotenresource.Reference, opts ...gotenresource.DeleteOption) error {
	if asInternetQualityRatingRef, ok := ref.(*Reference); ok {
		return a.DeleteInternetQualityRating(ctx, asInternetQualityRatingRef, opts...)
	}
	return status.Errorf(codes.Internal,
		"Unrecognized descriptor, expected InternetQualityRating, got: %s",
		ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
}

func (a *anyCastAccess) BatchGet(ctx context.Context, toGet []gotenresource.Reference, opts ...gotenresource.BatchGetOption) error {
	internetQualityRatingRefs := make([]*Reference, 0, len(toGet))
	for _, ref := range toGet {
		if asInternetQualityRatingRef, ok := ref.(*Reference); !ok {
			return status.Errorf(codes.Internal,
				"Unrecognized descriptor, expected InternetQualityRating, got: %s",
				ref.GetResourceDescriptor().GetResourceTypeName().FullyQualifiedTypeName())
		} else {
			internetQualityRatingRefs = append(internetQualityRatingRefs, asInternetQualityRatingRef)
		}
	}
	return a.BatchGetInternetQualityRatings(ctx, internetQualityRatingRefs, opts...)
}

func (a *anyCastAccess) GetResourceDescriptors() []gotenresource.Descriptor {
	return []gotenresource.Descriptor{
		GetDescriptor(),
	}
}
