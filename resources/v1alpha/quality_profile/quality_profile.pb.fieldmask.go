// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/quality_profile.proto
// DO NOT EDIT!!!

package quality_profile

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &project.Project{}
)

type Profile_FieldMask struct {
	Paths []Profile_FieldPath
}

func FullProfile_FieldMask() *Profile_FieldMask {
	res := &Profile_FieldMask{}
	res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorMetricThresholds})
	res.Paths = append(res.Paths, &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorOverrides})
	return res
}

func (fieldMask *Profile_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Profile_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Profile_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProfile_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Profile_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Profile_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Profile_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProfile_FieldPath(raw)
	})
}

func (fieldMask *Profile_FieldMask) ProtoMessage() {}

func (fieldMask *Profile_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Profile_FieldMask) Subtract(other *Profile_FieldMask) *Profile_FieldMask {
	result := &Profile_FieldMask{}
	removedSelectors := make([]bool, 5)
	otherSubMasks := map[Profile_FieldPathSelector]gotenobject.FieldMask{
		Profile_FieldPathSelectorFilter:           &Profile_Filter_FieldMask{},
		Profile_FieldPathSelectorMetricThresholds: &Profile_MetricThreshold_FieldMask{},
		Profile_FieldPathSelectorOverrides:        &Profile_FieldMask{},
	}
	mySubMasks := map[Profile_FieldPathSelector]gotenobject.FieldMask{
		Profile_FieldPathSelectorFilter:           &Profile_Filter_FieldMask{},
		Profile_FieldPathSelectorMetricThresholds: &Profile_MetricThreshold_FieldMask{},
		Profile_FieldPathSelectorOverrides:        &Profile_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Profile_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Profile_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Profile_FieldTerminalPath); ok {
					switch tp.selector {
					case Profile_FieldPathSelectorFilter:
						mySubMasks[Profile_FieldPathSelectorFilter] = FullProfile_Filter_FieldMask()
					case Profile_FieldPathSelectorMetricThresholds:
						mySubMasks[Profile_FieldPathSelectorMetricThresholds] = FullProfile_MetricThreshold_FieldMask()
					case Profile_FieldPathSelectorOverrides:
						mySubMasks[Profile_FieldPathSelectorOverrides] = FullProfile_FieldMask()
					}
				} else if tp, ok := path.(*Profile_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Profile_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Profile_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Profile_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Profile_FieldMask) FilterInputFields() *Profile_FieldMask {
	result := &Profile_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Profile_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Profile_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Profile_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProfile_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Profile_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Profile_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Profile_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Profile_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Profile_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Profile_FieldMask) AppendPath(path Profile_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Profile_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Profile_FieldPath))
}

func (fieldMask *Profile_FieldMask) GetPaths() []Profile_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Profile_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Profile_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProfile_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Profile_FieldMask) Set(target, source *Profile) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Profile_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Profile), source.(*Profile))
}

func (fieldMask *Profile_FieldMask) Project(source *Profile) *Profile {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Profile{}
	filterMask := &Profile_Filter_FieldMask{}
	wholeFilterAccepted := false
	metricThresholdsMask := &Profile_MetricThreshold_FieldMask{}
	wholeMetricThresholdsAccepted := false
	overridesMask := &Profile_FieldMask{}
	wholeOverridesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Profile_FieldTerminalPath:
			switch tp.selector {
			case Profile_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case Profile_FieldPathSelectorDescription:
				result.Description = source.Description
			case Profile_FieldPathSelectorFilter:
				result.Filter = source.Filter
				wholeFilterAccepted = true
			case Profile_FieldPathSelectorMetricThresholds:
				result.MetricThresholds = source.MetricThresholds
				wholeMetricThresholdsAccepted = true
			case Profile_FieldPathSelectorOverrides:
				result.Overrides = source.Overrides
				wholeOverridesAccepted = true
			}
		case *Profile_FieldSubPath:
			switch tp.selector {
			case Profile_FieldPathSelectorFilter:
				filterMask.AppendPath(tp.subPath.(ProfileFilter_FieldPath))
			case Profile_FieldPathSelectorMetricThresholds:
				metricThresholdsMask.AppendPath(tp.subPath.(ProfileMetricThreshold_FieldPath))
			case Profile_FieldPathSelectorOverrides:
				overridesMask.AppendPath(tp.subPath.(Profile_FieldPath))
			}
		}
	}
	if wholeFilterAccepted == false && len(filterMask.Paths) > 0 {
		result.Filter = filterMask.Project(source.GetFilter())
	}
	if wholeMetricThresholdsAccepted == false && len(metricThresholdsMask.Paths) > 0 {
		for _, sourceItem := range source.GetMetricThresholds() {
			result.MetricThresholds = append(result.MetricThresholds, metricThresholdsMask.Project(sourceItem))
		}
	}
	if wholeOverridesAccepted == false && len(overridesMask.Paths) > 0 {
		for _, sourceItem := range source.GetOverrides() {
			result.Overrides = append(result.Overrides, overridesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Profile_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Profile))
}

func (fieldMask *Profile_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Profile_Location_FieldMask struct {
	Paths []ProfileLocation_FieldPath
}

func FullProfile_Location_FieldMask() *Profile_Location_FieldMask {
	res := &Profile_Location_FieldMask{}
	res.Paths = append(res.Paths, &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorCountryName})
	res.Paths = append(res.Paths, &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name})
	res.Paths = append(res.Paths, &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name})
	res.Paths = append(res.Paths, &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name})
	return res
}

func (fieldMask *Profile_Location_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Profile_Location_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Profile_Location_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProfileLocation_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Profile_Location_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 4)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProfileLocation_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Profile_Location_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProfileLocation_FieldPath(raw)
	})
}

func (fieldMask *Profile_Location_FieldMask) ProtoMessage() {}

func (fieldMask *Profile_Location_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Profile_Location_FieldMask) Subtract(other *Profile_Location_FieldMask) *Profile_Location_FieldMask {
	result := &Profile_Location_FieldMask{}
	removedSelectors := make([]bool, 4)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProfileLocation_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Profile_Location_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Profile_Location_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Profile_Location_FieldMask) FilterInputFields() *Profile_Location_FieldMask {
	result := &Profile_Location_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Profile_Location_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Profile_Location_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProfileLocation_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProfileLocation_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Profile_Location_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Profile_Location_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Profile_Location_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Profile_Location_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Profile_Location_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Profile_Location_FieldMask) AppendPath(path ProfileLocation_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Profile_Location_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProfileLocation_FieldPath))
}

func (fieldMask *Profile_Location_FieldMask) GetPaths() []ProfileLocation_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Profile_Location_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Profile_Location_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProfileLocation_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Profile_Location_FieldMask) Set(target, source *Profile_Location) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Profile_Location_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Profile_Location), source.(*Profile_Location))
}

func (fieldMask *Profile_Location_FieldMask) Project(source *Profile_Location) *Profile_Location {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Profile_Location{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProfileLocation_FieldTerminalPath:
			switch tp.selector {
			case ProfileLocation_FieldPathSelectorCountryName:
				result.CountryName = source.CountryName
			case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
				result.AdministrativeAreaLevel1Name = source.AdministrativeAreaLevel1Name
			case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
				result.AdministrativeAreaLevel2Name = source.AdministrativeAreaLevel2Name
			case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
				result.AdministrativeAreaLevel3Name = source.AdministrativeAreaLevel3Name
			}
		}
	}
	return result
}

func (fieldMask *Profile_Location_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Profile_Location))
}

func (fieldMask *Profile_Location_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Profile_Filter_FieldMask struct {
	Paths []ProfileFilter_FieldPath
}

func FullProfile_Filter_FieldMask() *Profile_Filter_FieldMask {
	res := &Profile_Filter_FieldMask{}
	res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorSourceLocations})
	res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorSourceAsnNames})
	res.Paths = append(res.Paths, &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorTargets})
	return res
}

func (fieldMask *Profile_Filter_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Profile_Filter_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Profile_Filter_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProfileFilter_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Profile_Filter_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProfileFilter_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Profile_Filter_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProfileFilter_FieldPath(raw)
	})
}

func (fieldMask *Profile_Filter_FieldMask) ProtoMessage() {}

func (fieldMask *Profile_Filter_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Profile_Filter_FieldMask) Subtract(other *Profile_Filter_FieldMask) *Profile_Filter_FieldMask {
	result := &Profile_Filter_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ProfileFilter_FieldPathSelector]gotenobject.FieldMask{
		ProfileFilter_FieldPathSelectorSourceLocations: &Profile_Location_FieldMask{},
	}
	mySubMasks := map[ProfileFilter_FieldPathSelector]gotenobject.FieldMask{
		ProfileFilter_FieldPathSelectorSourceLocations: &Profile_Location_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProfileFilter_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ProfileFilter_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ProfileFilter_FieldTerminalPath); ok {
					switch tp.selector {
					case ProfileFilter_FieldPathSelectorSourceLocations:
						mySubMasks[ProfileFilter_FieldPathSelectorSourceLocations] = FullProfile_Location_FieldMask()
					}
				} else if tp, ok := path.(*ProfileFilter_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ProfileFilter_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Profile_Filter_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Profile_Filter_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Profile_Filter_FieldMask) FilterInputFields() *Profile_Filter_FieldMask {
	result := &Profile_Filter_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Profile_Filter_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Profile_Filter_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProfileFilter_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProfileFilter_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Profile_Filter_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Profile_Filter_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Profile_Filter_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Profile_Filter_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Profile_Filter_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Profile_Filter_FieldMask) AppendPath(path ProfileFilter_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Profile_Filter_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProfileFilter_FieldPath))
}

func (fieldMask *Profile_Filter_FieldMask) GetPaths() []ProfileFilter_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Profile_Filter_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Profile_Filter_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProfileFilter_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Profile_Filter_FieldMask) Set(target, source *Profile_Filter) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Profile_Filter_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Profile_Filter), source.(*Profile_Filter))
}

func (fieldMask *Profile_Filter_FieldMask) Project(source *Profile_Filter) *Profile_Filter {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Profile_Filter{}
	sourceLocationsMask := &Profile_Location_FieldMask{}
	wholeSourceLocationsAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProfileFilter_FieldTerminalPath:
			switch tp.selector {
			case ProfileFilter_FieldPathSelectorSourceLocations:
				result.SourceLocations = source.SourceLocations
				wholeSourceLocationsAccepted = true
			case ProfileFilter_FieldPathSelectorSourceAsnNames:
				result.SourceAsnNames = source.SourceAsnNames
			case ProfileFilter_FieldPathSelectorTargets:
				result.Targets = source.Targets
			}
		case *ProfileFilter_FieldSubPath:
			switch tp.selector {
			case ProfileFilter_FieldPathSelectorSourceLocations:
				sourceLocationsMask.AppendPath(tp.subPath.(ProfileLocation_FieldPath))
			}
		}
	}
	if wholeSourceLocationsAccepted == false && len(sourceLocationsMask.Paths) > 0 {
		for _, sourceItem := range source.GetSourceLocations() {
			result.SourceLocations = append(result.SourceLocations, sourceLocationsMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Profile_Filter_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Profile_Filter))
}

func (fieldMask *Profile_Filter_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Profile_MetricThreshold_FieldMask struct {
	Paths []ProfileMetricThreshold_FieldPath
}

func FullProfile_MetricThreshold_FieldMask() *Profile_MetricThreshold_FieldMask {
	res := &Profile_MetricThreshold_FieldMask{}
	res.Paths = append(res.Paths, &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorAggregationReducer})
	res.Paths = append(res.Paths, &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorMetricType})
	res.Paths = append(res.Paths, &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorValue})
	return res
}

func (fieldMask *Profile_MetricThreshold_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Profile_MetricThreshold_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Profile_MetricThreshold_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseProfileMetricThreshold_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Profile_MetricThreshold_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ProfileMetricThreshold_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Profile_MetricThreshold_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseProfileMetricThreshold_FieldPath(raw)
	})
}

func (fieldMask *Profile_MetricThreshold_FieldMask) ProtoMessage() {}

func (fieldMask *Profile_MetricThreshold_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Profile_MetricThreshold_FieldMask) Subtract(other *Profile_MetricThreshold_FieldMask) *Profile_MetricThreshold_FieldMask {
	result := &Profile_MetricThreshold_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ProfileMetricThreshold_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Profile_MetricThreshold_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Profile_MetricThreshold_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Profile_MetricThreshold_FieldMask) FilterInputFields() *Profile_MetricThreshold_FieldMask {
	result := &Profile_MetricThreshold_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Profile_MetricThreshold_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Profile_MetricThreshold_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ProfileMetricThreshold_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseProfileMetricThreshold_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Profile_MetricThreshold_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Profile_MetricThreshold_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Profile_MetricThreshold_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Profile_MetricThreshold_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Profile_MetricThreshold_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Profile_MetricThreshold_FieldMask) AppendPath(path ProfileMetricThreshold_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Profile_MetricThreshold_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ProfileMetricThreshold_FieldPath))
}

func (fieldMask *Profile_MetricThreshold_FieldMask) GetPaths() []ProfileMetricThreshold_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Profile_MetricThreshold_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Profile_MetricThreshold_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseProfileMetricThreshold_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Profile_MetricThreshold_FieldMask) Set(target, source *Profile_MetricThreshold) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Profile_MetricThreshold_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Profile_MetricThreshold), source.(*Profile_MetricThreshold))
}

func (fieldMask *Profile_MetricThreshold_FieldMask) Project(source *Profile_MetricThreshold) *Profile_MetricThreshold {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Profile_MetricThreshold{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ProfileMetricThreshold_FieldTerminalPath:
			switch tp.selector {
			case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
				result.AggregationReducer = source.AggregationReducer
			case ProfileMetricThreshold_FieldPathSelectorMetricType:
				result.MetricType = source.MetricType
			case ProfileMetricThreshold_FieldPathSelectorValue:
				result.Value = source.Value
			}
		}
	}
	return result
}

func (fieldMask *Profile_MetricThreshold_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Profile_MetricThreshold))
}

func (fieldMask *Profile_MetricThreshold_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type QualityProfile_FieldMask struct {
	Paths []QualityProfile_FieldPath
}

func FullQualityProfile_FieldMask() *QualityProfile_FieldMask {
	res := &QualityProfile_FieldMask{}
	res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorName})
	res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorDisplayName})
	res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorDescription})
	res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorSourceProject})
	res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorProfiles})
	res.Paths = append(res.Paths, &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorMetadata})
	return res
}

func (fieldMask *QualityProfile_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *QualityProfile_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *QualityProfile_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseQualityProfile_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *QualityProfile_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 6)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*QualityProfile_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *QualityProfile_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseQualityProfile_FieldPath(raw)
	})
}

func (fieldMask *QualityProfile_FieldMask) ProtoMessage() {}

func (fieldMask *QualityProfile_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *QualityProfile_FieldMask) Subtract(other *QualityProfile_FieldMask) *QualityProfile_FieldMask {
	result := &QualityProfile_FieldMask{}
	removedSelectors := make([]bool, 6)
	otherSubMasks := map[QualityProfile_FieldPathSelector]gotenobject.FieldMask{
		QualityProfile_FieldPathSelectorProfiles: &Profile_FieldMask{},
		QualityProfile_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
	}
	mySubMasks := map[QualityProfile_FieldPathSelector]gotenobject.FieldMask{
		QualityProfile_FieldPathSelectorProfiles: &Profile_FieldMask{},
		QualityProfile_FieldPathSelectorMetadata: &ntt_meta.Meta_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *QualityProfile_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *QualityProfile_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*QualityProfile_FieldTerminalPath); ok {
					switch tp.selector {
					case QualityProfile_FieldPathSelectorProfiles:
						mySubMasks[QualityProfile_FieldPathSelectorProfiles] = FullProfile_FieldMask()
					case QualityProfile_FieldPathSelectorMetadata:
						mySubMasks[QualityProfile_FieldPathSelectorMetadata] = ntt_meta.FullMeta_FieldMask()
					}
				} else if tp, ok := path.(*QualityProfile_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &QualityProfile_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *QualityProfile_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*QualityProfile_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *QualityProfile_FieldMask) FilterInputFields() *QualityProfile_FieldMask {
	result := &QualityProfile_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case QualityProfile_FieldPathSelectorMetadata:
			if _, ok := path.(*QualityProfile_FieldTerminalPath); ok {
				for _, subpath := range ntt_meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &QualityProfile_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*QualityProfile_FieldSubPath); ok {
				selectedMask := &ntt_meta.Meta_FieldMask{
					Paths: []ntt_meta.Meta_FieldPath{sub.subPath.(ntt_meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &QualityProfile_FieldSubPath{selector: QualityProfile_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *QualityProfile_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *QualityProfile_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]QualityProfile_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseQualityProfile_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask QualityProfile_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *QualityProfile_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *QualityProfile_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask QualityProfile_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *QualityProfile_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *QualityProfile_FieldMask) AppendPath(path QualityProfile_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *QualityProfile_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(QualityProfile_FieldPath))
}

func (fieldMask *QualityProfile_FieldMask) GetPaths() []QualityProfile_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *QualityProfile_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *QualityProfile_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseQualityProfile_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *QualityProfile_FieldMask) Set(target, source *QualityProfile) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *QualityProfile_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*QualityProfile), source.(*QualityProfile))
}

func (fieldMask *QualityProfile_FieldMask) Project(source *QualityProfile) *QualityProfile {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &QualityProfile{}
	profilesMask := &Profile_FieldMask{}
	wholeProfilesAccepted := false
	metadataMask := &ntt_meta.Meta_FieldMask{}
	wholeMetadataAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *QualityProfile_FieldTerminalPath:
			switch tp.selector {
			case QualityProfile_FieldPathSelectorName:
				result.Name = source.Name
			case QualityProfile_FieldPathSelectorDisplayName:
				result.DisplayName = source.DisplayName
			case QualityProfile_FieldPathSelectorDescription:
				result.Description = source.Description
			case QualityProfile_FieldPathSelectorSourceProject:
				result.SourceProject = source.SourceProject
			case QualityProfile_FieldPathSelectorProfiles:
				result.Profiles = source.Profiles
				wholeProfilesAccepted = true
			case QualityProfile_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			}
		case *QualityProfile_FieldSubPath:
			switch tp.selector {
			case QualityProfile_FieldPathSelectorProfiles:
				profilesMask.AppendPath(tp.subPath.(Profile_FieldPath))
			case QualityProfile_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(ntt_meta.Meta_FieldPath))
			}
		}
	}
	if wholeProfilesAccepted == false && len(profilesMask.Paths) > 0 {
		for _, sourceItem := range source.GetProfiles() {
			result.Profiles = append(result.Profiles, profilesMask.Project(sourceItem))
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	return result
}

func (fieldMask *QualityProfile_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*QualityProfile))
}

func (fieldMask *QualityProfile_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
