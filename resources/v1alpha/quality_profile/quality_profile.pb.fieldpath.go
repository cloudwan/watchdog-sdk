// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/quality_profile.proto
// DO NOT EDIT!!!

package quality_profile

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	monitoring_common "github.com/cloudwan/edgelq-sdk/monitoring/common/v3"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &monitoring_common.LabelDescriptor{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Profile_FieldPath interface {
	gotenobject.FieldPath
	Selector() Profile_FieldPathSelector
	Get(source *Profile) []interface{}
	GetSingle(source *Profile) (interface{}, bool)
	ClearValue(item *Profile)

	// Those methods build corresponding Profile_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Profile_FieldPathValue
	WithIArrayOfValues(values interface{}) Profile_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Profile_FieldPathArrayItemValue
}

type Profile_FieldPathSelector int32

const (
	Profile_FieldPathSelectorDisplayName      Profile_FieldPathSelector = 0
	Profile_FieldPathSelectorDescription      Profile_FieldPathSelector = 1
	Profile_FieldPathSelectorFilter           Profile_FieldPathSelector = 2
	Profile_FieldPathSelectorMetricThresholds Profile_FieldPathSelector = 3
	Profile_FieldPathSelectorOverrides        Profile_FieldPathSelector = 4
)

func (s Profile_FieldPathSelector) String() string {
	switch s {
	case Profile_FieldPathSelectorDisplayName:
		return "display_name"
	case Profile_FieldPathSelectorDescription:
		return "description"
	case Profile_FieldPathSelectorFilter:
		return "filter"
	case Profile_FieldPathSelectorMetricThresholds:
		return "metric_thresholds"
	case Profile_FieldPathSelectorOverrides:
		return "overrides"
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", s))
	}
}

func BuildProfile_FieldPath(fp gotenobject.RawFieldPath) (Profile_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Profile")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "display_name", "displayName", "display-name":
			return &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorDisplayName}, nil
		case "description":
			return &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorDescription}, nil
		case "filter":
			return &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorFilter}, nil
		case "metric_thresholds", "metricThresholds", "metric-thresholds":
			return &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorMetricThresholds}, nil
		case "overrides":
			return &Profile_FieldTerminalPath{selector: Profile_FieldPathSelectorOverrides}, nil
		}
	} else {
		switch fp[0] {
		case "filter":
			if subpath, err := BuildProfileFilter_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Profile_FieldSubPath{selector: Profile_FieldPathSelectorFilter, subPath: subpath}, nil
			}
		case "metric_thresholds", "metricThresholds", "metric-thresholds":
			if subpath, err := BuildProfileMetricThreshold_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Profile_FieldSubPath{selector: Profile_FieldPathSelectorMetricThresholds, subPath: subpath}, nil
			}
		case "overrides":
			if subpath, err := BuildProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Profile_FieldSubPath{selector: Profile_FieldPathSelectorOverrides, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Profile", fp)
}

func ParseProfile_FieldPath(rawField string) (Profile_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProfile_FieldPath(fp)
}

func MustParseProfile_FieldPath(rawField string) Profile_FieldPath {
	fp, err := ParseProfile_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Profile_FieldTerminalPath struct {
	selector Profile_FieldPathSelector
}

var _ Profile_FieldPath = (*Profile_FieldTerminalPath)(nil)

func (fp *Profile_FieldTerminalPath) Selector() Profile_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Profile_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Profile_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Profile
func (fp *Profile_FieldTerminalPath) Get(source *Profile) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Profile_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Profile_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case Profile_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case Profile_FieldPathSelectorMetricThresholds:
			for _, value := range source.GetMetricThresholds() {
				values = append(values, value)
			}
		case Profile_FieldPathSelectorOverrides:
			for _, value := range source.GetOverrides() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Profile: %d", fp.selector))
		}
	}
	return
}

func (fp *Profile_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Profile))
}

// GetSingle returns value pointed by specific field of from source Profile
func (fp *Profile_FieldTerminalPath) GetSingle(source *Profile) (interface{}, bool) {
	switch fp.selector {
	case Profile_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Profile_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case Profile_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case Profile_FieldPathSelectorMetricThresholds:
		res := source.GetMetricThresholds()
		return res, res != nil
	case Profile_FieldPathSelectorOverrides:
		res := source.GetOverrides()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fp.selector))
	}
}

func (fp *Profile_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Profile))
}

// GetDefault returns a default value of the field type
func (fp *Profile_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Profile_FieldPathSelectorDisplayName:
		return ""
	case Profile_FieldPathSelectorDescription:
		return ""
	case Profile_FieldPathSelectorFilter:
		return (*Profile_Filter)(nil)
	case Profile_FieldPathSelectorMetricThresholds:
		return ([]*Profile_MetricThreshold)(nil)
	case Profile_FieldPathSelectorOverrides:
		return ([]*Profile)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fp.selector))
	}
}

func (fp *Profile_FieldTerminalPath) ClearValue(item *Profile) {
	if item != nil {
		switch fp.selector {
		case Profile_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Profile_FieldPathSelectorDescription:
			item.Description = ""
		case Profile_FieldPathSelectorFilter:
			item.Filter = nil
		case Profile_FieldPathSelectorMetricThresholds:
			item.MetricThresholds = nil
		case Profile_FieldPathSelectorOverrides:
			item.Overrides = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Profile: %d", fp.selector))
		}
	}
}

func (fp *Profile_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Profile))
}

// IsLeaf - whether field path is holds simple value
func (fp *Profile_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Profile_FieldPathSelectorDisplayName ||
		fp.selector == Profile_FieldPathSelectorDescription
}

func (fp *Profile_FieldTerminalPath) WithIValue(value interface{}) Profile_FieldPathValue {
	switch fp.selector {
	case Profile_FieldPathSelectorDisplayName:
		return &Profile_FieldTerminalPathValue{Profile_FieldTerminalPath: *fp, value: value.(string)}
	case Profile_FieldPathSelectorDescription:
		return &Profile_FieldTerminalPathValue{Profile_FieldTerminalPath: *fp, value: value.(string)}
	case Profile_FieldPathSelectorFilter:
		return &Profile_FieldTerminalPathValue{Profile_FieldTerminalPath: *fp, value: value.(*Profile_Filter)}
	case Profile_FieldPathSelectorMetricThresholds:
		return &Profile_FieldTerminalPathValue{Profile_FieldTerminalPath: *fp, value: value.([]*Profile_MetricThreshold)}
	case Profile_FieldPathSelectorOverrides:
		return &Profile_FieldTerminalPathValue{Profile_FieldTerminalPath: *fp, value: value.([]*Profile)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fp.selector))
	}
}

func (fp *Profile_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Profile_FieldTerminalPath) WithIArrayOfValues(values interface{}) Profile_FieldPathArrayOfValues {
	fpaov := &Profile_FieldTerminalPathArrayOfValues{Profile_FieldTerminalPath: *fp}
	switch fp.selector {
	case Profile_FieldPathSelectorDisplayName:
		return &Profile_FieldTerminalPathArrayOfValues{Profile_FieldTerminalPath: *fp, values: values.([]string)}
	case Profile_FieldPathSelectorDescription:
		return &Profile_FieldTerminalPathArrayOfValues{Profile_FieldTerminalPath: *fp, values: values.([]string)}
	case Profile_FieldPathSelectorFilter:
		return &Profile_FieldTerminalPathArrayOfValues{Profile_FieldTerminalPath: *fp, values: values.([]*Profile_Filter)}
	case Profile_FieldPathSelectorMetricThresholds:
		return &Profile_FieldTerminalPathArrayOfValues{Profile_FieldTerminalPath: *fp, values: values.([][]*Profile_MetricThreshold)}
	case Profile_FieldPathSelectorOverrides:
		return &Profile_FieldTerminalPathArrayOfValues{Profile_FieldTerminalPath: *fp, values: values.([][]*Profile)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fp.selector))
	}
	return fpaov
}

func (fp *Profile_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Profile_FieldTerminalPath) WithIArrayItemValue(value interface{}) Profile_FieldPathArrayItemValue {
	switch fp.selector {
	case Profile_FieldPathSelectorMetricThresholds:
		return &Profile_FieldTerminalPathArrayItemValue{Profile_FieldTerminalPath: *fp, value: value.(*Profile_MetricThreshold)}
	case Profile_FieldPathSelectorOverrides:
		return &Profile_FieldTerminalPathArrayItemValue{Profile_FieldTerminalPath: *fp, value: value.(*Profile)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fp.selector))
	}
}

func (fp *Profile_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Profile_FieldSubPath struct {
	selector Profile_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Profile_FieldPath = (*Profile_FieldSubPath)(nil)

func (fps *Profile_FieldSubPath) Selector() Profile_FieldPathSelector {
	return fps.selector
}
func (fps *Profile_FieldSubPath) AsFilterSubPath() (ProfileFilter_FieldPath, bool) {
	res, ok := fps.subPath.(ProfileFilter_FieldPath)
	return res, ok
}
func (fps *Profile_FieldSubPath) AsMetricThresholdsSubPath() (ProfileMetricThreshold_FieldPath, bool) {
	res, ok := fps.subPath.(ProfileMetricThreshold_FieldPath)
	return res, ok
}
func (fps *Profile_FieldSubPath) AsOverridesSubPath() (Profile_FieldPath, bool) {
	res, ok := fps.subPath.(Profile_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Profile_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Profile_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Profile
func (fps *Profile_FieldSubPath) Get(source *Profile) (values []interface{}) {
	if asFilterFieldPath, ok := fps.AsFilterSubPath(); ok {
		values = append(values, asFilterFieldPath.Get(source.GetFilter())...)
	} else if asMetricThresholdFieldPath, ok := fps.AsMetricThresholdsSubPath(); ok {
		for _, item := range source.GetMetricThresholds() {
			values = append(values, asMetricThresholdFieldPath.Get(item)...)
		}
	} else if asProfileFieldPath, ok := fps.AsOverridesSubPath(); ok {
		for _, item := range source.GetOverrides() {
			values = append(values, asProfileFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fps.selector))
	}
	return
}

func (fps *Profile_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Profile))
}

// GetSingle returns value of selected field from source Profile
func (fps *Profile_FieldSubPath) GetSingle(source *Profile) (interface{}, bool) {
	switch fps.selector {
	case Profile_FieldPathSelectorFilter:
		if source.GetFilter() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetFilter())
	case Profile_FieldPathSelectorMetricThresholds:
		if len(source.GetMetricThresholds()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetricThresholds()[0])
	case Profile_FieldPathSelectorOverrides:
		if len(source.GetOverrides()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetOverrides()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fps.selector))
	}
}

func (fps *Profile_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Profile))
}

// GetDefault returns a default value of the field type
func (fps *Profile_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Profile_FieldSubPath) ClearValue(item *Profile) {
	if item != nil {
		switch fps.selector {
		case Profile_FieldPathSelectorFilter:
			fps.subPath.ClearValueRaw(item.Filter)
		case Profile_FieldPathSelectorMetricThresholds:
			for _, subItem := range item.MetricThresholds {
				fps.subPath.ClearValueRaw(subItem)
			}
		case Profile_FieldPathSelectorOverrides:
			for _, subItem := range item.Overrides {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Profile: %d", fps.selector))
		}
	}
}

func (fps *Profile_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Profile))
}

// IsLeaf - whether field path is holds simple value
func (fps *Profile_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Profile_FieldSubPath) WithIValue(value interface{}) Profile_FieldPathValue {
	return &Profile_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Profile_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Profile_FieldSubPath) WithIArrayOfValues(values interface{}) Profile_FieldPathArrayOfValues {
	return &Profile_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Profile_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Profile_FieldSubPath) WithIArrayItemValue(value interface{}) Profile_FieldPathArrayItemValue {
	return &Profile_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Profile_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Profile_FieldPathValue allows storing values for Profile fields according to their type
type Profile_FieldPathValue interface {
	Profile_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Profile)
	CompareWith(*Profile) (cmp int, comparable bool)
}

func ParseProfile_FieldPathValue(pathStr, valueStr string) (Profile_FieldPathValue, error) {
	fp, err := ParseProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Profile field path value from %s: %v", valueStr, err)
	}
	return fpv.(Profile_FieldPathValue), nil
}

func MustParseProfile_FieldPathValue(pathStr, valueStr string) Profile_FieldPathValue {
	fpv, err := ParseProfile_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Profile_FieldTerminalPathValue struct {
	Profile_FieldTerminalPath
	value interface{}
}

var _ Profile_FieldPathValue = (*Profile_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Profile' as interface{}
func (fpv *Profile_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Profile_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Profile_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Profile_FieldTerminalPathValue) AsFilterValue() (*Profile_Filter, bool) {
	res, ok := fpv.value.(*Profile_Filter)
	return res, ok
}
func (fpv *Profile_FieldTerminalPathValue) AsMetricThresholdsValue() ([]*Profile_MetricThreshold, bool) {
	res, ok := fpv.value.([]*Profile_MetricThreshold)
	return res, ok
}
func (fpv *Profile_FieldTerminalPathValue) AsOverridesValue() ([]*Profile, bool) {
	res, ok := fpv.value.([]*Profile)
	return res, ok
}

// SetTo stores value for selected field for object Profile
func (fpv *Profile_FieldTerminalPathValue) SetTo(target **Profile) {
	if *target == nil {
		*target = new(Profile)
	}
	switch fpv.selector {
	case Profile_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Profile_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case Profile_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*Profile_Filter)
	case Profile_FieldPathSelectorMetricThresholds:
		(*target).MetricThresholds = fpv.value.([]*Profile_MetricThreshold)
	case Profile_FieldPathSelectorOverrides:
		(*target).Overrides = fpv.value.([]*Profile)
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fpv.selector))
	}
}

func (fpv *Profile_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Profile)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Profile_FieldTerminalPathValue' with the value under path in 'Profile'.
func (fpv *Profile_FieldTerminalPathValue) CompareWith(source *Profile) (int, bool) {
	switch fpv.selector {
	case Profile_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Profile_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Profile_FieldPathSelectorFilter:
		return 0, false
	case Profile_FieldPathSelectorMetricThresholds:
		return 0, false
	case Profile_FieldPathSelectorOverrides:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fpv.selector))
	}
}

func (fpv *Profile_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Profile))
}

type Profile_FieldSubPathValue struct {
	Profile_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Profile_FieldPathValue = (*Profile_FieldSubPathValue)(nil)

func (fpvs *Profile_FieldSubPathValue) AsFilterPathValue() (ProfileFilter_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProfileFilter_FieldPathValue)
	return res, ok
}
func (fpvs *Profile_FieldSubPathValue) AsMetricThresholdsPathValue() (ProfileMetricThreshold_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProfileMetricThreshold_FieldPathValue)
	return res, ok
}
func (fpvs *Profile_FieldSubPathValue) AsOverridesPathValue() (Profile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Profile_FieldPathValue)
	return res, ok
}

func (fpvs *Profile_FieldSubPathValue) SetTo(target **Profile) {
	if *target == nil {
		*target = new(Profile)
	}
	switch fpvs.Selector() {
	case Profile_FieldPathSelectorFilter:
		fpvs.subPathValue.(ProfileFilter_FieldPathValue).SetTo(&(*target).Filter)
	case Profile_FieldPathSelectorMetricThresholds:
		panic("FieldPath setter is unsupported for array subpaths")
	case Profile_FieldPathSelectorOverrides:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fpvs.Selector()))
	}
}

func (fpvs *Profile_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Profile)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Profile_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Profile_FieldSubPathValue) CompareWith(source *Profile) (int, bool) {
	switch fpvs.Selector() {
	case Profile_FieldPathSelectorFilter:
		return fpvs.subPathValue.(ProfileFilter_FieldPathValue).CompareWith(source.GetFilter())
	case Profile_FieldPathSelectorMetricThresholds:
		return 0, false // repeated field
	case Profile_FieldPathSelectorOverrides:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fpvs.Selector()))
	}
}

func (fpvs *Profile_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Profile))
}

// Profile_FieldPathArrayItemValue allows storing single item in Path-specific values for Profile according to their type
// Present only for array (repeated) types.
type Profile_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Profile_FieldPath
	ContainsValue(*Profile) bool
}

// ParseProfile_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProfile_FieldPathArrayItemValue(pathStr, valueStr string) (Profile_FieldPathArrayItemValue, error) {
	fp, err := ParseProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Profile field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Profile_FieldPathArrayItemValue), nil
}

func MustParseProfile_FieldPathArrayItemValue(pathStr, valueStr string) Profile_FieldPathArrayItemValue {
	fpaiv, err := ParseProfile_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Profile_FieldTerminalPathArrayItemValue struct {
	Profile_FieldTerminalPath
	value interface{}
}

var _ Profile_FieldPathArrayItemValue = (*Profile_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Profile as interface{}
func (fpaiv *Profile_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Profile_FieldTerminalPathArrayItemValue) AsMetricThresholdsItemValue() (*Profile_MetricThreshold, bool) {
	res, ok := fpaiv.value.(*Profile_MetricThreshold)
	return res, ok
}
func (fpaiv *Profile_FieldTerminalPathArrayItemValue) AsOverridesItemValue() (*Profile, bool) {
	res, ok := fpaiv.value.(*Profile)
	return res, ok
}

func (fpaiv *Profile_FieldTerminalPathArrayItemValue) GetSingle(source *Profile) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Profile_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Profile))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Profile'
func (fpaiv *Profile_FieldTerminalPathArrayItemValue) ContainsValue(source *Profile) bool {
	slice := fpaiv.Profile_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Profile_FieldSubPathArrayItemValue struct {
	Profile_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Profile_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Profile_FieldSubPathArrayItemValue) AsFilterPathItemValue() (ProfileFilter_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProfileFilter_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Profile_FieldSubPathArrayItemValue) AsMetricThresholdsPathItemValue() (ProfileMetricThreshold_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProfileMetricThreshold_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Profile_FieldSubPathArrayItemValue) AsOverridesPathItemValue() (Profile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Profile_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Profile'
func (fpaivs *Profile_FieldSubPathArrayItemValue) ContainsValue(source *Profile) bool {
	switch fpaivs.Selector() {
	case Profile_FieldPathSelectorFilter:
		return fpaivs.subPathItemValue.(ProfileFilter_FieldPathArrayItemValue).ContainsValue(source.GetFilter())
	case Profile_FieldPathSelectorMetricThresholds:
		return false // repeated/map field
	case Profile_FieldPathSelectorOverrides:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Profile: %d", fpaivs.Selector()))
	}
}

// Profile_FieldPathArrayOfValues allows storing slice of values for Profile fields according to their type
type Profile_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Profile_FieldPath
}

func ParseProfile_FieldPathArrayOfValues(pathStr, valuesStr string) (Profile_FieldPathArrayOfValues, error) {
	fp, err := ParseProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Profile field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Profile_FieldPathArrayOfValues), nil
}

func MustParseProfile_FieldPathArrayOfValues(pathStr, valuesStr string) Profile_FieldPathArrayOfValues {
	fpaov, err := ParseProfile_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Profile_FieldTerminalPathArrayOfValues struct {
	Profile_FieldTerminalPath
	values interface{}
}

var _ Profile_FieldPathArrayOfValues = (*Profile_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Profile_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Profile_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Profile_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Profile_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*Profile_Filter) {
			values = append(values, v)
		}
	case Profile_FieldPathSelectorMetricThresholds:
		for _, v := range fpaov.values.([][]*Profile_MetricThreshold) {
			values = append(values, v)
		}
	case Profile_FieldPathSelectorOverrides:
		for _, v := range fpaov.values.([][]*Profile) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Profile_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Profile_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Profile_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*Profile_Filter, bool) {
	res, ok := fpaov.values.([]*Profile_Filter)
	return res, ok
}
func (fpaov *Profile_FieldTerminalPathArrayOfValues) AsMetricThresholdsArrayOfValues() ([][]*Profile_MetricThreshold, bool) {
	res, ok := fpaov.values.([][]*Profile_MetricThreshold)
	return res, ok
}
func (fpaov *Profile_FieldTerminalPathArrayOfValues) AsOverridesArrayOfValues() ([][]*Profile, bool) {
	res, ok := fpaov.values.([][]*Profile)
	return res, ok
}

type Profile_FieldSubPathArrayOfValues struct {
	Profile_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Profile_FieldPathArrayOfValues = (*Profile_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Profile_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Profile_FieldSubPathArrayOfValues) AsFilterPathArrayOfValues() (ProfileFilter_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProfileFilter_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Profile_FieldSubPathArrayOfValues) AsMetricThresholdsPathArrayOfValues() (ProfileMetricThreshold_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProfileMetricThreshold_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Profile_FieldSubPathArrayOfValues) AsOverridesPathArrayOfValues() (Profile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Profile_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProfileLocation_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProfileLocation_FieldPathSelector
	Get(source *Profile_Location) []interface{}
	GetSingle(source *Profile_Location) (interface{}, bool)
	ClearValue(item *Profile_Location)

	// Those methods build corresponding ProfileLocation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProfileLocation_FieldPathValue
	WithIArrayOfValues(values interface{}) ProfileLocation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProfileLocation_FieldPathArrayItemValue
}

type ProfileLocation_FieldPathSelector int32

const (
	ProfileLocation_FieldPathSelectorCountryName                  ProfileLocation_FieldPathSelector = 0
	ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name ProfileLocation_FieldPathSelector = 1
	ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name ProfileLocation_FieldPathSelector = 2
	ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name ProfileLocation_FieldPathSelector = 3
)

func (s ProfileLocation_FieldPathSelector) String() string {
	switch s {
	case ProfileLocation_FieldPathSelectorCountryName:
		return "country_name"
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
		return "administrative_area_level1_name"
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
		return "administrative_area_level2_name"
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
		return "administrative_area_level3_name"
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", s))
	}
}

func BuildProfileLocation_FieldPath(fp gotenobject.RawFieldPath) (ProfileLocation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Profile_Location")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "country_name", "countryName", "country-name":
			return &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorCountryName}, nil
		case "administrative_area_level1_name", "administrativeAreaLevel1Name", "administrative-area-level1-name":
			return &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name}, nil
		case "administrative_area_level2_name", "administrativeAreaLevel2Name", "administrative-area-level2-name":
			return &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name}, nil
		case "administrative_area_level3_name", "administrativeAreaLevel3Name", "administrative-area-level3-name":
			return &ProfileLocation_FieldTerminalPath{selector: ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Profile_Location", fp)
}

func ParseProfileLocation_FieldPath(rawField string) (ProfileLocation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProfileLocation_FieldPath(fp)
}

func MustParseProfileLocation_FieldPath(rawField string) ProfileLocation_FieldPath {
	fp, err := ParseProfileLocation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProfileLocation_FieldTerminalPath struct {
	selector ProfileLocation_FieldPathSelector
}

var _ ProfileLocation_FieldPath = (*ProfileLocation_FieldTerminalPath)(nil)

func (fp *ProfileLocation_FieldTerminalPath) Selector() ProfileLocation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProfileLocation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProfileLocation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Profile_Location
func (fp *ProfileLocation_FieldTerminalPath) Get(source *Profile_Location) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProfileLocation_FieldPathSelectorCountryName:
			values = append(values, source.CountryName)
		case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
			values = append(values, source.AdministrativeAreaLevel1Name)
		case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
			values = append(values, source.AdministrativeAreaLevel2Name)
		case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
			values = append(values, source.AdministrativeAreaLevel3Name)
		default:
			panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fp.selector))
		}
	}
	return
}

func (fp *ProfileLocation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Profile_Location))
}

// GetSingle returns value pointed by specific field of from source Profile_Location
func (fp *ProfileLocation_FieldTerminalPath) GetSingle(source *Profile_Location) (interface{}, bool) {
	switch fp.selector {
	case ProfileLocation_FieldPathSelectorCountryName:
		return source.GetCountryName(), source != nil
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
		return source.GetAdministrativeAreaLevel1Name(), source != nil
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
		return source.GetAdministrativeAreaLevel2Name(), source != nil
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
		return source.GetAdministrativeAreaLevel3Name(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fp.selector))
	}
}

func (fp *ProfileLocation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Profile_Location))
}

// GetDefault returns a default value of the field type
func (fp *ProfileLocation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProfileLocation_FieldPathSelectorCountryName:
		return ""
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
		return ""
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
		return ""
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fp.selector))
	}
}

func (fp *ProfileLocation_FieldTerminalPath) ClearValue(item *Profile_Location) {
	if item != nil {
		switch fp.selector {
		case ProfileLocation_FieldPathSelectorCountryName:
			item.CountryName = ""
		case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
			item.AdministrativeAreaLevel1Name = ""
		case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
			item.AdministrativeAreaLevel2Name = ""
		case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
			item.AdministrativeAreaLevel3Name = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fp.selector))
		}
	}
}

func (fp *ProfileLocation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Profile_Location))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProfileLocation_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProfileLocation_FieldPathSelectorCountryName ||
		fp.selector == ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name ||
		fp.selector == ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name ||
		fp.selector == ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name
}

func (fp *ProfileLocation_FieldTerminalPath) WithIValue(value interface{}) ProfileLocation_FieldPathValue {
	switch fp.selector {
	case ProfileLocation_FieldPathSelectorCountryName:
		return &ProfileLocation_FieldTerminalPathValue{ProfileLocation_FieldTerminalPath: *fp, value: value.(string)}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
		return &ProfileLocation_FieldTerminalPathValue{ProfileLocation_FieldTerminalPath: *fp, value: value.(string)}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
		return &ProfileLocation_FieldTerminalPathValue{ProfileLocation_FieldTerminalPath: *fp, value: value.(string)}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
		return &ProfileLocation_FieldTerminalPathValue{ProfileLocation_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fp.selector))
	}
}

func (fp *ProfileLocation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProfileLocation_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProfileLocation_FieldPathArrayOfValues {
	fpaov := &ProfileLocation_FieldTerminalPathArrayOfValues{ProfileLocation_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProfileLocation_FieldPathSelectorCountryName:
		return &ProfileLocation_FieldTerminalPathArrayOfValues{ProfileLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
		return &ProfileLocation_FieldTerminalPathArrayOfValues{ProfileLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
		return &ProfileLocation_FieldTerminalPathArrayOfValues{ProfileLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
		return &ProfileLocation_FieldTerminalPathArrayOfValues{ProfileLocation_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProfileLocation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProfileLocation_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProfileLocation_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fp.selector))
	}
}

func (fp *ProfileLocation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProfileLocation_FieldPathValue allows storing values for Location fields according to their type
type ProfileLocation_FieldPathValue interface {
	ProfileLocation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Profile_Location)
	CompareWith(*Profile_Location) (cmp int, comparable bool)
}

func ParseProfileLocation_FieldPathValue(pathStr, valueStr string) (ProfileLocation_FieldPathValue, error) {
	fp, err := ParseProfileLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Location field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProfileLocation_FieldPathValue), nil
}

func MustParseProfileLocation_FieldPathValue(pathStr, valueStr string) ProfileLocation_FieldPathValue {
	fpv, err := ParseProfileLocation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProfileLocation_FieldTerminalPathValue struct {
	ProfileLocation_FieldTerminalPath
	value interface{}
}

var _ ProfileLocation_FieldPathValue = (*ProfileLocation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Location' as interface{}
func (fpv *ProfileLocation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProfileLocation_FieldTerminalPathValue) AsCountryNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProfileLocation_FieldTerminalPathValue) AsAdministrativeAreaLevel1NameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProfileLocation_FieldTerminalPathValue) AsAdministrativeAreaLevel2NameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProfileLocation_FieldTerminalPathValue) AsAdministrativeAreaLevel3NameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Location
func (fpv *ProfileLocation_FieldTerminalPathValue) SetTo(target **Profile_Location) {
	if *target == nil {
		*target = new(Profile_Location)
	}
	switch fpv.selector {
	case ProfileLocation_FieldPathSelectorCountryName:
		(*target).CountryName = fpv.value.(string)
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
		(*target).AdministrativeAreaLevel1Name = fpv.value.(string)
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
		(*target).AdministrativeAreaLevel2Name = fpv.value.(string)
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
		(*target).AdministrativeAreaLevel3Name = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fpv.selector))
	}
}

func (fpv *ProfileLocation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Profile_Location)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProfileLocation_FieldTerminalPathValue' with the value under path in 'Profile_Location'.
func (fpv *ProfileLocation_FieldTerminalPathValue) CompareWith(source *Profile_Location) (int, bool) {
	switch fpv.selector {
	case ProfileLocation_FieldPathSelectorCountryName:
		leftValue := fpv.value.(string)
		rightValue := source.GetCountryName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
		leftValue := fpv.value.(string)
		rightValue := source.GetAdministrativeAreaLevel1Name()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
		leftValue := fpv.value.(string)
		rightValue := source.GetAdministrativeAreaLevel2Name()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
		leftValue := fpv.value.(string)
		rightValue := source.GetAdministrativeAreaLevel3Name()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Location: %d", fpv.selector))
	}
}

func (fpv *ProfileLocation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Profile_Location))
}

// ProfileLocation_FieldPathArrayItemValue allows storing single item in Path-specific values for Location according to their type
// Present only for array (repeated) types.
type ProfileLocation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProfileLocation_FieldPath
	ContainsValue(*Profile_Location) bool
}

// ParseProfileLocation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProfileLocation_FieldPathArrayItemValue(pathStr, valueStr string) (ProfileLocation_FieldPathArrayItemValue, error) {
	fp, err := ParseProfileLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Location field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProfileLocation_FieldPathArrayItemValue), nil
}

func MustParseProfileLocation_FieldPathArrayItemValue(pathStr, valueStr string) ProfileLocation_FieldPathArrayItemValue {
	fpaiv, err := ParseProfileLocation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProfileLocation_FieldTerminalPathArrayItemValue struct {
	ProfileLocation_FieldTerminalPath
	value interface{}
}

var _ ProfileLocation_FieldPathArrayItemValue = (*ProfileLocation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Profile_Location as interface{}
func (fpaiv *ProfileLocation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProfileLocation_FieldTerminalPathArrayItemValue) GetSingle(source *Profile_Location) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProfileLocation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Profile_Location))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Location'
func (fpaiv *ProfileLocation_FieldTerminalPathArrayItemValue) ContainsValue(source *Profile_Location) bool {
	slice := fpaiv.ProfileLocation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProfileLocation_FieldPathArrayOfValues allows storing slice of values for Location fields according to their type
type ProfileLocation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProfileLocation_FieldPath
}

func ParseProfileLocation_FieldPathArrayOfValues(pathStr, valuesStr string) (ProfileLocation_FieldPathArrayOfValues, error) {
	fp, err := ParseProfileLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Location field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProfileLocation_FieldPathArrayOfValues), nil
}

func MustParseProfileLocation_FieldPathArrayOfValues(pathStr, valuesStr string) ProfileLocation_FieldPathArrayOfValues {
	fpaov, err := ParseProfileLocation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProfileLocation_FieldTerminalPathArrayOfValues struct {
	ProfileLocation_FieldTerminalPath
	values interface{}
}

var _ ProfileLocation_FieldPathArrayOfValues = (*ProfileLocation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProfileLocation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProfileLocation_FieldPathSelectorCountryName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel1Name:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel2Name:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProfileLocation_FieldPathSelectorAdministrativeAreaLevel3Name:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProfileLocation_FieldTerminalPathArrayOfValues) AsCountryNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProfileLocation_FieldTerminalPathArrayOfValues) AsAdministrativeAreaLevel1NameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProfileLocation_FieldTerminalPathArrayOfValues) AsAdministrativeAreaLevel2NameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProfileLocation_FieldTerminalPathArrayOfValues) AsAdministrativeAreaLevel3NameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProfileFilter_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProfileFilter_FieldPathSelector
	Get(source *Profile_Filter) []interface{}
	GetSingle(source *Profile_Filter) (interface{}, bool)
	ClearValue(item *Profile_Filter)

	// Those methods build corresponding ProfileFilter_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProfileFilter_FieldPathValue
	WithIArrayOfValues(values interface{}) ProfileFilter_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProfileFilter_FieldPathArrayItemValue
}

type ProfileFilter_FieldPathSelector int32

const (
	ProfileFilter_FieldPathSelectorSourceLocations ProfileFilter_FieldPathSelector = 0
	ProfileFilter_FieldPathSelectorSourceAsnNames  ProfileFilter_FieldPathSelector = 1
	ProfileFilter_FieldPathSelectorTargets         ProfileFilter_FieldPathSelector = 2
)

func (s ProfileFilter_FieldPathSelector) String() string {
	switch s {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		return "source_locations"
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		return "source_asn_names"
	case ProfileFilter_FieldPathSelectorTargets:
		return "targets"
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", s))
	}
}

func BuildProfileFilter_FieldPath(fp gotenobject.RawFieldPath) (ProfileFilter_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Profile_Filter")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "source_locations", "sourceLocations", "source-locations":
			return &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorSourceLocations}, nil
		case "source_asn_names", "sourceAsnNames", "source-asn-names":
			return &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorSourceAsnNames}, nil
		case "targets":
			return &ProfileFilter_FieldTerminalPath{selector: ProfileFilter_FieldPathSelectorTargets}, nil
		}
	} else {
		switch fp[0] {
		case "source_locations", "sourceLocations", "source-locations":
			if subpath, err := BuildProfileLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ProfileFilter_FieldSubPath{selector: ProfileFilter_FieldPathSelectorSourceLocations, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Profile_Filter", fp)
}

func ParseProfileFilter_FieldPath(rawField string) (ProfileFilter_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProfileFilter_FieldPath(fp)
}

func MustParseProfileFilter_FieldPath(rawField string) ProfileFilter_FieldPath {
	fp, err := ParseProfileFilter_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProfileFilter_FieldTerminalPath struct {
	selector ProfileFilter_FieldPathSelector
}

var _ ProfileFilter_FieldPath = (*ProfileFilter_FieldTerminalPath)(nil)

func (fp *ProfileFilter_FieldTerminalPath) Selector() ProfileFilter_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProfileFilter_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProfileFilter_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Profile_Filter
func (fp *ProfileFilter_FieldTerminalPath) Get(source *Profile_Filter) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProfileFilter_FieldPathSelectorSourceLocations:
			for _, value := range source.GetSourceLocations() {
				values = append(values, value)
			}
		case ProfileFilter_FieldPathSelectorSourceAsnNames:
			for _, value := range source.GetSourceAsnNames() {
				values = append(values, value)
			}
		case ProfileFilter_FieldPathSelectorTargets:
			for _, value := range source.GetTargets() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fp.selector))
		}
	}
	return
}

func (fp *ProfileFilter_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Profile_Filter))
}

// GetSingle returns value pointed by specific field of from source Profile_Filter
func (fp *ProfileFilter_FieldTerminalPath) GetSingle(source *Profile_Filter) (interface{}, bool) {
	switch fp.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		res := source.GetSourceLocations()
		return res, res != nil
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		res := source.GetSourceAsnNames()
		return res, res != nil
	case ProfileFilter_FieldPathSelectorTargets:
		res := source.GetTargets()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fp.selector))
	}
}

func (fp *ProfileFilter_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Profile_Filter))
}

// GetDefault returns a default value of the field type
func (fp *ProfileFilter_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		return ([]*Profile_Location)(nil)
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		return ([]string)(nil)
	case ProfileFilter_FieldPathSelectorTargets:
		return ([]string)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fp.selector))
	}
}

func (fp *ProfileFilter_FieldTerminalPath) ClearValue(item *Profile_Filter) {
	if item != nil {
		switch fp.selector {
		case ProfileFilter_FieldPathSelectorSourceLocations:
			item.SourceLocations = nil
		case ProfileFilter_FieldPathSelectorSourceAsnNames:
			item.SourceAsnNames = nil
		case ProfileFilter_FieldPathSelectorTargets:
			item.Targets = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fp.selector))
		}
	}
}

func (fp *ProfileFilter_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Profile_Filter))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProfileFilter_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProfileFilter_FieldPathSelectorSourceAsnNames ||
		fp.selector == ProfileFilter_FieldPathSelectorTargets
}

func (fp *ProfileFilter_FieldTerminalPath) WithIValue(value interface{}) ProfileFilter_FieldPathValue {
	switch fp.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		return &ProfileFilter_FieldTerminalPathValue{ProfileFilter_FieldTerminalPath: *fp, value: value.([]*Profile_Location)}
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		return &ProfileFilter_FieldTerminalPathValue{ProfileFilter_FieldTerminalPath: *fp, value: value.([]string)}
	case ProfileFilter_FieldPathSelectorTargets:
		return &ProfileFilter_FieldTerminalPathValue{ProfileFilter_FieldTerminalPath: *fp, value: value.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fp.selector))
	}
}

func (fp *ProfileFilter_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProfileFilter_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProfileFilter_FieldPathArrayOfValues {
	fpaov := &ProfileFilter_FieldTerminalPathArrayOfValues{ProfileFilter_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		return &ProfileFilter_FieldTerminalPathArrayOfValues{ProfileFilter_FieldTerminalPath: *fp, values: values.([][]*Profile_Location)}
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		return &ProfileFilter_FieldTerminalPathArrayOfValues{ProfileFilter_FieldTerminalPath: *fp, values: values.([][]string)}
	case ProfileFilter_FieldPathSelectorTargets:
		return &ProfileFilter_FieldTerminalPathArrayOfValues{ProfileFilter_FieldTerminalPath: *fp, values: values.([][]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProfileFilter_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProfileFilter_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProfileFilter_FieldPathArrayItemValue {
	switch fp.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		return &ProfileFilter_FieldTerminalPathArrayItemValue{ProfileFilter_FieldTerminalPath: *fp, value: value.(*Profile_Location)}
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		return &ProfileFilter_FieldTerminalPathArrayItemValue{ProfileFilter_FieldTerminalPath: *fp, value: value.(string)}
	case ProfileFilter_FieldPathSelectorTargets:
		return &ProfileFilter_FieldTerminalPathArrayItemValue{ProfileFilter_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fp.selector))
	}
}

func (fp *ProfileFilter_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ProfileFilter_FieldSubPath struct {
	selector ProfileFilter_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ProfileFilter_FieldPath = (*ProfileFilter_FieldSubPath)(nil)

func (fps *ProfileFilter_FieldSubPath) Selector() ProfileFilter_FieldPathSelector {
	return fps.selector
}
func (fps *ProfileFilter_FieldSubPath) AsSourceLocationsSubPath() (ProfileLocation_FieldPath, bool) {
	res, ok := fps.subPath.(ProfileLocation_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ProfileFilter_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ProfileFilter_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Profile_Filter
func (fps *ProfileFilter_FieldSubPath) Get(source *Profile_Filter) (values []interface{}) {
	if asLocationFieldPath, ok := fps.AsSourceLocationsSubPath(); ok {
		for _, item := range source.GetSourceLocations() {
			values = append(values, asLocationFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fps.selector))
	}
	return
}

func (fps *ProfileFilter_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Profile_Filter))
}

// GetSingle returns value of selected field from source Profile_Filter
func (fps *ProfileFilter_FieldSubPath) GetSingle(source *Profile_Filter) (interface{}, bool) {
	switch fps.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		if len(source.GetSourceLocations()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSourceLocations()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fps.selector))
	}
}

func (fps *ProfileFilter_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Profile_Filter))
}

// GetDefault returns a default value of the field type
func (fps *ProfileFilter_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ProfileFilter_FieldSubPath) ClearValue(item *Profile_Filter) {
	if item != nil {
		switch fps.selector {
		case ProfileFilter_FieldPathSelectorSourceLocations:
			for _, subItem := range item.SourceLocations {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fps.selector))
		}
	}
}

func (fps *ProfileFilter_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Profile_Filter))
}

// IsLeaf - whether field path is holds simple value
func (fps *ProfileFilter_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ProfileFilter_FieldSubPath) WithIValue(value interface{}) ProfileFilter_FieldPathValue {
	return &ProfileFilter_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ProfileFilter_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ProfileFilter_FieldSubPath) WithIArrayOfValues(values interface{}) ProfileFilter_FieldPathArrayOfValues {
	return &ProfileFilter_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ProfileFilter_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ProfileFilter_FieldSubPath) WithIArrayItemValue(value interface{}) ProfileFilter_FieldPathArrayItemValue {
	return &ProfileFilter_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ProfileFilter_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ProfileFilter_FieldPathValue allows storing values for Filter fields according to their type
type ProfileFilter_FieldPathValue interface {
	ProfileFilter_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Profile_Filter)
	CompareWith(*Profile_Filter) (cmp int, comparable bool)
}

func ParseProfileFilter_FieldPathValue(pathStr, valueStr string) (ProfileFilter_FieldPathValue, error) {
	fp, err := ParseProfileFilter_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Filter field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProfileFilter_FieldPathValue), nil
}

func MustParseProfileFilter_FieldPathValue(pathStr, valueStr string) ProfileFilter_FieldPathValue {
	fpv, err := ParseProfileFilter_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProfileFilter_FieldTerminalPathValue struct {
	ProfileFilter_FieldTerminalPath
	value interface{}
}

var _ ProfileFilter_FieldPathValue = (*ProfileFilter_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Filter' as interface{}
func (fpv *ProfileFilter_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProfileFilter_FieldTerminalPathValue) AsSourceLocationsValue() ([]*Profile_Location, bool) {
	res, ok := fpv.value.([]*Profile_Location)
	return res, ok
}
func (fpv *ProfileFilter_FieldTerminalPathValue) AsSourceAsnNamesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *ProfileFilter_FieldTerminalPathValue) AsTargetsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}

// SetTo stores value for selected field for object Filter
func (fpv *ProfileFilter_FieldTerminalPathValue) SetTo(target **Profile_Filter) {
	if *target == nil {
		*target = new(Profile_Filter)
	}
	switch fpv.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		(*target).SourceLocations = fpv.value.([]*Profile_Location)
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		(*target).SourceAsnNames = fpv.value.([]string)
	case ProfileFilter_FieldPathSelectorTargets:
		(*target).Targets = fpv.value.([]string)
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fpv.selector))
	}
}

func (fpv *ProfileFilter_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Profile_Filter)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProfileFilter_FieldTerminalPathValue' with the value under path in 'Profile_Filter'.
func (fpv *ProfileFilter_FieldTerminalPathValue) CompareWith(source *Profile_Filter) (int, bool) {
	switch fpv.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		return 0, false
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		return 0, false
	case ProfileFilter_FieldPathSelectorTargets:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fpv.selector))
	}
}

func (fpv *ProfileFilter_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Profile_Filter))
}

type ProfileFilter_FieldSubPathValue struct {
	ProfileFilter_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ProfileFilter_FieldPathValue = (*ProfileFilter_FieldSubPathValue)(nil)

func (fpvs *ProfileFilter_FieldSubPathValue) AsSourceLocationsPathValue() (ProfileLocation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ProfileLocation_FieldPathValue)
	return res, ok
}

func (fpvs *ProfileFilter_FieldSubPathValue) SetTo(target **Profile_Filter) {
	if *target == nil {
		*target = new(Profile_Filter)
	}
	switch fpvs.Selector() {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fpvs.Selector()))
	}
}

func (fpvs *ProfileFilter_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Profile_Filter)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ProfileFilter_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ProfileFilter_FieldSubPathValue) CompareWith(source *Profile_Filter) (int, bool) {
	switch fpvs.Selector() {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fpvs.Selector()))
	}
}

func (fpvs *ProfileFilter_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Profile_Filter))
}

// ProfileFilter_FieldPathArrayItemValue allows storing single item in Path-specific values for Filter according to their type
// Present only for array (repeated) types.
type ProfileFilter_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProfileFilter_FieldPath
	ContainsValue(*Profile_Filter) bool
}

// ParseProfileFilter_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProfileFilter_FieldPathArrayItemValue(pathStr, valueStr string) (ProfileFilter_FieldPathArrayItemValue, error) {
	fp, err := ParseProfileFilter_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Filter field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProfileFilter_FieldPathArrayItemValue), nil
}

func MustParseProfileFilter_FieldPathArrayItemValue(pathStr, valueStr string) ProfileFilter_FieldPathArrayItemValue {
	fpaiv, err := ParseProfileFilter_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProfileFilter_FieldTerminalPathArrayItemValue struct {
	ProfileFilter_FieldTerminalPath
	value interface{}
}

var _ ProfileFilter_FieldPathArrayItemValue = (*ProfileFilter_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Profile_Filter as interface{}
func (fpaiv *ProfileFilter_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ProfileFilter_FieldTerminalPathArrayItemValue) AsSourceLocationsItemValue() (*Profile_Location, bool) {
	res, ok := fpaiv.value.(*Profile_Location)
	return res, ok
}
func (fpaiv *ProfileFilter_FieldTerminalPathArrayItemValue) AsSourceAsnNamesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *ProfileFilter_FieldTerminalPathArrayItemValue) AsTargetsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}

func (fpaiv *ProfileFilter_FieldTerminalPathArrayItemValue) GetSingle(source *Profile_Filter) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProfileFilter_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Profile_Filter))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Filter'
func (fpaiv *ProfileFilter_FieldTerminalPathArrayItemValue) ContainsValue(source *Profile_Filter) bool {
	slice := fpaiv.ProfileFilter_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ProfileFilter_FieldSubPathArrayItemValue struct {
	ProfileFilter_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ProfileFilter_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ProfileFilter_FieldSubPathArrayItemValue) AsSourceLocationsPathItemValue() (ProfileLocation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ProfileLocation_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Filter'
func (fpaivs *ProfileFilter_FieldSubPathArrayItemValue) ContainsValue(source *Profile_Filter) bool {
	switch fpaivs.Selector() {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_Filter: %d", fpaivs.Selector()))
	}
}

// ProfileFilter_FieldPathArrayOfValues allows storing slice of values for Filter fields according to their type
type ProfileFilter_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProfileFilter_FieldPath
}

func ParseProfileFilter_FieldPathArrayOfValues(pathStr, valuesStr string) (ProfileFilter_FieldPathArrayOfValues, error) {
	fp, err := ParseProfileFilter_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Filter field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProfileFilter_FieldPathArrayOfValues), nil
}

func MustParseProfileFilter_FieldPathArrayOfValues(pathStr, valuesStr string) ProfileFilter_FieldPathArrayOfValues {
	fpaov, err := ParseProfileFilter_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProfileFilter_FieldTerminalPathArrayOfValues struct {
	ProfileFilter_FieldTerminalPath
	values interface{}
}

var _ ProfileFilter_FieldPathArrayOfValues = (*ProfileFilter_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProfileFilter_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProfileFilter_FieldPathSelectorSourceLocations:
		for _, v := range fpaov.values.([][]*Profile_Location) {
			values = append(values, v)
		}
	case ProfileFilter_FieldPathSelectorSourceAsnNames:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case ProfileFilter_FieldPathSelectorTargets:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProfileFilter_FieldTerminalPathArrayOfValues) AsSourceLocationsArrayOfValues() ([][]*Profile_Location, bool) {
	res, ok := fpaov.values.([][]*Profile_Location)
	return res, ok
}
func (fpaov *ProfileFilter_FieldTerminalPathArrayOfValues) AsSourceAsnNamesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *ProfileFilter_FieldTerminalPathArrayOfValues) AsTargetsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}

type ProfileFilter_FieldSubPathArrayOfValues struct {
	ProfileFilter_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ProfileFilter_FieldPathArrayOfValues = (*ProfileFilter_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ProfileFilter_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ProfileFilter_FieldSubPathArrayOfValues) AsSourceLocationsPathArrayOfValues() (ProfileLocation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ProfileLocation_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ProfileMetricThreshold_FieldPath interface {
	gotenobject.FieldPath
	Selector() ProfileMetricThreshold_FieldPathSelector
	Get(source *Profile_MetricThreshold) []interface{}
	GetSingle(source *Profile_MetricThreshold) (interface{}, bool)
	ClearValue(item *Profile_MetricThreshold)

	// Those methods build corresponding ProfileMetricThreshold_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ProfileMetricThreshold_FieldPathValue
	WithIArrayOfValues(values interface{}) ProfileMetricThreshold_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ProfileMetricThreshold_FieldPathArrayItemValue
}

type ProfileMetricThreshold_FieldPathSelector int32

const (
	ProfileMetricThreshold_FieldPathSelectorAggregationReducer ProfileMetricThreshold_FieldPathSelector = 0
	ProfileMetricThreshold_FieldPathSelectorMetricType         ProfileMetricThreshold_FieldPathSelector = 1
	ProfileMetricThreshold_FieldPathSelectorValue              ProfileMetricThreshold_FieldPathSelector = 2
)

func (s ProfileMetricThreshold_FieldPathSelector) String() string {
	switch s {
	case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
		return "aggregation_reducer"
	case ProfileMetricThreshold_FieldPathSelectorMetricType:
		return "metric_type"
	case ProfileMetricThreshold_FieldPathSelectorValue:
		return "value"
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", s))
	}
}

func BuildProfileMetricThreshold_FieldPath(fp gotenobject.RawFieldPath) (ProfileMetricThreshold_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Profile_MetricThreshold")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "aggregation_reducer", "aggregationReducer", "aggregation-reducer":
			return &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorAggregationReducer}, nil
		case "metric_type", "metricType", "metric-type":
			return &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorMetricType}, nil
		case "value":
			return &ProfileMetricThreshold_FieldTerminalPath{selector: ProfileMetricThreshold_FieldPathSelectorValue}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Profile_MetricThreshold", fp)
}

func ParseProfileMetricThreshold_FieldPath(rawField string) (ProfileMetricThreshold_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildProfileMetricThreshold_FieldPath(fp)
}

func MustParseProfileMetricThreshold_FieldPath(rawField string) ProfileMetricThreshold_FieldPath {
	fp, err := ParseProfileMetricThreshold_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ProfileMetricThreshold_FieldTerminalPath struct {
	selector ProfileMetricThreshold_FieldPathSelector
}

var _ ProfileMetricThreshold_FieldPath = (*ProfileMetricThreshold_FieldTerminalPath)(nil)

func (fp *ProfileMetricThreshold_FieldTerminalPath) Selector() ProfileMetricThreshold_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ProfileMetricThreshold_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ProfileMetricThreshold_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Profile_MetricThreshold
func (fp *ProfileMetricThreshold_FieldTerminalPath) Get(source *Profile_MetricThreshold) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
			values = append(values, source.AggregationReducer)
		case ProfileMetricThreshold_FieldPathSelectorMetricType:
			values = append(values, source.MetricType)
		case ProfileMetricThreshold_FieldPathSelectorValue:
			values = append(values, source.Value)
		default:
			panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fp.selector))
		}
	}
	return
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Profile_MetricThreshold))
}

// GetSingle returns value pointed by specific field of from source Profile_MetricThreshold
func (fp *ProfileMetricThreshold_FieldTerminalPath) GetSingle(source *Profile_MetricThreshold) (interface{}, bool) {
	switch fp.selector {
	case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
		return source.GetAggregationReducer(), source != nil
	case ProfileMetricThreshold_FieldPathSelectorMetricType:
		return source.GetMetricType(), source != nil
	case ProfileMetricThreshold_FieldPathSelectorValue:
		return source.GetValue(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fp.selector))
	}
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Profile_MetricThreshold))
}

// GetDefault returns a default value of the field type
func (fp *ProfileMetricThreshold_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
		return monitoring_common.Aggregation_REDUCE_NONE
	case ProfileMetricThreshold_FieldPathSelectorMetricType:
		return ""
	case ProfileMetricThreshold_FieldPathSelectorValue:
		return float64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fp.selector))
	}
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) ClearValue(item *Profile_MetricThreshold) {
	if item != nil {
		switch fp.selector {
		case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
			item.AggregationReducer = monitoring_common.Aggregation_REDUCE_NONE
		case ProfileMetricThreshold_FieldPathSelectorMetricType:
			item.MetricType = ""
		case ProfileMetricThreshold_FieldPathSelectorValue:
			item.Value = float64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fp.selector))
		}
	}
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Profile_MetricThreshold))
}

// IsLeaf - whether field path is holds simple value
func (fp *ProfileMetricThreshold_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ProfileMetricThreshold_FieldPathSelectorAggregationReducer ||
		fp.selector == ProfileMetricThreshold_FieldPathSelectorMetricType ||
		fp.selector == ProfileMetricThreshold_FieldPathSelectorValue
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) WithIValue(value interface{}) ProfileMetricThreshold_FieldPathValue {
	switch fp.selector {
	case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
		return &ProfileMetricThreshold_FieldTerminalPathValue{ProfileMetricThreshold_FieldTerminalPath: *fp, value: value.(monitoring_common.Aggregation_Reducer)}
	case ProfileMetricThreshold_FieldPathSelectorMetricType:
		return &ProfileMetricThreshold_FieldTerminalPathValue{ProfileMetricThreshold_FieldTerminalPath: *fp, value: value.(string)}
	case ProfileMetricThreshold_FieldPathSelectorValue:
		return &ProfileMetricThreshold_FieldTerminalPathValue{ProfileMetricThreshold_FieldTerminalPath: *fp, value: value.(float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fp.selector))
	}
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) WithIArrayOfValues(values interface{}) ProfileMetricThreshold_FieldPathArrayOfValues {
	fpaov := &ProfileMetricThreshold_FieldTerminalPathArrayOfValues{ProfileMetricThreshold_FieldTerminalPath: *fp}
	switch fp.selector {
	case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
		return &ProfileMetricThreshold_FieldTerminalPathArrayOfValues{ProfileMetricThreshold_FieldTerminalPath: *fp, values: values.([]monitoring_common.Aggregation_Reducer)}
	case ProfileMetricThreshold_FieldPathSelectorMetricType:
		return &ProfileMetricThreshold_FieldTerminalPathArrayOfValues{ProfileMetricThreshold_FieldTerminalPath: *fp, values: values.([]string)}
	case ProfileMetricThreshold_FieldPathSelectorValue:
		return &ProfileMetricThreshold_FieldTerminalPathArrayOfValues{ProfileMetricThreshold_FieldTerminalPath: *fp, values: values.([]float64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fp.selector))
	}
	return fpaov
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) WithIArrayItemValue(value interface{}) ProfileMetricThreshold_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fp.selector))
	}
}

func (fp *ProfileMetricThreshold_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ProfileMetricThreshold_FieldPathValue allows storing values for MetricThreshold fields according to their type
type ProfileMetricThreshold_FieldPathValue interface {
	ProfileMetricThreshold_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Profile_MetricThreshold)
	CompareWith(*Profile_MetricThreshold) (cmp int, comparable bool)
}

func ParseProfileMetricThreshold_FieldPathValue(pathStr, valueStr string) (ProfileMetricThreshold_FieldPathValue, error) {
	fp, err := ParseProfileMetricThreshold_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MetricThreshold field path value from %s: %v", valueStr, err)
	}
	return fpv.(ProfileMetricThreshold_FieldPathValue), nil
}

func MustParseProfileMetricThreshold_FieldPathValue(pathStr, valueStr string) ProfileMetricThreshold_FieldPathValue {
	fpv, err := ParseProfileMetricThreshold_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ProfileMetricThreshold_FieldTerminalPathValue struct {
	ProfileMetricThreshold_FieldTerminalPath
	value interface{}
}

var _ ProfileMetricThreshold_FieldPathValue = (*ProfileMetricThreshold_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'MetricThreshold' as interface{}
func (fpv *ProfileMetricThreshold_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ProfileMetricThreshold_FieldTerminalPathValue) AsAggregationReducerValue() (monitoring_common.Aggregation_Reducer, bool) {
	res, ok := fpv.value.(monitoring_common.Aggregation_Reducer)
	return res, ok
}
func (fpv *ProfileMetricThreshold_FieldTerminalPathValue) AsMetricTypeValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ProfileMetricThreshold_FieldTerminalPathValue) AsValueValue() (float64, bool) {
	res, ok := fpv.value.(float64)
	return res, ok
}

// SetTo stores value for selected field for object MetricThreshold
func (fpv *ProfileMetricThreshold_FieldTerminalPathValue) SetTo(target **Profile_MetricThreshold) {
	if *target == nil {
		*target = new(Profile_MetricThreshold)
	}
	switch fpv.selector {
	case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
		(*target).AggregationReducer = fpv.value.(monitoring_common.Aggregation_Reducer)
	case ProfileMetricThreshold_FieldPathSelectorMetricType:
		(*target).MetricType = fpv.value.(string)
	case ProfileMetricThreshold_FieldPathSelectorValue:
		(*target).Value = fpv.value.(float64)
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fpv.selector))
	}
}

func (fpv *ProfileMetricThreshold_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Profile_MetricThreshold)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ProfileMetricThreshold_FieldTerminalPathValue' with the value under path in 'Profile_MetricThreshold'.
func (fpv *ProfileMetricThreshold_FieldTerminalPathValue) CompareWith(source *Profile_MetricThreshold) (int, bool) {
	switch fpv.selector {
	case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
		leftValue := fpv.value.(monitoring_common.Aggregation_Reducer)
		rightValue := source.GetAggregationReducer()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProfileMetricThreshold_FieldPathSelectorMetricType:
		leftValue := fpv.value.(string)
		rightValue := source.GetMetricType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ProfileMetricThreshold_FieldPathSelectorValue:
		leftValue := fpv.value.(float64)
		rightValue := source.GetValue()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Profile_MetricThreshold: %d", fpv.selector))
	}
}

func (fpv *ProfileMetricThreshold_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Profile_MetricThreshold))
}

// ProfileMetricThreshold_FieldPathArrayItemValue allows storing single item in Path-specific values for MetricThreshold according to their type
// Present only for array (repeated) types.
type ProfileMetricThreshold_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ProfileMetricThreshold_FieldPath
	ContainsValue(*Profile_MetricThreshold) bool
}

// ParseProfileMetricThreshold_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseProfileMetricThreshold_FieldPathArrayItemValue(pathStr, valueStr string) (ProfileMetricThreshold_FieldPathArrayItemValue, error) {
	fp, err := ParseProfileMetricThreshold_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MetricThreshold field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ProfileMetricThreshold_FieldPathArrayItemValue), nil
}

func MustParseProfileMetricThreshold_FieldPathArrayItemValue(pathStr, valueStr string) ProfileMetricThreshold_FieldPathArrayItemValue {
	fpaiv, err := ParseProfileMetricThreshold_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ProfileMetricThreshold_FieldTerminalPathArrayItemValue struct {
	ProfileMetricThreshold_FieldTerminalPath
	value interface{}
}

var _ ProfileMetricThreshold_FieldPathArrayItemValue = (*ProfileMetricThreshold_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Profile_MetricThreshold as interface{}
func (fpaiv *ProfileMetricThreshold_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ProfileMetricThreshold_FieldTerminalPathArrayItemValue) GetSingle(source *Profile_MetricThreshold) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ProfileMetricThreshold_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Profile_MetricThreshold))
}

// Contains returns a boolean indicating if value that is being held is present in given 'MetricThreshold'
func (fpaiv *ProfileMetricThreshold_FieldTerminalPathArrayItemValue) ContainsValue(source *Profile_MetricThreshold) bool {
	slice := fpaiv.ProfileMetricThreshold_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ProfileMetricThreshold_FieldPathArrayOfValues allows storing slice of values for MetricThreshold fields according to their type
type ProfileMetricThreshold_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ProfileMetricThreshold_FieldPath
}

func ParseProfileMetricThreshold_FieldPathArrayOfValues(pathStr, valuesStr string) (ProfileMetricThreshold_FieldPathArrayOfValues, error) {
	fp, err := ParseProfileMetricThreshold_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing MetricThreshold field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ProfileMetricThreshold_FieldPathArrayOfValues), nil
}

func MustParseProfileMetricThreshold_FieldPathArrayOfValues(pathStr, valuesStr string) ProfileMetricThreshold_FieldPathArrayOfValues {
	fpaov, err := ParseProfileMetricThreshold_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ProfileMetricThreshold_FieldTerminalPathArrayOfValues struct {
	ProfileMetricThreshold_FieldTerminalPath
	values interface{}
}

var _ ProfileMetricThreshold_FieldPathArrayOfValues = (*ProfileMetricThreshold_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ProfileMetricThreshold_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ProfileMetricThreshold_FieldPathSelectorAggregationReducer:
		for _, v := range fpaov.values.([]monitoring_common.Aggregation_Reducer) {
			values = append(values, v)
		}
	case ProfileMetricThreshold_FieldPathSelectorMetricType:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ProfileMetricThreshold_FieldPathSelectorValue:
		for _, v := range fpaov.values.([]float64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ProfileMetricThreshold_FieldTerminalPathArrayOfValues) AsAggregationReducerArrayOfValues() ([]monitoring_common.Aggregation_Reducer, bool) {
	res, ok := fpaov.values.([]monitoring_common.Aggregation_Reducer)
	return res, ok
}
func (fpaov *ProfileMetricThreshold_FieldTerminalPathArrayOfValues) AsMetricTypeArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ProfileMetricThreshold_FieldTerminalPathArrayOfValues) AsValueArrayOfValues() ([]float64, bool) {
	res, ok := fpaov.values.([]float64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type QualityProfile_FieldPath interface {
	gotenobject.FieldPath
	Selector() QualityProfile_FieldPathSelector
	Get(source *QualityProfile) []interface{}
	GetSingle(source *QualityProfile) (interface{}, bool)
	ClearValue(item *QualityProfile)

	// Those methods build corresponding QualityProfile_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) QualityProfile_FieldPathValue
	WithIArrayOfValues(values interface{}) QualityProfile_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) QualityProfile_FieldPathArrayItemValue
}

type QualityProfile_FieldPathSelector int32

const (
	QualityProfile_FieldPathSelectorName          QualityProfile_FieldPathSelector = 0
	QualityProfile_FieldPathSelectorDisplayName   QualityProfile_FieldPathSelector = 1
	QualityProfile_FieldPathSelectorDescription   QualityProfile_FieldPathSelector = 2
	QualityProfile_FieldPathSelectorSourceProject QualityProfile_FieldPathSelector = 3
	QualityProfile_FieldPathSelectorProfiles      QualityProfile_FieldPathSelector = 4
	QualityProfile_FieldPathSelectorMetadata      QualityProfile_FieldPathSelector = 5
)

func (s QualityProfile_FieldPathSelector) String() string {
	switch s {
	case QualityProfile_FieldPathSelectorName:
		return "name"
	case QualityProfile_FieldPathSelectorDisplayName:
		return "display_name"
	case QualityProfile_FieldPathSelectorDescription:
		return "description"
	case QualityProfile_FieldPathSelectorSourceProject:
		return "source_project"
	case QualityProfile_FieldPathSelectorProfiles:
		return "profiles"
	case QualityProfile_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", s))
	}
}

func BuildQualityProfile_FieldPath(fp gotenobject.RawFieldPath) (QualityProfile_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object QualityProfile")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorDisplayName}, nil
		case "description":
			return &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorDescription}, nil
		case "source_project", "sourceProject", "source-project":
			return &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorSourceProject}, nil
		case "profiles":
			return &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorProfiles}, nil
		case "metadata":
			return &QualityProfile_FieldTerminalPath{selector: QualityProfile_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "profiles":
			if subpath, err := BuildProfile_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &QualityProfile_FieldSubPath{selector: QualityProfile_FieldPathSelectorProfiles, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &QualityProfile_FieldSubPath{selector: QualityProfile_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object QualityProfile", fp)
}

func ParseQualityProfile_FieldPath(rawField string) (QualityProfile_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildQualityProfile_FieldPath(fp)
}

func MustParseQualityProfile_FieldPath(rawField string) QualityProfile_FieldPath {
	fp, err := ParseQualityProfile_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type QualityProfile_FieldTerminalPath struct {
	selector QualityProfile_FieldPathSelector
}

var _ QualityProfile_FieldPath = (*QualityProfile_FieldTerminalPath)(nil)

func (fp *QualityProfile_FieldTerminalPath) Selector() QualityProfile_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *QualityProfile_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *QualityProfile_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source QualityProfile
func (fp *QualityProfile_FieldTerminalPath) Get(source *QualityProfile) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case QualityProfile_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case QualityProfile_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case QualityProfile_FieldPathSelectorDescription:
			values = append(values, source.Description)
		case QualityProfile_FieldPathSelectorSourceProject:
			if source.SourceProject != nil {
				values = append(values, source.SourceProject)
			}
		case QualityProfile_FieldPathSelectorProfiles:
			for _, value := range source.GetProfiles() {
				values = append(values, value)
			}
		case QualityProfile_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fp.selector))
		}
	}
	return
}

func (fp *QualityProfile_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*QualityProfile))
}

// GetSingle returns value pointed by specific field of from source QualityProfile
func (fp *QualityProfile_FieldTerminalPath) GetSingle(source *QualityProfile) (interface{}, bool) {
	switch fp.selector {
	case QualityProfile_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case QualityProfile_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case QualityProfile_FieldPathSelectorDescription:
		return source.GetDescription(), source != nil
	case QualityProfile_FieldPathSelectorSourceProject:
		res := source.GetSourceProject()
		return res, res != nil
	case QualityProfile_FieldPathSelectorProfiles:
		res := source.GetProfiles()
		return res, res != nil
	case QualityProfile_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fp.selector))
	}
}

func (fp *QualityProfile_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*QualityProfile))
}

// GetDefault returns a default value of the field type
func (fp *QualityProfile_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case QualityProfile_FieldPathSelectorName:
		return (*Name)(nil)
	case QualityProfile_FieldPathSelectorDisplayName:
		return ""
	case QualityProfile_FieldPathSelectorDescription:
		return ""
	case QualityProfile_FieldPathSelectorSourceProject:
		return (*project.Reference)(nil)
	case QualityProfile_FieldPathSelectorProfiles:
		return ([]*Profile)(nil)
	case QualityProfile_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fp.selector))
	}
}

func (fp *QualityProfile_FieldTerminalPath) ClearValue(item *QualityProfile) {
	if item != nil {
		switch fp.selector {
		case QualityProfile_FieldPathSelectorName:
			item.Name = nil
		case QualityProfile_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case QualityProfile_FieldPathSelectorDescription:
			item.Description = ""
		case QualityProfile_FieldPathSelectorSourceProject:
			item.SourceProject = nil
		case QualityProfile_FieldPathSelectorProfiles:
			item.Profiles = nil
		case QualityProfile_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fp.selector))
		}
	}
}

func (fp *QualityProfile_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*QualityProfile))
}

// IsLeaf - whether field path is holds simple value
func (fp *QualityProfile_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == QualityProfile_FieldPathSelectorName ||
		fp.selector == QualityProfile_FieldPathSelectorDisplayName ||
		fp.selector == QualityProfile_FieldPathSelectorDescription ||
		fp.selector == QualityProfile_FieldPathSelectorSourceProject
}

func (fp *QualityProfile_FieldTerminalPath) WithIValue(value interface{}) QualityProfile_FieldPathValue {
	switch fp.selector {
	case QualityProfile_FieldPathSelectorName:
		return &QualityProfile_FieldTerminalPathValue{QualityProfile_FieldTerminalPath: *fp, value: value.(*Name)}
	case QualityProfile_FieldPathSelectorDisplayName:
		return &QualityProfile_FieldTerminalPathValue{QualityProfile_FieldTerminalPath: *fp, value: value.(string)}
	case QualityProfile_FieldPathSelectorDescription:
		return &QualityProfile_FieldTerminalPathValue{QualityProfile_FieldTerminalPath: *fp, value: value.(string)}
	case QualityProfile_FieldPathSelectorSourceProject:
		return &QualityProfile_FieldTerminalPathValue{QualityProfile_FieldTerminalPath: *fp, value: value.(*project.Reference)}
	case QualityProfile_FieldPathSelectorProfiles:
		return &QualityProfile_FieldTerminalPathValue{QualityProfile_FieldTerminalPath: *fp, value: value.([]*Profile)}
	case QualityProfile_FieldPathSelectorMetadata:
		return &QualityProfile_FieldTerminalPathValue{QualityProfile_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fp.selector))
	}
}

func (fp *QualityProfile_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *QualityProfile_FieldTerminalPath) WithIArrayOfValues(values interface{}) QualityProfile_FieldPathArrayOfValues {
	fpaov := &QualityProfile_FieldTerminalPathArrayOfValues{QualityProfile_FieldTerminalPath: *fp}
	switch fp.selector {
	case QualityProfile_FieldPathSelectorName:
		return &QualityProfile_FieldTerminalPathArrayOfValues{QualityProfile_FieldTerminalPath: *fp, values: values.([]*Name)}
	case QualityProfile_FieldPathSelectorDisplayName:
		return &QualityProfile_FieldTerminalPathArrayOfValues{QualityProfile_FieldTerminalPath: *fp, values: values.([]string)}
	case QualityProfile_FieldPathSelectorDescription:
		return &QualityProfile_FieldTerminalPathArrayOfValues{QualityProfile_FieldTerminalPath: *fp, values: values.([]string)}
	case QualityProfile_FieldPathSelectorSourceProject:
		return &QualityProfile_FieldTerminalPathArrayOfValues{QualityProfile_FieldTerminalPath: *fp, values: values.([]*project.Reference)}
	case QualityProfile_FieldPathSelectorProfiles:
		return &QualityProfile_FieldTerminalPathArrayOfValues{QualityProfile_FieldTerminalPath: *fp, values: values.([][]*Profile)}
	case QualityProfile_FieldPathSelectorMetadata:
		return &QualityProfile_FieldTerminalPathArrayOfValues{QualityProfile_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fp.selector))
	}
	return fpaov
}

func (fp *QualityProfile_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *QualityProfile_FieldTerminalPath) WithIArrayItemValue(value interface{}) QualityProfile_FieldPathArrayItemValue {
	switch fp.selector {
	case QualityProfile_FieldPathSelectorProfiles:
		return &QualityProfile_FieldTerminalPathArrayItemValue{QualityProfile_FieldTerminalPath: *fp, value: value.(*Profile)}
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fp.selector))
	}
}

func (fp *QualityProfile_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type QualityProfile_FieldSubPath struct {
	selector QualityProfile_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ QualityProfile_FieldPath = (*QualityProfile_FieldSubPath)(nil)

func (fps *QualityProfile_FieldSubPath) Selector() QualityProfile_FieldPathSelector {
	return fps.selector
}
func (fps *QualityProfile_FieldSubPath) AsProfilesSubPath() (Profile_FieldPath, bool) {
	res, ok := fps.subPath.(Profile_FieldPath)
	return res, ok
}
func (fps *QualityProfile_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *QualityProfile_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *QualityProfile_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source QualityProfile
func (fps *QualityProfile_FieldSubPath) Get(source *QualityProfile) (values []interface{}) {
	if asProfileFieldPath, ok := fps.AsProfilesSubPath(); ok {
		for _, item := range source.GetProfiles() {
			values = append(values, asProfileFieldPath.Get(item)...)
		}
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fps.selector))
	}
	return
}

func (fps *QualityProfile_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*QualityProfile))
}

// GetSingle returns value of selected field from source QualityProfile
func (fps *QualityProfile_FieldSubPath) GetSingle(source *QualityProfile) (interface{}, bool) {
	switch fps.selector {
	case QualityProfile_FieldPathSelectorProfiles:
		if len(source.GetProfiles()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetProfiles()[0])
	case QualityProfile_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fps.selector))
	}
}

func (fps *QualityProfile_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*QualityProfile))
}

// GetDefault returns a default value of the field type
func (fps *QualityProfile_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *QualityProfile_FieldSubPath) ClearValue(item *QualityProfile) {
	if item != nil {
		switch fps.selector {
		case QualityProfile_FieldPathSelectorProfiles:
			for _, subItem := range item.Profiles {
				fps.subPath.ClearValueRaw(subItem)
			}
		case QualityProfile_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fps.selector))
		}
	}
}

func (fps *QualityProfile_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*QualityProfile))
}

// IsLeaf - whether field path is holds simple value
func (fps *QualityProfile_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *QualityProfile_FieldSubPath) WithIValue(value interface{}) QualityProfile_FieldPathValue {
	return &QualityProfile_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *QualityProfile_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *QualityProfile_FieldSubPath) WithIArrayOfValues(values interface{}) QualityProfile_FieldPathArrayOfValues {
	return &QualityProfile_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *QualityProfile_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *QualityProfile_FieldSubPath) WithIArrayItemValue(value interface{}) QualityProfile_FieldPathArrayItemValue {
	return &QualityProfile_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *QualityProfile_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// QualityProfile_FieldPathValue allows storing values for QualityProfile fields according to their type
type QualityProfile_FieldPathValue interface {
	QualityProfile_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **QualityProfile)
	CompareWith(*QualityProfile) (cmp int, comparable bool)
}

func ParseQualityProfile_FieldPathValue(pathStr, valueStr string) (QualityProfile_FieldPathValue, error) {
	fp, err := ParseQualityProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing QualityProfile field path value from %s: %v", valueStr, err)
	}
	return fpv.(QualityProfile_FieldPathValue), nil
}

func MustParseQualityProfile_FieldPathValue(pathStr, valueStr string) QualityProfile_FieldPathValue {
	fpv, err := ParseQualityProfile_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type QualityProfile_FieldTerminalPathValue struct {
	QualityProfile_FieldTerminalPath
	value interface{}
}

var _ QualityProfile_FieldPathValue = (*QualityProfile_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'QualityProfile' as interface{}
func (fpv *QualityProfile_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *QualityProfile_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *QualityProfile_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *QualityProfile_FieldTerminalPathValue) AsDescriptionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *QualityProfile_FieldTerminalPathValue) AsSourceProjectValue() (*project.Reference, bool) {
	res, ok := fpv.value.(*project.Reference)
	return res, ok
}
func (fpv *QualityProfile_FieldTerminalPathValue) AsProfilesValue() ([]*Profile, bool) {
	res, ok := fpv.value.([]*Profile)
	return res, ok
}
func (fpv *QualityProfile_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object QualityProfile
func (fpv *QualityProfile_FieldTerminalPathValue) SetTo(target **QualityProfile) {
	if *target == nil {
		*target = new(QualityProfile)
	}
	switch fpv.selector {
	case QualityProfile_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case QualityProfile_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case QualityProfile_FieldPathSelectorDescription:
		(*target).Description = fpv.value.(string)
	case QualityProfile_FieldPathSelectorSourceProject:
		(*target).SourceProject = fpv.value.(*project.Reference)
	case QualityProfile_FieldPathSelectorProfiles:
		(*target).Profiles = fpv.value.([]*Profile)
	case QualityProfile_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fpv.selector))
	}
}

func (fpv *QualityProfile_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*QualityProfile)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'QualityProfile_FieldTerminalPathValue' with the value under path in 'QualityProfile'.
func (fpv *QualityProfile_FieldTerminalPathValue) CompareWith(source *QualityProfile) (int, bool) {
	switch fpv.selector {
	case QualityProfile_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case QualityProfile_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case QualityProfile_FieldPathSelectorDescription:
		leftValue := fpv.value.(string)
		rightValue := source.GetDescription()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case QualityProfile_FieldPathSelectorSourceProject:
		leftValue := fpv.value.(*project.Reference)
		rightValue := source.GetSourceProject()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case QualityProfile_FieldPathSelectorProfiles:
		return 0, false
	case QualityProfile_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fpv.selector))
	}
}

func (fpv *QualityProfile_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*QualityProfile))
}

type QualityProfile_FieldSubPathValue struct {
	QualityProfile_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ QualityProfile_FieldPathValue = (*QualityProfile_FieldSubPathValue)(nil)

func (fpvs *QualityProfile_FieldSubPathValue) AsProfilesPathValue() (Profile_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(Profile_FieldPathValue)
	return res, ok
}
func (fpvs *QualityProfile_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *QualityProfile_FieldSubPathValue) SetTo(target **QualityProfile) {
	if *target == nil {
		*target = new(QualityProfile)
	}
	switch fpvs.Selector() {
	case QualityProfile_FieldPathSelectorProfiles:
		panic("FieldPath setter is unsupported for array subpaths")
	case QualityProfile_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fpvs.Selector()))
	}
}

func (fpvs *QualityProfile_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*QualityProfile)
	fpvs.SetTo(&typedObject)
}

func (fpvs *QualityProfile_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *QualityProfile_FieldSubPathValue) CompareWith(source *QualityProfile) (int, bool) {
	switch fpvs.Selector() {
	case QualityProfile_FieldPathSelectorProfiles:
		return 0, false // repeated field
	case QualityProfile_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fpvs.Selector()))
	}
}

func (fpvs *QualityProfile_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*QualityProfile))
}

// QualityProfile_FieldPathArrayItemValue allows storing single item in Path-specific values for QualityProfile according to their type
// Present only for array (repeated) types.
type QualityProfile_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	QualityProfile_FieldPath
	ContainsValue(*QualityProfile) bool
}

// ParseQualityProfile_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseQualityProfile_FieldPathArrayItemValue(pathStr, valueStr string) (QualityProfile_FieldPathArrayItemValue, error) {
	fp, err := ParseQualityProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing QualityProfile field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(QualityProfile_FieldPathArrayItemValue), nil
}

func MustParseQualityProfile_FieldPathArrayItemValue(pathStr, valueStr string) QualityProfile_FieldPathArrayItemValue {
	fpaiv, err := ParseQualityProfile_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type QualityProfile_FieldTerminalPathArrayItemValue struct {
	QualityProfile_FieldTerminalPath
	value interface{}
}

var _ QualityProfile_FieldPathArrayItemValue = (*QualityProfile_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object QualityProfile as interface{}
func (fpaiv *QualityProfile_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *QualityProfile_FieldTerminalPathArrayItemValue) AsProfilesItemValue() (*Profile, bool) {
	res, ok := fpaiv.value.(*Profile)
	return res, ok
}

func (fpaiv *QualityProfile_FieldTerminalPathArrayItemValue) GetSingle(source *QualityProfile) (interface{}, bool) {
	return nil, false
}

func (fpaiv *QualityProfile_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*QualityProfile))
}

// Contains returns a boolean indicating if value that is being held is present in given 'QualityProfile'
func (fpaiv *QualityProfile_FieldTerminalPathArrayItemValue) ContainsValue(source *QualityProfile) bool {
	slice := fpaiv.QualityProfile_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type QualityProfile_FieldSubPathArrayItemValue struct {
	QualityProfile_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *QualityProfile_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *QualityProfile_FieldSubPathArrayItemValue) AsProfilesPathItemValue() (Profile_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(Profile_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *QualityProfile_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'QualityProfile'
func (fpaivs *QualityProfile_FieldSubPathArrayItemValue) ContainsValue(source *QualityProfile) bool {
	switch fpaivs.Selector() {
	case QualityProfile_FieldPathSelectorProfiles:
		return false // repeated/map field
	case QualityProfile_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for QualityProfile: %d", fpaivs.Selector()))
	}
}

// QualityProfile_FieldPathArrayOfValues allows storing slice of values for QualityProfile fields according to their type
type QualityProfile_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	QualityProfile_FieldPath
}

func ParseQualityProfile_FieldPathArrayOfValues(pathStr, valuesStr string) (QualityProfile_FieldPathArrayOfValues, error) {
	fp, err := ParseQualityProfile_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing QualityProfile field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(QualityProfile_FieldPathArrayOfValues), nil
}

func MustParseQualityProfile_FieldPathArrayOfValues(pathStr, valuesStr string) QualityProfile_FieldPathArrayOfValues {
	fpaov, err := ParseQualityProfile_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type QualityProfile_FieldTerminalPathArrayOfValues struct {
	QualityProfile_FieldTerminalPath
	values interface{}
}

var _ QualityProfile_FieldPathArrayOfValues = (*QualityProfile_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *QualityProfile_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case QualityProfile_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case QualityProfile_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case QualityProfile_FieldPathSelectorDescription:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case QualityProfile_FieldPathSelectorSourceProject:
		for _, v := range fpaov.values.([]*project.Reference) {
			values = append(values, v)
		}
	case QualityProfile_FieldPathSelectorProfiles:
		for _, v := range fpaov.values.([][]*Profile) {
			values = append(values, v)
		}
	case QualityProfile_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *QualityProfile_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *QualityProfile_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *QualityProfile_FieldTerminalPathArrayOfValues) AsDescriptionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *QualityProfile_FieldTerminalPathArrayOfValues) AsSourceProjectArrayOfValues() ([]*project.Reference, bool) {
	res, ok := fpaov.values.([]*project.Reference)
	return res, ok
}
func (fpaov *QualityProfile_FieldTerminalPathArrayOfValues) AsProfilesArrayOfValues() ([][]*Profile, bool) {
	res, ok := fpaov.values.([][]*Profile)
	return res, ok
}
func (fpaov *QualityProfile_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type QualityProfile_FieldSubPathArrayOfValues struct {
	QualityProfile_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ QualityProfile_FieldPathArrayOfValues = (*QualityProfile_FieldSubPathArrayOfValues)(nil)

func (fpsaov *QualityProfile_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *QualityProfile_FieldSubPathArrayOfValues) AsProfilesPathArrayOfValues() (Profile_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(Profile_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *QualityProfile_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
