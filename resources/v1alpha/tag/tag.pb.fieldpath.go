// Code generated by protoc-gen-goten-object
// File: watchdog/proto/v1alpha/tag.proto
// DO NOT EDIT!!!

package tag

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probing_distribution"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &probing_distribution.ProbingDistribution{}
	_ = &project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Tag_FieldPath interface {
	gotenobject.FieldPath
	Selector() Tag_FieldPathSelector
	Get(source *Tag) []interface{}
	GetSingle(source *Tag) (interface{}, bool)
	ClearValue(item *Tag)

	// Those methods build corresponding Tag_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Tag_FieldPathValue
	WithIArrayOfValues(values interface{}) Tag_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Tag_FieldPathArrayItemValue
}

type Tag_FieldPathSelector int32

const (
	Tag_FieldPathSelectorName        Tag_FieldPathSelector = 0
	Tag_FieldPathSelectorDisplayName Tag_FieldPathSelector = 1
	Tag_FieldPathSelectorState       Tag_FieldPathSelector = 2
	Tag_FieldPathSelectorMetadata    Tag_FieldPathSelector = 3
)

func (s Tag_FieldPathSelector) String() string {
	switch s {
	case Tag_FieldPathSelectorName:
		return "name"
	case Tag_FieldPathSelectorDisplayName:
		return "display_name"
	case Tag_FieldPathSelectorState:
		return "state"
	case Tag_FieldPathSelectorMetadata:
		return "metadata"
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", s))
	}
}

func BuildTag_FieldPath(fp gotenobject.RawFieldPath) (Tag_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Tag")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Tag_FieldTerminalPath{selector: Tag_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &Tag_FieldTerminalPath{selector: Tag_FieldPathSelectorDisplayName}, nil
		case "state":
			return &Tag_FieldTerminalPath{selector: Tag_FieldPathSelectorState}, nil
		case "metadata":
			return &Tag_FieldTerminalPath{selector: Tag_FieldPathSelectorMetadata}, nil
		}
	} else {
		switch fp[0] {
		case "state":
			if subpath, err := BuildTagState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Tag_FieldSubPath{selector: Tag_FieldPathSelectorState, subPath: subpath}, nil
			}
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Tag_FieldSubPath{selector: Tag_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Tag", fp)
}

func ParseTag_FieldPath(rawField string) (Tag_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTag_FieldPath(fp)
}

func MustParseTag_FieldPath(rawField string) Tag_FieldPath {
	fp, err := ParseTag_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Tag_FieldTerminalPath struct {
	selector Tag_FieldPathSelector
}

var _ Tag_FieldPath = (*Tag_FieldTerminalPath)(nil)

func (fp *Tag_FieldTerminalPath) Selector() Tag_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Tag_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Tag_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Tag
func (fp *Tag_FieldTerminalPath) Get(source *Tag) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Tag_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Tag_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Tag_FieldPathSelectorState:
			if source.State != nil {
				values = append(values, source.State)
			}
		case Tag_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Tag: %d", fp.selector))
		}
	}
	return
}

func (fp *Tag_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Tag))
}

// GetSingle returns value pointed by specific field of from source Tag
func (fp *Tag_FieldTerminalPath) GetSingle(source *Tag) (interface{}, bool) {
	switch fp.selector {
	case Tag_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Tag_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Tag_FieldPathSelectorState:
		res := source.GetState()
		return res, res != nil
	case Tag_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fp.selector))
	}
}

func (fp *Tag_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Tag))
}

// GetDefault returns a default value of the field type
func (fp *Tag_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Tag_FieldPathSelectorName:
		return (*Name)(nil)
	case Tag_FieldPathSelectorDisplayName:
		return ""
	case Tag_FieldPathSelectorState:
		return (*Tag_State)(nil)
	case Tag_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fp.selector))
	}
}

func (fp *Tag_FieldTerminalPath) ClearValue(item *Tag) {
	if item != nil {
		switch fp.selector {
		case Tag_FieldPathSelectorName:
			item.Name = nil
		case Tag_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Tag_FieldPathSelectorState:
			item.State = nil
		case Tag_FieldPathSelectorMetadata:
			item.Metadata = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Tag: %d", fp.selector))
		}
	}
}

func (fp *Tag_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Tag))
}

// IsLeaf - whether field path is holds simple value
func (fp *Tag_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Tag_FieldPathSelectorName ||
		fp.selector == Tag_FieldPathSelectorDisplayName
}

func (fp *Tag_FieldTerminalPath) WithIValue(value interface{}) Tag_FieldPathValue {
	switch fp.selector {
	case Tag_FieldPathSelectorName:
		return &Tag_FieldTerminalPathValue{Tag_FieldTerminalPath: *fp, value: value.(*Name)}
	case Tag_FieldPathSelectorDisplayName:
		return &Tag_FieldTerminalPathValue{Tag_FieldTerminalPath: *fp, value: value.(string)}
	case Tag_FieldPathSelectorState:
		return &Tag_FieldTerminalPathValue{Tag_FieldTerminalPath: *fp, value: value.(*Tag_State)}
	case Tag_FieldPathSelectorMetadata:
		return &Tag_FieldTerminalPathValue{Tag_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fp.selector))
	}
}

func (fp *Tag_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Tag_FieldTerminalPath) WithIArrayOfValues(values interface{}) Tag_FieldPathArrayOfValues {
	fpaov := &Tag_FieldTerminalPathArrayOfValues{Tag_FieldTerminalPath: *fp}
	switch fp.selector {
	case Tag_FieldPathSelectorName:
		return &Tag_FieldTerminalPathArrayOfValues{Tag_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Tag_FieldPathSelectorDisplayName:
		return &Tag_FieldTerminalPathArrayOfValues{Tag_FieldTerminalPath: *fp, values: values.([]string)}
	case Tag_FieldPathSelectorState:
		return &Tag_FieldTerminalPathArrayOfValues{Tag_FieldTerminalPath: *fp, values: values.([]*Tag_State)}
	case Tag_FieldPathSelectorMetadata:
		return &Tag_FieldTerminalPathArrayOfValues{Tag_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fp.selector))
	}
	return fpaov
}

func (fp *Tag_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Tag_FieldTerminalPath) WithIArrayItemValue(value interface{}) Tag_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fp.selector))
	}
}

func (fp *Tag_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Tag_FieldSubPath struct {
	selector Tag_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Tag_FieldPath = (*Tag_FieldSubPath)(nil)

func (fps *Tag_FieldSubPath) Selector() Tag_FieldPathSelector {
	return fps.selector
}
func (fps *Tag_FieldSubPath) AsStateSubPath() (TagState_FieldPath, bool) {
	res, ok := fps.subPath.(TagState_FieldPath)
	return res, ok
}
func (fps *Tag_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Tag_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Tag_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Tag
func (fps *Tag_FieldSubPath) Get(source *Tag) (values []interface{}) {
	if asStateFieldPath, ok := fps.AsStateSubPath(); ok {
		values = append(values, asStateFieldPath.Get(source.GetState())...)
	} else if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fps.selector))
	}
	return
}

func (fps *Tag_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Tag))
}

// GetSingle returns value of selected field from source Tag
func (fps *Tag_FieldSubPath) GetSingle(source *Tag) (interface{}, bool) {
	switch fps.selector {
	case Tag_FieldPathSelectorState:
		if source.GetState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetState())
	case Tag_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fps.selector))
	}
}

func (fps *Tag_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Tag))
}

// GetDefault returns a default value of the field type
func (fps *Tag_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Tag_FieldSubPath) ClearValue(item *Tag) {
	if item != nil {
		switch fps.selector {
		case Tag_FieldPathSelectorState:
			fps.subPath.ClearValueRaw(item.State)
		case Tag_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		default:
			panic(fmt.Sprintf("Invalid selector for Tag: %d", fps.selector))
		}
	}
}

func (fps *Tag_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Tag))
}

// IsLeaf - whether field path is holds simple value
func (fps *Tag_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Tag_FieldSubPath) WithIValue(value interface{}) Tag_FieldPathValue {
	return &Tag_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Tag_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Tag_FieldSubPath) WithIArrayOfValues(values interface{}) Tag_FieldPathArrayOfValues {
	return &Tag_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Tag_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Tag_FieldSubPath) WithIArrayItemValue(value interface{}) Tag_FieldPathArrayItemValue {
	return &Tag_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Tag_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Tag_FieldPathValue allows storing values for Tag fields according to their type
type Tag_FieldPathValue interface {
	Tag_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Tag)
	CompareWith(*Tag) (cmp int, comparable bool)
}

func ParseTag_FieldPathValue(pathStr, valueStr string) (Tag_FieldPathValue, error) {
	fp, err := ParseTag_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Tag field path value from %s: %v", valueStr, err)
	}
	return fpv.(Tag_FieldPathValue), nil
}

func MustParseTag_FieldPathValue(pathStr, valueStr string) Tag_FieldPathValue {
	fpv, err := ParseTag_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Tag_FieldTerminalPathValue struct {
	Tag_FieldTerminalPath
	value interface{}
}

var _ Tag_FieldPathValue = (*Tag_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Tag' as interface{}
func (fpv *Tag_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Tag_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Tag_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Tag_FieldTerminalPathValue) AsStateValue() (*Tag_State, bool) {
	res, ok := fpv.value.(*Tag_State)
	return res, ok
}
func (fpv *Tag_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}

// SetTo stores value for selected field for object Tag
func (fpv *Tag_FieldTerminalPathValue) SetTo(target **Tag) {
	if *target == nil {
		*target = new(Tag)
	}
	switch fpv.selector {
	case Tag_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Tag_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Tag_FieldPathSelectorState:
		(*target).State = fpv.value.(*Tag_State)
	case Tag_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fpv.selector))
	}
}

func (fpv *Tag_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Tag)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Tag_FieldTerminalPathValue' with the value under path in 'Tag'.
func (fpv *Tag_FieldTerminalPathValue) CompareWith(source *Tag) (int, bool) {
	switch fpv.selector {
	case Tag_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Tag_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Tag_FieldPathSelectorState:
		return 0, false
	case Tag_FieldPathSelectorMetadata:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fpv.selector))
	}
}

func (fpv *Tag_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Tag))
}

type Tag_FieldSubPathValue struct {
	Tag_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Tag_FieldPathValue = (*Tag_FieldSubPathValue)(nil)

func (fpvs *Tag_FieldSubPathValue) AsStatePathValue() (TagState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(TagState_FieldPathValue)
	return res, ok
}
func (fpvs *Tag_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}

func (fpvs *Tag_FieldSubPathValue) SetTo(target **Tag) {
	if *target == nil {
		*target = new(Tag)
	}
	switch fpvs.Selector() {
	case Tag_FieldPathSelectorState:
		fpvs.subPathValue.(TagState_FieldPathValue).SetTo(&(*target).State)
	case Tag_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fpvs.Selector()))
	}
}

func (fpvs *Tag_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Tag)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Tag_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Tag_FieldSubPathValue) CompareWith(source *Tag) (int, bool) {
	switch fpvs.Selector() {
	case Tag_FieldPathSelectorState:
		return fpvs.subPathValue.(TagState_FieldPathValue).CompareWith(source.GetState())
	case Tag_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fpvs.Selector()))
	}
}

func (fpvs *Tag_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Tag))
}

// Tag_FieldPathArrayItemValue allows storing single item in Path-specific values for Tag according to their type
// Present only for array (repeated) types.
type Tag_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Tag_FieldPath
	ContainsValue(*Tag) bool
}

// ParseTag_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTag_FieldPathArrayItemValue(pathStr, valueStr string) (Tag_FieldPathArrayItemValue, error) {
	fp, err := ParseTag_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Tag field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Tag_FieldPathArrayItemValue), nil
}

func MustParseTag_FieldPathArrayItemValue(pathStr, valueStr string) Tag_FieldPathArrayItemValue {
	fpaiv, err := ParseTag_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Tag_FieldTerminalPathArrayItemValue struct {
	Tag_FieldTerminalPath
	value interface{}
}

var _ Tag_FieldPathArrayItemValue = (*Tag_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Tag as interface{}
func (fpaiv *Tag_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *Tag_FieldTerminalPathArrayItemValue) GetSingle(source *Tag) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Tag_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Tag))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Tag'
func (fpaiv *Tag_FieldTerminalPathArrayItemValue) ContainsValue(source *Tag) bool {
	slice := fpaiv.Tag_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Tag_FieldSubPathArrayItemValue struct {
	Tag_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Tag_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Tag_FieldSubPathArrayItemValue) AsStatePathItemValue() (TagState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(TagState_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Tag_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Tag'
func (fpaivs *Tag_FieldSubPathArrayItemValue) ContainsValue(source *Tag) bool {
	switch fpaivs.Selector() {
	case Tag_FieldPathSelectorState:
		return fpaivs.subPathItemValue.(TagState_FieldPathArrayItemValue).ContainsValue(source.GetState())
	case Tag_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	default:
		panic(fmt.Sprintf("Invalid selector for Tag: %d", fpaivs.Selector()))
	}
}

// Tag_FieldPathArrayOfValues allows storing slice of values for Tag fields according to their type
type Tag_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Tag_FieldPath
}

func ParseTag_FieldPathArrayOfValues(pathStr, valuesStr string) (Tag_FieldPathArrayOfValues, error) {
	fp, err := ParseTag_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Tag field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Tag_FieldPathArrayOfValues), nil
}

func MustParseTag_FieldPathArrayOfValues(pathStr, valuesStr string) Tag_FieldPathArrayOfValues {
	fpaov, err := ParseTag_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Tag_FieldTerminalPathArrayOfValues struct {
	Tag_FieldTerminalPath
	values interface{}
}

var _ Tag_FieldPathArrayOfValues = (*Tag_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Tag_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Tag_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Tag_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Tag_FieldPathSelectorState:
		for _, v := range fpaov.values.([]*Tag_State) {
			values = append(values, v)
		}
	case Tag_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Tag_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Tag_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Tag_FieldTerminalPathArrayOfValues) AsStateArrayOfValues() ([]*Tag_State, bool) {
	res, ok := fpaov.values.([]*Tag_State)
	return res, ok
}
func (fpaov *Tag_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}

type Tag_FieldSubPathArrayOfValues struct {
	Tag_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Tag_FieldPathArrayOfValues = (*Tag_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Tag_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Tag_FieldSubPathArrayOfValues) AsStatePathArrayOfValues() (TagState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(TagState_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Tag_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type TagState_FieldPath interface {
	gotenobject.FieldPath
	Selector() TagState_FieldPathSelector
	Get(source *Tag_State) []interface{}
	GetSingle(source *Tag_State) (interface{}, bool)
	ClearValue(item *Tag_State)

	// Those methods build corresponding TagState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) TagState_FieldPathValue
	WithIArrayOfValues(values interface{}) TagState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) TagState_FieldPathArrayItemValue
}

type TagState_FieldPathSelector int32

const (
	TagState_FieldPathSelectorResourceTypeCounters           TagState_FieldPathSelector = 0
	TagState_FieldPathSelectorDistributionsViaTargetSelector TagState_FieldPathSelector = 1
	TagState_FieldPathSelectorDistributionsViaProbeSelector  TagState_FieldPathSelector = 2
)

func (s TagState_FieldPathSelector) String() string {
	switch s {
	case TagState_FieldPathSelectorResourceTypeCounters:
		return "resource_type_counters"
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		return "distributions_via_target_selector"
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		return "distributions_via_probe_selector"
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", s))
	}
}

func BuildTagState_FieldPath(fp gotenobject.RawFieldPath) (TagState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Tag_State")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "resource_type_counters", "resourceTypeCounters", "resource-type-counters":
			return &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorResourceTypeCounters}, nil
		case "distributions_via_target_selector", "distributionsViaTargetSelector", "distributions-via-target-selector":
			return &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorDistributionsViaTargetSelector}, nil
		case "distributions_via_probe_selector", "distributionsViaProbeSelector", "distributions-via-probe-selector":
			return &TagState_FieldTerminalPath{selector: TagState_FieldPathSelectorDistributionsViaProbeSelector}, nil
		}
	} else {
		switch fp[0] {
		case "resource_type_counters", "resourceTypeCounters", "resource-type-counters":
			if len(fp) > 2 {
				return nil, status.Errorf(codes.InvalidArgument, "sub path for maps ('%s') are not supported (object Tag_State)", fp)
			}
			return &TagState_FieldPathMap{selector: TagState_FieldPathSelectorResourceTypeCounters, key: fp[1]}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Tag_State", fp)
}

func ParseTagState_FieldPath(rawField string) (TagState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildTagState_FieldPath(fp)
}

func MustParseTagState_FieldPath(rawField string) TagState_FieldPath {
	fp, err := ParseTagState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type TagState_FieldTerminalPath struct {
	selector TagState_FieldPathSelector
}

var _ TagState_FieldPath = (*TagState_FieldTerminalPath)(nil)

func (fp *TagState_FieldTerminalPath) Selector() TagState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *TagState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *TagState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Tag_State
func (fp *TagState_FieldTerminalPath) Get(source *Tag_State) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case TagState_FieldPathSelectorResourceTypeCounters:
			values = append(values, source.ResourceTypeCounters)
		case TagState_FieldPathSelectorDistributionsViaTargetSelector:
			for _, value := range source.GetDistributionsViaTargetSelector() {
				values = append(values, value)
			}
		case TagState_FieldPathSelectorDistributionsViaProbeSelector:
			for _, value := range source.GetDistributionsViaProbeSelector() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fp.selector))
		}
	}
	return
}

func (fp *TagState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Tag_State))
}

// GetSingle returns value pointed by specific field of from source Tag_State
func (fp *TagState_FieldTerminalPath) GetSingle(source *Tag_State) (interface{}, bool) {
	switch fp.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		res := source.GetResourceTypeCounters()
		return res, res != nil
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		res := source.GetDistributionsViaTargetSelector()
		return res, res != nil
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		res := source.GetDistributionsViaProbeSelector()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fp.selector))
	}
}

func (fp *TagState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Tag_State))
}

// GetDefault returns a default value of the field type
func (fp *TagState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		return (map[string]int64)(nil)
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		return ([]*probing_distribution.Reference)(nil)
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		return ([]*probing_distribution.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fp.selector))
	}
}

func (fp *TagState_FieldTerminalPath) ClearValue(item *Tag_State) {
	if item != nil {
		switch fp.selector {
		case TagState_FieldPathSelectorResourceTypeCounters:
			item.ResourceTypeCounters = nil
		case TagState_FieldPathSelectorDistributionsViaTargetSelector:
			item.DistributionsViaTargetSelector = nil
		case TagState_FieldPathSelectorDistributionsViaProbeSelector:
			item.DistributionsViaProbeSelector = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fp.selector))
		}
	}
}

func (fp *TagState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Tag_State))
}

// IsLeaf - whether field path is holds simple value
func (fp *TagState_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == TagState_FieldPathSelectorResourceTypeCounters ||
		fp.selector == TagState_FieldPathSelectorDistributionsViaTargetSelector ||
		fp.selector == TagState_FieldPathSelectorDistributionsViaProbeSelector
}

func (fp *TagState_FieldTerminalPath) WithIValue(value interface{}) TagState_FieldPathValue {
	switch fp.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		return &TagState_FieldTerminalPathValue{TagState_FieldTerminalPath: *fp, value: value.(map[string]int64)}
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		return &TagState_FieldTerminalPathValue{TagState_FieldTerminalPath: *fp, value: value.([]*probing_distribution.Reference)}
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		return &TagState_FieldTerminalPathValue{TagState_FieldTerminalPath: *fp, value: value.([]*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fp.selector))
	}
}

func (fp *TagState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *TagState_FieldTerminalPath) WithIArrayOfValues(values interface{}) TagState_FieldPathArrayOfValues {
	fpaov := &TagState_FieldTerminalPathArrayOfValues{TagState_FieldTerminalPath: *fp}
	switch fp.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		return &TagState_FieldTerminalPathArrayOfValues{TagState_FieldTerminalPath: *fp, values: values.([]map[string]int64)}
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		return &TagState_FieldTerminalPathArrayOfValues{TagState_FieldTerminalPath: *fp, values: values.([][]*probing_distribution.Reference)}
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		return &TagState_FieldTerminalPathArrayOfValues{TagState_FieldTerminalPath: *fp, values: values.([][]*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fp.selector))
	}
	return fpaov
}

func (fp *TagState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *TagState_FieldTerminalPath) WithIArrayItemValue(value interface{}) TagState_FieldPathArrayItemValue {
	switch fp.selector {
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		return &TagState_FieldTerminalPathArrayItemValue{TagState_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		return &TagState_FieldTerminalPathArrayItemValue{TagState_FieldTerminalPath: *fp, value: value.(*probing_distribution.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fp.selector))
	}
}

func (fp *TagState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// FieldPath for map type with additional Key information
type TagState_FieldPathMap struct {
	key      string
	selector TagState_FieldPathSelector
}

var _ TagState_FieldPath = (*TagState_FieldPathMap)(nil)

func (fpm *TagState_FieldPathMap) Selector() TagState_FieldPathSelector {
	return fpm.selector
}

func (fpm *TagState_FieldPathMap) Key() string {
	return fpm.key
}

// String returns path representation in proto convention
func (fpm *TagState_FieldPathMap) String() string {
	return fpm.selector.String() + "." + fpm.key
}

// JSONString returns path representation is JSON convention. Note that map keys are not transformed
func (fpm *TagState_FieldPathMap) JSONString() string {
	return strcase.ToLowerCamel(fpm.selector.String()) + "." + fpm.key
}

// Get returns all values pointed by selected field map key from source Tag_State
func (fpm *TagState_FieldPathMap) Get(source *Tag_State) (values []interface{}) {
	switch fpm.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		if value, ok := source.GetResourceTypeCounters()[fpm.key]; ok {
			values = append(values, value)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpm.selector))
	}
	return
}

func (fpm *TagState_FieldPathMap) GetRaw(source proto.Message) []interface{} {
	return fpm.Get(source.(*Tag_State))
}

// GetSingle returns value by selected field map key from source Tag_State
func (fpm *TagState_FieldPathMap) GetSingle(source *Tag_State) (interface{}, bool) {
	switch fpm.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		res, ok := source.GetResourceTypeCounters()[fpm.key]
		return res, ok
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpm.selector))
	}
}

func (fpm *TagState_FieldPathMap) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpm.GetSingle(source.(*Tag_State))
}

// GetDefault returns a default value of the field type
func (fpm *TagState_FieldPathMap) GetDefault() interface{} {
	switch fpm.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		var v int64
		return v
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpm.selector))
	}
}

func (fpm *TagState_FieldPathMap) ClearValue(item *Tag_State) {
	if item != nil {
		switch fpm.selector {
		case TagState_FieldPathSelectorResourceTypeCounters:
			delete(item.ResourceTypeCounters, fpm.key)
		default:
			panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpm.selector))
		}
	}
}

func (fpm *TagState_FieldPathMap) ClearValueRaw(item proto.Message) {
	fpm.ClearValue(item.(*Tag_State))
}

// IsLeaf - whether field path is holds simple value
func (fpm *TagState_FieldPathMap) IsLeaf() bool {
	switch fpm.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		return true
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpm.selector))
	}
}

func (fpm *TagState_FieldPathMap) WithIValue(value interface{}) TagState_FieldPathValue {
	switch fpm.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		return &TagState_FieldPathMapValue{TagState_FieldPathMap: *fpm, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpm.selector))
	}
}

func (fpm *TagState_FieldPathMap) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fpm.WithIValue(value)
}

func (fpm *TagState_FieldPathMap) WithIArrayOfValues(values interface{}) TagState_FieldPathArrayOfValues {
	switch fpm.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		return &TagState_FieldPathMapArrayOfValues{TagState_FieldPathMap: *fpm, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpm.selector))
	}
}

func (fpm *TagState_FieldPathMap) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fpm.WithIArrayOfValues(values)
}

func (fpm *TagState_FieldPathMap) WithIArrayItemValue(value interface{}) TagState_FieldPathArrayItemValue {
	panic("Cannot create array item value from map fieldpath")
}

func (fpm *TagState_FieldPathMap) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fpm.WithIArrayItemValue(value)
}

// TagState_FieldPathValue allows storing values for State fields according to their type
type TagState_FieldPathValue interface {
	TagState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Tag_State)
	CompareWith(*Tag_State) (cmp int, comparable bool)
}

func ParseTagState_FieldPathValue(pathStr, valueStr string) (TagState_FieldPathValue, error) {
	fp, err := ParseTagState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path value from %s: %v", valueStr, err)
	}
	return fpv.(TagState_FieldPathValue), nil
}

func MustParseTagState_FieldPathValue(pathStr, valueStr string) TagState_FieldPathValue {
	fpv, err := ParseTagState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type TagState_FieldTerminalPathValue struct {
	TagState_FieldTerminalPath
	value interface{}
}

var _ TagState_FieldPathValue = (*TagState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'State' as interface{}
func (fpv *TagState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *TagState_FieldTerminalPathValue) AsResourceTypeCountersValue() (map[string]int64, bool) {
	res, ok := fpv.value.(map[string]int64)
	return res, ok
}
func (fpv *TagState_FieldTerminalPathValue) AsDistributionsViaTargetSelectorValue() ([]*probing_distribution.Reference, bool) {
	res, ok := fpv.value.([]*probing_distribution.Reference)
	return res, ok
}
func (fpv *TagState_FieldTerminalPathValue) AsDistributionsViaProbeSelectorValue() ([]*probing_distribution.Reference, bool) {
	res, ok := fpv.value.([]*probing_distribution.Reference)
	return res, ok
}

// SetTo stores value for selected field for object State
func (fpv *TagState_FieldTerminalPathValue) SetTo(target **Tag_State) {
	if *target == nil {
		*target = new(Tag_State)
	}
	switch fpv.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		(*target).ResourceTypeCounters = fpv.value.(map[string]int64)
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		(*target).DistributionsViaTargetSelector = fpv.value.([]*probing_distribution.Reference)
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		(*target).DistributionsViaProbeSelector = fpv.value.([]*probing_distribution.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpv.selector))
	}
}

func (fpv *TagState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Tag_State)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TagState_FieldTerminalPathValue' with the value under path in 'Tag_State'.
func (fpv *TagState_FieldTerminalPathValue) CompareWith(source *Tag_State) (int, bool) {
	switch fpv.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		return 0, false
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		return 0, false
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpv.selector))
	}
}

func (fpv *TagState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Tag_State))
}

type TagState_FieldPathMapValue struct {
	TagState_FieldPathMap
	value interface{}
}

var _ TagState_FieldPathValue = (*TagState_FieldPathMapValue)(nil)

// GetValue returns value stored under selected field in State as interface{}
func (fpmv *TagState_FieldPathMapValue) GetRawValue() interface{} {
	return fpmv.value
}
func (fpmv *TagState_FieldPathMapValue) AsResourceTypeCountersElementValue() (int64, bool) {
	res, ok := fpmv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field in State
func (fpmv *TagState_FieldPathMapValue) SetTo(target **Tag_State) {
	if *target == nil {
		*target = new(Tag_State)
	}
	switch fpmv.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		if (*target).ResourceTypeCounters == nil {
			(*target).ResourceTypeCounters = make(map[string]int64)
		}
		(*target).ResourceTypeCounters[fpmv.key] = fpmv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpmv.selector))
	}
}

func (fpmv *TagState_FieldPathMapValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Tag_State)
	fpmv.SetTo(&typedObject)
}

// CompareWith compares value in the 'TagState_FieldPathMapValue' with the value under path in 'Tag_State'.
func (fpmv *TagState_FieldPathMapValue) CompareWith(source *Tag_State) (int, bool) {
	switch fpmv.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		leftValue := fpmv.value.(int64)
		rightValue := source.GetResourceTypeCounters()[fpmv.key]
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Tag_State: %d", fpmv.selector))
	}
}

func (fpmv *TagState_FieldPathMapValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpmv.CompareWith(source.(*Tag_State))
}

// TagState_FieldPathArrayItemValue allows storing single item in Path-specific values for State according to their type
// Present only for array (repeated) types.
type TagState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	TagState_FieldPath
	ContainsValue(*Tag_State) bool
}

// ParseTagState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseTagState_FieldPathArrayItemValue(pathStr, valueStr string) (TagState_FieldPathArrayItemValue, error) {
	fp, err := ParseTagState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(TagState_FieldPathArrayItemValue), nil
}

func MustParseTagState_FieldPathArrayItemValue(pathStr, valueStr string) TagState_FieldPathArrayItemValue {
	fpaiv, err := ParseTagState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type TagState_FieldTerminalPathArrayItemValue struct {
	TagState_FieldTerminalPath
	value interface{}
}

var _ TagState_FieldPathArrayItemValue = (*TagState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Tag_State as interface{}
func (fpaiv *TagState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *TagState_FieldTerminalPathArrayItemValue) AsDistributionsViaTargetSelectorItemValue() (*probing_distribution.Reference, bool) {
	res, ok := fpaiv.value.(*probing_distribution.Reference)
	return res, ok
}
func (fpaiv *TagState_FieldTerminalPathArrayItemValue) AsDistributionsViaProbeSelectorItemValue() (*probing_distribution.Reference, bool) {
	res, ok := fpaiv.value.(*probing_distribution.Reference)
	return res, ok
}

func (fpaiv *TagState_FieldTerminalPathArrayItemValue) GetSingle(source *Tag_State) (interface{}, bool) {
	return nil, false
}

func (fpaiv *TagState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Tag_State))
}

// Contains returns a boolean indicating if value that is being held is present in given 'State'
func (fpaiv *TagState_FieldTerminalPathArrayItemValue) ContainsValue(source *Tag_State) bool {
	slice := fpaiv.TagState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// TagState_FieldPathArrayOfValues allows storing slice of values for State fields according to their type
type TagState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	TagState_FieldPath
}

func ParseTagState_FieldPathArrayOfValues(pathStr, valuesStr string) (TagState_FieldPathArrayOfValues, error) {
	fp, err := ParseTagState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing State field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(TagState_FieldPathArrayOfValues), nil
}

func MustParseTagState_FieldPathArrayOfValues(pathStr, valuesStr string) TagState_FieldPathArrayOfValues {
	fpaov, err := ParseTagState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type TagState_FieldTerminalPathArrayOfValues struct {
	TagState_FieldTerminalPath
	values interface{}
}

var _ TagState_FieldPathArrayOfValues = (*TagState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *TagState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		for _, v := range fpaov.values.([]map[string]int64) {
			values = append(values, v)
		}
	case TagState_FieldPathSelectorDistributionsViaTargetSelector:
		for _, v := range fpaov.values.([][]*probing_distribution.Reference) {
			values = append(values, v)
		}
	case TagState_FieldPathSelectorDistributionsViaProbeSelector:
		for _, v := range fpaov.values.([][]*probing_distribution.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *TagState_FieldTerminalPathArrayOfValues) AsResourceTypeCountersArrayOfValues() ([]map[string]int64, bool) {
	res, ok := fpaov.values.([]map[string]int64)
	return res, ok
}
func (fpaov *TagState_FieldTerminalPathArrayOfValues) AsDistributionsViaTargetSelectorArrayOfValues() ([][]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_distribution.Reference)
	return res, ok
}
func (fpaov *TagState_FieldTerminalPathArrayOfValues) AsDistributionsViaProbeSelectorArrayOfValues() ([][]*probing_distribution.Reference, bool) {
	res, ok := fpaov.values.([][]*probing_distribution.Reference)
	return res, ok
}

type TagState_FieldPathMapArrayOfValues struct {
	TagState_FieldPathMap
	values interface{}
}

var _ TagState_FieldPathArrayOfValues = (*TagState_FieldPathMapArrayOfValues)(nil)

func (fpmaov *TagState_FieldPathMapArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpmaov.selector {
	case TagState_FieldPathSelectorResourceTypeCounters:
		for _, v := range fpmaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpmaov *TagState_FieldPathMapArrayOfValues) AsResourceTypeCountersArrayOfElementValues() ([]int64, bool) {
	res, ok := fpmaov.values.([]int64)
	return res, ok
}
