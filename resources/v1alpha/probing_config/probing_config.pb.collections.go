// Code generated by protoc-gen-goten-resource
// Resource: ProbingConfig
// DO NOT EDIT!!!

package probing_config

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	common "github.com/cloudwan/watchdog-sdk/resources/v1alpha/common"
	probe "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probe"
	probing_target "github.com/cloudwan/watchdog-sdk/resources/v1alpha/probing_target"
	project "github.com/cloudwan/watchdog-sdk/resources/v1alpha/project"
	duration "github.com/golang/protobuf/ptypes/duration"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &duration.Duration{}
	_ = &common.SoftwareVersion{}
	_ = &probe.Probe{}
	_ = &probing_target.ProbingTarget{}
	_ = &project.Project{}
)

type ProbingConfigList []*ProbingConfig

func (l ProbingConfigList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*ProbingConfig))
}

func (l ProbingConfigList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(ProbingConfigList)...)
}

func (l ProbingConfigList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingConfigList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l ProbingConfigList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*ProbingConfig)
}

func (l ProbingConfigList) Length() int {
	return len(l)
}

type ProbingConfigChangeList []*ProbingConfigChange

func (l ProbingConfigChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*ProbingConfigChange))
}

func (l ProbingConfigChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(ProbingConfigChangeList)...)
}

func (l ProbingConfigChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingConfigChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l ProbingConfigChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*ProbingConfigChange)
}

func (l ProbingConfigChangeList) Length() int {
	return len(l)
}

type ProbingConfigNameList []*Name

func (l ProbingConfigNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l ProbingConfigNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(ProbingConfigNameList)...)
}

func (l ProbingConfigNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingConfigNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingConfigNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l ProbingConfigNameList) Length() int {
	return len(l)
}

type ProbingConfigReferenceList []*Reference

func (l ProbingConfigReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l ProbingConfigReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(ProbingConfigReferenceList)...)
}

func (l ProbingConfigReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingConfigReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingConfigReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l ProbingConfigReferenceList) Length() int {
	return len(l)
}

type ProbingConfigParentNameList []*ParentName

func (l ProbingConfigParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l ProbingConfigParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(ProbingConfigParentNameList)...)
}

func (l ProbingConfigParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingConfigParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l ProbingConfigParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l ProbingConfigParentNameList) Length() int {
	return len(l)
}

type ProbingConfigParentReferenceList []*ParentReference

func (l ProbingConfigParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l ProbingConfigParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(ProbingConfigParentReferenceList)...)
}

func (l ProbingConfigParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l ProbingConfigParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l ProbingConfigParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l ProbingConfigParentReferenceList) Length() int {
	return len(l)
}

type ProbingConfigMap map[Name]*ProbingConfig

func (m ProbingConfigMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m ProbingConfigMap) Set(res gotenresource.Resource) {
	tRes := res.(*ProbingConfig)
	m[*tRes.Name] = tRes
}

func (m ProbingConfigMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingConfigMap) Length() int {
	return len(m)
}

func (m ProbingConfigMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type ProbingConfigChangeMap map[Name]*ProbingConfigChange

func (m ProbingConfigChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m ProbingConfigChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*ProbingConfigChange)
	m[*tChange.GetProbingConfigName()] = tChange
}

func (m ProbingConfigChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m ProbingConfigChangeMap) Length() int {
	return len(m)
}

func (m ProbingConfigChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
