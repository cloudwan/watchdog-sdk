// Code generated by protoc-gen-goten-access
// Resource: QualityProfile
// DO NOT EDIT!!!

package quality_profile_access

import (
	"context"
	"fmt"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenaccess "github.com/cloudwan/goten-sdk/runtime/access"
	"github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"

	quality_profile_client "github.com/cloudwan/watchdog-sdk/client/v1alpha2/quality_profile"
	quality_profile "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/quality_profile"
)

var (
	_ = context.Context(nil)
	_ = fmt.GoStringer(nil)

	_ = grpc.ClientConnInterface(nil)
	_ = codes.NotFound
	_ = status.Status{}

	_ = gotenaccess.Watcher(nil)
	_ = watch_type.WatchType_STATEFUL
	_ = gotenresource.ListQuery(nil)
)

type apiQualityProfileAccess struct {
	client quality_profile_client.QualityProfileServiceClient
}

func NewApiQualityProfileAccess(client quality_profile_client.QualityProfileServiceClient) quality_profile.QualityProfileAccess {
	return &apiQualityProfileAccess{client: client}
}

func (a *apiQualityProfileAccess) GetQualityProfile(ctx context.Context, query *quality_profile.GetQuery) (*quality_profile.QualityProfile, error) {
	request := &quality_profile_client.GetQualityProfileRequest{
		Name:      query.Reference,
		FieldMask: query.Mask,
	}
	return a.client.GetQualityProfile(ctx, request)
}

func (a *apiQualityProfileAccess) BatchGetQualityProfiles(ctx context.Context, refs []*quality_profile.Reference, opts ...gotenresource.BatchGetOption) error {
	batchGetOpts := gotenresource.MakeBatchGetOptions(opts)
	request := &quality_profile_client.BatchGetQualityProfilesRequest{
		Names: refs,
	}
	resp, err := a.client.BatchGetQualityProfiles(ctx, request)
	if err != nil {
		return err
	}
	resultMap := make(map[quality_profile.Name]*quality_profile.QualityProfile, len(refs))
	for _, resolvedRes := range resp.GetQualityProfiles() {
		resultMap[*resolvedRes.GetName()] = resolvedRes
	}
	for _, ref := range refs {
		resolvedRes := resultMap[ref.Name]
		if resolvedRes != nil {
			ref.Resolve(resolvedRes)
		}
	}
	if batchGetOpts.MustResolveAll() && len(resp.GetMissing()) > 0 {
		return status.Errorf(codes.NotFound, "Number of references not found: %d", len(resp.GetMissing()))
	}
	return nil
}

func (a *apiQualityProfileAccess) QueryQualityProfiles(ctx context.Context, query *quality_profile.ListQuery) (*quality_profile.QueryResultSnapshot, error) {
	request := &quality_profile_client.ListQualityProfilesRequest{
		Filter:    query.Filter,
		FieldMask: query.Mask,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	resp, err := a.client.ListQualityProfiles(ctx, request)
	if err != nil {
		return nil, err
	}
	return &quality_profile.QueryResultSnapshot{
		QualityProfiles: resp.QualityProfiles,
		NextPageCursor:  resp.NextPageToken,
		PrevPageCursor:  resp.PrevPageToken,
	}, nil
}

func (a *apiQualityProfileAccess) WatchQualityProfile(ctx context.Context, query *quality_profile.GetQuery, observerCb func(*quality_profile.QualityProfileChange) error) error {
	request := &quality_profile_client.WatchQualityProfileRequest{
		Name:      query.Reference,
		FieldMask: query.Mask,
	}
	changesStream, initErr := a.client.WatchQualityProfile(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		resp, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		change := resp.GetChange()
		if err := observerCb(change); err != nil {
			return err
		}
	}
}

func (a *apiQualityProfileAccess) WatchQualityProfiles(ctx context.Context, query *quality_profile.WatchQuery, observerCb func(*quality_profile.QueryResultChange) error) error {
	request := &quality_profile_client.WatchQualityProfilesRequest{
		Filter:       query.Filter,
		FieldMask:    query.Mask,
		MaxChunkSize: int32(query.ChunkSize),
		Type:         query.WatchType,
		ResumeToken:  query.ResumeToken,
	}
	if query.Pager != nil {
		request.OrderBy = query.Pager.OrderBy
		request.PageSize = int32(query.Pager.Limit)
		request.PageToken = query.Pager.Cursor
	}
	changesStream, initErr := a.client.WatchQualityProfiles(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		respChange, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		changesWithPaging := &quality_profile.QueryResultChange{
			Changes:      respChange.QualityProfileChanges,
			IsCurrent:    respChange.IsCurrent,
			IsHardReset:  respChange.IsHardReset,
			IsSoftReset:  respChange.IsSoftReset,
			ResumeToken:  respChange.ResumeToken,
			SnapshotSize: respChange.SnapshotSize,
		}
		if respChange.PageTokenChange != nil {
			changesWithPaging.PrevPageCursor = respChange.PageTokenChange.PrevPageToken
			changesWithPaging.NextPageCursor = respChange.PageTokenChange.NextPageToken
		}
		if err := observerCb(changesWithPaging); err != nil {
			return err
		}
	}
}

func (a *apiQualityProfileAccess) SaveQualityProfile(ctx context.Context, res *quality_profile.QualityProfile, opts ...gotenresource.SaveOption) error {
	saveOpts := gotenresource.MakeSaveOptions(opts)
	previousRes := saveOpts.GetPreviousResource()

	if previousRes == nil && !saveOpts.OnlyUpdate() && !saveOpts.OnlyCreate() {
		var err error
		previousRes, err = a.GetQualityProfile(ctx, &quality_profile.GetQuery{Reference: res.Name.AsReference()})
		if err != nil {
			if statusErr, ok := status.FromError(err); !ok || statusErr.Code() != codes.NotFound {
				return err
			}
		}
	}

	if saveOpts.OnlyUpdate() || previousRes != nil {
		updateRequest := &quality_profile_client.UpdateQualityProfileRequest{
			QualityProfile: res,
		}
		if updateMask := saveOpts.GetUpdateMask(); updateMask != nil {
			updateRequest.UpdateMask = updateMask.(*quality_profile.QualityProfile_FieldMask)
		}
		if mask, conditionalState := saveOpts.GetCAS(); mask != nil && conditionalState != nil {
			updateRequest.Cas = &quality_profile_client.UpdateQualityProfileRequest_CAS{
				ConditionalState: conditionalState.(*quality_profile.QualityProfile),
				FieldMask:        mask.(*quality_profile.QualityProfile_FieldMask),
			}
		}
		_, err := a.client.UpdateQualityProfile(ctx, updateRequest)
		if err != nil {
			return err
		}
		return nil
	} else {
		createRequest := &quality_profile_client.CreateQualityProfileRequest{
			QualityProfile: res,
		}
		_, err := a.client.CreateQualityProfile(ctx, createRequest)
		if err != nil {
			return err
		}
		return nil
	}
}

func (a *apiQualityProfileAccess) DeleteQualityProfile(ctx context.Context, ref *quality_profile.Reference, opts ...gotenresource.DeleteOption) error {
	request := &quality_profile_client.DeleteQualityProfileRequest{
		Name: ref,
	}
	_, err := a.client.DeleteQualityProfile(ctx, request)
	return err
}

func init() {
	gotenaccess.GetRegistry().RegisterApiAccessConstructor(quality_profile.GetDescriptor(), func(cc grpc.ClientConnInterface) gotenresource.Access {
		return quality_profile.AsAnyCastAccess(NewApiQualityProfileAccess(quality_profile_client.NewQualityProfileServiceClient(cc)))
	})
}
