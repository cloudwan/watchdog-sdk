// Code generated by protoc-gen-goten-access
// Resource: ProbingDistribution
// DO NOT EDIT!!!

package probing_distribution_access

import (
	"context"
	"fmt"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	gotenaccess "github.com/cloudwan/goten-sdk/runtime/access"
	"github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"

	probing_distribution_client "github.com/cloudwan/watchdog-sdk/client/v1alpha2/probing_distribution"
	probing_distribution "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/probing_distribution"
)

var (
	_ = context.Context(nil)
	_ = fmt.GoStringer(nil)

	_ = grpc.ClientConnInterface(nil)
	_ = codes.NotFound
	_ = status.Status{}

	_ = gotenaccess.Watcher(nil)
	_ = watch_type.WatchType_STATEFUL
	_ = gotenresource.ListQuery(nil)
)

type apiProbingDistributionAccess struct {
	client probing_distribution_client.ProbingDistributionServiceClient
}

func NewApiProbingDistributionAccess(client probing_distribution_client.ProbingDistributionServiceClient) probing_distribution.ProbingDistributionAccess {
	return &apiProbingDistributionAccess{client: client}
}

func (a *apiProbingDistributionAccess) GetProbingDistribution(ctx context.Context, query *probing_distribution.GetQuery) (*probing_distribution.ProbingDistribution, error) {
	request := &probing_distribution_client.GetProbingDistributionRequest{
		Name:      query.Reference,
		FieldMask: query.Mask,
	}
	return a.client.GetProbingDistribution(ctx, request)
}

func (a *apiProbingDistributionAccess) BatchGetProbingDistributions(ctx context.Context, refs []*probing_distribution.Reference, opts ...gotenresource.BatchGetOption) error {
	batchGetOpts := gotenresource.MakeBatchGetOptions(opts)
	request := &probing_distribution_client.BatchGetProbingDistributionsRequest{
		Names: refs,
	}
	resp, err := a.client.BatchGetProbingDistributions(ctx, request)
	if err != nil {
		return err
	}
	resultMap := make(map[probing_distribution.Name]*probing_distribution.ProbingDistribution, len(refs))
	for _, resolvedRes := range resp.GetProbingDistributions() {
		resultMap[*resolvedRes.GetName()] = resolvedRes
	}
	for _, ref := range refs {
		resolvedRes := resultMap[ref.Name]
		if resolvedRes != nil {
			ref.Resolve(resolvedRes)
		}
	}
	if batchGetOpts.MustResolveAll() && len(resp.GetMissing()) > 0 {
		return status.Errorf(codes.NotFound, "Number of references not found: %d", len(resp.GetMissing()))
	}
	return nil
}

func (a *apiProbingDistributionAccess) QueryProbingDistributions(ctx context.Context, query *probing_distribution.ListQuery) (*probing_distribution.QueryResultSnapshot, error) {
	request := &probing_distribution_client.ListProbingDistributionsRequest{
		Filter:    query.Filter,
		FieldMask: query.Mask,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	resp, err := a.client.ListProbingDistributions(ctx, request)
	if err != nil {
		return nil, err
	}
	return &probing_distribution.QueryResultSnapshot{
		ProbingDistributions: resp.ProbingDistributions,
		NextPageCursor:       resp.NextPageToken,
		PrevPageCursor:       resp.PrevPageToken,
	}, nil
}

func (a *apiProbingDistributionAccess) SearchProbingDistributions(ctx context.Context, query *probing_distribution.SearchQuery) (*probing_distribution.SearchQueryResultSnapshot, error) {
	request := &probing_distribution_client.SearchProbingDistributionsRequest{
		Phrase:    query.Phrase,
		Filter:    query.Filter,
		FieldMask: query.Mask,
	}
	if query.Pager != nil {
		request.PageSize = int32(query.Pager.Limit)
		request.OrderBy = query.Pager.OrderBy
		request.PageToken = query.Pager.Cursor
	}
	resp, err := a.client.SearchProbingDistributions(ctx, request)
	if err != nil {
		return nil, err
	}
	return &probing_distribution.SearchQueryResultSnapshot{
		QueryResultSnapshot: probing_distribution.QueryResultSnapshot{
			ProbingDistributions: resp.ProbingDistributions,
			NextPageCursor:       resp.NextPageToken,
			PrevPageCursor:       resp.PrevPageToken,
		},
		CurrentOffset:     resp.CurrentOffset,
		TotalResultsCount: resp.TotalResultsCount,
	}, nil
}

func (a *apiProbingDistributionAccess) WatchProbingDistribution(ctx context.Context, query *probing_distribution.GetQuery, observerCb func(*probing_distribution.ProbingDistributionChange) error) error {
	request := &probing_distribution_client.WatchProbingDistributionRequest{
		Name:      query.Reference,
		FieldMask: query.Mask,
	}
	changesStream, initErr := a.client.WatchProbingDistribution(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		resp, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		change := resp.GetChange()
		if err := observerCb(change); err != nil {
			return err
		}
	}
}

func (a *apiProbingDistributionAccess) WatchProbingDistributions(ctx context.Context, query *probing_distribution.WatchQuery, observerCb func(*probing_distribution.QueryResultChange) error) error {
	request := &probing_distribution_client.WatchProbingDistributionsRequest{
		Filter:       query.Filter,
		FieldMask:    query.Mask,
		MaxChunkSize: int32(query.ChunkSize),
		Type:         query.WatchType,
		ResumeToken:  query.ResumeToken,
	}
	if query.Pager != nil {
		request.OrderBy = query.Pager.OrderBy
		request.PageSize = int32(query.Pager.Limit)
		request.PageToken = query.Pager.Cursor
	}
	changesStream, initErr := a.client.WatchProbingDistributions(ctx, request)
	if initErr != nil {
		return initErr
	}
	for {
		respChange, err := changesStream.Recv()
		if err != nil {
			return fmt.Errorf("watch recv error: %w", err)
		}
		changesWithPaging := &probing_distribution.QueryResultChange{
			Changes:      respChange.ProbingDistributionChanges,
			IsCurrent:    respChange.IsCurrent,
			IsHardReset:  respChange.IsHardReset,
			IsSoftReset:  respChange.IsSoftReset,
			ResumeToken:  respChange.ResumeToken,
			SnapshotSize: respChange.SnapshotSize,
		}
		if respChange.PageTokenChange != nil {
			changesWithPaging.PrevPageCursor = respChange.PageTokenChange.PrevPageToken
			changesWithPaging.NextPageCursor = respChange.PageTokenChange.NextPageToken
		}
		if err := observerCb(changesWithPaging); err != nil {
			return err
		}
	}
}

func (a *apiProbingDistributionAccess) SaveProbingDistribution(ctx context.Context, res *probing_distribution.ProbingDistribution, opts ...gotenresource.SaveOption) error {
	saveOpts := gotenresource.MakeSaveOptions(opts)
	previousRes := saveOpts.GetPreviousResource()

	if previousRes == nil && !saveOpts.OnlyUpdate() && !saveOpts.OnlyCreate() {
		var err error
		previousRes, err = a.GetProbingDistribution(ctx, &probing_distribution.GetQuery{Reference: res.Name.AsReference()})
		if err != nil {
			if statusErr, ok := status.FromError(err); !ok || statusErr.Code() != codes.NotFound {
				return err
			}
		}
	}

	if saveOpts.OnlyUpdate() || previousRes != nil {
		updateRequest := &probing_distribution_client.UpdateProbingDistributionRequest{
			ProbingDistribution: res,
		}
		if updateMask := saveOpts.GetUpdateMask(); updateMask != nil {
			updateRequest.UpdateMask = updateMask.(*probing_distribution.ProbingDistribution_FieldMask)
		}
		if mask, conditionalState := saveOpts.GetCAS(); mask != nil && conditionalState != nil {
			updateRequest.Cas = &probing_distribution_client.UpdateProbingDistributionRequest_CAS{
				ConditionalState: conditionalState.(*probing_distribution.ProbingDistribution),
				FieldMask:        mask.(*probing_distribution.ProbingDistribution_FieldMask),
			}
		}
		_, err := a.client.UpdateProbingDistribution(ctx, updateRequest)
		if err != nil {
			return err
		}
		return nil
	} else {
		createRequest := &probing_distribution_client.CreateProbingDistributionRequest{
			ProbingDistribution: res,
		}
		_, err := a.client.CreateProbingDistribution(ctx, createRequest)
		if err != nil {
			return err
		}
		return nil
	}
}

func (a *apiProbingDistributionAccess) DeleteProbingDistribution(ctx context.Context, ref *probing_distribution.Reference, opts ...gotenresource.DeleteOption) error {
	request := &probing_distribution_client.DeleteProbingDistributionRequest{
		Name: ref,
	}
	_, err := a.client.DeleteProbingDistribution(ctx, request)
	return err
}

func init() {
	gotenaccess.GetRegistry().RegisterApiAccessConstructor(probing_distribution.GetDescriptor(), func(cc grpc.ClientConnInterface) gotenresource.Access {
		return probing_distribution.AsAnyCastAccess(NewApiProbingDistributionAccess(probing_distribution_client.NewProbingDistributionServiceClient(cc)))
	})
}
