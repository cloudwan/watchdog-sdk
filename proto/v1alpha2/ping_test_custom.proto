syntax = "proto3";

package ntt.watchdog.v1alpha2;

import "google/protobuf/duration.proto";
import "watchdog-sdk/proto/v1alpha2/common.proto";
import "watchdog-sdk/proto/v1alpha2/probe.proto";
import "watchdog-sdk/proto/v1alpha2/probe_change.proto";

option go_package = "github.com/cloudwan/watchdog-sdk/client/v1alpha2/ping_test;ping_test_client";
option java_multiple_files = false;
option java_outer_classname = "PingTestCustomProto";
option java_package = "com.ntt.watchdog.pb.v1alpha2";

// Request message for method [RunPingTest][ntt.watchdog.v1alpha2.RunPingTest]
// NOTE: copy watchdogagent/api/proto/v1alpha/ping_test_custom.proto and
// increment field numbers Source address to listen packet Skip validating
message RunPingTestRequest {
  //  reference of ntt.watchdog.v1alpha2.Probe
  string name = 1;

  // Source address used to send the outbound icmp ping
  // If unspecified, agent will bind to :: or 0.0.0.0 by default
  // and the operating system will choose the appropriate local address.
  // The IP version is chosen according to the version of the destination
  // address. It is recommended to leave this empty.
  string source = 2;

  // Destination address or domain name for the icmp ping.
  // IP address and domain name are acceptable.
  // One of Destination or Target is required as input.
  string destination = 3;

  // Run ping test to the specified probing target.
  // One of Destination or Target is required as input.
  string target = 13;

  // ICMP payload size. If unspecified, 48 byte payload is used
  // The agent uses a minimum length of 8 bytes.
  // It is important to note that this is just the L4 payload length.
  // Actual packet length would be ethernet header length + IP Header length +
  // ICMP Header Length + specified payload size
  int32 size_bytes = 4;

  // Number of ICMP Echo requests to send for this test.
  // Allowed values are from 1 to 1000 and the default value is 3.
  int32 count = 5;

  // Interval between each packet sent.
  // Minimum value allowed is 1 second and the default value  is 1 second.
  google.protobuf.Duration interval = 6;

  // Timeout for receiving each packet's reply.
  // Minimum value allowed is 1 second and the default value  is 1 second.
  google.protobuf.Duration echo_timeout = 7;

  // Don't Fragment flag in IP header.
  // If unspecified or set to false, the DF bit is not set in the IP header.
  bool dont_fragment = 8;

  // TTL in IPv4 or hop limit in IPv6
  // If unspecified, a default value is set by the Operating system networking
  // stack.
  int32 ttl = 9;

  // TOS in IPv4 or traffic class in IPv6 in decimal format
  // https://linuxreviews.org/Type_of_Service_(ToS)_and_DSCP_Values
  int32 tos = 10;

  // Default is Text format similar to cli ping command. Json is for internal
  // use only
  OnDemandTestResponseFormat output_format = 11;

  // Flag to force IPv4/IPv6. Default is IPVERSION_ANY.
  // Helpful when using domain name for tests.
  IpVersion ip_version = 12;
}

// Response message for method [RunPingTest][ntt.watchdog.v1alpha2.RunPingTest]
message RunPingTestResponse {
  // Json format is not preferred for the ondemand tests
  JsonResponse json_response = 1;

  // Console type text response
  string text_response = 2;

  message JsonResponse {
    // IP address of the ping target
    string from = 1;

    // ICMP payload size received in response
    int32 size_bytes = 2;

    // Sequence number received in response
    int32 sequence_number = 3;

    // TTL received in response
    int32 ttl = 4;

    // Round trip time calculated
    google.protobuf.Duration rtt = 5;

    // Error message
    string error = 6;

    SummaryStats summary = 7;

    // Summary statistics accompanies each response
    // It summarizes the results at that time
    message SummaryStats {
      google.protobuf.Duration min_rtt = 1;

      google.protobuf.Duration avg_rtt = 2;

      google.protobuf.Duration max_rtt = 3;

      google.protobuf.Duration stddev_rtt = 4;

      int32 transmitted_counter = 5;

      int32 received_counter = 6;

      // Percent
      double loss_ratio = 7;
    }
  }
}
