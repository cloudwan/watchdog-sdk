syntax = "proto3";

package ntt.watchdog.v1alpha2;

import "edgelq-sdk/common/types/meta.proto";
import "edgelq-sdk/monitoring/proto/v3/common.proto";
import "google/api/resource.proto";

option go_package = "github.com/cloudwan/watchdog-sdk/resources/v1alpha2/quality_profile;quality_profile";
option java_multiple_files = true;
option java_outer_classname = "QualityProfileProto";
option java_package = "com.ntt.watchdog.pb.v1alpha2";

message Profile {
  // Display Name
  string display_name = 1;

  // Optional explanation for this Profile
  string description = 2;

  Filter filter = 3;

  // Collection of metric thresholds to describe state of network for this
  // Profile, example:
  repeated MetricThreshold metric_thresholds = 4;

  // Overrides defines sub-profiles with more specific filters
  // Note: each level filters must be guaranteed to non-overlapping and use more
  // specific filter than its parent Example: Given parent with filter
  // <<locations: <Japan>, targets: <google.com,amazon.com,ntt.com>>, it's ok to
  // specify overrides that slice by Prefecture, Source ISP, like
  // <<locations: <Japan/Tokyo, Japan/Kyoto>, asns: <OCN, Docomo>, targets:
  // <google.com,amazon.com,ntt.com>>; and
  // <<locations: <Japan/Chiba>, asns: <OCN, Softbank>, targets:
  // <google.com,amazon.com,ntt.com>> but not:
  // <<locations: <Japan>, asns: <OCN>, targets:
  // <google.com,amazon.com,ntt.com>>, since it *might* be overlapping OCN
  // filter in Tokyo defined above
  repeated Profile overrides = 8;

  message Location {
    // Country name according to ISO 3166, e.g. "Japan", "United States"
    string country_name = 1;

    // Administrative name level 1, e.g. "Chiba" (prefecture), "California"
    // (state)
    string administrative_area_level1_name = 2;

    // Administrative name level 2, e.g. "San Mateo" (county) or "Tateyama"
    // (town)
    string administrative_area_level2_name = 3;

    // Administrative name level 3, e.g. "Sunnyvale" (city)
    string administrative_area_level3_name = 4;
  }

  message Filter {
    repeated Location source_locations = 1;

    repeated string source_asn_names = 2;

    repeated string targets = 3;
  }

  message MetricThreshold {
    // aggregation reducer for selected viewport and filter criteria.
    // common reducers: REDUCE_MEAN, REDUCE_PERCENTILE_95, REDUCE_PERCENTILE_99
    ntt.monitoring.v3.Aggregation.Reducer aggregation_reducer = 1;

    // Selected metric type. One of:
    // - watchdog.ntt.com/probe/target/active
    // - watchdog.ntt.com/probe/target/loss
    // - watchdog.ntt.com/probe/target/latency
    // - watchdog.ntt.com/probe/target/jitter
    string metric_type = 2;

    // Threshold value of reduced metric
    double value = 3;
  }
}

// QualityProfile Resource
message QualityProfile {
  option (google.api.resource) = {
    type : "watchdog.edgelq.com/QualityProfile"
    pattern : "projects/{project}/qualityProfiles/{quality_profile}"
  };

  // Name of QualityProfile
  string name = 1;

  string display_name = 2;

  string description = 3;

  string source_project = 4;

  // list of root-level profiles.
  repeated Profile profiles = 5;

  // Metadata
  ntt.types.Meta metadata = 6;
}
