syntax = "proto3";

package ntt.watchdog.v1alpha2;

import "edgelq-sdk/meta/compilers/annotations/multi_region.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "goten-sdk/runtime/api/view.proto";
import "goten-sdk/runtime/api/watch_type.proto";
import "watchdog-sdk/proto/v1alpha2/probing_target.proto";
import "watchdog-sdk/proto/v1alpha2/probing_target_change.proto";

option go_package = "github.com/cloudwan/watchdog-sdk/client/v1alpha2/probing_target;probing_target_client";
option java_multiple_files = false;
option java_outer_classname = "ProbingTargetServiceProto";
option java_package = "com.ntt.watchdog.pb.v1alpha2";

// Request message for method
// [GetProbingTarget][ntt.watchdog.v1alpha2.GetProbingTarget]
message GetProbingTargetRequest {
  // Reference of ntt.watchdog.v1alpha2.ProbingTarget
  string name = 1;

  // A list of extra fields to be obtained for each response item on top of
  // fields defined by request field view
  google.protobuf.FieldMask field_mask = 3;

  // View defines list of standard response fields present in response items.
  // Additional fields can be amended by request field field_mask
  goten.view.View view = 4;
}

// Request message for method
// [BatchGetProbingTargets][ntt.watchdog.v1alpha2.BatchGetProbingTargets]
message BatchGetProbingTargetsRequest {
  // Names of ProbingTargets
  repeated string names = 2;

  // A list of extra fields to be obtained for each response item on top of
  // fields defined by request field view
  google.protobuf.FieldMask field_mask = 3;

  // View defines list of standard response fields present in response items.
  // Additional fields can be amended by request field field_mask
  goten.view.View view = 4;

  reserved 1;
}

// BatchGetProbingTargetsResponse
message BatchGetProbingTargetsResponse {
  // found ProbingTargets
  repeated ProbingTarget probing_targets = 1;

  // list of not found ProbingTargets
  repeated string missing = 2;
}

// Request message for method
// [ListProbingTargets][ntt.watchdog.v1alpha2.ListProbingTargets]
message ListProbingTargetsRequest {
  // Parent name of ntt.watchdog.v1alpha2.ProbingTarget
  string parent = 1;

  // Requested page size. Server may return fewer ProbingTargets than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListProbingTargetsResponse.next_page_token][ntt.watchdog.v1alpha2.ListProbingTargetsResponse.next_page_token]
  string page_token = 3;

  // Order By -
  // https://cloud.google.com/apis/design/design_patterns#list_pagination list
  // of field path with order directive, either 'asc' or 'desc'. If direction is
  // not provided, 'asc' is assumed. e.g. "state.nested_field asc,
  // state.something.else desc, theme"
  string order_by = 4;

  // Filter - filter results by field criteria. Simplified SQL-like syntax with
  // following operators:
  // <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
  // [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
  // CONTAINS "severity:important" OR (state.last_error_time >
  // "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
  string filter = 5;

  // A list of extra fields to be obtained for each response item on top of
  // fields defined by request field view
  google.protobuf.FieldMask field_mask = 6;

  // View defines list of standard response fields present in response items.
  // Additional fields can be amended by request field field_mask
  goten.view.View view = 7;
}

// Request message for method
// [ListProbingTargets][ntt.watchdog.v1alpha2.ListProbingTargets]
message ListProbingTargetsResponse {
  // The list of ProbingTargets
  repeated ProbingTarget probing_targets = 1;

  // A token to retrieve previous page of results. Pass this value in the
  // [ListProbingTargetsRequest.page_token][ntt.watchdog.v1alpha2.ListProbingTargetsRequest.page_token]
  string prev_page_token = 3;

  // A token to retrieve next page of results. Pass this value in the
  // [ListProbingTargetsRequest.page_token][ntt.watchdog.v1alpha2.ListProbingTargetsRequest.page_token]
  string next_page_token = 4;
}

// Request message for method
// [WatchProbingTarget][ntt.watchdog.v1alpha2.WatchProbingTarget]
message WatchProbingTargetRequest {
  // Reference to ntt.watchdog.v1alpha2.ProbingTarget
  string name = 1;

  // A list of extra fields to be obtained for each response item on top of
  // fields defined by request field view
  google.protobuf.FieldMask field_mask = 2;

  // View defines list of standard response fields present in response items.
  // Additional fields can be amended by request field field_mask
  goten.view.View view = 4;
}

// WatchProbingTargetResponse
message WatchProbingTargetResponse { ProbingTargetChange change = 1; }

// Request message for method
// [WatchProbingTargets][ntt.watchdog.v1alpha2.WatchProbingTargets]
message WatchProbingTargetsRequest {
  // Type of a watch. Identifies how server stream data to a client, which
  // fields in a request are allowed and which fields in response are relevant.
  goten.watch_type.WatchType type = 9;

  // Parent reference of ntt.watchdog.v1alpha2.ProbingTarget
  string parent = 1;

  // Requested page size. Server may return fewer ProbingTargets than requested.
  // If unspecified, server will pick an appropriate default.
  // Can be populated only for stateful watch type.
  int32 page_size = 2;

  // A token identifying a page of results the server should return.
  // Can be populated only for stateful watch type.
  string page_token = 3;

  // Order By -
  // https://cloud.google.com/apis/design/design_patterns#list_pagination Can be
  // populated only for stateful watch type.
  string order_by = 4;

  // A token identifying watch resume point from previous session.
  // Can be populated only for stateless watch type.
  string resume_token = 10;

  // Filter - filter results by field criteria. Simplified SQL-like syntax with
  // following operators:
  // <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
  // [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
  // CONTAINS "severity:important" OR (state.last_error_time >
  // "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
  string filter = 5;

  // A list of extra fields to be obtained for each response item on top of
  // fields defined by request field view Changes to ProbingTarget that don't
  // affect any of masked fields won't be sent back.
  google.protobuf.FieldMask field_mask = 6;

  // View defines list of standard response fields present in response items.
  // Additional fields can be amended by request field field_mask Changes to
  // ProbingTarget that don't affect any of masked fields won't be sent back.
  goten.view.View view = 8;

  // Maximum amount of changes in each response message. Query result response
  // is divided on the server side into chunks with size of a specified amount
  // to limit memory footprint of each message. Responses will hold information
  // whether more elements will continue for the actual change. If unspecified,
  // server will pick an appropriate default.
  int32 max_chunk_size = 11;
}

// WatchProbingTargetsResponse
message WatchProbingTargetsResponse {
  // Changes of ProbingTargets
  repeated ProbingTargetChange probing_target_changes = 2;

  // If request specified max_chunk_size (or this limit was enforced if
  // stateless watch has been chosen), then responses with "full changeset" will
  // be divided into chunks. Client should keep receiving messages and, once
  // is_current has value true, combine this recent message with all previous
  // ones where is_current is false. If this is the first is_current in a whole
  // watch stream, then it means that client should have, at this moment,
  // contain snapshot of the current situation (or more accurately, snapshot of
  // situation at the moment of request). All ProbingTargets will be of type
  // Added/Current (depending on watch_type specified in the request). Further
  // responses will be incremental - however messages may still be chunked and
  // is_current logic still applies. is_current is always true for stateful
  // watch if max_chunk_size was left to 0.
  bool is_current = 4;

  // When present, PageTokens used for page navigation should be updated.
  // Present only if is_current is true (last chunk).
  PageTokenChange page_token_change = 3;

  // Token that can be used if current connection drops and client needs to
  // reconnect. Populated only for stateless watch type. Present only if
  // is_current is true (last chunk).
  string resume_token = 5;

  // Server may occasionally send information how many resources should client
  // have in its state so far (response message without any changes, but with
  // snapshot_size field specified). If client has different value than the one
  // sent by the server, then it should be treated by a client as an error and
  // should reconnect. If value is smaller then 0, then client should ignore
  // this field as unpopulated. This field should be checked only for stateless
  // watch. In stateful those kind of errors are handled by the server side.
  // Will be never sent together with is_current, is_soft_reset and
  // is_hard_reset flags.
  int64 snapshot_size = 6;

  // In case of internal issue server may send response message with this flag.
  // It indicates that client should drop all changes from recent responses
  // where is_current is false only! If last message had is_current set to true,
  // client should do nothing and process normally. Resume token received before
  // is still valid. This field should be checked only for stateless watch. In
  // stateful those kind of errors are handled by the server side. Will never be
  // sent along with is_current, is_hard_reset or snapshot_size.
  bool is_soft_reset = 7;

  // In case of internal issue server may send response message with this flag.
  // After receiving, client should clear whole state (drop all changes received
  // so far) as server will send new snapshot (ProbingTargets will contains
  // changes of type Current only). Any resume tokens should be discarded as
  // well. This field should be checked only for stateless watch. In stateful
  // those kind of errors are handled by the server side. Will never be sent
  // along with is_current, is_soft_reset or snapshot_size.
  bool is_hard_reset = 8;

  message PageTokenChange {
    // New token to retrieve previous page of results.
    string prev_page_token = 1;

    // New token to retrieve next page of results.
    string next_page_token = 2;
  }
}

// Request message for method
// [CreateProbingTarget][ntt.watchdog.v1alpha2.CreateProbingTarget]
message CreateProbingTargetRequest {
  // Parent reference of ntt.watchdog.v1alpha2.ProbingTarget
  string parent = 1;

  // ProbingTarget resource body
  ProbingTarget probing_target = 2;
}

// Request message for method
// [UpdateProbingTarget][ntt.watchdog.v1alpha2.UpdateProbingTarget]
message UpdateProbingTargetRequest {
  // ProbingTarget resource body
  ProbingTarget probing_target = 2;

  // FieldMask applied to request - change will be applied only for fields in
  // the mask
  google.protobuf.FieldMask update_mask = 3;

  // Conditional update applied to request if update should be executed only for
  // specific resource state. If this field is populated, then server will fetch
  // existing resource, compare with the one stored in the cas field (after
  // applying field mask) and proceed with update only and only if they match.
  // Otherwise RPC error Aborted will be returned.
  CAS cas = 4;

  // CAS - Compare and Swap. This object is used if user wants to make update
  // conditional based upon previous resource version.
  message CAS {
    // Conditional desired state of a resource before update.
    ProbingTarget conditional_state = 1;

    // Field paths from conditional state of resource server should check and
    // compare.
    google.protobuf.FieldMask field_mask = 2;
  }
}

// Request message for method
// [DeleteProbingTarget][ntt.watchdog.v1alpha2.DeleteProbingTarget]
message DeleteProbingTargetRequest {
  // Reference of ntt.watchdog.v1alpha2.ProbingTarget
  string name = 1;
}

// Request message for method
// [SearchProbingTargets][ntt.watchdog.v1alpha2.SearchProbingTargets]
message SearchProbingTargetsRequest {
  // Parent name of ntt.watchdog.v1alpha2.ProbingTarget
  string parent = 1;

  // Requested page size. Server may return fewer ProbingTargets than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [SearchProbingTargetsResponse.next_page_token][ntt.watchdog.v1alpha2.SearchProbingTargetsResponse.next_page_token]
  string page_token = 3;

  // Order By -
  // https://cloud.google.com/apis/design/design_patterns#list_pagination list
  // of field path with order directive, either 'asc' or 'desc'. If direction is
  // not provided, 'asc' is assumed. e.g. "state.nested_field asc,
  // state.something.else desc, theme"
  string order_by = 4;

  // Filter - filter results by field criteria. Simplified SQL-like syntax with
  // following operators:
  // <=, >=, =, !=, <, >, LIKE, CONTAINS (aliases CONTAIN, HAS, HAVE), IN, IS
  // [NOT] NULL | NaN . Combine conditions with OR | AND example: 'meta.labels
  // CONTAINS "severity:important" OR (state.last_error_time >
  // "2018-11-15T10:00:00Z" AND state.status = "ERROR")'
  string filter = 5;

  // A list of extra fields to be obtained for each response item on top of
  // fields defined by request field view
  google.protobuf.FieldMask field_mask = 6;

  // View defines list of standard response fields present in response items.
  // Additional fields can be amended by request field field_mask
  goten.view.View view = 7;

  // Optional search phrase used to further filter results.
  string phrase = 8;
}

// Request message for method
// [SearchProbingTargets][ntt.watchdog.v1alpha2.SearchProbingTargets]
message SearchProbingTargetsResponse {
  // The list of ProbingTargets
  repeated ProbingTarget probing_targets = 1;

  // A token to retrieve previous page of results. Pass this value in the
  // [SearchProbingTargetsRequest.page_token][ntt.watchdog.v1alpha2.SearchProbingTargetsRequest.page_token]
  string prev_page_token = 3;

  // A token to retrieve next page of results. Pass this value in the
  // [SearchProbingTargetsRequest.page_token][ntt.watchdog.v1alpha2.SearchProbingTargetsRequest.page_token]
  string next_page_token = 4;

  // Current offset from the first page (0 if no page tokens were given). Page
  // index can be computed from offset and limit provided in a request
  int32 current_offset = 5;

  // Number of total ProbingTargets across all pages.
  int32 total_results_count = 6;
}

// ProbingTarget service API for Watchdog
service ProbingTargetService {
  option (google.api.default_host) = "watchdog.edgelq.com";
  option (google.api.oauth_scopes) = "https://apis.edgelq.com";

  // GetProbingTarget
  rpc GetProbingTarget(GetProbingTargetRequest) returns (ProbingTarget) {
    option (google.api.http) = {
      get : "/v1alpha2/{name=projects/*/probingTargets/*}"
    };
  }

  // BatchGetProbingTargets
  rpc BatchGetProbingTargets(BatchGetProbingTargetsRequest)
      returns (BatchGetProbingTargetsResponse) {
    option (google.api.http) = {
      get : "/v1alpha2/probingTargets:batchGet"
    };
  }

  // ListProbingTargets
  rpc ListProbingTargets(ListProbingTargetsRequest)
      returns (ListProbingTargetsResponse) {
    option (google.api.http) = {
      get : "/v1alpha2/{parent=projects/*}/probingTargets"
    };
  }

  // WatchProbingTarget
  rpc WatchProbingTarget(WatchProbingTargetRequest)
      returns (stream WatchProbingTargetResponse) {
    option (google.api.http) = {
      post : "/v1alpha2/{name=projects/*/probingTargets/*}:watch"
    };
  }

  // WatchProbingTargets
  rpc WatchProbingTargets(WatchProbingTargetsRequest)
      returns (stream WatchProbingTargetsResponse) {
    option (google.api.http) = {
      post : "/v1alpha2/{parent=projects/*}/probingTargets:watch"
    };
  }

  // CreateProbingTarget
  rpc CreateProbingTarget(CreateProbingTargetRequest) returns (ProbingTarget) {
    option (google.api.http) = {
      post : "/v1alpha2/{parent=projects/*}/probingTargets"
      body : "probing_target"
    };
  }

  // UpdateProbingTarget
  rpc UpdateProbingTarget(UpdateProbingTargetRequest) returns (ProbingTarget) {
    option (google.api.http) = {
      put : "/v1alpha2/{probing_target.name=projects/*/probingTargets/*}"
      body : "probing_target"
    };
  }

  // DeleteProbingTarget
  rpc DeleteProbingTarget(DeleteProbingTargetRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1alpha2/{name=projects/*/probingTargets/*}"
    };
  }

  // SearchProbingTargets
  rpc SearchProbingTargets(SearchProbingTargetsRequest)
      returns (SearchProbingTargetsResponse) {
    option (google.api.http) = {
      get : "/v1alpha2/{parent=projects/*}/probingTargets:search"
    };
  }
}
