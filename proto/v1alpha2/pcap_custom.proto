syntax = "proto3";

package ntt.watchdog.v1alpha2;

import "google/protobuf/timestamp.proto";
import "watchdog-sdk/proto/v1alpha2/common.proto";
import "watchdog-sdk/proto/v1alpha2/probe.proto";
import "watchdog-sdk/proto/v1alpha2/probe_change.proto";

option go_package = "github.com/cloudwan/watchdog-sdk/client/v1alpha2/pcap;pcap_client";
option java_multiple_files = false;
option java_outer_classname = "PcapCustomProto";
option java_package = "com.ntt.watchdog.pb.v1alpha2";

// Request message for method [ReportPcap][ntt.watchdog.v1alpha2.ReportPcap]
message ReportPcapRequest {
  //  reference of ntt.watchdog.v1alpha2.Probe
  string name = 1;

  // The filter that was applied for this capture
  string filter = 2;

  google.protobuf.Timestamp start_time = 3;

  google.protobuf.Timestamp end_time = 4;

  bytes pcap_bytes = 5;
}

// Request message for method [GetPcap][ntt.watchdog.v1alpha2.GetPcap]
message GetPcapRequest {
  //  reference of ntt.watchdog.v1alpha2.Probe
  string probe = 1;

  // Interval for which the pcap is required
  TimeInterval interval = 2;

  // A positive number that is the maximum number of results to return. If
  // `page_size` is empty or more than 100,000 results, the effective
  // `page_size` is 100,000 results.
  int32 page_size = 3;

  // If this field is not empty then it must contain the `nextPageToken` value
  // returned by a previous call to this method.  Using this field causes the
  // method to return additional results from the previous method call.
  string page_token = 4;
}

// Response message for method [GetPcap][ntt.watchdog.v1alpha2.GetPcap]
message GetPcapResponse { bytes pcap_bytes = 1; }

message GetPcapFileFromAgentRequest {
  //  reference of ntt.watchdog.v1alpha2.Probe
  string name = 1;
}

message GetPcapFileInfoFromAgentRequest {
  //  reference of ntt.watchdog.v1alpha2.Probe
  string name = 1;
}

message GetPcapFileInfoFromAgentResponse {
  // Start time for the last packet capture
  google.protobuf.Timestamp start_time = 1;

  // End time for the last packet capture
  google.protobuf.Timestamp end_time = 2;

  // Size of the last packet capture file in bytes
  int64 size_bytes = 3;
}

message CheckPcapIsRunningRequest {
  //  reference of ntt.watchdog.v1alpha2.Probe
  string name = 1;
}

message CheckPcapIsRunningResponse {
  // Flag that indicates if on demand pcap is active on the agent
  bool is_running = 1;
}
